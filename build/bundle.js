
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop$3() { }
    const identity$3 = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function not_equal(a, b) {
        return a != a ? b == b : a !== b;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop$3;
    }

    const is_client = typeof window !== 'undefined';
    let now$3 = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop$3;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append$1(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append$1(node.head || node, style);
    }
    function insert$2(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty$3() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function stop_propagation(fn) {
        return function (event) {
            event.stopPropagation();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function set_svg_attributes(node, attributes) {
        for (const key in attributes) {
            attr(node, key, attributes[key]);
        }
    }
    function set_custom_element_data(node, prop, value) {
        if (prop in node) {
            node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;
        }
        else {
            attr(node, prop, value);
        }
    }
    function children$2(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
        select.selectedIndex = -1; // no option should be selected
    }
    // unfortunately this can't be a constant as that wouldn't be tree-shakeable
    // so we cache the result instead
    let crossorigin;
    function is_crossorigin() {
        if (crossorigin === undefined) {
            crossorigin = false;
            try {
                if (typeof window !== 'undefined' && window.parent) {
                    void window.parent.document;
                }
            }
            catch (error) {
                crossorigin = true;
            }
        }
        return crossorigin;
    }
    function add_resize_listener(node, fn) {
        const computed_style = getComputedStyle(node);
        if (computed_style.position === 'static') {
            node.style.position = 'relative';
        }
        const iframe = element('iframe');
        iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
            'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
        iframe.setAttribute('aria-hidden', 'true');
        iframe.tabIndex = -1;
        const crossorigin = is_crossorigin();
        let unsubscribe;
        if (crossorigin) {
            iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
            unsubscribe = listen(window, 'message', (event) => {
                if (event.source === iframe.contentWindow)
                    fn();
            });
        }
        else {
            iframe.src = 'about:blank';
            iframe.onload = () => {
                unsubscribe = listen(iframe.contentWindow, 'resize', fn);
            };
        }
        append$1(node, iframe);
        return () => {
            if (crossorigin) {
                unsubscribe();
            }
            else if (unsubscribe && iframe.contentWindow) {
                unsubscribe();
            }
            detach(iframe);
        };
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }
    class HtmlTag {
        constructor(is_svg = false) {
            this.is_svg = false;
            this.is_svg = is_svg;
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                if (this.is_svg)
                    this.e = svg_element(target.nodeName);
                else
                    this.e = element(target.nodeName);
                this.t = target;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert$2(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { stylesheet } = info;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                info.rules = {};
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function beforeUpdate(fn) {
        get_current_component().$$.before_update.push(fn);
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
        return context;
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    function getAllContexts() {
        return get_current_component().$$.context;
    }
    function hasContext(key) {
        return get_current_component().$$.context.has(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch$1(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity$3, tick = noop$3, css } = config || null_transition;
            const program = {
                start: now$3() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch$1(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch$1(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch$1(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function destroy_block(block, lookup) {
        block.d(1);
        lookup.delete(block.key);
    }
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind$1(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init$1(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop$3,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children$2(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$3;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.48.0' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append$1(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert$2(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }
    /**
     * Base class to create strongly typed Svelte components.
     * This only exists for typing purposes and should be used in `.d.ts` files.
     *
     * ### Example:
     *
     * You have component library on npm called `component-library`, from which
     * you export a component called `MyComponent`. For Svelte+TypeScript users,
     * you want to provide typings. Therefore you create a `index.d.ts`:
     * ```ts
     * import { SvelteComponentTyped } from "svelte";
     * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}
     * ```
     * Typing this makes it possible for IDEs like VS Code with the Svelte extension
     * to provide intellisense and to use the component like this in a Svelte file
     * with TypeScript:
     * ```svelte
     * <script lang="ts">
     * 	import { MyComponent } from "component-library";
     * </script>
     * <MyComponent foo={'bar'} />
     * ```
     *
     * #### Why not make this part of `SvelteComponent(Dev)`?
     * Because
     * ```ts
     * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}
     * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;
     * ```
     * will throw a type error, so we need to separate the more strictly typed class.
     */
    class SvelteComponentTyped extends SvelteComponentDev {
        constructor(options) {
            super(options);
        }
    }

    function getGraphNode(nodeid, graph){
        return graph && nodeid && graph.items.find(n => n.id === nodeid);
    }

    function prepareGraph(graph){
        // populate item.children[] for convenience
        graph.items.filter(i => i.kind === 'node').forEach(item => { 
            item.children = []; 
            if(!item.hasOwnProperty('parent')){
                item.parent = null;
            }
        });
        graph.items.forEach(item => {
            if(item.parent){
                let parent = getGraphNode(item.parent, graph);
                if(!parent){
                    delete item.parent;
                    return;
                }
                parent.children = [...(parent.children || []), item.id];
            }
        });
        return graph;
    }

    function detachNodeFromParent(item, graph){
        if(getGraphNode(item.parent, graph)){
            item.parent = null;
        }
        return graph;
    }

    function moveGraphNode(item, graph, dx, dy){
        item.pos.x += dx;
        item.pos.y += dy;

        // move its children recursively by the same dx, dy
        (item.children || []).forEach(c => {
            let child = getGraphNode(c, graph);
            moveGraphNode(child, graph, dx, dy);
        });
    }

    function resizeGraphNode(item, graph){
        // console.log("resizing", item.label);
        // first resize all children
        (item.children || []).forEach(c => {
            let child = getGraphNode(c, graph);
            resizeGraphNode(child, graph);
        });
        let notesWidth = Math.min(300, item.notes ? item.notes.length *10 : 0);
        let notesHeight = (item.notes ? (Math.ceil(item.notes.length*9 / notesWidth) * 20) : 0);
        // make sure label and children nodes fit inside width
        let halfLabelAndNotesWidth = Math.max(25 + (0.5 * item.label.length *9), notesWidth/2);

        let rightchild = Math.max(...(item.children.map(c => {
            let child = getGraphNode(c, graph);
            return child.pos.x + child.width / 2 + 15;
        })), item.pos.x) - item.pos.x;
        
        let leftchild = item.pos.x - Math.min(...(item.children.map(c => {
            let child = getGraphNode(c, graph);
            return child.pos.x - child.width / 2 - 15;
        })), item.pos.x);

        item.width = 2 * Math.max(halfLabelAndNotesWidth, rightchild, leftchild);

        let halfLabelAndNotesHeight = 15 + notesHeight/2 ;

        let childDownExtents = item.children.map(c => {
            let child = getGraphNode(c, graph);
            return child.pos.y + child.height / 2 + 30;
        });
        // console.log({childDownExtents});

        let downchild = Math.max(...childDownExtents, item.pos.y) - item.pos.y;
        // console.log({downchild})

        let childUpExtents = item.children.map(c => {
            let child = getGraphNode(c, graph);
            return child.pos.y - child.height / 2 - 30 - notesHeight;
        }); 
      
        let upchild = item.pos.y - Math.min(...childUpExtents, item.pos.y);
        // console.log({upchild})

        item.height = 2 * Math.max(halfLabelAndNotesHeight, upchild, downchild);
        // console.log(item.label, item.width, item.height);
    }

    function decideNodeLevel(item, graph, currentLevel){
        item.level = currentLevel;
        item.children.forEach(c => decideNodeLevel(getGraphNode(c, graph), graph, currentLevel + 2));
    }

    function layout(graph){
        if(!graph) return null;
        prepareGraph(graph);
        // resize top nodes only because they will recurse
        graph.items.filter(i => (i.kind === 'node' && !i.parent)).forEach(item => {
            resizeGraphNode(item, graph);
            decideNodeLevel(item, graph, 0);
        });

        graph.items.filter(i => (i.kind === 'edge')).forEach(edge => {
            // handle edges without nodes
            edge.level = -1 + Math.min(
                edge.fromId ? getGraphNode(edge.fromId, graph).level : 20, 
                edge.toId ? getGraphNode(edge.toId, graph).level : 20
            );
        });

        return graph;
    }

    function deleteGraphItem(item, graph, deleteDependents){
        // console.log("deleteItem", item.label);
        if(item.kind === 'edge'){
            // can be deleted safely
            graph.items = graph.items.filter(i => i != item);
        } else if(item.kind === 'node'){
            if(deleteDependents){
                // delete all connected edges
                graph.items.filter(i => i.kind === 'edge' && [i.fromId, i.toId].includes(item.id)).forEach(edge => {
                    deleteGraphItem(edge, graph, false);
                });

                // delete children and all their edges recursively
                graph.items.filter(i => i.kind === 'node' && i.parent === item.id).forEach(child => {
                    deleteGraphItem(child, graph, true);
                });

                graph.items = graph.items.filter(i => i != item);
            } else {
                // make dependents (children, edges) orphans
                graph.items.filter(i => i.kind === 'node' && i.parent === item.id).forEach(child => {
                    if(item.parent)
                        child.parent = item.parent;
                    else
                        delete child.parent;
                });

                graph.items.filter(i => i.kind === 'edge' && [i.fromId, i.toId].includes(item.id)).forEach(edge => {
                    if(edge.fromId === item.id){
                        if(item.parent){
                            edge.fromId = item.parent;
                        } else {
                            delete edge.fromId;
                            edge.fromOrphan = {pos: {x: item.pos.x, y: item.pos.y}};
                        }
                    }
                    if(edge.toId === item.id) {
                        if(item.parent){
                            edge.toId = item.parent;
                        } else {
                            delete edge.toId;
                            edge.toOrphan = {pos: {x: item.pos.x, y: item.pos.y}};
                        }
                    }
                });

                graph.items = graph.items.filter(i => i != item);
            }
        }    
    }

    function createGraphNode(e, graph, svg){
        // console.log("createGraphNode")
        graph.items.push({
            id: Math.ceil(Math.random() * 10000),
            kind: 'node',
            label: 'New node',
            desc: '',
            link: '',
            tags: [],
            children: [],
            pos: getSvgCoordinates(svg, e),
        });
    }

    function getSvgCoordinates(svg, e){
        const pt = svg.createSVGPoint();
        pt.x = e.clientX;
        pt.y = e.clientY;
        return pt.matrixTransform( svg.getScreenCTM().inverse() );
    }

    function createGraphChildNode(e, graph, parent, svg){
        // console.log("createGraphNode")
        graph.items.push({
            id: Math.ceil(Math.random() * 10000),
            kind: 'node',
            label: 'New node',
            desc: '',
            link: '',
            tags: [],
            children: [],
            pos: getSvgCoordinates(svg, e),
            parent: parent.id
        });
    }

    function createGraphNodeEdge(from, fromHandle, graph){
        // console.log("createGraphNodeEdge")
        let newId = Math.ceil(Math.random() * 100000);
        graph.items.push({
            id: newId,
            kind: 'node',
            label: 'new node',
            desc: '',
            link: '',
            tags: [],
            parent: from.parent,
            children: [],
            pos: {
                x: (from.pos.x + (100 + from.width/2 + Math.random()*100) * (Math.floor(fromHandle / 10) - 2)),
                y: (from.pos.y + (100 + from.height/2 + Math.random()*100) * ((fromHandle % 10) - 2)),
            },
            fill: from.fill,
            stroke: from.stroke
        });

        graph.items.push({
            id: Math.ceil(Math.random() * 100000),
            kind: 'edge',
            label: '',
            desc: '',
            link: '',
            tags: [],
            fromId: from.id,
            toId: newId,
            directed: true, 
            weight: 5
        });
    }

    function exportJson(graph){
        // remove temporary fields before serializing
        let data = {};

        data.items = graph.items.map(item => {
            if(item.kind === 'node')
                return {
                    id: item.id,
                    kind: 'node',
                    label: item.label,
                    notes: item.notes,
                    desc: item.desc,
                    link: item.link,
                    tags: item.tags,
                    parent: item.parent,
                    pos: item.pos,
                    fill: item.fill,
                    stroke: item.stroke
                };
            else if(item.kind === 'edge')
                return {
                    id: item.id,
                    kind: 'edge',
                    label: item.label,
                    notes: item.notes,
                    desc: item.desc,
                    link: item.link,
                    tags: item.tags,
                    stroke: item.stroke,
                    strokeType: item.strokeType,
                    directed: item.directed,
                    weight: item.weight,
                    fromId: item.fromId,
                    toId: item.toId,
                    shape: item.shape,
                    fromOrphan: item.fromOrphan,
                    toOrphan: item.toOrphan
                }
        });

        data.grid = graph.grid;
        data.theme = graph.theme;
        data.jsondownload = graph.jsondownload;
        data.jsonupload = graph.jsonupload;
        data.contextmenu = graph.contextmenu;
        data.customjson = graph.customjson;
        data.exportcytoscape = graph.exportcytoscape;
        data.exportsvg = graph.exportsvg;

        return JSON.stringify(data, null, 2);
    }

    function exportCytoscape(graph){
        let cy = {};

        cy.elements = graph.items.filter(x => x.kind === 'node' || (x.fromId && x.toId)).map(item => {
            if(item.kind === 'node')
                return {
                    group: 'nodes', 
                    data: {
                            id: item.id,
                            parent: item.parent
                        },
                    position: {x: item.pos.x, y: item.pos.y}
                };
            else if(item.kind === 'edge')
                return {group: 'edges', data: {
                            
                            id: item.id,
                            source: item.fromId,
                            target: item.toId
                        }}
        });

        return JSON.stringify(cy, null, 2);
    }

    const themes = {
        elegant: {
            "name": "elegant",
            "bgfill": "#334155",
            "grid": "cartesian",
            "nodefill": "#bae6fd",
            "nodelabelstroke": "#334155",
            "nodeborder": "white",
            "edgestroke": "red",
            "edgeshape": "curved",
            "edgestroketype": "solid",
            "font": "Dosis",
            "badges": ["✅", "❌", "⚡", "👎", "👍"]
        },

        foresight: {
            "name": "foresight",
            "bgfill": "#1c170b",
            "grid": false,
            "nodefill": "#7b9ecb",
            "nodelabelstroke": "black",
            "nodeborder": "white",
            "edgestroke": "#ccc",
            "edgeshape": "ortho",
            "edgestroketype": "solid",
            "font": "Roboto Condensed",
            "badges": ["✅", "❌", "⚡", "👎", "👍"]
        },

        classic: {
            "name": "classic",
            "bgfill": "#f3f3f3",
            "grid": false,
            "font": "Balsamiq Sans",
            "nodefill": "#fbe6a3",
            "nodelabelstroke": "black",
            "nodeborder": "black",
            "edgestroke": "#4277dd",
            "edgeshape": "curved",
            "edgestroketype": "solid",
            "badges": ["✅", "❌", "⚡", "👎", "👍"]
        }
    };

    /* src/ControlPoint.svelte generated by Svelte v3.48.0 */

    const file$U = "src/ControlPoint.svelte";

    // (14:31) 
    function create_if_block_1$i(ctx) {
    	let path;
    	let path_d_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", path_d_value = `M ${/*x*/ ctx[1] - /*size*/ ctx[3]},${/*y*/ ctx[2] - /*size*/ ctx[3]} l ${2 * /*size*/ ctx[3]},${2 * /*size*/ ctx[3]} M ${/*x*/ ctx[1] + /*size*/ ctx[3]},${/*y*/ ctx[2] - /*size*/ ctx[3]} l ${-2 * /*size*/ ctx[3]},${2 * /*size*/ ctx[3]}`);
    			attr_dev(path, "data-handle", /*data*/ ctx[4]);
    			attr_dev(path, "class", "svelte-c8wrgx");
    			add_location(path, file$U, 14, 8, 414);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);

    			if (!mounted) {
    				dispose = listen_dev(path, "click", /*click_handler_2*/ ctx[7], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*x, size, y*/ 14 && path_d_value !== (path_d_value = `M ${/*x*/ ctx[1] - /*size*/ ctx[3]},${/*y*/ ctx[2] - /*size*/ ctx[3]} l ${2 * /*size*/ ctx[3]},${2 * /*size*/ ctx[3]} M ${/*x*/ ctx[1] + /*size*/ ctx[3]},${/*y*/ ctx[2] - /*size*/ ctx[3]} l ${-2 * /*size*/ ctx[3]},${2 * /*size*/ ctx[3]}`)) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (dirty & /*data*/ 16) {
    				attr_dev(path, "data-handle", /*data*/ ctx[4]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$i.name,
    		type: "if",
    		source: "(14:31) ",
    		ctx
    	});

    	return block;
    }

    // (12:4) {#if kind === 'plus'}
    function create_if_block$y(ctx) {
    	let path;
    	let path_d_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", path_d_value = `M ${/*x*/ ctx[1]},${/*y*/ ctx[2] - /*size*/ ctx[3]} v ${2 * /*size*/ ctx[3]} M ${/*x*/ ctx[1] - /*size*/ ctx[3]},${/*y*/ ctx[2]} h ${2 * /*size*/ ctx[3]}`);
    			attr_dev(path, "data-handle", /*data*/ ctx[4]);
    			attr_dev(path, "class", "svelte-c8wrgx");
    			add_location(path, file$U, 12, 8, 273);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);

    			if (!mounted) {
    				dispose = listen_dev(path, "click", /*click_handler_1*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*x, y, size*/ 14 && path_d_value !== (path_d_value = `M ${/*x*/ ctx[1]},${/*y*/ ctx[2] - /*size*/ ctx[3]} v ${2 * /*size*/ ctx[3]} M ${/*x*/ ctx[1] - /*size*/ ctx[3]},${/*y*/ ctx[2]} h ${2 * /*size*/ ctx[3]}`)) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (dirty & /*data*/ 16) {
    				attr_dev(path, "data-handle", /*data*/ ctx[4]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$y.name,
    		type: "if",
    		source: "(12:4) {#if kind === 'plus'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$Z(ctx) {
    	let g;
    	let circle;
    	let circle_r_value;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*kind*/ ctx[0] === 'plus') return create_if_block$y;
    		if (/*kind*/ ctx[0] === 'cross') return create_if_block_1$i;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			circle = svg_element("circle");
    			if (if_block) if_block.c();
    			attr_dev(circle, "cx", /*x*/ ctx[1]);
    			attr_dev(circle, "cy", /*y*/ ctx[2]);
    			attr_dev(circle, "r", circle_r_value = /*size*/ ctx[3] + 2);
    			attr_dev(circle, "data-handle", /*data*/ ctx[4]);
    			attr_dev(circle, "title", /*title*/ ctx[5]);
    			attr_dev(circle, "class", "svelte-c8wrgx");
    			add_location(circle, file$U, 10, 4, 168);
    			attr_dev(g, "class", "svelte-c8wrgx");
    			add_location(g, file$U, 9, 0, 160);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, circle);
    			if (if_block) if_block.m(g, null);

    			if (!mounted) {
    				dispose = listen_dev(circle, "click", /*click_handler*/ ctx[8], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*x*/ 2) {
    				attr_dev(circle, "cx", /*x*/ ctx[1]);
    			}

    			if (dirty & /*y*/ 4) {
    				attr_dev(circle, "cy", /*y*/ ctx[2]);
    			}

    			if (dirty & /*size*/ 8 && circle_r_value !== (circle_r_value = /*size*/ ctx[3] + 2)) {
    				attr_dev(circle, "r", circle_r_value);
    			}

    			if (dirty & /*data*/ 16) {
    				attr_dev(circle, "data-handle", /*data*/ ctx[4]);
    			}

    			if (dirty & /*title*/ 32) {
    				attr_dev(circle, "title", /*title*/ ctx[5]);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(g, null);
    				}
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);

    			if (if_block) {
    				if_block.d();
    			}

    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ControlPoint', slots, []);
    	let { kind = 'plus' } = $$props;
    	let { x } = $$props;
    	let { y } = $$props;
    	let { size = 4 } = $$props;
    	let { data } = $$props;
    	let { title } = $$props;
    	const writable_props = ['kind', 'x', 'y', 'size', 'data', 'title'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ControlPoint> was created with unknown prop '${key}'`);
    	});

    	function click_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	function click_handler_2(event) {
    		bubble.call(this, $$self, event);
    	}

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('kind' in $$props) $$invalidate(0, kind = $$props.kind);
    		if ('x' in $$props) $$invalidate(1, x = $$props.x);
    		if ('y' in $$props) $$invalidate(2, y = $$props.y);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('data' in $$props) $$invalidate(4, data = $$props.data);
    		if ('title' in $$props) $$invalidate(5, title = $$props.title);
    	};

    	$$self.$capture_state = () => ({ kind, x, y, size, data, title });

    	$$self.$inject_state = $$props => {
    		if ('kind' in $$props) $$invalidate(0, kind = $$props.kind);
    		if ('x' in $$props) $$invalidate(1, x = $$props.x);
    		if ('y' in $$props) $$invalidate(2, y = $$props.y);
    		if ('size' in $$props) $$invalidate(3, size = $$props.size);
    		if ('data' in $$props) $$invalidate(4, data = $$props.data);
    		if ('title' in $$props) $$invalidate(5, title = $$props.title);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [kind, x, y, size, data, title, click_handler_1, click_handler_2, click_handler];
    }

    class ControlPoint extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$Z, create_fragment$Z, safe_not_equal, {
    			kind: 0,
    			x: 1,
    			y: 2,
    			size: 3,
    			data: 4,
    			title: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ControlPoint",
    			options,
    			id: create_fragment$Z.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*x*/ ctx[1] === undefined && !('x' in props)) {
    			console.warn("<ControlPoint> was created without expected prop 'x'");
    		}

    		if (/*y*/ ctx[2] === undefined && !('y' in props)) {
    			console.warn("<ControlPoint> was created without expected prop 'y'");
    		}

    		if (/*data*/ ctx[4] === undefined && !('data' in props)) {
    			console.warn("<ControlPoint> was created without expected prop 'data'");
    		}

    		if (/*title*/ ctx[5] === undefined && !('title' in props)) {
    			console.warn("<ControlPoint> was created without expected prop 'title'");
    		}
    	}

    	get kind() {
    		throw new Error("<ControlPoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set kind(value) {
    		throw new Error("<ControlPoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<ControlPoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<ControlPoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<ControlPoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<ControlPoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<ControlPoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<ControlPoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get data() {
    		throw new Error("<ControlPoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<ControlPoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<ControlPoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<ControlPoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var svelte = /*#__PURE__*/Object.freeze({
        __proto__: null,
        SvelteComponent: SvelteComponentDev,
        SvelteComponentTyped: SvelteComponentTyped,
        afterUpdate: afterUpdate,
        beforeUpdate: beforeUpdate,
        createEventDispatcher: createEventDispatcher,
        getAllContexts: getAllContexts,
        getContext: getContext,
        hasContext: hasContext,
        onDestroy: onDestroy,
        onMount: onMount,
        setContext: setContext,
        tick: tick
    });

    /* src/Node.svelte generated by Svelte v3.48.0 */
    const file$T = "src/Node.svelte";

    function get_each_context$j(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    // (50:1) {#if item.notes}
    function create_if_block_2$f(ctx) {
    	let foreignObject;
    	let div;
    	let t0_value = /*item*/ ctx[1].notes + "";
    	let t0;
    	let t1;
    	let foreignObject_x_value;
    	let foreignObject_y_value;
    	let foreignObject_font_family_value;
    	let foreignObject_font_size_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			foreignObject = svg_element("foreignObject");
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(div, "class", "foreign-obj-div svelte-prylvu");
    			add_location(div, file$T, 61, 3, 2210);
    			attr_dev(foreignObject, "x", foreignObject_x_value = /*item*/ ctx[1].pos.x - /*notesWidth*/ ctx[4] / 2 + 10);
    			attr_dev(foreignObject, "y", foreignObject_y_value = /*item*/ ctx[1].pos.y - /*item*/ ctx[1].height / 2 + 30);
    			attr_dev(foreignObject, "font-family", foreignObject_font_family_value = /*theme*/ ctx[0].font);
    			attr_dev(foreignObject, "font-weight", "300");
    			attr_dev(foreignObject, "font-size", foreignObject_font_size_value = /*item*/ ctx[1].fontSize);
    			attr_dev(foreignObject, "width", /*notesWidth*/ ctx[4]);
    			attr_dev(foreignObject, "height", /*notesHeight*/ ctx[5]);
    			add_location(foreignObject, file$T, 50, 1, 1746);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, foreignObject, anchor);
    			append_dev(foreignObject, div);
    			append_dev(div, t0);
    			append_dev(div, t1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(foreignObject, "mousedown", stop_propagation(/*mousedown_handler_2*/ ctx[15]), false, false, true),
    					listen_dev(foreignObject, "mouseup", stop_propagation(/*mouseup_handler_2*/ ctx[16]), false, false, true),
    					listen_dev(foreignObject, "click", stop_propagation(/*click_handler_2*/ ctx[8]), false, false, true)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*item*/ 2 && t0_value !== (t0_value = /*item*/ ctx[1].notes + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*item, notesWidth*/ 18 && foreignObject_x_value !== (foreignObject_x_value = /*item*/ ctx[1].pos.x - /*notesWidth*/ ctx[4] / 2 + 10)) {
    				attr_dev(foreignObject, "x", foreignObject_x_value);
    			}

    			if (dirty & /*item*/ 2 && foreignObject_y_value !== (foreignObject_y_value = /*item*/ ctx[1].pos.y - /*item*/ ctx[1].height / 2 + 30)) {
    				attr_dev(foreignObject, "y", foreignObject_y_value);
    			}

    			if (dirty & /*theme*/ 1 && foreignObject_font_family_value !== (foreignObject_font_family_value = /*theme*/ ctx[0].font)) {
    				attr_dev(foreignObject, "font-family", foreignObject_font_family_value);
    			}

    			if (dirty & /*item*/ 2 && foreignObject_font_size_value !== (foreignObject_font_size_value = /*item*/ ctx[1].fontSize)) {
    				attr_dev(foreignObject, "font-size", foreignObject_font_size_value);
    			}

    			if (dirty & /*notesWidth*/ 16) {
    				attr_dev(foreignObject, "width", /*notesWidth*/ ctx[4]);
    			}

    			if (dirty & /*notesHeight*/ 32) {
    				attr_dev(foreignObject, "height", /*notesHeight*/ ctx[5]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(foreignObject);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$f.name,
    		type: "if",
    		source: "(50:1) {#if item.notes}",
    		ctx
    	});

    	return block;
    }

    // (68:1) {#if isSelected}
    function create_if_block_1$h(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = [[1, 0], [0, 1], [-1, 0], [0, -1]];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < 4; i += 1) {
    		each_blocks[i] = create_each_block$j(get_each_context$j(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < 4; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < 4; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*item, handleControlClicked*/ 130) {
    				each_value = [[1, 0], [0, 1], [-1, 0], [0, -1]];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < 4; i += 1) {
    					const child_ctx = get_each_context$j(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$j(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = 4; i < 4; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < 4; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < 4; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$h.name,
    		type: "if",
    		source: "(68:1) {#if isSelected}",
    		ctx
    	});

    	return block;
    }

    // (69:3) {#each [[1,0],[0,1],[-1,0],[0,-1]] as control}
    function create_each_block$j(ctx) {
    	let controlpoint;
    	let current;

    	controlpoint = new ControlPoint({
    			props: {
    				kind: "plus",
    				data: 22 + /*control*/ ctx[23][1] + 10 * /*control*/ ctx[23][0],
    				x: /*item*/ ctx[1].pos.x + /*control*/ ctx[23][0] * /*item*/ ctx[1].width / 2,
    				y: /*item*/ ctx[1].pos.y + /*control*/ ctx[23][1] * /*item*/ ctx[1].height / 2,
    				title: "Create new connected node",
    				size: 4
    			},
    			$$inline: true
    		});

    	controlpoint.$on("click", /*handleControlClicked*/ ctx[7]);

    	const block = {
    		c: function create() {
    			create_component(controlpoint.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(controlpoint, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const controlpoint_changes = {};
    			if (dirty & /*item*/ 2) controlpoint_changes.x = /*item*/ ctx[1].pos.x + /*control*/ ctx[23][0] * /*item*/ ctx[1].width / 2;
    			if (dirty & /*item*/ 2) controlpoint_changes.y = /*item*/ ctx[1].pos.y + /*control*/ ctx[23][1] * /*item*/ ctx[1].height / 2;
    			controlpoint.$set(controlpoint_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(controlpoint.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(controlpoint.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(controlpoint, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$j.name,
    		type: "each",
    		source: "(69:3) {#each [[1,0],[0,1],[-1,0],[0,-1]] as control}",
    		ctx
    	});

    	return block;
    }

    // (81:1) {#if item.badge}
    function create_if_block$x(ctx) {
    	let g;
    	let circle;
    	let circle_cx_value;
    	let circle_cy_value;
    	let text_1;
    	let t_value = /*item*/ ctx[1].badge + "";
    	let t;
    	let text_1_x_value;
    	let text_1_y_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			circle = svg_element("circle");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(circle, "cx", circle_cx_value = /*item*/ ctx[1].pos.x - /*item*/ ctx[1].width / 2);
    			attr_dev(circle, "cy", circle_cy_value = /*item*/ ctx[1].pos.y - /*item*/ ctx[1].height / 2);
    			attr_dev(circle, "r", 10);
    			attr_dev(circle, "fill", "white");
    			attr_dev(circle, "stroke", "orange");
    			add_location(circle, file$T, 82, 2, 2676);
    			attr_dev(text_1, "x", text_1_x_value = /*item*/ ctx[1].pos.x - /*item*/ ctx[1].width / 2 - 7);
    			attr_dev(text_1, "y", text_1_y_value = /*item*/ ctx[1].pos.y - /*item*/ ctx[1].height / 2 + 6);
    			attr_dev(text_1, "stroke", "white");
    			attr_dev(text_1, "fill", "white");
    			attr_dev(text_1, "class", "svelte-prylvu");
    			add_location(text_1, file$T, 91, 3, 3088);
    			attr_dev(g, "class", "badge");
    			add_location(g, file$T, 81, 1, 2656);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, circle);
    			append_dev(g, text_1);
    			append_dev(text_1, t);

    			if (!mounted) {
    				dispose = [
    					listen_dev(circle, "mousedown", stop_propagation(/*mousedown_handler_3*/ ctx[17]), false, false, true),
    					listen_dev(circle, "mouseup", stop_propagation(/*mouseup_handler_3*/ ctx[18]), false, false, true),
    					listen_dev(circle, "click", stop_propagation(/*click_handler_3*/ ctx[19]), false, false, true),
    					listen_dev(text_1, "mousedown", stop_propagation(/*mousedown_handler_4*/ ctx[20]), false, false, true),
    					listen_dev(text_1, "mouseup", stop_propagation(/*mouseup_handler_4*/ ctx[21]), false, false, true),
    					listen_dev(text_1, "click", stop_propagation(/*click_handler_4*/ ctx[22]), false, false, true)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*item*/ 2 && circle_cx_value !== (circle_cx_value = /*item*/ ctx[1].pos.x - /*item*/ ctx[1].width / 2)) {
    				attr_dev(circle, "cx", circle_cx_value);
    			}

    			if (dirty & /*item*/ 2 && circle_cy_value !== (circle_cy_value = /*item*/ ctx[1].pos.y - /*item*/ ctx[1].height / 2)) {
    				attr_dev(circle, "cy", circle_cy_value);
    			}

    			if (dirty & /*item*/ 2 && t_value !== (t_value = /*item*/ ctx[1].badge + "")) set_data_dev(t, t_value);

    			if (dirty & /*item*/ 2 && text_1_x_value !== (text_1_x_value = /*item*/ ctx[1].pos.x - /*item*/ ctx[1].width / 2 - 7)) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (dirty & /*item*/ 2 && text_1_y_value !== (text_1_y_value = /*item*/ ctx[1].pos.y - /*item*/ ctx[1].height / 2 + 6)) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$x.name,
    		type: "if",
    		source: "(81:1) {#if item.badge}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$Y(ctx) {
    	let g;
    	let rect;
    	let rect_x_value;
    	let rect_y_value;
    	let rect_width_value;
    	let rect_height_value;
    	let rect_fill_value;
    	let rect_stroke_value;
    	let rect_stroke_width_value;
    	let rect_rx_value;
    	let text_1;
    	let t_value = /*item*/ ctx[1].label + "";
    	let t;
    	let text_1_x_value;
    	let text_1_y_value;
    	let text_1_font_family_value;
    	let text_1_font_weight_value;
    	let text_1_font_size_value;
    	let text_1_fill_value;
    	let if_block0_anchor;
    	let if_block1_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*item*/ ctx[1].notes && create_if_block_2$f(ctx);
    	let if_block1 = /*isSelected*/ ctx[2] && create_if_block_1$h(ctx);
    	let if_block2 = /*item*/ ctx[1].badge && create_if_block$x(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			rect = svg_element("rect");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			if (if_block0) if_block0.c();
    			if_block0_anchor = empty$3();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty$3();
    			if (if_block2) if_block2.c();
    			attr_dev(rect, "x", rect_x_value = /*item*/ ctx[1].pos.x - /*item*/ ctx[1].width / 2);
    			attr_dev(rect, "y", rect_y_value = /*item*/ ctx[1].pos.y - /*item*/ ctx[1].height / 2);
    			attr_dev(rect, "width", rect_width_value = /*item*/ ctx[1].width);
    			attr_dev(rect, "height", rect_height_value = /*item*/ ctx[1].height);
    			attr_dev(rect, "fill", rect_fill_value = /*item*/ ctx[1].fill || /*theme*/ ctx[0].nodefill);

    			attr_dev(rect, "stroke", rect_stroke_value = /*isSelected*/ ctx[2]
    			? 'blue'
    			: /*isHighlighted*/ ctx[3]
    				? 'red'
    				: /*item*/ ctx[1].bordercolor || /*theme*/ ctx[0].nodeborder);

    			attr_dev(rect, "stroke-width", rect_stroke_width_value = /*isSelected*/ ctx[2] || /*isHighlighted*/ ctx[3]
    			? '6px'
    			: '3px');

    			attr_dev(rect, "rx", rect_rx_value = 8 + Math.floor(/*item*/ ctx[1].height / 50));
    			attr_dev(rect, "class", "svelte-prylvu");
    			add_location(rect, file$T, 20, 4, 610);
    			attr_dev(text_1, "x", text_1_x_value = /*item*/ ctx[1].pos.x - 0.5 * /*item*/ ctx[1].label.length * 10 + 5);
    			attr_dev(text_1, "y", text_1_y_value = /*item*/ ctx[1].pos.y - /*item*/ ctx[1].height / 2 + 20);
    			attr_dev(text_1, "font-family", text_1_font_family_value = /*theme*/ ctx[0].font);

    			attr_dev(text_1, "font-weight", text_1_font_weight_value = /*item*/ ctx[1].children.length > 0 || /*item*/ ctx[1].notes?.length > 0
    			? '700'
    			: '300');

    			attr_dev(text_1, "font-size", text_1_font_size_value = /*item*/ ctx[1].fontSize);
    			attr_dev(text_1, "fill", text_1_fill_value = /*item*/ ctx[1].labelcolor || /*theme*/ ctx[0].nodelabelstroke);
    			attr_dev(text_1, "class", "svelte-prylvu");
    			add_location(text_1, file$T, 35, 1, 1190);
    			attr_dev(g, "class", "svelte-prylvu");
    			add_location(g, file$T, 19, 0, 602);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, rect);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    			if (if_block0) if_block0.m(g, null);
    			append_dev(g, if_block0_anchor);
    			if (if_block1) if_block1.m(g, null);
    			append_dev(g, if_block1_anchor);
    			if (if_block2) if_block2.m(g, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(rect, "mousedown", stop_propagation(/*mousedown_handler*/ ctx[11]), false, false, true),
    					listen_dev(rect, "mouseup", stop_propagation(/*mouseup_handler*/ ctx[12]), false, false, true),
    					listen_dev(rect, "click", stop_propagation(/*click_handler*/ ctx[10]), false, false, true),
    					listen_dev(text_1, "mousedown", stop_propagation(/*mousedown_handler_1*/ ctx[13]), false, false, true),
    					listen_dev(text_1, "mouseup", stop_propagation(/*mouseup_handler_1*/ ctx[14]), false, false, true),
    					listen_dev(text_1, "click", stop_propagation(/*click_handler_1*/ ctx[9]), false, false, true)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*item*/ 2 && rect_x_value !== (rect_x_value = /*item*/ ctx[1].pos.x - /*item*/ ctx[1].width / 2)) {
    				attr_dev(rect, "x", rect_x_value);
    			}

    			if (!current || dirty & /*item*/ 2 && rect_y_value !== (rect_y_value = /*item*/ ctx[1].pos.y - /*item*/ ctx[1].height / 2)) {
    				attr_dev(rect, "y", rect_y_value);
    			}

    			if (!current || dirty & /*item*/ 2 && rect_width_value !== (rect_width_value = /*item*/ ctx[1].width)) {
    				attr_dev(rect, "width", rect_width_value);
    			}

    			if (!current || dirty & /*item*/ 2 && rect_height_value !== (rect_height_value = /*item*/ ctx[1].height)) {
    				attr_dev(rect, "height", rect_height_value);
    			}

    			if (!current || dirty & /*item, theme*/ 3 && rect_fill_value !== (rect_fill_value = /*item*/ ctx[1].fill || /*theme*/ ctx[0].nodefill)) {
    				attr_dev(rect, "fill", rect_fill_value);
    			}

    			if (!current || dirty & /*isSelected, isHighlighted, item, theme*/ 15 && rect_stroke_value !== (rect_stroke_value = /*isSelected*/ ctx[2]
    			? 'blue'
    			: /*isHighlighted*/ ctx[3]
    				? 'red'
    				: /*item*/ ctx[1].bordercolor || /*theme*/ ctx[0].nodeborder)) {
    				attr_dev(rect, "stroke", rect_stroke_value);
    			}

    			if (!current || dirty & /*isSelected, isHighlighted*/ 12 && rect_stroke_width_value !== (rect_stroke_width_value = /*isSelected*/ ctx[2] || /*isHighlighted*/ ctx[3]
    			? '6px'
    			: '3px')) {
    				attr_dev(rect, "stroke-width", rect_stroke_width_value);
    			}

    			if (!current || dirty & /*item*/ 2 && rect_rx_value !== (rect_rx_value = 8 + Math.floor(/*item*/ ctx[1].height / 50))) {
    				attr_dev(rect, "rx", rect_rx_value);
    			}

    			if ((!current || dirty & /*item*/ 2) && t_value !== (t_value = /*item*/ ctx[1].label + "")) set_data_dev(t, t_value);

    			if (!current || dirty & /*item*/ 2 && text_1_x_value !== (text_1_x_value = /*item*/ ctx[1].pos.x - 0.5 * /*item*/ ctx[1].label.length * 10 + 5)) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (!current || dirty & /*item*/ 2 && text_1_y_value !== (text_1_y_value = /*item*/ ctx[1].pos.y - /*item*/ ctx[1].height / 2 + 20)) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}

    			if (!current || dirty & /*theme*/ 1 && text_1_font_family_value !== (text_1_font_family_value = /*theme*/ ctx[0].font)) {
    				attr_dev(text_1, "font-family", text_1_font_family_value);
    			}

    			if (!current || dirty & /*item*/ 2 && text_1_font_weight_value !== (text_1_font_weight_value = /*item*/ ctx[1].children.length > 0 || /*item*/ ctx[1].notes?.length > 0
    			? '700'
    			: '300')) {
    				attr_dev(text_1, "font-weight", text_1_font_weight_value);
    			}

    			if (!current || dirty & /*item*/ 2 && text_1_font_size_value !== (text_1_font_size_value = /*item*/ ctx[1].fontSize)) {
    				attr_dev(text_1, "font-size", text_1_font_size_value);
    			}

    			if (!current || dirty & /*item, theme*/ 3 && text_1_fill_value !== (text_1_fill_value = /*item*/ ctx[1].labelcolor || /*theme*/ ctx[0].nodelabelstroke)) {
    				attr_dev(text_1, "fill", text_1_fill_value);
    			}

    			if (/*item*/ ctx[1].notes) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$f(ctx);
    					if_block0.c();
    					if_block0.m(g, if_block0_anchor);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*isSelected*/ ctx[2]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*isSelected*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$h(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(g, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*item*/ ctx[1].badge) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$x(ctx);
    					if_block2.c();
    					if_block2.m(g, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Y($$self, $$props, $$invalidate) {
    	let notesWidth;
    	let notesHeight;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Node', slots, []);
    	const dispatch = createEventDispatcher();
    	let { theme } = $$props;
    	let { item } = $$props;
    	let { isSelected } = $$props;
    	let { isHighlighted } = $$props;

    	function handleControlClicked(e) {
    		let handle = parseInt(e.target.getAttribute('data-handle'));

    		// console.log(handle)
    		dispatch('createnode', { from: item, handle });
    	}

    	const writable_props = ['theme', 'item', 'isSelected', 'isHighlighted'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Node> was created with unknown prop '${key}'`);
    	});

    	function click_handler_2(event) {
    		bubble.call(this, $$self, event);
    	}

    	function click_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	const mousedown_handler = e => dispatch('itemMouseDown', { source: item, rawEvent: e });
    	const mouseup_handler = e => dispatch('itemMouseUp', { source: item, rawEvent: e });
    	const mousedown_handler_1 = e => dispatch('itemMouseDown', { source: item, rawEvent: e });
    	const mouseup_handler_1 = e => dispatch('itemMouseUp', { source: item, rawEvent: e });

    	const mousedown_handler_2 = e => dispatch('itemMouseDown', {
    		source: item,
    		rawEvent: e,
    		from: { x: e.clientX, y: e.clientY }
    	});

    	const mouseup_handler_2 = e => dispatch('itemMouseUp', { source: item, rawEvent: e });
    	const mousedown_handler_3 = e => dispatch('itemMouseDown', { source: item, rawEvent: e });
    	const mouseup_handler_3 = e => dispatch('itemMouseUp', { source: item, rawEvent: e });
    	const click_handler_3 = e => dispatch('itemBadgeClick', { source: item, rawEvent: e });
    	const mousedown_handler_4 = e => dispatch('itemMouseDown', { source: item, rawEvent: e });
    	const mouseup_handler_4 = e => dispatch('itemMouseUp', { source: item, rawEvent: e });
    	const click_handler_4 = e => dispatch('itemBadgeClick', { source: item, rawEvent: e });

    	$$self.$$set = $$props => {
    		if ('theme' in $$props) $$invalidate(0, theme = $$props.theme);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    		if ('isSelected' in $$props) $$invalidate(2, isSelected = $$props.isSelected);
    		if ('isHighlighted' in $$props) $$invalidate(3, isHighlighted = $$props.isHighlighted);
    	};

    	$$self.$capture_state = () => ({
    		ControlPoint,
    		createEventDispatcher,
    		dispatch,
    		theme,
    		item,
    		isSelected,
    		isHighlighted,
    		handleControlClicked,
    		notesWidth,
    		notesHeight
    	});

    	$$self.$inject_state = $$props => {
    		if ('theme' in $$props) $$invalidate(0, theme = $$props.theme);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    		if ('isSelected' in $$props) $$invalidate(2, isSelected = $$props.isSelected);
    		if ('isHighlighted' in $$props) $$invalidate(3, isHighlighted = $$props.isHighlighted);
    		if ('notesWidth' in $$props) $$invalidate(4, notesWidth = $$props.notesWidth);
    		if ('notesHeight' in $$props) $$invalidate(5, notesHeight = $$props.notesHeight);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*item*/ 2) {
    			$$invalidate(4, notesWidth = Math.min(300, item.notes ? item.notes.length * 10 : 0));
    		}

    		if ($$self.$$.dirty & /*item, notesWidth*/ 18) {
    			$$invalidate(5, notesHeight = item.notes
    			? Math.ceil(item.notes.length * 10 / notesWidth) * 20
    			: 0);
    		}
    	};

    	return [
    		theme,
    		item,
    		isSelected,
    		isHighlighted,
    		notesWidth,
    		notesHeight,
    		dispatch,
    		handleControlClicked,
    		click_handler_2,
    		click_handler_1,
    		click_handler,
    		mousedown_handler,
    		mouseup_handler,
    		mousedown_handler_1,
    		mouseup_handler_1,
    		mousedown_handler_2,
    		mouseup_handler_2,
    		mousedown_handler_3,
    		mouseup_handler_3,
    		click_handler_3,
    		mousedown_handler_4,
    		mouseup_handler_4,
    		click_handler_4
    	];
    }

    class Node extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$Y, create_fragment$Y, safe_not_equal, {
    			theme: 0,
    			item: 1,
    			isSelected: 2,
    			isHighlighted: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Node",
    			options,
    			id: create_fragment$Y.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*theme*/ ctx[0] === undefined && !('theme' in props)) {
    			console.warn("<Node> was created without expected prop 'theme'");
    		}

    		if (/*item*/ ctx[1] === undefined && !('item' in props)) {
    			console.warn("<Node> was created without expected prop 'item'");
    		}

    		if (/*isSelected*/ ctx[2] === undefined && !('isSelected' in props)) {
    			console.warn("<Node> was created without expected prop 'isSelected'");
    		}

    		if (/*isHighlighted*/ ctx[3] === undefined && !('isHighlighted' in props)) {
    			console.warn("<Node> was created without expected prop 'isHighlighted'");
    		}
    	}

    	get theme() {
    		throw new Error("<Node>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set theme(value) {
    		throw new Error("<Node>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get item() {
    		throw new Error("<Node>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Node>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isSelected() {
    		throw new Error("<Node>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isSelected(value) {
    		throw new Error("<Node>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isHighlighted() {
    		throw new Error("<Node>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isHighlighted(value) {
    		throw new Error("<Node>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Edge.svelte generated by Svelte v3.48.0 */
    const file$S = "src/Edge.svelte";

    // (118:12) {#if item.directed}
    function create_if_block_2$e(ctx) {
    	let textPath;
    	let t;
    	let textPath_href_value;
    	let textPath_fill_value;
    	let textPath_stroke_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			textPath = svg_element("textPath");
    			t = text("---->\n            ");
    			attr_dev(textPath, "href", textPath_href_value = `#edgepathmain${/*item*/ ctx[0].id}`);
    			attr_dev(textPath, "startOffset", "20%");
    			attr_dev(textPath, "lengthAdjust", "spacingAndGlyphs");
    			attr_dev(textPath, "font-family", "Verdana");
    			attr_dev(textPath, "font-size", "20");
    			attr_dev(textPath, "start", "");

    			attr_dev(textPath, "fill", textPath_fill_value = /*isSelected*/ ctx[2]
    			? 'blue'
    			: /*item*/ ctx[0].stroke || /*graph*/ ctx[1].theme.edgestroke);

    			attr_dev(textPath, "stroke", textPath_stroke_value = /*isSelected*/ ctx[2]
    			? 'blue'
    			: /*item*/ ctx[0].stroke || /*graph*/ ctx[1].theme.edgestroke);

    			attr_dev(textPath, "class", "svelte-w98d45");
    			add_location(textPath, file$S, 118, 12, 4700);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, textPath, anchor);
    			append_dev(textPath, t);

    			if (!mounted) {
    				dispose = [
    					listen_dev(textPath, "mousedown", stop_propagation(/*mousedown_handler_2*/ ctx[19]), false, false, true),
    					listen_dev(textPath, "mouseup", stop_propagation(/*mouseup_handler_2*/ ctx[20]), false, false, true),
    					listen_dev(textPath, "click", stop_propagation(/*click_handler_3*/ ctx[12]), false, false, true)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*item*/ 1 && textPath_href_value !== (textPath_href_value = `#edgepathmain${/*item*/ ctx[0].id}`)) {
    				attr_dev(textPath, "href", textPath_href_value);
    			}

    			if (dirty & /*isSelected, item, graph*/ 7 && textPath_fill_value !== (textPath_fill_value = /*isSelected*/ ctx[2]
    			? 'blue'
    			: /*item*/ ctx[0].stroke || /*graph*/ ctx[1].theme.edgestroke)) {
    				attr_dev(textPath, "fill", textPath_fill_value);
    			}

    			if (dirty & /*isSelected, item, graph*/ 7 && textPath_stroke_value !== (textPath_stroke_value = /*isSelected*/ ctx[2]
    			? 'blue'
    			: /*item*/ ctx[0].stroke || /*graph*/ ctx[1].theme.edgestroke)) {
    				attr_dev(textPath, "stroke", textPath_stroke_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(textPath);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$e.name,
    		type: "if",
    		source: "(118:12) {#if item.directed}",
    		ctx
    	});

    	return block;
    }

    // (137:4) {#if isSelected && fromPos}
    function create_if_block_1$g(ctx) {
    	let controlpoint;
    	let current;

    	controlpoint = new ControlPoint({
    			props: {
    				kind: "cross",
    				data: "from",
    				x: /*fromPos*/ ctx[5].x,
    				y: /*fromPos*/ ctx[5].y,
    				title: "Detach from Node",
    				size: 4
    			},
    			$$inline: true
    		});

    	controlpoint.$on("click", /*handleControlClicked*/ ctx[8]);

    	const block = {
    		c: function create() {
    			create_component(controlpoint.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(controlpoint, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const controlpoint_changes = {};
    			if (dirty & /*fromPos*/ 32) controlpoint_changes.x = /*fromPos*/ ctx[5].x;
    			if (dirty & /*fromPos*/ 32) controlpoint_changes.y = /*fromPos*/ ctx[5].y;
    			controlpoint.$set(controlpoint_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(controlpoint.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(controlpoint.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(controlpoint, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$g.name,
    		type: "if",
    		source: "(137:4) {#if isSelected && fromPos}",
    		ctx
    	});

    	return block;
    }

    // (149:4) {#if isSelected && toPos}
    function create_if_block$w(ctx) {
    	let controlpoint;
    	let current;

    	controlpoint = new ControlPoint({
    			props: {
    				kind: "cross",
    				data: "to",
    				x: /*toPos*/ ctx[4].x,
    				y: /*toPos*/ ctx[4].y,
    				title: "Detach from Node",
    				size: 4
    			},
    			$$inline: true
    		});

    	controlpoint.$on("click", /*handleControlClicked*/ ctx[8]);

    	const block = {
    		c: function create() {
    			create_component(controlpoint.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(controlpoint, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const controlpoint_changes = {};
    			if (dirty & /*toPos*/ 16) controlpoint_changes.x = /*toPos*/ ctx[4].x;
    			if (dirty & /*toPos*/ 16) controlpoint_changes.y = /*toPos*/ ctx[4].y;
    			controlpoint.$set(controlpoint_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(controlpoint.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(controlpoint.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(controlpoint, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$w.name,
    		type: "if",
    		source: "(149:4) {#if isSelected && toPos}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$X(ctx) {
    	let g;
    	let path0;
    	let path0_d_value;
    	let path0_stroke_value;
    	let path0_id_value;
    	let path0_stroke_dasharray_value;
    	let path0_marker_end_value;
    	let path1;
    	let path1_d_value;
    	let path1_id_value;
    	let text_1;
    	let textPath;
    	let t_value = /*item*/ ctx[0].label + "";
    	let t;
    	let textPath_href_value;
    	let textPath_fill_value;
    	let textPath_stroke_value;
    	let text_1_font_family_value;
    	let text_1_fill_value;
    	let if_block1_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*item*/ ctx[0].directed && create_if_block_2$e(ctx);
    	let if_block1 = /*isSelected*/ ctx[2] && /*fromPos*/ ctx[5] && create_if_block_1$g(ctx);
    	let if_block2 = /*isSelected*/ ctx[2] && /*toPos*/ ctx[4] && create_if_block$w(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			text_1 = svg_element("text");
    			textPath = svg_element("textPath");
    			t = text(t_value);
    			if (if_block0) if_block0.c();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty$3();
    			if (if_block2) if_block2.c();
    			attr_dev(path0, "d", path0_d_value = /*getEdgePath*/ ctx[7](/*graph*/ ctx[1]));
    			attr_dev(path0, "fill", "none");

    			attr_dev(path0, "stroke", path0_stroke_value = /*isSelected*/ ctx[2]
    			? 'blue'
    			: /*item*/ ctx[0].stroke || /*graph*/ ctx[1].theme.edgestroke);

    			attr_dev(path0, "stroke-width", "5");
    			attr_dev(path0, "class", "edgePath svelte-w98d45");
    			attr_dev(path0, "id", path0_id_value = `edgepathmain${/*item*/ ctx[0].id}`);
    			attr_dev(path0, "stroke-dasharray", path0_stroke_dasharray_value = getDashArray(/*item*/ ctx[0].strokeType || /*graph*/ ctx[1].theme.edgestroketype));

    			attr_dev(path0, "marker-end", path0_marker_end_value = /*item*/ ctx[0].directed && false
    			? "url(#arrow)"
    			: false);

    			add_location(path0, file$S, 69, 1, 2691);
    			attr_dev(path1, "d", path1_d_value = /*getEdgePath*/ ctx[7](/*graph*/ ctx[1]));
    			attr_dev(path1, "fill", "none");
    			attr_dev(path1, "stroke", "none");
    			attr_dev(path1, "stroke-width", "5");
    			attr_dev(path1, "transform", /*labelTransform*/ ctx[3]);
    			attr_dev(path1, "id", path1_id_value = `edgepath${/*item*/ ctx[0].id}`);
    			attr_dev(path1, "class", "svelte-w98d45");
    			add_location(path1, file$S, 84, 4, 3396);
    			attr_dev(textPath, "href", textPath_href_value = `#edgepath${/*item*/ ctx[0].id}`);
    			attr_dev(textPath, "startOffset", "40%");
    			attr_dev(textPath, "lengthAdjust", "spacingAndGlyphs");
    			attr_dev(textPath, "font-family", "Verdana");
    			attr_dev(textPath, "font-size", "20");

    			attr_dev(textPath, "fill", textPath_fill_value = /*isSelected*/ ctx[2]
    			? 'blue'
    			: /*item*/ ctx[0].stroke || /*graph*/ ctx[1].theme.edgestroke);

    			attr_dev(textPath, "stroke", textPath_stroke_value = /*isSelected*/ ctx[2]
    			? 'blue'
    			: /*item*/ ctx[0].stroke || /*graph*/ ctx[1].theme.edgestroke);

    			attr_dev(textPath, "class", "svelte-w98d45");
    			add_location(textPath, file$S, 102, 3, 3933);
    			attr_dev(text_1, "font-family", text_1_font_family_value = /*graph*/ ctx[1].theme.font);
    			attr_dev(text_1, "font-size", "20");
    			attr_dev(text_1, "fill", text_1_fill_value = /*item*/ ctx[0].stroke);
    			attr_dev(text_1, "class", "svelte-w98d45");
    			add_location(text_1, file$S, 94, 1, 3598);
    			attr_dev(g, "class", "svelte-w98d45");
    			add_location(g, file$S, 68, 0, 2686);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, path0);
    			append_dev(g, path1);
    			append_dev(g, text_1);
    			append_dev(text_1, textPath);
    			append_dev(textPath, t);
    			if (if_block0) if_block0.m(text_1, null);
    			if (if_block1) if_block1.m(g, null);
    			append_dev(g, if_block1_anchor);
    			if (if_block2) if_block2.m(g, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(path0, "mousedown", stop_propagation(/*mousedown_handler*/ ctx[15]), false, false, true),
    					listen_dev(path0, "mouseup", stop_propagation(/*mouseup_handler*/ ctx[16]), false, false, true),
    					listen_dev(path0, "click", stop_propagation(/*click_handler*/ ctx[14]), false, false, true),
    					listen_dev(textPath, "mousedown", stop_propagation(/*mousedown_handler_1*/ ctx[17]), false, false, true),
    					listen_dev(textPath, "mouseup", stop_propagation(/*mouseup_handler_1*/ ctx[18]), false, false, true),
    					listen_dev(textPath, "click", stop_propagation(/*click_handler_2*/ ctx[13]), false, false, true),
    					listen_dev(text_1, "mousedown", stop_propagation(/*mousedown_handler_3*/ ctx[21]), false, false, true),
    					listen_dev(text_1, "mouseup", stop_propagation(/*mouseup_handler_3*/ ctx[22]), false, false, true),
    					listen_dev(text_1, "click", stop_propagation(/*click_handler_1*/ ctx[11]), false, false, true)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*graph*/ 2 && path0_d_value !== (path0_d_value = /*getEdgePath*/ ctx[7](/*graph*/ ctx[1]))) {
    				attr_dev(path0, "d", path0_d_value);
    			}

    			if (!current || dirty & /*isSelected, item, graph*/ 7 && path0_stroke_value !== (path0_stroke_value = /*isSelected*/ ctx[2]
    			? 'blue'
    			: /*item*/ ctx[0].stroke || /*graph*/ ctx[1].theme.edgestroke)) {
    				attr_dev(path0, "stroke", path0_stroke_value);
    			}

    			if (!current || dirty & /*item*/ 1 && path0_id_value !== (path0_id_value = `edgepathmain${/*item*/ ctx[0].id}`)) {
    				attr_dev(path0, "id", path0_id_value);
    			}

    			if (!current || dirty & /*item, graph*/ 3 && path0_stroke_dasharray_value !== (path0_stroke_dasharray_value = getDashArray(/*item*/ ctx[0].strokeType || /*graph*/ ctx[1].theme.edgestroketype))) {
    				attr_dev(path0, "stroke-dasharray", path0_stroke_dasharray_value);
    			}

    			if (!current || dirty & /*item*/ 1 && path0_marker_end_value !== (path0_marker_end_value = /*item*/ ctx[0].directed && false
    			? "url(#arrow)"
    			: false)) {
    				attr_dev(path0, "marker-end", path0_marker_end_value);
    			}

    			if (!current || dirty & /*graph*/ 2 && path1_d_value !== (path1_d_value = /*getEdgePath*/ ctx[7](/*graph*/ ctx[1]))) {
    				attr_dev(path1, "d", path1_d_value);
    			}

    			if (!current || dirty & /*labelTransform*/ 8) {
    				attr_dev(path1, "transform", /*labelTransform*/ ctx[3]);
    			}

    			if (!current || dirty & /*item*/ 1 && path1_id_value !== (path1_id_value = `edgepath${/*item*/ ctx[0].id}`)) {
    				attr_dev(path1, "id", path1_id_value);
    			}

    			if ((!current || dirty & /*item*/ 1) && t_value !== (t_value = /*item*/ ctx[0].label + "")) set_data_dev(t, t_value);

    			if (!current || dirty & /*item*/ 1 && textPath_href_value !== (textPath_href_value = `#edgepath${/*item*/ ctx[0].id}`)) {
    				attr_dev(textPath, "href", textPath_href_value);
    			}

    			if (!current || dirty & /*isSelected, item, graph*/ 7 && textPath_fill_value !== (textPath_fill_value = /*isSelected*/ ctx[2]
    			? 'blue'
    			: /*item*/ ctx[0].stroke || /*graph*/ ctx[1].theme.edgestroke)) {
    				attr_dev(textPath, "fill", textPath_fill_value);
    			}

    			if (!current || dirty & /*isSelected, item, graph*/ 7 && textPath_stroke_value !== (textPath_stroke_value = /*isSelected*/ ctx[2]
    			? 'blue'
    			: /*item*/ ctx[0].stroke || /*graph*/ ctx[1].theme.edgestroke)) {
    				attr_dev(textPath, "stroke", textPath_stroke_value);
    			}

    			if (/*item*/ ctx[0].directed) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$e(ctx);
    					if_block0.c();
    					if_block0.m(text_1, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (!current || dirty & /*graph*/ 2 && text_1_font_family_value !== (text_1_font_family_value = /*graph*/ ctx[1].theme.font)) {
    				attr_dev(text_1, "font-family", text_1_font_family_value);
    			}

    			if (!current || dirty & /*item*/ 1 && text_1_fill_value !== (text_1_fill_value = /*item*/ ctx[0].stroke)) {
    				attr_dev(text_1, "fill", text_1_fill_value);
    			}

    			if (/*isSelected*/ ctx[2] && /*fromPos*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*isSelected, fromPos*/ 36) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$g(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(g, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*isSelected*/ ctx[2] && /*toPos*/ ctx[4]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*isSelected, toPos*/ 20) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$w(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(g, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$X.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getDashArray(strokeType) {
    	if (strokeType === 'dashed') return '8,5'; else if (strokeType === 'dotted') return '5,5'; else return false;
    }

    function instance$X($$self, $$props, $$invalidate) {
    	let fromNode;
    	let toNode;
    	let fromPos;
    	let toPos;
    	let labelTransform;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Edge', slots, []);
    	const dispatch = createEventDispatcher();
    	let { item } = $$props;
    	let { graph } = $$props;
    	let { isSelected } = $$props;

    	function getEdgePath(graph) {
    		let shape = item.shape || graph.theme.edgeshape;

    		if (shape === 'straight') {
    			return `M ${fromPos.x},${fromPos.y} L ${toPos.x},${toPos.y}`;
    		} else if (shape === 'curved') {
    			let fromControlPoint = {
    				x: fromNode.pos.x + 30,
    				y: fromNode.pos.y + 30
    			};

    			let toControlPoint = {
    				x: toNode.pos.x - 30,
    				y: toNode.pos.y - 30
    			};

    			return [
    				`M ${fromPos.x},${fromPos.y}`,
    				`C`,
    				`${fromControlPoint.x},${fromControlPoint.y}`,
    				`${toControlPoint.x},${toControlPoint.y}`,
    				`${toPos.x},${toPos.y}`
    			].join(' ');
    		} else if (shape === 'ortho') {
    			return `M ${fromPos.x},${fromPos.y} h ${(toPos.x - fromPos.x) / 2} v ${toPos.y - fromPos.y} L ${toPos.x},${toPos.y}`;
    		}
    	}

    	function handleControlClicked(e) {
    		let control = e.target.getAttribute('data-handle');

    		// console.log("handleControlClicked", control)
    		if (control === 'from' && item.fromId) {
    			// detach fromNode
    			delete item.fromId;

    			$$invalidate(0, item.fromOrphan = { pos: { x: fromPos.x, y: fromPos.y } }, item);
    		} else if (control === 'to' && item.toId) {
    			// detach toNode
    			delete item.toId;

    			$$invalidate(0, item.toOrphan = { pos: { x: toPos.x, y: toPos.y } }, item);
    		}

    		dispatch('edgeChanged', { source: item });
    	}

    	//    textpath angle  
    	function getTransformLabel(fromNode, toNode) {
    		let midPointx = (fromNode.pos.x + toNode.pos.x) / 2;
    		let midPointy = (fromNode.pos.y + toNode.pos.y) / 2;
    		let angle = Math.atan2(toNode.pos.y - fromNode.pos.y, toNode.pos.x - fromNode.pos.x) * 180 / Math.PI;
    		if (angle < -120 || angle > 120) return `translate(0, -6) rotate(180, ${midPointx}, ${midPointy})`; else return 'translate(0, -6) rotate(0)';
    	}

    	const writable_props = ['item', 'graph', 'isSelected'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Edge> was created with unknown prop '${key}'`);
    	});

    	function click_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	function click_handler_3(event) {
    		bubble.call(this, $$self, event);
    	}

    	function click_handler_2(event) {
    		bubble.call(this, $$self, event);
    	}

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	const mousedown_handler = e => dispatch('itemMouseDown', { source: item, rawEvent: e });
    	const mouseup_handler = e => dispatch('itemMouseUp', { source: item, rawEvent: e });
    	const mousedown_handler_1 = e => dispatch('itemMouseDown', { source: item, rawEvent: e });
    	const mouseup_handler_1 = e => dispatch('itemMouseUp', { source: item, rawEvent: e });
    	const mousedown_handler_2 = e => dispatch('itemMouseDown', { source: item, rawEvent: e });
    	const mouseup_handler_2 = e => dispatch('itemMouseUp', { source: item, rawEvent: e });
    	const mousedown_handler_3 = e => dispatch('itemMouseDown', { source: item, rawEvent: e });
    	const mouseup_handler_3 = e => dispatch('itemMouseUp', { source: item, rawEvent: e });

    	$$self.$$set = $$props => {
    		if ('item' in $$props) $$invalidate(0, item = $$props.item);
    		if ('graph' in $$props) $$invalidate(1, graph = $$props.graph);
    		if ('isSelected' in $$props) $$invalidate(2, isSelected = $$props.isSelected);
    	};

    	$$self.$capture_state = () => ({
    		ControlPoint,
    		getGraphNode,
    		createEventDispatcher,
    		dispatch,
    		item,
    		graph,
    		isSelected,
    		getEdgePath,
    		handleControlClicked,
    		getDashArray,
    		getTransformLabel,
    		toNode,
    		fromNode,
    		labelTransform,
    		toPos,
    		fromPos
    	});

    	$$self.$inject_state = $$props => {
    		if ('item' in $$props) $$invalidate(0, item = $$props.item);
    		if ('graph' in $$props) $$invalidate(1, graph = $$props.graph);
    		if ('isSelected' in $$props) $$invalidate(2, isSelected = $$props.isSelected);
    		if ('toNode' in $$props) $$invalidate(9, toNode = $$props.toNode);
    		if ('fromNode' in $$props) $$invalidate(10, fromNode = $$props.fromNode);
    		if ('labelTransform' in $$props) $$invalidate(3, labelTransform = $$props.labelTransform);
    		if ('toPos' in $$props) $$invalidate(4, toPos = $$props.toPos);
    		if ('fromPos' in $$props) $$invalidate(5, fromPos = $$props.fromPos);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*item, graph*/ 3) {
    			$$invalidate(10, fromNode = item.fromOrphan || getGraphNode(item.fromId, graph));
    		}

    		if ($$self.$$.dirty & /*item, graph*/ 3) {
    			$$invalidate(9, toNode = item.toOrphan || getGraphNode(item.toId, graph));
    		}

    		if ($$self.$$.dirty & /*fromNode*/ 1024) {
    			$$invalidate(5, fromPos = { x: fromNode.pos.x, y: fromNode.pos.y });
    		}

    		if ($$self.$$.dirty & /*toNode*/ 512) {
    			$$invalidate(4, toPos = { x: toNode.pos.x, y: toNode.pos.y });
    		}

    		if ($$self.$$.dirty & /*fromNode, toNode*/ 1536) {
    			$$invalidate(3, labelTransform = fromNode && toNode && getTransformLabel(fromNode, toNode));
    		}
    	};

    	return [
    		item,
    		graph,
    		isSelected,
    		labelTransform,
    		toPos,
    		fromPos,
    		dispatch,
    		getEdgePath,
    		handleControlClicked,
    		toNode,
    		fromNode,
    		click_handler_1,
    		click_handler_3,
    		click_handler_2,
    		click_handler,
    		mousedown_handler,
    		mouseup_handler,
    		mousedown_handler_1,
    		mouseup_handler_1,
    		mousedown_handler_2,
    		mouseup_handler_2,
    		mousedown_handler_3,
    		mouseup_handler_3
    	];
    }

    class Edge extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$X, create_fragment$X, safe_not_equal, { item: 0, graph: 1, isSelected: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Edge",
    			options,
    			id: create_fragment$X.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[0] === undefined && !('item' in props)) {
    			console.warn("<Edge> was created without expected prop 'item'");
    		}

    		if (/*graph*/ ctx[1] === undefined && !('graph' in props)) {
    			console.warn("<Edge> was created without expected prop 'graph'");
    		}

    		if (/*isSelected*/ ctx[2] === undefined && !('isSelected' in props)) {
    			console.warn("<Edge> was created without expected prop 'isSelected'");
    		}
    	}

    	get item() {
    		throw new Error("<Edge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Edge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get graph() {
    		throw new Error("<Edge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set graph(value) {
    		throw new Error("<Edge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isSelected() {
    		throw new Error("<Edge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isSelected(value) {
    		throw new Error("<Edge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Grid.svelte generated by Svelte v3.48.0 */

    const file$R = "src/Grid.svelte";

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    function get_each_context$i(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (16:27) 
    function create_if_block_1$f(ctx) {
    	let t;
    	let each1_anchor;
    	let each_value_2 = /*stops*/ ctx[1];
    	validate_each_argument(each_value_2);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_1[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
    	}

    	let each_value_1 = /*anglestops*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stops*/ 2) {
    				each_value_2 = /*stops*/ ctx[1];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_2$2(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(t.parentNode, t);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_2.length;
    			}

    			if (dirty & /*Math, anglestops*/ 4) {
    				each_value_1 = /*anglestops*/ ctx[2];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each1_anchor.parentNode, each1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks_1, detaching);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$f.name,
    		type: "if",
    		source: "(16:27) ",
    		ctx
    	});

    	return block;
    }

    // (8:0) {#if kind === 'cartesian'}
    function create_if_block$v(ctx) {
    	let each_1_anchor;
    	let each_value = /*stops*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$i(get_each_context$i(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stops*/ 2) {
    				each_value = /*stops*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$i(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$i(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$v.name,
    		type: "if",
    		source: "(8:0) {#if kind === 'cartesian'}",
    		ctx
    	});

    	return block;
    }

    // (17:1) {#each stops as stop}
    function create_each_block_2$2(ctx) {
    	let circle;

    	const block = {
    		c: function create() {
    			circle = svg_element("circle");
    			attr_dev(circle, "r", 100 + /*stop*/ ctx[3]);
    			attr_dev(circle, "stroke", "black");
    			attr_dev(circle, "fill", "none");
    			attr_dev(circle, "opacity", "0.6");
    			add_location(circle, file$R, 18, 2, 496);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, circle, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(circle);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$2.name,
    		type: "each",
    		source: "(17:1) {#each stops as stop}",
    		ctx
    	});

    	return block;
    }

    // (22:1) {#each anglestops as angle}
    function create_each_block_1$2(ctx) {
    	let line;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			attr_dev(line, "x1", -5000 * Math.cos(/*angle*/ ctx[6]));
    			attr_dev(line, "y1", -5000 * Math.sin(/*angle*/ ctx[6]));
    			attr_dev(line, "x2", 5000 * Math.cos(/*angle*/ ctx[6]));
    			attr_dev(line, "y2", 5000 * Math.sin(/*angle*/ ctx[6]));
    			attr_dev(line, "class", "svelte-19wjlzj");
    			add_location(line, file$R, 23, 2, 658);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(22:1) {#each anglestops as angle}",
    		ctx
    	});

    	return block;
    }

    // (9:1) {#each stops as stop}
    function create_each_block$i(ctx) {
    	let line0;
    	let t;
    	let line1;

    	const block = {
    		c: function create() {
    			line0 = svg_element("line");
    			t = space();
    			line1 = svg_element("line");
    			attr_dev(line0, "x1", "0");
    			attr_dev(line0, "y1", 0 + /*stop*/ ctx[3]);
    			attr_dev(line0, "x2", 5000);
    			attr_dev(line0, "y2", 0 + /*stop*/ ctx[3]);
    			attr_dev(line0, "class", "svelte-19wjlzj");
    			add_location(line0, file$R, 10, 2, 244);
    			attr_dev(line1, "x1", 0 + /*stop*/ ctx[3]);
    			attr_dev(line1, "y1", "0");
    			attr_dev(line1, "x2", 0 + /*stop*/ ctx[3]);
    			attr_dev(line1, "y2", "5000");
    			attr_dev(line1, "class", "svelte-19wjlzj");
    			add_location(line1, file$R, 13, 2, 328);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, line1, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(line1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$i.name,
    		type: "each",
    		source: "(9:1) {#each stops as stop}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$W(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*kind*/ ctx[0] === 'cartesian') return create_if_block$v;
    		if (/*kind*/ ctx[0] === 'polar') return create_if_block_1$f;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (if_block) {
    				if_block.d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$W.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$W($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Grid', slots, []);
    	let stops = [...Array(50).keys()].map(x => x * 100);
    	let anglestops = [0, 30, 60, 90, 120, 150].map(x => x * Math.PI / 180.0);
    	let { kind } = $$props;
    	const writable_props = ['kind'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Grid> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('kind' in $$props) $$invalidate(0, kind = $$props.kind);
    	};

    	$$self.$capture_state = () => ({ stops, anglestops, kind });

    	$$self.$inject_state = $$props => {
    		if ('stops' in $$props) $$invalidate(1, stops = $$props.stops);
    		if ('anglestops' in $$props) $$invalidate(2, anglestops = $$props.anglestops);
    		if ('kind' in $$props) $$invalidate(0, kind = $$props.kind);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [kind, stops, anglestops];
    }

    class Grid extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$W, create_fragment$W, safe_not_equal, { kind: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Grid",
    			options,
    			id: create_fragment$W.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*kind*/ ctx[0] === undefined && !('kind' in props)) {
    			console.warn("<Grid> was created without expected prop 'kind'");
    		}
    	}

    	get kind() {
    		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set kind(value) {
    		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * Create a lightweight debug function to log output into the browser console.
     *
     * Inspired by https://github.com/visionmedia/debug (some code is copied below)
     *
     * Usage:
     *
     *     import { createDebug } from './debug.js'
     *
     *     const debug = createDebug('my:namespace')
     *
     *     debug('testing:', 2 + 2)
     *
     * By default, logging is only enabled when a property DEBUG is set in the
     * localStorage of your browser:
     *
     *     localStorage['debug'] = '*'
     *
     * The actual value of 'debug' is not used. You can choose other conditions to
     * enable/disable debugging if you want, for example some flag determining
     * whether in development or production.
     */
    function createDebug(namespace, enabled = !!tryReadLocalStorage('debug')) {
        if (enabled) {
            const color = selectColor(namespace);
            return function debug(...args) {
                console.log(`%c${namespace}`, `color:${color}`, ...args);
            };
        }
        else {
            return noop$2;
        }
    }
    function noop$2() {
        // no operation
    }
    /**
     * Try read a specific key from localStorage
     */
    function tryReadLocalStorage(key) {
        try {
            if (typeof window !== 'undefined' && typeof window.localStorage !== 'undefined') {
                // reading local storage can fail for example because of security restrictions
                return window.localStorage[key];
            }
        }
        catch (error) {
            // we do nothing with the error, not needed in this specific case
        }
    }
    /**
     * Selects a color for a debug namespace
     *
     * Code is copied from the following source: https://github.com/visionmedia/debug
     *
     * @param namespace The namespace string for the debug instance to be colored
     * @return An ANSI color code for the given namespace
     */
    function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return colors[Math.abs(hash) % colors.length];
    }
    const colors = [
        '#0000CC',
        '#0099FF',
        '#009400',
        '#8dd200',
        '#CCCC00',
        '#CC9933',
        '#ae04e7',
        '#ff35d7',
        '#FF3333',
        '#FF6600',
        '#FF9933',
        '#FFCC33'
    ];

    function fade(node, { delay = 0, duration = 400, easing = identity$3 } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }

    /* node_modules/svelte-simple-modal/src/Modal.svelte generated by Svelte v3.48.0 */

    const { Object: Object_1$6, window: window_1$2 } = globals;
    const file$Q = "node_modules/svelte-simple-modal/src/Modal.svelte";

    // (423:0) {#if Component}
    function create_if_block$u(ctx) {
    	let div3;
    	let div2;
    	let div1;
    	let t;
    	let div0;
    	let switch_instance;
    	let div0_class_value;
    	let div1_class_value;
    	let div1_aria_label_value;
    	let div1_aria_labelledby_value;
    	let div1_transition;
    	let div2_class_value;
    	let div3_class_value;
    	let div3_transition;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*state*/ ctx[1].closeButton && create_if_block_1$e(ctx);
    	var switch_value = /*Component*/ ctx[2];

    	function switch_props(ctx) {
    		return { $$inline: true };
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t = space();
    			div0 = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div0, "class", div0_class_value = "" + (null_to_empty(/*state*/ ctx[1].classContent) + " svelte-g4wg3a"));
    			attr_dev(div0, "style", /*cssContent*/ ctx[9]);
    			toggle_class(div0, "content", !/*unstyled*/ ctx[0]);
    			add_location(div0, file$Q, 466, 8, 11854);
    			attr_dev(div1, "class", div1_class_value = "" + (null_to_empty(/*state*/ ctx[1].classWindow) + " svelte-g4wg3a"));
    			attr_dev(div1, "role", "dialog");
    			attr_dev(div1, "aria-modal", "true");

    			attr_dev(div1, "aria-label", div1_aria_label_value = /*state*/ ctx[1].ariaLabelledBy
    			? null
    			: /*state*/ ctx[1].ariaLabel || null);

    			attr_dev(div1, "aria-labelledby", div1_aria_labelledby_value = /*state*/ ctx[1].ariaLabelledBy || null);
    			attr_dev(div1, "style", /*cssWindow*/ ctx[8]);
    			toggle_class(div1, "window", !/*unstyled*/ ctx[0]);
    			add_location(div1, file$Q, 438, 6, 10907);
    			attr_dev(div2, "class", div2_class_value = "" + (null_to_empty(/*state*/ ctx[1].classWindowWrap) + " svelte-g4wg3a"));
    			attr_dev(div2, "style", /*cssWindowWrap*/ ctx[7]);
    			toggle_class(div2, "wrap", !/*unstyled*/ ctx[0]);
    			add_location(div2, file$Q, 432, 4, 10774);
    			attr_dev(div3, "class", div3_class_value = "" + (null_to_empty(/*state*/ ctx[1].classBg) + " svelte-g4wg3a"));
    			attr_dev(div3, "style", /*cssBg*/ ctx[6]);
    			toggle_class(div3, "bg", !/*unstyled*/ ctx[0]);
    			add_location(div3, file$Q, 423, 2, 10528);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t);
    			append_dev(div1, div0);

    			if (switch_instance) {
    				mount_component(switch_instance, div0, null);
    			}

    			/*div1_binding*/ ctx[49](div1);
    			/*div2_binding*/ ctx[50](div2);
    			/*div3_binding*/ ctx[51](div3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						div1,
    						"introstart",
    						function () {
    							if (is_function(/*onOpen*/ ctx[13])) /*onOpen*/ ctx[13].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						div1,
    						"outrostart",
    						function () {
    							if (is_function(/*onClose*/ ctx[14])) /*onClose*/ ctx[14].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						div1,
    						"introend",
    						function () {
    							if (is_function(/*onOpened*/ ctx[15])) /*onOpened*/ ctx[15].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						div1,
    						"outroend",
    						function () {
    							if (is_function(/*onClosed*/ ctx[16])) /*onClosed*/ ctx[16].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(div3, "mousedown", /*handleOuterMousedown*/ ctx[20], false, false, false),
    					listen_dev(div3, "mouseup", /*handleOuterMouseup*/ ctx[21], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*state*/ ctx[1].closeButton) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*state*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$e(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (switch_value !== (switch_value = /*Component*/ ctx[2])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div0, null);
    				} else {
    					switch_instance = null;
    				}
    			}

    			if (!current || dirty[0] & /*state*/ 2 && div0_class_value !== (div0_class_value = "" + (null_to_empty(/*state*/ ctx[1].classContent) + " svelte-g4wg3a"))) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (!current || dirty[0] & /*cssContent*/ 512) {
    				attr_dev(div0, "style", /*cssContent*/ ctx[9]);
    			}

    			if (dirty[0] & /*state, unstyled*/ 3) {
    				toggle_class(div0, "content", !/*unstyled*/ ctx[0]);
    			}

    			if (!current || dirty[0] & /*state*/ 2 && div1_class_value !== (div1_class_value = "" + (null_to_empty(/*state*/ ctx[1].classWindow) + " svelte-g4wg3a"))) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (!current || dirty[0] & /*state*/ 2 && div1_aria_label_value !== (div1_aria_label_value = /*state*/ ctx[1].ariaLabelledBy
    			? null
    			: /*state*/ ctx[1].ariaLabel || null)) {
    				attr_dev(div1, "aria-label", div1_aria_label_value);
    			}

    			if (!current || dirty[0] & /*state*/ 2 && div1_aria_labelledby_value !== (div1_aria_labelledby_value = /*state*/ ctx[1].ariaLabelledBy || null)) {
    				attr_dev(div1, "aria-labelledby", div1_aria_labelledby_value);
    			}

    			if (!current || dirty[0] & /*cssWindow*/ 256) {
    				attr_dev(div1, "style", /*cssWindow*/ ctx[8]);
    			}

    			if (dirty[0] & /*state, unstyled*/ 3) {
    				toggle_class(div1, "window", !/*unstyled*/ ctx[0]);
    			}

    			if (!current || dirty[0] & /*state*/ 2 && div2_class_value !== (div2_class_value = "" + (null_to_empty(/*state*/ ctx[1].classWindowWrap) + " svelte-g4wg3a"))) {
    				attr_dev(div2, "class", div2_class_value);
    			}

    			if (!current || dirty[0] & /*cssWindowWrap*/ 128) {
    				attr_dev(div2, "style", /*cssWindowWrap*/ ctx[7]);
    			}

    			if (dirty[0] & /*state, unstyled*/ 3) {
    				toggle_class(div2, "wrap", !/*unstyled*/ ctx[0]);
    			}

    			if (!current || dirty[0] & /*state*/ 2 && div3_class_value !== (div3_class_value = "" + (null_to_empty(/*state*/ ctx[1].classBg) + " svelte-g4wg3a"))) {
    				attr_dev(div3, "class", div3_class_value);
    			}

    			if (!current || dirty[0] & /*cssBg*/ 64) {
    				attr_dev(div3, "style", /*cssBg*/ ctx[6]);
    			}

    			if (dirty[0] & /*state, unstyled*/ 3) {
    				toggle_class(div3, "bg", !/*unstyled*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, /*currentTransitionWindow*/ ctx[12], /*state*/ ctx[1].transitionWindowProps, true);
    				div1_transition.run(1);
    			});

    			add_render_callback(() => {
    				if (!div3_transition) div3_transition = create_bidirectional_transition(div3, /*currentTransitionBg*/ ctx[11], /*state*/ ctx[1].transitionBgProps, true);
    				div3_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, /*currentTransitionWindow*/ ctx[12], /*state*/ ctx[1].transitionWindowProps, false);
    			div1_transition.run(0);
    			if (!div3_transition) div3_transition = create_bidirectional_transition(div3, /*currentTransitionBg*/ ctx[11], /*state*/ ctx[1].transitionBgProps, false);
    			div3_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (if_block) if_block.d();
    			if (switch_instance) destroy_component(switch_instance);
    			/*div1_binding*/ ctx[49](null);
    			if (detaching && div1_transition) div1_transition.end();
    			/*div2_binding*/ ctx[50](null);
    			/*div3_binding*/ ctx[51](null);
    			if (detaching && div3_transition) div3_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$u.name,
    		type: "if",
    		source: "(423:0) {#if Component}",
    		ctx
    	});

    	return block;
    }

    // (454:8) {#if state.closeButton}
    function create_if_block_1$e(ctx) {
    	let show_if;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_2$d, create_else_block$g];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (dirty[0] & /*state*/ 2) show_if = null;
    		if (show_if == null) show_if = !!/*isFunction*/ ctx[17](/*state*/ ctx[1].closeButton);
    		if (show_if) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx, [-1, -1, -1]);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$e.name,
    		type: "if",
    		source: "(454:8) {#if state.closeButton}",
    		ctx
    	});

    	return block;
    }

    // (457:10) {:else}
    function create_else_block$g(ctx) {
    	let button;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "class", button_class_value = "" + (null_to_empty(/*state*/ ctx[1].classCloseButton) + " svelte-g4wg3a"));
    			attr_dev(button, "aria-label", "Close modal");
    			attr_dev(button, "style", /*cssCloseButton*/ ctx[10]);
    			toggle_class(button, "close", !/*unstyled*/ ctx[0]);
    			add_location(button, file$Q, 457, 12, 11603);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*close*/ ctx[18], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*state*/ 2 && button_class_value !== (button_class_value = "" + (null_to_empty(/*state*/ ctx[1].classCloseButton) + " svelte-g4wg3a"))) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (dirty[0] & /*cssCloseButton*/ 1024) {
    				attr_dev(button, "style", /*cssCloseButton*/ ctx[10]);
    			}

    			if (dirty[0] & /*state, unstyled*/ 3) {
    				toggle_class(button, "close", !/*unstyled*/ ctx[0]);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$g.name,
    		type: "else",
    		source: "(457:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (455:10) {#if isFunction(state.closeButton)}
    function create_if_block_2$d(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*state*/ ctx[1].closeButton;

    	function switch_props(ctx) {
    		return {
    			props: { onClose: /*close*/ ctx[18] },
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (switch_value !== (switch_value = /*state*/ ctx[1].closeButton)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$d.name,
    		type: "if",
    		source: "(455:10) {#if isFunction(state.closeButton)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$V(ctx) {
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*Component*/ ctx[2] && create_if_block$u(ctx);
    	const default_slot_template = /*#slots*/ ctx[48].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[47], null);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t = space();
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(window_1$2, "keydown", /*handleKeydown*/ ctx[19], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*Component*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*Component*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$u(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t.parentNode, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 65536)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[47],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[47])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[47], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$V.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function bind(Component, props = {}) {
    	return function ModalComponent(options) {
    		return new Component({
    				...options,
    				props: { ...props, ...options.props }
    			});
    	};
    }

    function instance$V($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Modal', slots, ['default']);
    	const dispatch = createEventDispatcher();
    	const baseSetContext = setContext;

    	/**
     * A basic function that checks if a node is tabbale
     */
    	const baseIsTabbable = node => node.tabIndex >= 0 && !node.hidden && !node.disabled && node.style.display !== 'none' && node.type !== 'hidden' && Boolean(node.offsetWidth || node.offsetHeight || node.getClientRects().length);

    	let { isTabbable = baseIsTabbable } = $$props;
    	let { show = null } = $$props;
    	let { key = 'simple-modal' } = $$props;
    	let { ariaLabel = null } = $$props;
    	let { ariaLabelledBy = null } = $$props;
    	let { closeButton = true } = $$props;
    	let { closeOnEsc = true } = $$props;
    	let { closeOnOuterClick = true } = $$props;
    	let { styleBg = {} } = $$props;
    	let { styleWindowWrap = {} } = $$props;
    	let { styleWindow = {} } = $$props;
    	let { styleContent = {} } = $$props;
    	let { styleCloseButton = {} } = $$props;
    	let { classBg = null } = $$props;
    	let { classWindowWrap = null } = $$props;
    	let { classWindow = null } = $$props;
    	let { classContent = null } = $$props;
    	let { classCloseButton = null } = $$props;
    	let { unstyled = false } = $$props;
    	let { setContext: setContext$1 = baseSetContext } = $$props;
    	let { transitionBg = fade } = $$props;
    	let { transitionBgProps = { duration: 250 } } = $$props;
    	let { transitionWindow = transitionBg } = $$props;
    	let { transitionWindowProps = transitionBgProps } = $$props;
    	let { disableFocusTrap = false } = $$props;

    	const defaultState = {
    		ariaLabel,
    		ariaLabelledBy,
    		closeButton,
    		closeOnEsc,
    		closeOnOuterClick,
    		styleBg,
    		styleWindowWrap,
    		styleWindow,
    		styleContent,
    		styleCloseButton,
    		classBg,
    		classWindowWrap,
    		classWindow,
    		classContent,
    		classCloseButton,
    		transitionBg,
    		transitionBgProps,
    		transitionWindow,
    		transitionWindowProps,
    		disableFocusTrap,
    		isTabbable,
    		unstyled
    	};

    	let state = { ...defaultState };
    	let Component = null;
    	let background;
    	let wrap;
    	let modalWindow;
    	let scrollY;
    	let cssBg;
    	let cssWindowWrap;
    	let cssWindow;
    	let cssContent;
    	let cssCloseButton;
    	let currentTransitionBg;
    	let currentTransitionWindow;
    	let prevBodyPosition;
    	let prevBodyOverflow;
    	let prevBodyWidth;
    	let outerClickTarget;
    	const camelCaseToDash = str => str.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();

    	const toCssString = props => props
    	? Object.keys(props).reduce((str, key) => `${str}; ${camelCaseToDash(key)}: ${props[key]}`, '')
    	: '';

    	const isFunction = f => !!(f && f.constructor && f.call && f.apply);

    	const updateStyleTransition = () => {
    		$$invalidate(6, cssBg = toCssString(Object.assign(
    			{},
    			{
    				width: window.innerWidth,
    				height: window.innerHeight
    			},
    			state.styleBg
    		)));

    		$$invalidate(7, cssWindowWrap = toCssString(state.styleWindowWrap));
    		$$invalidate(8, cssWindow = toCssString(state.styleWindow));
    		$$invalidate(9, cssContent = toCssString(state.styleContent));
    		$$invalidate(10, cssCloseButton = toCssString(state.styleCloseButton));
    		$$invalidate(11, currentTransitionBg = state.transitionBg);
    		$$invalidate(12, currentTransitionWindow = state.transitionWindow);
    	};

    	const toVoid = () => {
    		
    	};

    	let onOpen = toVoid;
    	let onClose = toVoid;
    	let onOpened = toVoid;
    	let onClosed = toVoid;

    	const open = (NewComponent, newProps = {}, options = {}, callback = {}) => {
    		$$invalidate(2, Component = bind(NewComponent, newProps));
    		$$invalidate(1, state = { ...defaultState, ...options });
    		updateStyleTransition();
    		disableScroll();

    		$$invalidate(13, onOpen = event => {
    			if (callback.onOpen) callback.onOpen(event);

    			/**
     * The open event is fired right before the modal opens
     * @event {void} open
     */
    			dispatch('open');

    			/**
     * The opening event is fired right before the modal opens
     * @event {void} opening
     * @deprecated Listen to the `open` event instead
     */
    			dispatch('opening'); // Deprecated. Do not use!
    		});

    		$$invalidate(14, onClose = event => {
    			if (callback.onClose) callback.onClose(event);

    			/**
     * The close event is fired right before the modal closes
     * @event {void} close
     */
    			dispatch('close');

    			/**
     * The closing event is fired right before the modal closes
     * @event {void} closing
     * @deprecated Listen to the `close` event instead
     */
    			dispatch('closing'); // Deprecated. Do not use!
    		});

    		$$invalidate(15, onOpened = event => {
    			if (callback.onOpened) callback.onOpened(event);

    			/**
     * The opened event is fired after the modal's opening transition
     * @event {void} opened
     */
    			dispatch('opened');
    		});

    		$$invalidate(16, onClosed = event => {
    			if (callback.onClosed) callback.onClosed(event);

    			/**
     * The closed event is fired after the modal's closing transition
     * @event {void} closed
     */
    			dispatch('closed');
    		});
    	};

    	const close = (callback = {}) => {
    		if (!Component) return;
    		$$invalidate(14, onClose = callback.onClose || onClose);
    		$$invalidate(16, onClosed = callback.onClosed || onClosed);
    		$$invalidate(2, Component = null);
    		enableScroll();
    	};

    	const handleKeydown = event => {
    		if (state.closeOnEsc && Component && event.key === 'Escape') {
    			event.preventDefault();
    			close();
    		}

    		if (Component && event.key === 'Tab' && !state.disableFocusTrap) {
    			// trap focus
    			const nodes = modalWindow.querySelectorAll('*');

    			const tabbable = Array.from(nodes).filter(state.isTabbable).sort((a, b) => a.tabIndex - b.tabIndex);
    			let index = tabbable.indexOf(document.activeElement);
    			if (index === -1 && event.shiftKey) index = 0;
    			index += tabbable.length + (event.shiftKey ? -1 : 1);
    			index %= tabbable.length;
    			tabbable[index].focus();
    			event.preventDefault();
    		}
    	};

    	const handleOuterMousedown = event => {
    		if (state.closeOnOuterClick && (event.target === background || event.target === wrap)) outerClickTarget = event.target;
    	};

    	const handleOuterMouseup = event => {
    		if (state.closeOnOuterClick && event.target === outerClickTarget) {
    			event.preventDefault();
    			close();
    		}
    	};

    	const disableScroll = () => {
    		scrollY = window.scrollY;
    		prevBodyPosition = document.body.style.position;
    		prevBodyOverflow = document.body.style.overflow;
    		prevBodyWidth = document.body.style.width;
    		document.body.style.position = 'fixed';
    		document.body.style.top = `-${scrollY}px`;
    		document.body.style.overflow = 'hidden';
    		document.body.style.width = '100%';
    	};

    	const enableScroll = () => {
    		document.body.style.position = prevBodyPosition || '';
    		document.body.style.top = '';
    		document.body.style.overflow = prevBodyOverflow || '';
    		document.body.style.width = prevBodyWidth || '';
    		window.scrollTo(0, scrollY);
    	};

    	setContext$1(key, { open, close });
    	let isMounted = false;

    	onDestroy(() => {
    		if (isMounted) close();
    	});

    	onMount(() => {
    		$$invalidate(46, isMounted = true);
    	});

    	const writable_props = [
    		'isTabbable',
    		'show',
    		'key',
    		'ariaLabel',
    		'ariaLabelledBy',
    		'closeButton',
    		'closeOnEsc',
    		'closeOnOuterClick',
    		'styleBg',
    		'styleWindowWrap',
    		'styleWindow',
    		'styleContent',
    		'styleCloseButton',
    		'classBg',
    		'classWindowWrap',
    		'classWindow',
    		'classContent',
    		'classCloseButton',
    		'unstyled',
    		'setContext',
    		'transitionBg',
    		'transitionBgProps',
    		'transitionWindow',
    		'transitionWindowProps',
    		'disableFocusTrap'
    	];

    	Object_1$6.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Modal> was created with unknown prop '${key}'`);
    	});

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			modalWindow = $$value;
    			$$invalidate(5, modalWindow);
    		});
    	}

    	function div2_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			wrap = $$value;
    			$$invalidate(4, wrap);
    		});
    	}

    	function div3_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			background = $$value;
    			$$invalidate(3, background);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('isTabbable' in $$props) $$invalidate(22, isTabbable = $$props.isTabbable);
    		if ('show' in $$props) $$invalidate(23, show = $$props.show);
    		if ('key' in $$props) $$invalidate(24, key = $$props.key);
    		if ('ariaLabel' in $$props) $$invalidate(25, ariaLabel = $$props.ariaLabel);
    		if ('ariaLabelledBy' in $$props) $$invalidate(26, ariaLabelledBy = $$props.ariaLabelledBy);
    		if ('closeButton' in $$props) $$invalidate(27, closeButton = $$props.closeButton);
    		if ('closeOnEsc' in $$props) $$invalidate(28, closeOnEsc = $$props.closeOnEsc);
    		if ('closeOnOuterClick' in $$props) $$invalidate(29, closeOnOuterClick = $$props.closeOnOuterClick);
    		if ('styleBg' in $$props) $$invalidate(30, styleBg = $$props.styleBg);
    		if ('styleWindowWrap' in $$props) $$invalidate(31, styleWindowWrap = $$props.styleWindowWrap);
    		if ('styleWindow' in $$props) $$invalidate(32, styleWindow = $$props.styleWindow);
    		if ('styleContent' in $$props) $$invalidate(33, styleContent = $$props.styleContent);
    		if ('styleCloseButton' in $$props) $$invalidate(34, styleCloseButton = $$props.styleCloseButton);
    		if ('classBg' in $$props) $$invalidate(35, classBg = $$props.classBg);
    		if ('classWindowWrap' in $$props) $$invalidate(36, classWindowWrap = $$props.classWindowWrap);
    		if ('classWindow' in $$props) $$invalidate(37, classWindow = $$props.classWindow);
    		if ('classContent' in $$props) $$invalidate(38, classContent = $$props.classContent);
    		if ('classCloseButton' in $$props) $$invalidate(39, classCloseButton = $$props.classCloseButton);
    		if ('unstyled' in $$props) $$invalidate(0, unstyled = $$props.unstyled);
    		if ('setContext' in $$props) $$invalidate(40, setContext$1 = $$props.setContext);
    		if ('transitionBg' in $$props) $$invalidate(41, transitionBg = $$props.transitionBg);
    		if ('transitionBgProps' in $$props) $$invalidate(42, transitionBgProps = $$props.transitionBgProps);
    		if ('transitionWindow' in $$props) $$invalidate(43, transitionWindow = $$props.transitionWindow);
    		if ('transitionWindowProps' in $$props) $$invalidate(44, transitionWindowProps = $$props.transitionWindowProps);
    		if ('disableFocusTrap' in $$props) $$invalidate(45, disableFocusTrap = $$props.disableFocusTrap);
    		if ('$$scope' in $$props) $$invalidate(47, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		bind,
    		svelte,
    		fade,
    		createEventDispatcher,
    		dispatch,
    		baseSetContext,
    		baseIsTabbable,
    		isTabbable,
    		show,
    		key,
    		ariaLabel,
    		ariaLabelledBy,
    		closeButton,
    		closeOnEsc,
    		closeOnOuterClick,
    		styleBg,
    		styleWindowWrap,
    		styleWindow,
    		styleContent,
    		styleCloseButton,
    		classBg,
    		classWindowWrap,
    		classWindow,
    		classContent,
    		classCloseButton,
    		unstyled,
    		setContext: setContext$1,
    		transitionBg,
    		transitionBgProps,
    		transitionWindow,
    		transitionWindowProps,
    		disableFocusTrap,
    		defaultState,
    		state,
    		Component,
    		background,
    		wrap,
    		modalWindow,
    		scrollY,
    		cssBg,
    		cssWindowWrap,
    		cssWindow,
    		cssContent,
    		cssCloseButton,
    		currentTransitionBg,
    		currentTransitionWindow,
    		prevBodyPosition,
    		prevBodyOverflow,
    		prevBodyWidth,
    		outerClickTarget,
    		camelCaseToDash,
    		toCssString,
    		isFunction,
    		updateStyleTransition,
    		toVoid,
    		onOpen,
    		onClose,
    		onOpened,
    		onClosed,
    		open,
    		close,
    		handleKeydown,
    		handleOuterMousedown,
    		handleOuterMouseup,
    		disableScroll,
    		enableScroll,
    		isMounted
    	});

    	$$self.$inject_state = $$props => {
    		if ('isTabbable' in $$props) $$invalidate(22, isTabbable = $$props.isTabbable);
    		if ('show' in $$props) $$invalidate(23, show = $$props.show);
    		if ('key' in $$props) $$invalidate(24, key = $$props.key);
    		if ('ariaLabel' in $$props) $$invalidate(25, ariaLabel = $$props.ariaLabel);
    		if ('ariaLabelledBy' in $$props) $$invalidate(26, ariaLabelledBy = $$props.ariaLabelledBy);
    		if ('closeButton' in $$props) $$invalidate(27, closeButton = $$props.closeButton);
    		if ('closeOnEsc' in $$props) $$invalidate(28, closeOnEsc = $$props.closeOnEsc);
    		if ('closeOnOuterClick' in $$props) $$invalidate(29, closeOnOuterClick = $$props.closeOnOuterClick);
    		if ('styleBg' in $$props) $$invalidate(30, styleBg = $$props.styleBg);
    		if ('styleWindowWrap' in $$props) $$invalidate(31, styleWindowWrap = $$props.styleWindowWrap);
    		if ('styleWindow' in $$props) $$invalidate(32, styleWindow = $$props.styleWindow);
    		if ('styleContent' in $$props) $$invalidate(33, styleContent = $$props.styleContent);
    		if ('styleCloseButton' in $$props) $$invalidate(34, styleCloseButton = $$props.styleCloseButton);
    		if ('classBg' in $$props) $$invalidate(35, classBg = $$props.classBg);
    		if ('classWindowWrap' in $$props) $$invalidate(36, classWindowWrap = $$props.classWindowWrap);
    		if ('classWindow' in $$props) $$invalidate(37, classWindow = $$props.classWindow);
    		if ('classContent' in $$props) $$invalidate(38, classContent = $$props.classContent);
    		if ('classCloseButton' in $$props) $$invalidate(39, classCloseButton = $$props.classCloseButton);
    		if ('unstyled' in $$props) $$invalidate(0, unstyled = $$props.unstyled);
    		if ('setContext' in $$props) $$invalidate(40, setContext$1 = $$props.setContext);
    		if ('transitionBg' in $$props) $$invalidate(41, transitionBg = $$props.transitionBg);
    		if ('transitionBgProps' in $$props) $$invalidate(42, transitionBgProps = $$props.transitionBgProps);
    		if ('transitionWindow' in $$props) $$invalidate(43, transitionWindow = $$props.transitionWindow);
    		if ('transitionWindowProps' in $$props) $$invalidate(44, transitionWindowProps = $$props.transitionWindowProps);
    		if ('disableFocusTrap' in $$props) $$invalidate(45, disableFocusTrap = $$props.disableFocusTrap);
    		if ('state' in $$props) $$invalidate(1, state = $$props.state);
    		if ('Component' in $$props) $$invalidate(2, Component = $$props.Component);
    		if ('background' in $$props) $$invalidate(3, background = $$props.background);
    		if ('wrap' in $$props) $$invalidate(4, wrap = $$props.wrap);
    		if ('modalWindow' in $$props) $$invalidate(5, modalWindow = $$props.modalWindow);
    		if ('scrollY' in $$props) scrollY = $$props.scrollY;
    		if ('cssBg' in $$props) $$invalidate(6, cssBg = $$props.cssBg);
    		if ('cssWindowWrap' in $$props) $$invalidate(7, cssWindowWrap = $$props.cssWindowWrap);
    		if ('cssWindow' in $$props) $$invalidate(8, cssWindow = $$props.cssWindow);
    		if ('cssContent' in $$props) $$invalidate(9, cssContent = $$props.cssContent);
    		if ('cssCloseButton' in $$props) $$invalidate(10, cssCloseButton = $$props.cssCloseButton);
    		if ('currentTransitionBg' in $$props) $$invalidate(11, currentTransitionBg = $$props.currentTransitionBg);
    		if ('currentTransitionWindow' in $$props) $$invalidate(12, currentTransitionWindow = $$props.currentTransitionWindow);
    		if ('prevBodyPosition' in $$props) prevBodyPosition = $$props.prevBodyPosition;
    		if ('prevBodyOverflow' in $$props) prevBodyOverflow = $$props.prevBodyOverflow;
    		if ('prevBodyWidth' in $$props) prevBodyWidth = $$props.prevBodyWidth;
    		if ('outerClickTarget' in $$props) outerClickTarget = $$props.outerClickTarget;
    		if ('onOpen' in $$props) $$invalidate(13, onOpen = $$props.onOpen);
    		if ('onClose' in $$props) $$invalidate(14, onClose = $$props.onClose);
    		if ('onOpened' in $$props) $$invalidate(15, onOpened = $$props.onOpened);
    		if ('onClosed' in $$props) $$invalidate(16, onClosed = $$props.onClosed);
    		if ('isMounted' in $$props) $$invalidate(46, isMounted = $$props.isMounted);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*show*/ 8388608 | $$self.$$.dirty[1] & /*isMounted*/ 32768) {
    			{
    				if (isMounted) {
    					if (isFunction(show)) {
    						open(show);
    					} else {
    						close();
    					}
    				}
    			}
    		}
    	};

    	return [
    		unstyled,
    		state,
    		Component,
    		background,
    		wrap,
    		modalWindow,
    		cssBg,
    		cssWindowWrap,
    		cssWindow,
    		cssContent,
    		cssCloseButton,
    		currentTransitionBg,
    		currentTransitionWindow,
    		onOpen,
    		onClose,
    		onOpened,
    		onClosed,
    		isFunction,
    		close,
    		handleKeydown,
    		handleOuterMousedown,
    		handleOuterMouseup,
    		isTabbable,
    		show,
    		key,
    		ariaLabel,
    		ariaLabelledBy,
    		closeButton,
    		closeOnEsc,
    		closeOnOuterClick,
    		styleBg,
    		styleWindowWrap,
    		styleWindow,
    		styleContent,
    		styleCloseButton,
    		classBg,
    		classWindowWrap,
    		classWindow,
    		classContent,
    		classCloseButton,
    		setContext$1,
    		transitionBg,
    		transitionBgProps,
    		transitionWindow,
    		transitionWindowProps,
    		disableFocusTrap,
    		isMounted,
    		$$scope,
    		slots,
    		div1_binding,
    		div2_binding,
    		div3_binding
    	];
    }

    class Modal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$V,
    			create_fragment$V,
    			safe_not_equal,
    			{
    				isTabbable: 22,
    				show: 23,
    				key: 24,
    				ariaLabel: 25,
    				ariaLabelledBy: 26,
    				closeButton: 27,
    				closeOnEsc: 28,
    				closeOnOuterClick: 29,
    				styleBg: 30,
    				styleWindowWrap: 31,
    				styleWindow: 32,
    				styleContent: 33,
    				styleCloseButton: 34,
    				classBg: 35,
    				classWindowWrap: 36,
    				classWindow: 37,
    				classContent: 38,
    				classCloseButton: 39,
    				unstyled: 0,
    				setContext: 40,
    				transitionBg: 41,
    				transitionBgProps: 42,
    				transitionWindow: 43,
    				transitionWindowProps: 44,
    				disableFocusTrap: 45
    			},
    			null,
    			[-1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Modal",
    			options,
    			id: create_fragment$V.name
    		});
    	}

    	get isTabbable() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isTabbable(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get show() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set show(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaLabel() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaLabel(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaLabelledBy() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaLabelledBy(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeButton() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeButton(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeOnEsc() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeOnEsc(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeOnOuterClick() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeOnOuterClick(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styleBg() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styleBg(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styleWindowWrap() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styleWindowWrap(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styleWindow() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styleWindow(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styleContent() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styleContent(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styleCloseButton() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styleCloseButton(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get classBg() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set classBg(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get classWindowWrap() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set classWindowWrap(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get classWindow() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set classWindow(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get classContent() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set classContent(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get classCloseButton() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set classCloseButton(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get unstyled() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set unstyled(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setContext() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set setContext(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transitionBg() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transitionBg(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transitionBgProps() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transitionBgProps(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transitionWindow() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transitionWindow(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transitionWindowProps() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transitionWindowProps(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disableFocusTrap() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disableFocusTrap(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const MODE = {
        TREE: 'tree',
        CODE: 'code'
    };
    const STATE_ID = Symbol('id');
    const STATE_EXPANDED = Symbol('expanded');
    const STATE_VISIBLE_SECTIONS = Symbol('visible sections');
    const STATE_KEYS = Symbol('keys');
    const STATE_SEARCH_PROPERTY = Symbol('search:property');
    const STATE_SEARCH_VALUE = Symbol('search:value');
    const STATE_ENFORCE_STRING = Symbol('enforce string');
    const STATE_SELECTION = Symbol('selection');
    const VALIDATION_ERROR = Symbol('validation:error');
    const SCROLL_DURATION = 300; // ms
    const DEBOUNCE_DELAY = 300; // ms
    const CODE_MODE_ONCHANGE_DELAY = 300; // ms
    const SEARCH_UPDATE_THROTTLE = 300; // ms
    const AUTO_SCROLL_INTERVAL = 50; // ms
    const AUTO_SCROLL_SPEED_SLOW = 200; // pixels per second
    const AUTO_SCROLL_SPEED_NORMAL = 400; // pixels per second
    const AUTO_SCROLL_SPEED_FAST = 1200; // pixels per second
    const MAX_SEARCH_RESULTS = 1000;
    const ARRAY_SECTION_SIZE = 100;
    const DEFAULT_VISIBLE_SECTIONS = [{ start: 0, end: ARRAY_SECTION_SIZE }];
    const MAX_VALIDATABLE_SIZE = 100 * 1024 * 1024; // 1 MB
    const MAX_AUTO_REPAIRABLE_SIZE = 1024 * 1024; // 1 MB
    const MAX_DOCUMENT_SIZE_CODE_MODE = 10 * 1024 * 1024; // 10 MB
    const MAX_DOCUMENT_SIZE_EXPAND_ALL = 10 * 1024; // 10 KB
    const SIMPLE_MODAL_OPTIONS = {
        closeButton: false,
        classBg: 'jse-modal-bg',
        classWindow: 'jse-modal-window',
        classWindowWrap: 'jse-modal-window-wrap',
        classContent: 'jse-modal-content'
    };
    const SORT_MODAL_OPTIONS = {
        ...SIMPLE_MODAL_OPTIONS,
        classWindow: 'jse-modal-window jse-modal-window-sort'
    };
    const TRANSFORM_MODAL_OPTIONS = {
        ...SIMPLE_MODAL_OPTIONS,
        classWindow: 'jse-modal-window jse-modal-window-transform'
    };
    const INSERT_EXPLANATION = 'Insert or paste contents, ' +
        'enter [ insert a new array, ' +
        'enter { to insert a new object, ' +
        'or start typing to insert a new value';
    const CONTEXT_MENU_EXPLANATION = 'Open context menu ' +
        '(Click here, ' +
        'right click on the selection, ' +
        'or use the context menu button or Ctrl+Q)';
    const HOVER_INSERT_INSIDE = 'hover-insert-inside';
    const HOVER_INSERT_AFTER = 'hover-insert-after';
    const HOVER_COLLECTION = 'hover-collection';
    const JSON_STATUS_VALID = 'valid';
    const JSON_STATUS_REPAIRABLE = 'repairable';
    const JSON_STATUS_INVALID = 'invalid';
    // TODO: can we dynamically calculate the size?
    const CONTEXT_MENU_HEIGHT = (40 + 2) * 8; // px
    const CONTEXT_MENU_WIDTH = 260; // px
    // TODO: change UPDATE_SELECTION into an enum
    const UPDATE_SELECTION = {
        NO: 'NO',
        SELF: 'SELF',
        NEXT_INSIDE: 'NEXT_INSIDE'
    };

    let id$1 = 0;
    function uniqueId$1() {
        id$1++;
        return id$1;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    function commonjsRequire (target) {
    	throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
    }

    var immutableJSONPatch = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
      factory(exports) ;
    }(commonjsGlobal, (function (exports) {
      function _typeof$1(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

      /**
       * Test deep equality of two JSON values, objects, or arrays
       * @param {JSONData} a
       * @param {JSONData} b
       * @returns {boolean}
       */
      // TODO: write unit tests
      function isEqual(a, b) {
        // FIXME: this function will return false for two objects with the same keys
        //  but different order of keys
        return JSON.stringify(a) === JSON.stringify(b);
      }
      /**
       * Test whether two values are strictly equal
       * @param {*} a
       * @param {*} b
       * @returns {boolean}
       */

      function strictEqual(a, b) {
        return a === b;
      }
      /**
       * Get all but the last items from an array
       * @param {Array} array
       * @return {Array}
       */
      // TODO: write unit tests

      function initial(array) {
        return array.slice(0, array.length - 1);
      }
      /**
       * Get the last item from an array
       * @param {Array} array
       * @returns {*}
       */
      // TODO: write unit tests

      function last(array) {
        return array[array.length - 1];
      }
      /**
       * Test whether array1 starts with array2
       * @param {Array} array1
       * @param {Array} array2
       * @param {function} [isEqual=strictEqual] Optional function to check equality
       */

      function startsWith(array1, array2) {
        var isEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : strictEqual;

        if (array1.length < array2.length) {
          return false;
        }

        for (var i = 0; i < array2.length; i++) {
          if (!isEqual(array1[i], array2[i])) {
            return false;
          }
        }

        return true;
      }
      /**
       * Test whether a value is an Object or an Array (and not a primitive JSON value)
       * @param {*} value
       * @return {boolean}
       */
      // TODO: write unit tests

      function isObjectOrArray(value) {
        return _typeof$1(value) === 'object' && value !== null;
      }

      function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

      function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

      function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

      function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
      /**
       * Shallow clone of an Object, Array, or value
       * Symbols are cloned too.
       * @param {*} value
       * @return {*}
       */

      function shallowClone(value) {
        if (Array.isArray(value)) {
          // copy array items
          var copy = value.slice(); // copy all symbols

          Object.getOwnPropertySymbols(value).forEach(function (symbol) {
            copy[symbol] = value[symbol];
          });
          return copy;
        } else if (_typeof(value) === 'object') {
          // copy object properties
          var _copy = _objectSpread({}, value); // copy all symbols


          Object.getOwnPropertySymbols(value).forEach(function (symbol) {
            _copy[symbol] = value[symbol];
          });
          return _copy;
        } else {
          return value;
        }
      }
      /**
       * Update a value in an object in an immutable way.
       * If the value is unchanged, the original object will be returned
       * @param {Object | Array} object
       * @param {string | index} key
       * @param {*} value
       * @returns {Object | Array}
       */

      function applyProp(object, key, value) {
        if (object[key] === value) {
          // return original object unchanged when the new value is identical to the old one
          return object;
        } else {
          var updatedObject = shallowClone(object);
          updatedObject[key] = value;
          return updatedObject;
        }
      }
      /**
       * helper function to get a nested property in an object or array
       *
       * @param {Object | Array} object
       * @param {JSONPath} path
       * @return {* | undefined} Returns the field when found, or undefined when the
       *                         path doesn't exist
       */

      function getIn(object, path) {
        var value = object;
        var i = 0;

        while (i < path.length) {
          if (isObjectOrArray(value)) {
            value = value[path[i]];
          } else {
            value = undefined;
          }

          i++;
        }

        return value;
      }
      /**
       * helper function to replace a nested property in an object with a new value
       * without mutating the object itself.
       *
       * @param {Object | Array} object
       * @param {JSONPath} path
       * @param {*} value
       * @param {boolean} [createPath=false]
       *                    If true, `path` will be created when (partly) missing in
       *                    the object. For correctly creating nested Arrays or
       *                    Objects, the function relies on `path` containing a number
       *                    in case of array indexes.
       *                    If false (default), an error will be thrown when the
       *                    path doesn't exist.
       * @return {Object | Array} Returns a new, updated object or array
       */

      function setIn(object, path, value) {
        var createPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        if (path.length === 0) {
          return value;
        }

        var key = path[0];
        var updatedValue = setIn(object ? object[key] : undefined, path.slice(1), value, createPath);

        if (!isObjectOrArray(object)) {
          if (createPath) {
            var newObject = typeof key === 'number' ? [] : {};
            newObject[key] = updatedValue;
            return newObject;
          } else {
            throw new Error('Path does not exist');
          }
        }

        return applyProp(object, key, updatedValue);
      }
      /**
       * helper function to replace a nested property in an object with a new value
       * without mutating the object itself.
       *
       * @param {Object | Array} object
       * @param {JSONPath} path
       * @param {function} callback
       * @return {Object | Array} Returns a new, updated object or array
       */

      function updateIn(object, path, callback) {
        if (path.length === 0) {
          return callback(object);
        }

        if (!isObjectOrArray(object)) {
          throw new Error('Path doesn\'t exist');
        }

        var key = path[0];
        var updatedValue = updateIn(object[key], path.slice(1), callback);
        return applyProp(object, key, updatedValue);
      }
      /**
       * helper function to delete a nested property in an object
       * without mutating the object itself.
       *
       * @param {Object | Array} object
       * @param {JSONPath} path
       * @return {Object | Array} Returns a new, updated object or array
       */

      function deleteIn(object, path) {
        if (path.length === 0) {
          return object;
        }

        if (!isObjectOrArray(object)) {
          throw new Error('Path does not exist');
        }

        if (path.length === 1) {
          var _key = path[0];

          if (!(_key in object)) {
            // key doesn't exist. return object unchanged
            return object;
          } else {
            var updatedObject = shallowClone(object);

            if (Array.isArray(updatedObject)) {
              updatedObject.splice(_key, 1);
            } else {
              delete updatedObject[_key];
            }

            return updatedObject;
          }
        }

        var key = path[0];
        var updatedValue = deleteIn(object[key], path.slice(1));
        return applyProp(object, key, updatedValue);
      }
      /**
       * Insert a new item in an array at a specific index.
       * Example usage:
       *
       *     insertAt({arr: [1,2,3]}, ['arr', '2'], 'inserted')  // [1,2,'inserted',3]
       *
       * @param {Object | Array} object
       * @param {JSONPath} path
       * @param {*} value
       * @return {Array}
       */

      function insertAt(object, path, value) {
        var parentPath = path.slice(0, path.length - 1);
        var index = path[path.length - 1];
        return updateIn(object, parentPath, function (items) {
          if (!Array.isArray(items)) {
            throw new TypeError('Array expected at path ' + JSON.stringify(parentPath));
          }

          var updatedItems = shallowClone(items);
          updatedItems.splice(index, 0, value);
          return updatedItems;
        });
      }
      /**
       * Test whether a path exists in a JSON object
       * @param {JSONData} json
       * @param {JSONPath} path
       * @return {boolean} Returns true if the path exists, else returns false
       * @private
       */

      function existsIn(json, path) {
        if (json === undefined) {
          return false;
        }

        if (path.length === 0) {
          return true;
        }

        return existsIn(json[path[0]], path.slice(1));
      }

      /**
       * Parse a JSON Pointer
       * @param {string} pointer
       * @return {JSONPath}
       */
      function parseJSONPointer(pointer) {
        var path = pointer.split('/');
        path.shift(); // remove the first empty entry

        return path.map(function (p) {
          return p.replace(/~1/g, '/').replace(/~0/g, '~');
        });
      }
      /**
       * Compile a JSON Pointer
       * @param {JSONPath} path
       * @return {string}
       */

      function compileJSONPointer(path) {
        return path.map(function (p) {
          return '/' + String(p).replace(/~/g, '~0').replace(/\//g, '~1');
        }).join('');
      }

      /**
       * Apply a patch to a JSON object
       * The original JSON object will not be changed,
       * instead, the patch is applied in an immutable way
       * @param {JSONData} json
       * @param {JSONPatchDocument} operations    Array with JSON patch actions
       * @param {JSONPatchOptions} [options]
       * @return {JSONData} Returns the updated json
       */

      function immutableJSONPatch(json, operations, options) {
        var updatedJson = json;

        for (var i = 0; i < operations.length; i++) {
          validateJSONPatchOperation(operations[i]);
          var operation = preprocessJSONPatchOperation(updatedJson, operations[i]); // TODO: test before

          if (options && options.before) {
            var result = options.before(updatedJson, operation);

            if (result !== undefined) {
              if (result.json !== undefined) {
                updatedJson = result.json;
              }

              if (result.operation !== undefined) {
                operation = result.operation;
              }
            }
          }

          var previousJson = updatedJson;
          var patchOp = PATCH_OPS[operation.op];

          if (patchOp) {
            updatedJson = patchOp(updatedJson, operation);
          } else if (operation.op === 'test') {
            test(updatedJson, operation);
          } else {
            throw new Error('Unknown JSONPatch operation ' + JSON.stringify(operation.op));
          } // TODO: test after


          if (options && options.after) {
            var _result = options.after(updatedJson, operation, previousJson);

            if (_result !== undefined) {
              updatedJson = _result;
            }
          }
        }

        return updatedJson;
      }
      var PATCH_OPS = {
        add: add,
        remove: remove,
        replace: replace,
        copy: copy,
        move: move
      };
      /**
       * Replace an existing item
       * @param {JSONData} json
       * @param {{ path: JSONPath, value: JSONData }} operation
       * @return {JSONData}
       */

      function replace(json, _ref) {
        var path = _ref.path,
            value = _ref.value;
        return setIn(json, path, value);
      }
      /**
       * Remove an item or property
       * @param {JSONData} json
       * @param {{ path: JSONPath }} operation
       * @return {JSONData}
       */

      function remove(json, _ref2) {
        var path = _ref2.path;
        return deleteIn(json, path);
      }
      /**
       * @param {JSONData} json
       * @param {{ path: JSONPath, value: JSONData }} operation
       * @return {JSONData}
       */

      function add(json, _ref3) {
        var path = _ref3.path,
            value = _ref3.value;

        if (isArrayItem(json, path)) {
          return insertAt(json, path, value);
        } else {
          return setIn(json, path, value);
        }
      }
      /**
       * Copy a value
       * @param {JSONData} json
       * @param {{ path: JSONPath, from: JSONPath }} operation
       * @return {JSONData}
       */

      function copy(json, _ref4) {
        var path = _ref4.path,
            from = _ref4.from;
        var value = getIn(json, from);

        if (isArrayItem(json, path)) {
          return insertAt(json, path, value);
        } else {
          var _value = getIn(json, from);

          return setIn(json, path, _value);
        }
      }
      /**
       * Move a value
       * @param {JSONData} json
       * @param {{ path: JSONPath, from: JSONPath }} operation
       * @return {JSONData}
       */

      function move(json, _ref5) {
        var path = _ref5.path,
            from = _ref5.from;
        var value = getIn(json, from);
        var removedJson = deleteIn(json, from);
        return isArrayItem(removedJson, path) ? insertAt(removedJson, path, value) : setIn(removedJson, path, value);
      }
      /**
       * Test whether the data contains the provided value at the specified path.
       * Throws an error when the test fails
       * @param {JSONData} json
       * @param {{ path: JSONPath, value: JSONData }} operation
       */

      function test(json, _ref6) {
        var path = _ref6.path,
            value = _ref6.value;

        if (value === undefined) {
          throw new Error("Test failed: no value provided (path: \"".concat(compileJSONPointer(path), "\")"));
        }

        if (!existsIn(json, path)) {
          throw new Error("Test failed: path not found (path: \"".concat(compileJSONPointer(path), "\")"));
        }

        var actualValue = getIn(json, path);

        if (!isEqual(actualValue, value)) {
          throw new Error("Test failed, value differs (path: \"".concat(compileJSONPointer(path), "\")"));
        }
      }
      /**
       * @param {JSONData} json
       * @param {JSONPath} path
       * @returns {boolean}
       */

      function isArrayItem(json, path) {
        if (path.length === 0) {
          return false;
        }

        var parent = getIn(json, initial(path));
        return Array.isArray(parent);
      }
      /**
       * Resolve the path index of an array, resolves indexes '-'
       * @param {JSONData} json
       * @param {JSONPath} path
       * @returns {JSONPath} Returns the resolved path
       */

      function resolvePathIndex(json, path) {
        if (last(path) !== '-') {
          return path;
        }

        var parentPath = initial(path);
        var parent = getIn(json, parentPath);
        return parentPath.concat(parent.length);
      }
      /**
       * Validate a JSONPatch operation.
       * Throws an error when there is an issue
       * @param {JSONPatchOperation} operation
       */

      function validateJSONPatchOperation(operation) {
        // TODO: write unit tests
        var ops = ['add', 'remove', 'replace', 'copy', 'move', 'test'];

        if (!ops.includes(operation.op)) {
          throw new Error('Unknown JSONPatch op ' + JSON.stringify(operation.op));
        }

        if (typeof operation.path !== 'string') {
          throw new Error('Required property "path" missing or not a string in operation ' + JSON.stringify(operation));
        }

        if (operation.op === 'copy' || operation.op === 'move') {
          if (typeof operation.from !== 'string') {
            throw new Error('Required property "from" missing or not a string in operation ' + JSON.stringify(operation));
          }
        }
      }
      /**
       * @param {JSONData} json
       * @param {JSONPatchOperation} operation
       * @return {PreprocessedJSONPatchOperation}
       */
      // TODO: write unit tests

      function preprocessJSONPatchOperation(json, operation) {
        return {
          op: operation.op,
          path: resolvePathIndex(json, parseJSONPointer(operation.path)),
          from: operation.from !== undefined ? parseJSONPointer(operation.from) : null,
          value: operation.value
        };
      }

      /**
       * Create the inverse of a set of json patch operations
       * @param {JSONData} json
       * @param {JSONPatchDocument} operations    Array with JSON patch actions
       * @return {JSONPatchDocument} Returns the operations to revert the changes
       */

      function revertJSONPatch(json, operations) {
        var revertOperations = [];
        immutableJSONPatch(json, operations, {
          before: function before(json, operation) {
            var revertOp = REVERT_OPS[operation.op];

            if (revertOp) {
              revertOperations = revertOp(json, operation).concat(revertOperations);
            }
          }
        });
        return revertOperations;
      }
      var REVERT_OPS = {
        add: revertAdd,
        remove: revertRemove,
        replace: revertReplace,
        copy: revertCopy,
        move: revertMove
      };
      /**
       * @param {JSONData} json
       * @param {{ path: JSONPath }} operation
       * @return {JSONPatchDocument}
       */

      function revertReplace(json, _ref) {
        var path = _ref.path;
        return [{
          op: 'replace',
          path: compileJSONPointer(path),
          value: getIn(json, path)
        }];
      }
      /**
       * @param {JSONData} json
       * @param {{ path: JSONPath }} operation
       * @return {JSONPatchDocument}
       */


      function revertRemove(json, _ref2) {
        var path = _ref2.path;
        return [{
          op: 'add',
          path: compileJSONPointer(path),
          value: getIn(json, path)
        }];
      }
      /**
       * @param {JSONData} json
       * @param {{ path: JSONPath, value: JSONData }} operation
       * @return {JSONPatchDocument}
       */


      function revertAdd(json, _ref3) {
        var path = _ref3.path,
            value = _ref3.value;

        if (isArrayItem(json, path) || !existsIn(json, path)) {
          return [{
            op: 'remove',
            path: compileJSONPointer(path)
          }];
        } else {
          return revertReplace(json, {
            path: path,
            value: value
          });
        }
      }
      /**
       * @param {JSONData} json
       * @param {{ path: JSONPath, value: JSONData }} operation
       * @return {JSONPatchDocument}
       */


      function revertCopy(json, _ref4) {
        var path = _ref4.path,
            value = _ref4.value;
        return revertAdd(json, {
          path: path,
          value: value
        });
      }
      /**
       * @param {JSONData} json
       * @param {{ path: JSONPath, from: JSONPath }} operation
       * @return {JSONPatchDocument}
       */


      function revertMove(json, _ref5) {
        var path = _ref5.path,
            from = _ref5.from;

        if (path.length < from.length && startsWith(from, path)) {
          // replacing the parent with the child
          return [{
            op: 'replace',
            path: compileJSONPointer(path),
            value: json
          }];
        }

        var revert = [{
          op: 'move',
          from: compileJSONPointer(path),
          path: compileJSONPointer(from)
        }];

        if (!isArrayItem(json, path) && existsIn(json, path)) {
          // the move replaces an existing value in an object
          revert = revert.concat(revertRemove(json, {
            path: path
          }));
        }

        return revert;
      }

      exports.compileJSONPointer = compileJSONPointer;
      exports.deleteIn = deleteIn;
      exports.existsIn = existsIn;
      exports.getIn = getIn;
      exports.immutableJSONPatch = immutableJSONPatch;
      exports.insertAt = insertAt;
      exports.parseJSONPointer = parseJSONPointer;
      exports.revertJSONPatch = revertJSONPatch;
      exports.setIn = setIn;
      exports.updateIn = updateIn;

      Object.defineProperty(exports, '__esModule', { value: true });

    })));

    });

    var escapedChars = {
      'b': '\b',
      'f': '\f',
      'n': '\n',
      'r': '\r',
      't': '\t',
      '"': '"',
      '/': '/',
      '\\': '\\'
    };

    var A_CODE = 'a'.charCodeAt();


    var parse = function (source, _, options) {
      var pointers = {};
      var line = 0;
      var column = 0;
      var pos = 0;
      var bigint = options && options.bigint && typeof BigInt != 'undefined';
      return {
        data: _parse('', true),
        pointers: pointers
      };

      function _parse(ptr, topLevel) {
        whitespace();
        var data;
        map(ptr, 'value');
        var char = getChar();
        switch (char) {
          case 't': read('rue'); data = true; break;
          case 'f': read('alse'); data = false; break;
          case 'n': read('ull'); data = null; break;
          case '"': data = parseString(); break;
          case '[': data = parseArray(ptr); break;
          case '{': data = parseObject(ptr); break;
          default:
            backChar();
            if ('-0123456789'.indexOf(char) >= 0)
              data = parseNumber();
            else
              unexpectedToken();
        }
        map(ptr, 'valueEnd');
        whitespace();
        if (topLevel && pos < source.length) unexpectedToken();
        return data;
      }

      function whitespace() {
        loop:
          while (pos < source.length) {
            switch (source[pos]) {
              case ' ': column++; break;
              case '\t': column += 4; break;
              case '\r': column = 0; break;
              case '\n': column = 0; line++; break;
              default: break loop;
            }
            pos++;
          }
      }

      function parseString() {
        var str = '';
        var char;
        while (true) {
          char = getChar();
          if (char == '"') {
            break;
          } else if (char == '\\') {
            char = getChar();
            if (char in escapedChars)
              str += escapedChars[char];
            else if (char == 'u')
              str += getCharCode();
            else
              wasUnexpectedToken();
          } else {
            str += char;
          }
        }
        return str;
      }

      function parseNumber() {
        var numStr = '';
        var integer = true;
        if (source[pos] == '-') numStr += getChar();

        numStr += source[pos] == '0'
                  ? getChar()
                  : getDigits();

        if (source[pos] == '.') {
          numStr += getChar() + getDigits();
          integer = false;
        }

        if (source[pos] == 'e' || source[pos] == 'E') {
          numStr += getChar();
          if (source[pos] == '+' || source[pos] == '-') numStr += getChar();
          numStr += getDigits();
          integer = false;
        }

        var result = +numStr;
        return bigint && integer && (result > Number.MAX_SAFE_INTEGER || result < Number.MIN_SAFE_INTEGER)
                ? BigInt(numStr)
                : result;
      }

      function parseArray(ptr) {
        whitespace();
        var arr = [];
        var i = 0;
        if (getChar() == ']') return arr;
        backChar();

        while (true) {
          var itemPtr = ptr + '/' + i;
          arr.push(_parse(itemPtr));
          whitespace();
          var char = getChar();
          if (char == ']') break;
          if (char != ',') wasUnexpectedToken();
          whitespace();
          i++;
        }
        return arr;
      }

      function parseObject(ptr) {
        whitespace();
        var obj = {};
        if (getChar() == '}') return obj;
        backChar();

        while (true) {
          var loc = getLoc();
          if (getChar() != '"') wasUnexpectedToken();
          var key = parseString();
          var propPtr = ptr + '/' + escapeJsonPointer(key);
          mapLoc(propPtr, 'key', loc);
          map(propPtr, 'keyEnd');
          whitespace();
          if (getChar() != ':') wasUnexpectedToken();
          whitespace();
          obj[key] = _parse(propPtr);
          whitespace();
          var char = getChar();
          if (char == '}') break;
          if (char != ',') wasUnexpectedToken();
          whitespace();
        }
        return obj;
      }

      function read(str) {
        for (var i=0; i<str.length; i++)
          if (getChar() !== str[i]) wasUnexpectedToken();
      }

      function getChar() {
        checkUnexpectedEnd();
        var char = source[pos];
        pos++;
        column++; // new line?
        return char;
      }

      function backChar() {
        pos--;
        column--;
      }

      function getCharCode() {
        var count = 4;
        var code = 0;
        while (count--) {
          code <<= 4;
          var char = getChar().toLowerCase();
          if (char >= 'a' && char <= 'f')
            code += char.charCodeAt() - A_CODE + 10;
          else if (char >= '0' && char <= '9')
            code += +char;
          else
            wasUnexpectedToken();
        }
        return String.fromCharCode(code);
      }

      function getDigits() {
        var digits = '';
        while (source[pos] >= '0' && source[pos] <= '9')
          digits += getChar();

        if (digits.length) return digits;
        checkUnexpectedEnd();
        unexpectedToken();
      }

      function map(ptr, prop) {
        mapLoc(ptr, prop, getLoc());
      }

      function mapLoc(ptr, prop, loc) {
        pointers[ptr] = pointers[ptr] || {};
        pointers[ptr][prop] = loc;
      }

      function getLoc() {
        return {
          line: line,
          column: column,
          pos: pos
        };
      }

      function unexpectedToken() {
        throw new SyntaxError('Unexpected token ' + source[pos] + ' in JSON at position ' + pos);
      }

      function wasUnexpectedToken() {
        backChar();
        unexpectedToken();
      }

      function checkUnexpectedEnd() {
        if (pos >= source.length)
          throw new SyntaxError('Unexpected end of JSON input');
      }
    };


    var stringify = function (data, _, options) {
      if (!validType(data)) return;
      var wsLine = 0;
      var wsPos, wsColumn;
      var whitespace = typeof options == 'object'
                        ? options.space
                        : options;
      switch (typeof whitespace) {
        case 'number':
          var len = whitespace > 10
                      ? 10
                      : whitespace < 0
                        ? 0
                        : Math.floor(whitespace);
          whitespace = len && repeat(len, ' ');
          wsPos = len;
          wsColumn = len;
          break;
        case 'string':
          whitespace = whitespace.slice(0, 10);
          wsPos = 0;
          wsColumn = 0;
          for (var j=0; j<whitespace.length; j++) {
            var char = whitespace[j];
            switch (char) {
              case ' ': wsColumn++; break;
              case '\t': wsColumn += 4; break;
              case '\r': wsColumn = 0; break;
              case '\n': wsColumn = 0; wsLine++; break;
              default: throw new Error('whitespace characters not allowed in JSON');
            }
            wsPos++;
          }
          break;
        default:
          whitespace = undefined;
      }

      var json = '';
      var pointers = {};
      var line = 0;
      var column = 0;
      var pos = 0;
      var es6 = options && options.es6 && typeof Map == 'function';
      _stringify(data, 0, '');
      return {
        json: json,
        pointers: pointers
      };

      function _stringify(_data, lvl, ptr) {
        map(ptr, 'value');
        switch (typeof _data) {
          case 'number':
          case 'bigint':
          case 'boolean':
            out('' + _data); break;
          case 'string':
            out(quoted(_data)); break;
          case 'object':
            if (_data === null) {
              out('null');
            } else if (typeof _data.toJSON == 'function') {
              out(quoted(_data.toJSON()));
            } else if (Array.isArray(_data)) {
              stringifyArray();
            } else if (es6) {
              if (_data.constructor.BYTES_PER_ELEMENT)
                stringifyArray();
              else if (_data instanceof Map)
                stringifyMapSet();
              else if (_data instanceof Set)
                stringifyMapSet(true);
              else
                stringifyObject();
            } else {
              stringifyObject();
            }
        }
        map(ptr, 'valueEnd');

        function stringifyArray() {
          if (_data.length) {
            out('[');
            var itemLvl = lvl + 1;
            for (var i=0; i<_data.length; i++) {
              if (i) out(',');
              indent(itemLvl);
              var item = validType(_data[i]) ? _data[i] : null;
              var itemPtr = ptr + '/' + i;
              _stringify(item, itemLvl, itemPtr);
            }
            indent(lvl);
            out(']');
          } else {
            out('[]');
          }
        }

        function stringifyObject() {
          var keys = Object.keys(_data);
          if (keys.length) {
            out('{');
            var propLvl = lvl + 1;
            for (var i=0; i<keys.length; i++) {
              var key = keys[i];
              var value = _data[key];
              if (validType(value)) {
                if (i) out(',');
                var propPtr = ptr + '/' + escapeJsonPointer(key);
                indent(propLvl);
                map(propPtr, 'key');
                out(quoted(key));
                map(propPtr, 'keyEnd');
                out(':');
                if (whitespace) out(' ');
                _stringify(value, propLvl, propPtr);
              }
            }
            indent(lvl);
            out('}');
          } else {
            out('{}');
          }
        }

        function stringifyMapSet(isSet) {
          if (_data.size) {
            out('{');
            var propLvl = lvl + 1;
            var first = true;
            var entries = _data.entries();
            var entry = entries.next();
            while (!entry.done) {
              var item = entry.value;
              var key = item[0];
              var value = isSet ? true : item[1];
              if (validType(value)) {
                if (!first) out(',');
                first = false;
                var propPtr = ptr + '/' + escapeJsonPointer(key);
                indent(propLvl);
                map(propPtr, 'key');
                out(quoted(key));
                map(propPtr, 'keyEnd');
                out(':');
                if (whitespace) out(' ');
                _stringify(value, propLvl, propPtr);
              }
              entry = entries.next();
            }
            indent(lvl);
            out('}');
          } else {
            out('{}');
          }
        }
      }

      function out(str) {
        column += str.length;
        pos += str.length;
        json += str;
      }

      function indent(lvl) {
        if (whitespace) {
          json += '\n' + repeat(lvl, whitespace);
          line++;
          column = 0;
          while (lvl--) {
            if (wsLine) {
              line += wsLine;
              column = wsColumn;
            } else {
              column += wsColumn;
            }
            pos += wsPos;
          }
          pos += 1; // \n character
        }
      }

      function map(ptr, prop) {
        pointers[ptr] = pointers[ptr] || {};
        pointers[ptr][prop] = {
          line: line,
          column: column,
          pos: pos
        };
      }

      function repeat(n, str) {
        return Array(n + 1).join(str);
      }
    };


    var VALID_TYPES = ['number', 'bigint', 'boolean', 'string', 'object'];
    function validType(data) {
      return VALID_TYPES.indexOf(typeof data) >= 0;
    }


    var ESC_QUOTE = /"|\\/g;
    var ESC_B = /[\b]/g;
    var ESC_F = /\f/g;
    var ESC_N = /\n/g;
    var ESC_R = /\r/g;
    var ESC_T = /\t/g;
    function quoted(str) {
      str = str.replace(ESC_QUOTE, '\\$&')
               .replace(ESC_F, '\\f')
               .replace(ESC_B, '\\b')
               .replace(ESC_N, '\\n')
               .replace(ESC_R, '\\r')
               .replace(ESC_T, '\\t');
      return '"' + str + '"';
    }


    var ESC_0 = /~/g;
    var ESC_1 = /\//g;
    function escapeJsonPointer(str) {
      return str.replace(ESC_0, '~0')
                .replace(ESC_1, '~1');
    }

    var jsonSourceMap = {
    	parse: parse,
    	stringify: stringify
    };

    var jsonrepair_min = createCommonjsModule(function (module, exports) {
    !function(e,n){module.exports=n();}(commonjsGlobal,function(){function f(e,n){if(!(this instanceof f))throw new SyntaxError("Constructor must be called with the new operator");this.message=e+" (char "+n+")",this.char=n,this.stack=(new Error).stack;}(f.prototype=new Error).constructor=Error;var o={"'":!0,"‘":!0,"’":!0,"`":!0,"´":!0},u={'"':!0,"“":!0,"”":!0};function c(e){return n.test(e)}var n=/^[a-zA-Z_]$/;var s=/^[0-9a-fA-F]$/;function a(e){return t.test(e)}var t=/^[0-9]$/;function l(e){return " "===e||"\t"===e||"\n"===e||"\r"===e}function h(e){return " "===e||" "<=e&&e<=" "||" "===e||" "===e||"　"===e}function d(e){return !0===o[e]}function w(e){return !0===u[e]}function b(e){return !0===o[e]?"'":!0===u[e]?'"':e}function e(e,n){n=e.lastIndexOf(n);return -1!==n?e.substring(0,n)+e.substring(n+1):e}function r(e,n){var t=e.length;if(!l(e[t-1]))return e+n;for(;l(e[t-1]);)t--;return e.substring(0,t)+n+e.substring(t)}var i=0,g=1,v=2,p=3,x=4,k=5,m=6,y={"":!0,"{":!0,"}":!0,"[":!0,"]":!0,":":!0,",":!0,"(":!0,")":!0,";":!0,"+":!0},I={'"':'"',"\\":"\\","/":"/",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"},E={"\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t"},A={null:"null",true:"true",false:"false"},j={None:"null",True:"true",False:"false"},$="",O="",T=0,C="",F="",S=m;function U(){T++,C=$.charAt(T);}function z(){U(),"\\"===C&&U();}function N(){return S===i&&("["===F||"{"===F)||S===v||S===g||S===p}function V(){O+=F,S=m,F="",y[C]?(S=i,F=C,U()):function(){if(a(C)||"-"===C){if(S=g,"-"===C){if(F+=C,U(),!a(C))throw new f("Invalid number, digit expected",T)}else "0"===C&&(F+=C,U());for(;a(C);)F+=C,U();if("."===C){if(F+=C,U(),!a(C))throw new f("Invalid number, digit expected",T);for(;a(C);)F+=C,U();}if("e"===C||"E"===C){if(F+=C,U(),"+"!==C&&"-"!==C||(F+=C,U()),!a(C))throw new f("Invalid number, digit expected",T);for(;a(C);)F+=C,U();}}else "\\"===C&&'"'===$.charAt(T+1)?(U(),_(z)):_(U);}(),S===x&&(F=function(e){for(var n="",t=0;t<e.length;t++){var r=e[t];n+=h(r)?" ":r;}return n}(F),V()),S===k&&(S=m,F="",V());}function Z(){","===F&&(F="",S=m,V());}function _(e){if(!0===o[n=C]||!0===u[n]){var n=b(C),t=d(C)?d:w;for(F+='"',S=v,e();""!==C&&!t(C);)if("\\"===C)if(e(),void 0!==I[C])F+="\\"+C,e();else if("u"===C){F+="\\u",e();for(var r=0;r<4;r++){if(i=C,!s.test(i))throw new f("Invalid unicode character",T-F.length);F+=C,e();}}else {if("'"!==C)throw new f('Invalid escape character "\\'+C+'"',T);F+="'",e();}else E[C]?F+=E[C]:F+='"'===C?'\\"':C,e();if(b(C)!==n)throw new f("End of string expected",T-F.length);return F+='"',void e()}var i,n;!function(){if(c(C))for(S=p;c(C)||a(C)||"$"===C;)F+=C,U();else !function(){if(l(C)||h(C))for(S=x;l(C)||h(C);)F+=C,U();else !function(){if("/"!==C||"*"!==$[T+1])if("/"!==C||"/"!==$[T+1])!function(){S=m;for(;""!==C;)F+=C,U();throw new f('Syntax error in part "'+F+'"',T-F.length)}();else for(S=k;""!==C&&"\n"!==C;)F+=C,U();else {for(S=k;""!==C&&("*"!==C||"*"===C&&"/"!==$[T+1]);)F+=C,U();"*"===C&&"/"===$[T+1]&&(F+=C,U(),F+=C,U());}}();}();}();}function q(){if(S!==i||"{"!==F)!function(){if(S!==i||"["!==F)!function(){if(S!==v)(S!==g?function(){if(S!==p)!function(){throw new f(""===F?"Unexpected end of json string":"Value expected",T-F.length)}();else if(A[F])V();else {if(j[F])return F=j[F],V();var e=F,n=O.length;if(F="",V(),S===i&&"("===F)return F="",V(),q(),S===i&&")"===F&&(F="",V(),S===i&&";"===F&&(F="",V()));for(O=function(e,n,t){return e.substring(0,t)+n+e.substring(t)}(O,'"'.concat(e),n);S===p||S===g;)V();O+='"';}}:V)();else for(V();S===i&&"+"===F;){var e;F="",V(),S===v&&(e=O.lastIndexOf('"'),O=O.substring(0,e)+F.substring(1),F="",V());}}();else if(V(),S!==i||"]"!==F){for(;;)if(q(),S===i&&","===F){if(V(),S===i&&"]"===F){O=e(O,",");break}if(""===F){O=e(O,",");break}}else {if(!N())break;O=r(O,",");}S===i&&"]"===F?V():O=r(O,"]");}else V();}();else if(V(),S!==i||"}"!==F){for(;;){if(S!==p&&S!==g||(S=v,F='"'.concat(F,'"')),S!==v)throw new f("Object key expected",T-F.length);if(V(),S===i&&":"===F)V();else {if(!N())throw new f("Colon expected",T-F.length);O=r(O,":");}if(q(),S===i&&","===F){if(V(),S===i&&"}"===F){O=e(O,",");break}if(""===F){O=e(O,",");break}}else {if(S!==v&&S!==g&&S!==p)break;O=r(O,",");}}S===i&&"}"===F?V():O=r(O,"}");}else V();}return function(e){O="",T=0,C=($=e).charAt(0),F="",S=m,V();var n=S;if(q(),Z(),""===F)return O;if(n===S&&N()){for(var t="";n===S&&N();)t+=O=r(O,","),O="",q(),Z();return "[\n".concat(t).concat(O,"\n]")}throw new f("Unexpected characters",T-F.length)}});
    });

    // TODO: unit test typeUtils.js
    /**
     * Test whether a value is an Object (and not an Array!)
     */
    function isObject$1(value) {
        return typeof value === 'object' && value !== null && !Array.isArray(value);
    }
    /**
     * Test whether a value is an Object or an Array
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    function isObjectOrArray(value) {
        return typeof value === 'object' && value !== null;
    }
    /**
     * Test whether a value is a boolean
     *
     * @param {*} value
     * @return {boolean}
     */
    function isBoolean(value) {
        return value === true || value === false;
    }
    /**
     * Test whether a value is a timestamp in milliseconds after the year 2000.
     */
    function isTimestamp(value) {
        const YEAR_2000 = 946684800000;
        return (typeof value === 'number' &&
            value > YEAR_2000 &&
            isFinite(value) &&
            Math.floor(value) === value &&
            !isNaN(new Date(value).valueOf()));
    }
    /**
     * Get the applied color given a color name or code
     * Returns the color if the input is a valid color, and returns null otherwise.
     *
     * Example output:
     *
     *     'rgba(255,0,0,0.7)' or 'rgb(255,0,0)'
     *
     * Source: https://stackoverflow.com/questions/6386090/validating-css-color-names/33184805
     */
    function getColorCSS(color) {
        // TODO: test performance impact of this function
        const colorStyleElement = window.document.createElement('div');
        colorStyleElement.style.color = color;
        return colorStyleElement.style.color.split(/\s+/).join('').toLowerCase() || null;
    }
    /**
     * Test if a string contains a valid color name or code.
     * Returns true if a valid color, false otherwise
     */
    function isColor(value) {
        return typeof value === 'string' && !!getColorCSS(value);
    }
    /**
     * Get the type of the value
     */
    function valueType(value) {
        if (value === null) {
            return 'null';
        }
        if (value === undefined) {
            return 'undefined';
        }
        if (typeof value === 'number') {
            return 'number';
        }
        if (typeof value === 'string') {
            return 'string';
        }
        if (typeof value === 'boolean') {
            return 'boolean';
        }
        if (value instanceof RegExp) {
            return 'regexp';
        }
        if (Array.isArray(value)) {
            return 'array';
        }
        return 'object';
    }
    /**
     * Test whether a text contains a url (matches when a string starts
     * with 'http://*' or 'https://*' and has no whitespace characters)
     */
    const isUrlRegex = /^https?:\/\/\S+$/;
    function isUrl(text) {
        return typeof text === 'string' && isUrlRegex.test(text);
    }
    /**
     * Convert contents of a string to the correct JSON type. This can be a string,
     * a number, a boolean, etc
     */
    function stringConvert(str) {
        if (str === '') {
            return '';
        }
        if (str === 'null') {
            return null;
        }
        if (str === 'true') {
            return true;
        }
        if (str === 'false') {
            return false;
        }
        const num = Number(str);
        if (!isNaN(num) && // will nicely fail with '123ab'
            !isNaN(parseFloat(str)) // will nicely fail with '  '
        ) {
            return num;
        }
        else {
            return str;
        }
    }
    /**
     * Test whether a string contains a numeric, boolean, or null value.
     * Returns true when the string contains a number, boolean, or null.
     */
    function isStringContainingPrimitiveValue(str) {
        return typeof str === 'string' && typeof stringConvert(str) !== 'string';
    }

    const MAX_ITEM_PATHS_COLLECTION = 10000;
    const EMPTY_ARRAY = [];
    /**
     * Get the paths of all nested properties in the items of an array
     * @param {JSONData} array
     * @param {boolean} [includeObjects=false] If true, object and array paths are returned as well
     * @return {Path[]}
     */
    function getNestedPaths(array, includeObjects = false) {
        const pathsMap = {};
        if (!Array.isArray(array)) {
            throw new TypeError('Array expected');
        }
        function recurseNestedPaths(obj, path) {
            const isValue = !Array.isArray(obj) && !isObject$1(obj);
            if (isValue || (includeObjects && path.length > 0)) {
                pathsMap[immutableJSONPatch.compileJSONPointer(path)] = true;
            }
            if (isObject$1(obj)) {
                Object.keys(obj).forEach((key) => {
                    recurseNestedPaths(obj[key], path.concat(key));
                });
            }
        }
        const max = Math.min(array.length, MAX_ITEM_PATHS_COLLECTION);
        for (let i = 0; i < max; i++) {
            const item = array[i];
            recurseNestedPaths(item, EMPTY_ARRAY);
        }
        const pathsArray = Object.keys(pathsMap).sort();
        return pathsArray.map(immutableJSONPatch.parseJSONPointer);
    }
    /**
     * Invoke the callback with
     * @param start   Included start index
     * @param end       Excluded end index. End must be larger or equal to start
     * @param iteratee
     */
    // TODO: write tests
    function forEachIndex(start, end, iteratee) {
        if (end <= start) {
            return;
        }
        for (let index = start; index < end; index++) {
            iteratee(index);
        }
    }
    /**
     * Limit the number of items in an array
     */
    // TODO: write unit test
    function limit(array, max) {
        return array.length > max ? array.slice(0, max) : array;
    }
    /**
     * Convert an array into an object having the array indices as keys
     */
    function arrayToObject(array) {
        return {
            ...array
        };
    }
    /**
     * Get the values of an object as an array
     */
    function objectToArray(object) {
        return Object.values(object);
    }

    /**
     * Parse the JSON. if this fails, try to repair and parse.
     * Throws an exception when the JSON is invalid and could not be parsed.
     */
    function parseAndRepair(jsonText) {
        try {
            return JSON.parse(jsonText);
        }
        catch (err) {
            // this can also throw
            return JSON.parse(jsonrepair_min(jsonText));
        }
    }
    /**
     * Parse the JSON and if needed repair it.
     * When not valid, undefined is returned.
     */
    function parseAndRepairOrUndefined(partialJson) {
        try {
            return parseAndRepair(partialJson);
        }
        catch (err) {
            return undefined;
        }
    }
    // TODO: deduplicate the logic in repairPartialJson and parseAndRepairPartialJson ?
    function parsePartialJson(partialJson, parse = JSON.parse) {
        // for now: dumb brute force approach: simply try out a few things...
        // remove trailing comma
        partialJson = partialJson.replace(END_WITH_COMMA_AND_OPTIONAL_WHITESPACES_REGEX, '');
        try {
            return parse(partialJson);
        }
        catch (err) {
            // we ignore the error on purpose
        }
        try {
            return parse('[' + partialJson + ']');
        }
        catch (err) {
            // we ignore the error on purpose
        }
        try {
            return parse('{' + partialJson + '}');
        }
        catch (err) {
            // we ignore the error on purpose
        }
        throw new Error('Failed to parse partial JSON');
    }
    /**
     * Repair partial JSON
     */
    function repairPartialJson(partialJson) {
        // for now: dumb brute force approach: simply try out a few things...
        // remove trailing comma
        partialJson = partialJson.replace(END_WITH_COMMA_AND_OPTIONAL_WHITESPACES_REGEX, '');
        try {
            return jsonrepair_min(partialJson);
        }
        catch (err) {
            // we ignore the error on purpose
        }
        try {
            const repaired = jsonrepair_min('[' + partialJson + ']');
            return repaired.substring(1, repaired.length - 1); // remove the outer [...] again
        }
        catch (err) {
            // we ignore the error on purpose
        }
        try {
            const repaired = jsonrepair_min('{' + partialJson + '}');
            return repaired.substring(1, repaired.length - 1); // remove the outer {...} again
        }
        catch (err) {
            // we ignore the error on purpose
        }
        throw new Error('Failed to repair partial JSON');
    }
    // test whether a string ends with a comma, followed by zero or more white space characters
    const END_WITH_COMMA_AND_OPTIONAL_WHITESPACES_REGEX = /,\s*$/;
    /**
     * Normalize a parse error message like
     *     "Unexpected token i in JSON at position 4"
     * or
     *     "JSON.parse: expected property name or '}' at line 2 column 3 of the JSON data"
     * and return the line and column numbers in an object
     *
     * Note that the returned line and column number in the object are zero-based,
     * and in the message are one based (human readable)
     */
    function normalizeJsonParseError(jsonText, parseErrorMessage) {
        const positionMatch = POSITION_REGEX.exec(parseErrorMessage);
        if (positionMatch) {
            // a message from Chrome, like "Unexpected token i in JSON at line 2 column 3"
            const position = parseInt(positionMatch[2], 10);
            const line = countCharacterOccurrences(jsonText, '\n', 0, position);
            const lastIndex = jsonText.lastIndexOf('\n', position);
            const column = position - lastIndex - 1;
            return {
                position,
                line,
                column,
                message: parseErrorMessage.replace(POSITION_REGEX, () => {
                    return `line ${line + 1} column ${column + 1}`;
                })
            };
        }
        else {
            // a message from Firefox, like "JSON.parse: expected property name or '}' at line 2 column 3 of the JSON data"
            const lineMatch = LINE_REGEX.exec(parseErrorMessage);
            const lineOneBased = lineMatch ? parseInt(lineMatch[1], 10) : null;
            const line = lineOneBased !== null ? lineOneBased - 1 : null;
            const columnMatch = COLUMN_REGEX.exec(parseErrorMessage);
            const columnOneBased = columnMatch ? parseInt(columnMatch[1], 10) : null;
            const column = columnOneBased !== null ? columnOneBased - 1 : null;
            const position = line !== null && column !== null ? calculatePosition(jsonText, line, column) : null;
            // line and column are one based in the message
            return {
                position,
                line,
                column,
                message: parseErrorMessage.replace(/^JSON.parse: /, '').replace(/ of the JSON data$/, '')
            };
        }
    }
    /**
     * Calculate the position in the text based on a line and column number
     * @param text
     * @param line     Zero-based line number
     * @param column   Zero-based column number
     */
    function calculatePosition(text, line, column) {
        let index = text.indexOf('\n');
        let i = 1;
        while (i < line && index !== -1) {
            index = text.indexOf('\n', index + 1);
            i++;
        }
        return index !== -1
            ? index + column + 1 // +1 for the return character itself
            : null;
    }
    function countCharacterOccurrences(text, character, start = 0, end = text.length) {
        let count = 0;
        for (let i = start; i < end; i++) {
            if (text.charAt(i) === character) {
                count++;
            }
        }
        return count;
    }
    /**
     * Find the text location of a JSON path
     */
    // TODO: write unit tests
    function findTextLocation(text, path) {
        try {
            const jsmap = jsonSourceMap.parse(text);
            const pointerName = immutableJSONPatch.compileJSONPointer(path);
            const pointer = jsmap.pointers[pointerName];
            if (pointer) {
                return {
                    path: path,
                    line: pointer.key ? pointer.key.line : pointer.value ? pointer.value.line : 0,
                    column: pointer.key ? pointer.key.column : pointer.value ? pointer.value.column : 0,
                    from: pointer.key ? pointer.key.pos : pointer.value ? pointer.value.pos : 0,
                    to: pointer.keyEnd ? pointer.keyEnd.pos : pointer.valueEnd ? pointer.valueEnd.pos : 0
                };
            }
        }
        catch (err) {
            console.error(err);
        }
        return null;
    }
    /**
     * Convert a JSON object, array, or value to another type
     * If it cannot be converted, an error is thrown
     */
    function convertValue(value, type) {
        // FIXME: improve the TypeScript here, there are a couple of conversions
        if (type === 'array') {
            if (Array.isArray(value)) {
                // nothing to do
                return value;
            }
            if (isObject$1(value)) {
                return objectToArray(value);
            }
            if (typeof value === 'string') {
                const parsedValue = JSON.parse(value);
                if (Array.isArray(parsedValue)) {
                    return parsedValue;
                }
                if (isObject$1(parsedValue)) {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    return objectToArray(parsedValue);
                }
            }
        }
        if (type === 'object') {
            if (Array.isArray(value)) {
                return arrayToObject(value);
            }
            if (isObject$1(value)) {
                // nothing to do
                return value;
            }
            if (typeof value === 'string') {
                const parsedValue = JSON.parse(value);
                if (isObject$1(parsedValue)) {
                    return parsedValue;
                }
                if (Array.isArray(parsedValue)) {
                    return arrayToObject(parsedValue);
                }
            }
        }
        if (type === 'value') {
            if (isObjectOrArray(value)) {
                return JSON.stringify(value);
            }
            // nothing to do
            return value;
        }
        throw new Error(`Cannot convert ${valueType(value)} to ${type}`);
    }
    /**
     * Check whether provided value is valid a content type for JSONEditor
     * Returns a string with validation error message when there is an issue,
     * or null otherwise
     */
    function validateContentType(content) {
        if (!isObject$1(content)) {
            return 'Content must be an object';
        }
        if (content.json !== undefined) {
            if (content.text !== undefined) {
                return 'Content must contain either a property "json" or a property "text" but not both';
            }
            else {
                return null;
            }
        }
        else {
            if (content.text === undefined) {
                return 'Content must contain either a property "json" or a property "text"';
            }
            else if (typeof content.text !== 'string') {
                return 'Content "text" property must be string';
            }
            else {
                return null;
            }
        }
    }
    /**
     * Check whether content contains text (and not JSON)
     */
    function isTextContent(content) {
        return typeof content.text === 'string';
    }
    /**
     * Returns true when the (estimated) size of the contents exceeds the
     * provided maxSize.
     * @param content
     * @param maxSize  Maximum content size in bytes
     */
    function isLargeContent(content, maxSize) {
        return estimateSerializedSize(content, maxSize) > maxSize;
    }
    /**
     * A rough, fast estimation on whether a document is larger than given size
     * when serialized.
     *
     * maxSize is an optional max size in bytes. When reached, size estimation will
     * be cancelled. This is useful when you're only interested in knowing whether
     * the size exceeds a certain maximum size.
     */
    function estimateSerializedSize(content, maxSize = Infinity) {
        if (isTextContent(content)) {
            return content.text.length;
        }
        const json = content.json;
        let estimatedSize = 0;
        function recurse(json) {
            if (Array.isArray(json)) {
                // open and close bracket, commas between items
                estimatedSize += 2 + (json.length - 1);
                if (estimatedSize > maxSize) {
                    return estimatedSize;
                }
                for (let i = 0; i < json.length; i++) {
                    const item = json[i];
                    recurse(item);
                    if (estimatedSize > maxSize) {
                        return estimatedSize;
                    }
                }
            }
            else if (isObject$1(json)) {
                const keys = Object.keys(json);
                // open and close brackets, separators between all keys and values, comma's between key/value pairs
                estimatedSize += 2 + keys.length + (keys.length - 1);
                for (let k = 0; k < keys.length; k++) {
                    const key = keys[k];
                    const value = json[key];
                    // key length and double quotes around it
                    estimatedSize += key.length + 2;
                    recurse(value);
                }
            }
            else if (typeof json === 'string') {
                estimatedSize += json.length + 2; // string length plus two for the double quote characters
            }
            else {
                // true, false, null, number
                estimatedSize += String(json).length;
            }
        }
        recurse(json);
        return estimatedSize;
    }
    const POSITION_REGEX = /(position|char) (\d+)/;
    const LINE_REGEX = /line (\d+)/;
    const COLUMN_REGEX = /column (\d+)/;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

    var freeGlobal$1 = freeGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root$2 = freeGlobal$1 || freeSelf || Function('return this')();

    var root$3 = root$2;

    /** Built-in value references. */
    var Symbol$1 = root$3.Symbol;

    var Symbol$2 = Symbol$1;

    /** Used for built-in method references. */
    var objectProto$f = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$d = objectProto$f.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$1 = objectProto$f.toString;

    /** Built-in value references. */
    var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined;

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty$d.call(value, symToStringTag$1),
          tag = value[symToStringTag$1];

      try {
        value[symToStringTag$1] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString$1.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }

    /** Used for built-in method references. */
    var objectProto$e = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto$e.toString;

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /** `Object#toString` result references. */
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';

    /** Built-in value references. */
    var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined;

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /** `Object#toString` result references. */
    var symbolTag$3 = '[object Symbol]';

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag$3);
    }

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    var isArray$1 = isArray;

    /** Used as references for various `Number` constants. */
    var INFINITY$2 = 1 / 0;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$2 = Symbol$2 ? Symbol$2.prototype : undefined,
        symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray$1(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
    }

    /** Used to match a single whitespace character. */
    var reWhitespace = /\s/;

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */
    function trimmedEndIndex(string) {
      var index = string.length;

      while (index-- && reWhitespace.test(string.charAt(index))) {}
      return index;
    }

    /** Used to match leading whitespace. */
    var reTrimStart = /^\s+/;

    /**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */
    function baseTrim(string) {
      return string
        ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
        : string;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /** Used as references for various `Number` constants. */
    var INFINITY$1 = 1 / 0,
        MAX_INTEGER = 1.7976931348623157e+308;

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY$1 || value === -INFINITY$1) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity$2(value) {
      return value;
    }

    /** `Object#toString` result references. */
    var asyncTag = '[object AsyncFunction]',
        funcTag$2 = '[object Function]',
        genTag$1 = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }

    /** Used to detect overreaching core-js shims. */
    var coreJsData = root$3['__core-js_shared__'];

    var coreJsData$1 = coreJsData;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /** Used for built-in method references. */
    var funcProto$1 = Function.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$1 = funcProto$1.toString;

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString$1.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used for built-in method references. */
    var funcProto = Function.prototype,
        objectProto$d = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$c = objectProto$d.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty$c).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /* Built-in method references that are verified to be native. */
    var WeakMap$1 = getNative(root$3, 'WeakMap');

    var WeakMap$2 = WeakMap$1;

    /** Built-in value references. */
    var objectCreate = Object.create;

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    var baseCreate$1 = baseCreate;

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop$1() {
      // No operation performed.
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /** Used to detect hot functions by number of calls within a span of milliseconds. */
    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeNow = Date.now;

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant$4(value) {
      return function() {
        return value;
      };
    }

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    var defineProperty$1 = defineProperty;

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty$1 ? identity$2 : function(func, string) {
      return defineProperty$1(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant$4(string),
        'writable': true
      });
    };

    var baseSetToString$1 = baseSetToString;

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString$1);

    var setToString$1 = setToString;

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$2 = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER$2 : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty$1) {
        defineProperty$1(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /** Used for built-in method references. */
    var objectProto$c = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$b = objectProto$c.hasOwnProperty;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty$b.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$2 = Math.max;

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax$2(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax$2(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString$1(overRest(func, start, identity$2), func + '');
    }

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$1 = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
    }

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /** Used for built-in method references. */
    var objectProto$b = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$b;

      return value === proto;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /** `Object#toString` result references. */
    var argsTag$3 = '[object Arguments]';

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag$3;
    }

    /** Used for built-in method references. */
    var objectProto$a = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$a = objectProto$a.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable$1 = objectProto$a.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty$a.call(value, 'callee') &&
        !propertyIsEnumerable$1.call(value, 'callee');
    };

    var isArguments$1 = isArguments;

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /** Detect free variable `exports`. */
    var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

    /** Built-in value references. */
    var Buffer$1 = moduleExports$2 ? root$3.Buffer : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    var isBuffer$1 = isBuffer;

    /** `Object#toString` result references. */
    var argsTag$2 = '[object Arguments]',
        arrayTag$2 = '[object Array]',
        boolTag$3 = '[object Boolean]',
        dateTag$3 = '[object Date]',
        errorTag$2 = '[object Error]',
        funcTag$1 = '[object Function]',
        mapTag$6 = '[object Map]',
        numberTag$3 = '[object Number]',
        objectTag$3 = '[object Object]',
        regexpTag$3 = '[object RegExp]',
        setTag$6 = '[object Set]',
        stringTag$3 = '[object String]',
        weakMapTag$2 = '[object WeakMap]';

    var arrayBufferTag$3 = '[object ArrayBuffer]',
        dataViewTag$4 = '[object DataView]',
        float32Tag$2 = '[object Float32Array]',
        float64Tag$2 = '[object Float64Array]',
        int8Tag$2 = '[object Int8Array]',
        int16Tag$2 = '[object Int16Array]',
        int32Tag$2 = '[object Int32Array]',
        uint8Tag$2 = '[object Uint8Array]',
        uint8ClampedTag$2 = '[object Uint8ClampedArray]',
        uint16Tag$2 = '[object Uint16Array]',
        uint32Tag$2 = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
    typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
    typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
    typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
    typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
    typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] =
    typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] =
    typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] =
    typedArrayTags[mapTag$6] = typedArrayTags[numberTag$3] =
    typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] =
    typedArrayTags[setTag$6] = typedArrayTags[stringTag$3] =
    typedArrayTags[weakMapTag$2] = false;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    /** Detect free variable `exports`. */
    var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports$1 && freeGlobal$1.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    var nodeUtil$1 = nodeUtil;

    /* Node.js helper references. */
    var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    var isTypedArray$1 = isTypedArray;

    /** Used for built-in method references. */
    var objectProto$9 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$9 = objectProto$9.hasOwnProperty;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray$1(value),
          isArg = !isArr && isArguments$1(value),
          isBuff = !isArr && !isArg && isBuffer$1(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty$9.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys = overArg(Object.keys, Object);

    var nativeKeys$1 = nativeKeys;

    /** Used for built-in method references. */
    var objectProto$8 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$8 = objectProto$8.hasOwnProperty;

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys$1(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$8.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys$1(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /** Used for built-in method references. */
    var objectProto$7 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$7 = objectProto$7.hasOwnProperty;

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty$7.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/;

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray$1(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /* Built-in method references that are verified to be native. */
    var nativeCreate = getNative(Object, 'create');

    var nativeCreate$1 = nativeCreate;

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

    /** Used for built-in method references. */
    var objectProto$6 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$6 = objectProto$6.hasOwnProperty;

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate$1) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? undefined : result;
      }
      return hasOwnProperty$6.call(data, key) ? data[key] : undefined;
    }

    /** Used for built-in method references. */
    var objectProto$5 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$5 = objectProto$5.hasOwnProperty;

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$5.call(data, key);
    }

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate$1 && value === undefined) ? HASH_UNDEFINED$1 : value;
      return this;
    }

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /** Used for built-in method references. */
    var arrayProto = Array.prototype;

    /** Built-in value references. */
    var splice = arrayProto.splice;

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /* Built-in method references that are verified to be native. */
    var Map$1 = getNative(root$3, 'Map');

    var Map$2 = Map$1;

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map$2 || ListCache),
        'string': new Hash
      };
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /** Error message constants. */
    var FUNC_ERROR_TEXT$2 = 'Expected a function';

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT$2);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /** Used to match property names within property paths. */
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    var stringToPath$1 = stringToPath;

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray$1(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath$1(toString(value));
    }

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get$2(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /** Built-in value references. */
    var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined;

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray$1(value) || isArguments$1(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /** Built-in value references. */
    var getPrototype = overArg(Object.getPrototypeOf, Object);

    var getPrototype$1 = getPrototype;

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack$1(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    // Add methods to `Stack`.
    Stack$1.prototype.clear = stackClear;
    Stack$1.prototype['delete'] = stackDelete;
    Stack$1.prototype.get = stackGet;
    Stack$1.prototype.has = stackHas;
    Stack$1.prototype.set = stackSet;

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys$1(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /** Detect free variable `exports`. */
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root$3.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /** Used for built-in method references. */
    var objectProto$4 = Object.prototype;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    var getSymbols$1 = getSymbols;

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols$1(source), object);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols$1(object));
        object = getPrototype$1(object);
      }
      return result;
    };

    var getSymbolsIn$1 = getSymbolsIn;

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn$1(source), object);
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys$1, getSymbols$1);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn$1);
    }

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(root$3, 'DataView');

    var DataView$1 = DataView;

    /* Built-in method references that are verified to be native. */
    var Promise$1 = getNative(root$3, 'Promise');

    var Promise$2 = Promise$1;

    /* Built-in method references that are verified to be native. */
    var Set$1 = getNative(root$3, 'Set');

    var Set$2 = Set$1;

    /** `Object#toString` result references. */
    var mapTag$5 = '[object Map]',
        objectTag$2 = '[object Object]',
        promiseTag = '[object Promise]',
        setTag$5 = '[object Set]',
        weakMapTag$1 = '[object WeakMap]';

    var dataViewTag$3 = '[object DataView]';

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView$1),
        mapCtorString = toSource(Map$2),
        promiseCtorString = toSource(Promise$2),
        setCtorString = toSource(Set$2),
        weakMapCtorString = toSource(WeakMap$2);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$3) ||
        (Map$2 && getTag(new Map$2) != mapTag$5) ||
        (Promise$2 && getTag(Promise$2.resolve()) != promiseTag) ||
        (Set$2 && getTag(new Set$2) != setTag$5) ||
        (WeakMap$2 && getTag(new WeakMap$2) != weakMapTag$1)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag$2 ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag$3;
            case mapCtorString: return mapTag$5;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag$5;
            case weakMapCtorString: return weakMapTag$1;
          }
        }
        return result;
      };
    }

    var getTag$1 = getTag;

    /** Used for built-in method references. */
    var objectProto$3 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$4 = objectProto$3.hasOwnProperty;

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty$4.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /** Built-in value references. */
    var Uint8Array$1 = root$3.Uint8Array;

    var Uint8Array$2 = Uint8Array$1;

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
        symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /** `Object#toString` result references. */
    var boolTag$2 = '[object Boolean]',
        dateTag$2 = '[object Date]',
        mapTag$4 = '[object Map]',
        numberTag$2 = '[object Number]',
        regexpTag$2 = '[object RegExp]',
        setTag$4 = '[object Set]',
        stringTag$2 = '[object String]',
        symbolTag$2 = '[object Symbol]';

    var arrayBufferTag$2 = '[object ArrayBuffer]',
        dataViewTag$2 = '[object DataView]',
        float32Tag$1 = '[object Float32Array]',
        float64Tag$1 = '[object Float64Array]',
        int8Tag$1 = '[object Int8Array]',
        int16Tag$1 = '[object Int16Array]',
        int32Tag$1 = '[object Int32Array]',
        uint8Tag$1 = '[object Uint8Array]',
        uint8ClampedTag$1 = '[object Uint8ClampedArray]',
        uint16Tag$1 = '[object Uint16Array]',
        uint32Tag$1 = '[object Uint32Array]';

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$2:
          return cloneArrayBuffer(object);

        case boolTag$2:
        case dateTag$2:
          return new Ctor(+object);

        case dataViewTag$2:
          return cloneDataView(object, isDeep);

        case float32Tag$1: case float64Tag$1:
        case int8Tag$1: case int16Tag$1: case int32Tag$1:
        case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
          return cloneTypedArray(object, isDeep);

        case mapTag$4:
          return new Ctor;

        case numberTag$2:
        case stringTag$2:
          return new Ctor(object);

        case regexpTag$2:
          return cloneRegExp(object);

        case setTag$4:
          return new Ctor;

        case symbolTag$2:
          return cloneSymbol(object);
      }
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate$1(getPrototype$1(object))
        : {};
    }

    /** `Object#toString` result references. */
    var mapTag$3 = '[object Map]';

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag$1(value) == mapTag$3;
    }

    /* Node.js helper references. */
    var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    var isMap$1 = isMap;

    /** `Object#toString` result references. */
    var setTag$3 = '[object Set]';

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag$1(value) == setTag$3;
    }

    /* Node.js helper references. */
    var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    var isSet$1 = isSet;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$1 = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG$1 = 4;

    /** `Object#toString` result references. */
    var argsTag$1 = '[object Arguments]',
        arrayTag$1 = '[object Array]',
        boolTag$1 = '[object Boolean]',
        dateTag$1 = '[object Date]',
        errorTag$1 = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag$2 = '[object Map]',
        numberTag$1 = '[object Number]',
        objectTag$1 = '[object Object]',
        regexpTag$1 = '[object RegExp]',
        setTag$2 = '[object Set]',
        stringTag$1 = '[object String]',
        symbolTag$1 = '[object Symbol]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag$1 = '[object ArrayBuffer]',
        dataViewTag$1 = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] =
    cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] =
    cloneableTags[boolTag$1] = cloneableTags[dateTag$1] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag$2] =
    cloneableTags[numberTag$1] = cloneableTags[objectTag$1] =
    cloneableTags[regexpTag$1] = cloneableTags[setTag$2] =
    cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag$1] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG$1,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG$1;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray$1(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag$1(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer$1(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag$1 || tag == argsTag$1 || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack$1);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet$1(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap$1(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys$1);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_SYMBOLS_FLAG = 4;

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$5 = 1,
        COMPARE_UNORDERED_FLAG$3 = 2;

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$4 = 1,
        COMPARE_UNORDERED_FLAG$2 = 2;

    /** `Object#toString` result references. */
    var boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        mapTag$1 = '[object Map]',
        numberTag = '[object Number]',
        regexpTag = '[object RegExp]',
        setTag$1 = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol$2 ? Symbol$2.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array$2(object), new Uint8Array$2(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag$1:
          var convert = mapToArray;

        case setTag$1:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$3 = 1;

    /** Used for built-in method references. */
    var objectProto$2 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$3 = objectProto$2.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$3.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$2 = 1;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        objectTag = '[object Object]';

    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$2 = objectProto$1.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray$1(object),
          othIsArr = isArray$1(other),
          objTag = objIsArr ? arrayTag : getTag$1(object),
          othTag = othIsArr ? arrayTag : getTag$1(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer$1(object)) {
        if (!isBuffer$1(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack$1);
        return (objIsArr || isTypedArray$1(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty$2.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty$2.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack$1);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack$1);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$1 = 1,
        COMPARE_UNORDERED_FLAG$1 = 2;

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack$1;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys$1(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray$1(object) || isArguments$1(object));
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get$2(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity$2;
      }
      if (typeof value == 'object') {
        return isArray$1(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    var baseFor$1 = baseFor;

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor$1(object, iteratee, keys$1);
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    var baseEach$1 = baseEach;

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now$1 = function() {
      return root$3.Date.now();
    };

    var now$2 = now$1;

    /** Error message constants. */
    var FUNC_ERROR_TEXT$1 = 'Expected a function';

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$1 = Math.max,
        nativeMin$1 = Math.min;

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce$1(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax$1(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now$2();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now$2());
      }

      function debounced() {
        var time = now$2(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity$2;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    var baseForRight$1 = baseForRight;

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight$1(object, iteratee, keys$1);
    }

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    var baseEachRight$1 = baseEachRight;

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray$1(collection) ? arrayEachRight : baseEachRight$1;
      return func(collection, castFunction(iteratee));
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach$1(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray$1(collection) ? arrayMap : baseMap;
      return func(collection, baseIteratee(iteratee));
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /** `Object#toString` result references. */
    var mapTag = '[object Map]',
        setTag = '[object Set]';

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$1 = objectProto.hasOwnProperty;

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray$1(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer$1(value) || isTypedArray$1(value) || isArguments$1(value))) {
        return !value.length;
      }
      var tag = getTag$1(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty$1.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, baseIteratee(iteratee), baseLt)
        : undefined;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray$1(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity$2];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeMax = Math.max;

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    var range$1 = range;

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    var sortBy$1 = sortBy;

    /** Error message constants. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce$1(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin = Math.min;

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = castFunction(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /**
     * Parse a JSONPointer, and turn array indices into numeric values.
     * For example, '/array/2/name' returns ['array', 2, 'name'] when array turns
     * out to be an actual Array
     *
     * @param {JSON} json
     * @param {string} path
     */
    // TODO: unit test
    function parseJSONPointerWithArrayIndices(json, path) {
        const parsedPath = immutableJSONPatch.parseJSONPointer(path);
        // parse Array indexes into a number
        for (let i = 0; i < parsedPath.length; i++) {
            const section = parsedPath[i];
            if (ARRAY_INDEX_REGEX.exec(section)) {
                // this path part contains a number.
                // See if the document actually contains an array
                const parentPath = parsedPath.slice(0, i);
                const parent = immutableJSONPatch.getIn(json, parentPath);
                if (Array.isArray(parent)) {
                    parsedPath[i] = parseInt(section);
                }
            }
        }
        return parsedPath;
    }
    // test whether a string only contains one or digits, like "1" or "204"
    const ARRAY_INDEX_REGEX = /^\d+$/;

    /**
     * Create sections that can be expanded.
     * Used to display a button like "Show items 100-200"
     */
    function getExpandItemsSections(startIndex, endIndex) {
        // expand the start of the section
        const section1 = {
            start: startIndex,
            end: Math.min(nextRoundNumber(startIndex), endIndex)
        };
        // expand the middle of the section
        const start2 = Math.max(currentRoundNumber((startIndex + endIndex) / 2), startIndex);
        const section2 = {
            start: start2,
            end: Math.min(nextRoundNumber(start2), endIndex)
        };
        // expand the end of the section
        const currentIndex = currentRoundNumber(endIndex);
        const previousIndex = currentIndex === endIndex ? currentIndex - ARRAY_SECTION_SIZE : currentIndex;
        const section3 = {
            start: Math.max(previousIndex, startIndex),
            end: endIndex
        };
        const sections = [section1];
        const showSection2 = section2.start >= section1.end && section2.end <= section3.start;
        if (showSection2) {
            sections.push(section2);
        }
        const showSection3 = section3.start >= (showSection2 ? section2.end : section1.end);
        if (showSection3) {
            sections.push(section3);
        }
        return sections;
    }
    /**
     * Sort and merge a list with sections
     */
    function mergeSections(sections) {
        const sortedSections = sortBy$1(sections, (section) => section.start);
        const mergedSections = [sortedSections[0]];
        for (let sortedIndex = 0; sortedIndex < sortedSections.length; sortedIndex++) {
            const mergedIndex = mergedSections.length - 1;
            const previous = mergedSections[mergedIndex];
            const current = sortedSections[sortedIndex];
            if (current.start <= previous.end) {
                // there is overlap -> replace the previous item
                mergedSections[mergedIndex] = {
                    start: Math.min(previous.start, current.start),
                    end: Math.max(previous.end, current.end)
                };
            }
            else {
                // no overlap, just add the item
                mergedSections.push(current);
            }
        }
        return mergedSections;
    }
    // TODO: write unit test
    function inVisibleSection(sections, index) {
        return sections.some((section) => {
            return index >= section.start && index < section.end;
        });
    }
    function nextRoundNumber(index) {
        return currentRoundNumber(index) + ARRAY_SECTION_SIZE;
    }
    function currentRoundNumber(index) {
        return Math.floor(index / ARRAY_SECTION_SIZE) * ARRAY_SECTION_SIZE;
    }

    /**
     * Sync a state object with the json it belongs to: update keys, limit, and expanded state
     *
     * When forceRefresh=true, force refreshing the expanded state
     */
    // TODO: refactor syncState so we don't have to pass path=[] all the time, this is only used internally for recursiveness
    function syncState(json, state, path, expand, forceRefresh = false) {
        // TODO: this function can be made way more efficient if we pass prevState:
        //  when immutable, we can simply be done already when the state === prevState
        const updatedState = Array.isArray(json) ? [] : {};
        updatedState[STATE_ID] = state && state[STATE_ID] ? state[STATE_ID] : uniqueId();
        if (isObject$1(json)) {
            updatedState[STATE_KEYS] = syncKeys(json, state && state[STATE_KEYS]);
            updatedState[STATE_EXPANDED] = state && !forceRefresh ? state[STATE_EXPANDED] : expand(path);
            if (updatedState[STATE_EXPANDED]) {
                Object.keys(json).forEach((key) => {
                    const childJson = json[key];
                    const childState = state && state[key];
                    updatedState[key] = syncState(childJson, childState, path.concat(key), expand, forceRefresh);
                });
            }
            // FIXME: must create new id's in case of duplicate id's
        }
        else if (Array.isArray(json)) {
            updatedState[STATE_EXPANDED] = state && !forceRefresh ? state[STATE_EXPANDED] : expand(path);
            // note that we reset the visible items when the state is not expanded
            updatedState[STATE_VISIBLE_SECTIONS] =
                state && updatedState[STATE_EXPANDED]
                    ? state[STATE_VISIBLE_SECTIONS] || DEFAULT_VISIBLE_SECTIONS
                    : DEFAULT_VISIBLE_SECTIONS;
            if (updatedState[STATE_EXPANDED]) {
                updatedState[STATE_VISIBLE_SECTIONS].forEach(({ start, end }) => {
                    forEachIndex(start, Math.min(json.length, end), (index) => {
                        const childJson = json[index];
                        const childState = state && state[index];
                        updatedState[index] = syncState(childJson, childState, path.concat(index), expand, forceRefresh);
                    });
                });
            }
        }
        else {
            // primitive value (string, number, boolean, null)
            if (state && state[STATE_ENFORCE_STRING] !== undefined) {
                // keep as is
                updatedState[STATE_ENFORCE_STRING] = state[STATE_ENFORCE_STRING];
            }
            else if (isStringContainingPrimitiveValue(json)) {
                // set to true when needed (else, leave undefined)
                updatedState[STATE_ENFORCE_STRING] = true;
            }
        }
        return updatedState;
    }
    function createState(json) {
        if (Array.isArray(json)) {
            const state = [];
            state[STATE_ID] = uniqueId();
            state[STATE_EXPANDED] = false;
            state[STATE_VISIBLE_SECTIONS] = DEFAULT_VISIBLE_SECTIONS;
            return state;
        }
        if (isObject$1(json)) {
            const state = {};
            state[STATE_ID] = uniqueId();
            state[STATE_EXPANDED] = false;
            state[STATE_KEYS] = Object.keys(json);
            return state;
        }
        // primitive value
        const state = {
            [STATE_ID]: uniqueId()
        };
        if (isStringContainingPrimitiveValue(json)) {
            state[STATE_ENFORCE_STRING] = true;
        }
        return state;
    }
    /**
     * Invoke a callback function for every visible item in the array
     * @param {JSON} json
     * @param {JSON} state
     * @param {function (index: number)} callback
     */
    function forEachVisibleIndex(json, state, callback) {
        state[STATE_VISIBLE_SECTIONS].forEach(({ start, end }) => {
            forEachIndex(start, Math.min(json.length, end), callback);
        });
    }
    // TODO: write unit tests
    function forEachKey(state, callback) {
        state[STATE_KEYS].forEach((key) => callback(key));
    }
    /**
     * Expand all nodes on given path
     * @param {JSON} json
     * @param {JSON} state
     * @param {Path} path
     * @return {JSON} returns the updated state
     */
    // TODO: write unit tests for expandPath
    function expandPath(json, state, path) {
        let updatedState = state;
        for (let i = 0; i < path.length; i++) {
            const partialPath = path.slice(0, i);
            const expandedPath = partialPath.concat(STATE_EXPANDED);
            updatedState = immutableJSONPatch.setIn(updatedState, expandedPath, true, true);
            // if needed, enlarge the expanded sections such that the search result becomes visible in the array
            if (Array.isArray(immutableJSONPatch.getIn(updatedState, partialPath))) {
                const key = path[i];
                const sectionsPath = partialPath.concat(STATE_VISIBLE_SECTIONS);
                const sections = (immutableJSONPatch.getIn(updatedState, sectionsPath) ||
                    DEFAULT_VISIBLE_SECTIONS);
                if (!inVisibleSection(sections, key)) {
                    const start = currentRoundNumber(key);
                    const end = nextRoundNumber(start);
                    const newSection = { start, end };
                    const updatedSections = mergeSections(sections.concat(newSection));
                    updatedState = immutableJSONPatch.setIn(updatedState, sectionsPath, updatedSections);
                }
            }
            // FIXME: the way to sync the state of this nested, just expanded object/array is complicated. Refactor this
            const partialJson = immutableJSONPatch.getIn(json, partialPath);
            updatedState = immutableJSONPatch.updateIn(updatedState, partialPath, (partialState) => {
                return syncState(partialJson, partialState, [], () => false);
            });
        }
        return updatedState;
    }
    /**
     * Expand a node, end expand it's childs according to the provided callback
     * @param {JSON} json
     * @param {JSON} state
     * @param {Path} path
     * @param {(path: Path) => boolean} expandedCallback
     * @returns {JSON} Returns the updated state
     */
    // TODO: write unit tests
    function expandWithCallback(json, state, path, expandedCallback) {
        const updatedState = immutableJSONPatch.setIn(state, path.concat(STATE_EXPANDED), true, true);
        return immutableJSONPatch.updateIn(updatedState, path, (childState) => {
            return syncState(immutableJSONPatch.getIn(json, path), childState, [], expandedCallback, true);
        });
    }
    /**
     * @param {JSON} json
     * @param {JSON} state
     * @param {Path} path
     * @returns {JSON} Returns the updated state
     */
    // TODO: write unit tests
    function collapse(json, state, path) {
        return immutableJSONPatch.updateIn(state, path, (childState) => {
            return syncState(immutableJSONPatch.getIn(json, path), childState, [], () => false, true);
        });
    }
    /**
     * Expand a section of items in an array
     * @param {JSON} json
     * @param {JSON} state
     * @param {Path} path
     * @param {Section} section
     * @return {JSON} returns the updated state
     */
    // TODO: write unit test
    function expandSection(json, state, path, section) {
        const updatedState = immutableJSONPatch.updateIn(state, path.concat(STATE_VISIBLE_SECTIONS), (sections) => {
            return mergeSections(sections.concat(section));
        });
        // instantiate all new expanded items
        return syncState(json, updatedState, path, () => false);
    }
    function syncKeys(object, prevKeys) {
        if (!prevKeys) {
            return Object.keys(object);
        }
        // copy the keys that still exist
        const keys = prevKeys.filter((key) => object[key] !== undefined);
        // add new keys
        const keysSet = new Set(keys);
        Object.keys(object)
            .filter((key) => !keysSet.has(key))
            .forEach((key) => keys.push(key));
        return keys;
    }
    /**
     * Apply patch operations to both json and state
     */
    function documentStatePatch(json, state, operations) {
        // TODO: split this function in smaller functions, it's too large
        function before(state, operation) {
            const { op, path, from } = operation;
            const parentPath = initial(path);
            let updatedState = state;
            let updatedOperation = operation;
            // correctly create state value
            if (operation.value !== undefined) {
                updatedOperation = {
                    ...updatedOperation,
                    value: createState(operation.value)
                };
            }
            // TODO: when path or from is not existing in updatedState, expand that now so we can handle it
            if (op === 'add' || op === 'copy') {
                const keys = getKeys(state, parentPath);
                if (keys) {
                    // this is a property inside an object
                    // add the key to STATE_KEYS if needed
                    const key = last(path);
                    if (!keys.includes(key)) {
                        updatedState = appendToKeys(updatedState, parentPath, key);
                    }
                }
                // shift the visible sections one down
                updatedState = shiftVisibleSections(updatedState, path, 1);
            }
            if (op === 'move') {
                const parentPath = initial(path);
                const keys = getKeys(updatedState, parentPath);
                const oldKey = last(from);
                const newKey = last(path);
                if (isEqual(initial(from), initial(path))) {
                    // move inside the same object
                    if (keys) {
                        if (oldKey !== newKey) {
                            // A key is renamed
                            // in case the new key is different but will replace an existing key, remove the existing key
                            updatedState = removeFromKeys(updatedState, parentPath, newKey);
                            // Replace the key in the object's STATE_KEYS so it maintains its index
                            updatedState = replaceInKeys(updatedState, parentPath, oldKey, newKey);
                        }
                        else {
                            // key is not renamed but moved -> move it to the end of the keys
                            updatedState = removeFromKeys(updatedState, parentPath, newKey);
                            updatedState = appendToKeys(updatedState, parentPath, newKey);
                        }
                    }
                }
                else {
                    // move from one object/array to an other -> remove old key, add new key
                    const fromParentPath = initial(from);
                    const fromKeys = getKeys(updatedState, fromParentPath);
                    if (fromKeys) {
                        updatedState = removeFromKeys(updatedState, fromParentPath, oldKey);
                    }
                    if (keys) {
                        updatedState = appendToKeys(updatedState, parentPath, newKey);
                    }
                }
                // shift the visible sections one up from where removed, and one down from where inserted
                updatedState = shiftVisibleSections(updatedState, from, -1);
                updatedState = shiftVisibleSections(updatedState, path, 1);
                // we must keep the existing state for example when renaming an object property
                const existingState = immutableJSONPatch.getIn(state, from);
                updatedOperation = { ...updatedOperation, value: existingState };
            }
            if (op === 'remove') {
                const parentPath = initial(path);
                const keys = getKeys(updatedState, parentPath);
                if (keys) {
                    // remove old key
                    const oldKey = last(path);
                    updatedState = removeFromKeys(updatedState, parentPath, oldKey);
                }
                else {
                    // shift the visible sections one up
                    updatedState = shiftVisibleSections(updatedState, path, -1);
                }
            }
            if (op === 'replace') {
                const parentPath = initial(path);
                const keys = getKeys(updatedState, parentPath);
                if (keys) {
                    const key = last(path);
                    if (!keys.includes(key)) {
                        updatedState = appendToKeys(updatedState, parentPath, key);
                    }
                }
            }
            return {
                json: updatedState,
                operation: updatedOperation
            };
        }
        function after(state, operation, previousState) {
            const { op, path } = operation;
            let updatedState = state;
            if (op === 'copy') {
                // copying state will introduce duplicate id's -> replace with a new id
                if (immutableJSONPatch.existsIn(updatedState, path.concat([STATE_ID]))) {
                    updatedState = immutableJSONPatch.setIn(updatedState, path.concat([STATE_ID]), uniqueId());
                }
            }
            if (op === 'replace') {
                // copy the old enforceString state after replacing a value
                const enforceString = immutableJSONPatch.getIn(previousState, path.concat([STATE_ENFORCE_STRING]));
                if (typeof enforceString === 'boolean') {
                    updatedState = immutableJSONPatch.setIn(updatedState, path.concat([STATE_ENFORCE_STRING]), enforceString);
                }
            }
            return updatedState;
        }
        // debug('documentStatePatch', json, state, operations) // TODO: cleanup logging
        const updatedJson = immutableJSONPatch.immutableJSONPatch(json, operations);
        const initializedState = initializeState(json, state, operations);
        const updatedState = immutableJSONPatch.immutableJSONPatch(initializedState, operations, { before, after });
        return {
            json: updatedJson,
            state: updatedState
        };
    }
    /**
     * Initialize the state needed to perform the JSON patch operations.
     * For example to a change in a nested object which is not expanded and
     * hence has no state initialize, we need to create this nested state
     * @param {JSON} json
     * @param {JSON} state
     * @param {JSONPatchDocument} operations
     */
    function initializeState(json, state, operations) {
        let updatedState = state;
        function initializePath(json, state, path) {
            let updatedState = state;
            if (immutableJSONPatch.existsIn(json, path) && !immutableJSONPatch.existsIn(updatedState, path)) {
                // first make sure the parent is initialized
                if (path.length > 0) {
                    updatedState = initializePath(json, updatedState, initial(path));
                }
                // then initialize the state itself
                updatedState = immutableJSONPatch.setIn(updatedState, path, createState(immutableJSONPatch.getIn(json, path)));
            }
            return updatedState;
        }
        operations.forEach((operation) => {
            const from = typeof operation.from === 'string'
                ? parseJSONPointerWithArrayIndices(json, operation.from)
                : null;
            const path = typeof operation.path === 'string'
                ? parseJSONPointerWithArrayIndices(json, operation.path)
                : null;
            if (operation.op === 'add') {
                updatedState = initializePath(json, updatedState, initial(path)); // initialize parent only
            }
            if (operation.op === 'copy' || operation.op === 'move') {
                updatedState = initializePath(json, updatedState, from);
                updatedState = initializePath(json, updatedState, initial(path)); // initialize parent only
            }
            if (operation.op === 'remove' || operation.op === 'replace' || operation.op === 'test') {
                updatedState = initializePath(json, updatedState, path);
            }
        });
        return updatedState;
    }
    /**
     * Shift visible sections in an Array with a specified offset
     * @param {JSON} state
     * @param {Path} path
     * @param {number} offset
     * @returns {JSON} Returns the updated state
     */
    function shiftVisibleSections(state, path, offset) {
        const parentPath = initial(path);
        const sectionsPath = parentPath.concat([STATE_VISIBLE_SECTIONS]);
        const visibleSections = immutableJSONPatch.getIn(state, sectionsPath);
        if (!visibleSections) {
            // nothing to do, this is no object but an array apparently :)
            return state;
        }
        const index = parseInt(last(path), 10);
        const shiftedVisibleSections = visibleSections.map((section) => {
            return {
                start: section.start > index ? section.start + offset : section.start,
                end: section.end >= index ? section.end + offset : section.end
            };
        });
        return immutableJSONPatch.setIn(state, sectionsPath, shiftedVisibleSections);
    }
    function getKeys(state, path) {
        return immutableJSONPatch.getIn(state, path.concat([STATE_KEYS]));
    }
    /**
     * Remove a key from the keys of an object at given path.
     * Returns the updated state
     */
    function removeFromKeys(state, path, key) {
        return immutableJSONPatch.updateIn(state, path.concat([STATE_KEYS]), (keys) => {
            const index = keys.indexOf(key);
            if (index === -1) {
                return keys;
            }
            const updatedKeys = keys.slice(0);
            updatedKeys.splice(index, 1);
            return updatedKeys;
        });
    }
    function replaceInKeys(state, path, oldKey, newKey) {
        return immutableJSONPatch.updateIn(state, path.concat([STATE_KEYS]), (keys) => {
            const index = keys.indexOf(oldKey);
            if (index === -1) {
                return keys;
            }
            const updatedKeys = keys.slice(0);
            updatedKeys.splice(index, 1, newKey);
            return updatedKeys;
        });
    }
    function appendToKeys(state, path, key) {
        return immutableJSONPatch.updateIn(state, path.concat([STATE_KEYS]), (keys) => keys.concat(key));
    }
    function getNextKeys(keys, key, includeKey = false) {
        const index = keys.indexOf(key);
        if (index !== -1) {
            return includeKey ? keys.slice(index) : keys.slice(index + 1);
        }
        else {
            // a new key, that doesn't have next keys
            return [];
        }
    }
    /**
     * Get all paths which are visible and rendered
     * @param {JSON} json
     * @param {JSON} state
     * @returns {Path[]}
     */
    // TODO: create memoized version of getVisiblePaths which remembers just the previous result if json and state are the same
    function getVisiblePaths(json, state) {
        const paths = [];
        function _recurse(json, state, path) {
            paths.push(path);
            if (json && state && state[STATE_EXPANDED] === true) {
                if (Array.isArray(json)) {
                    forEachVisibleIndex(json, state, (index) => {
                        _recurse(json[index], state[index], path.concat(index));
                    });
                }
                else {
                    // Object
                    forEachKey(state, (key) => {
                        _recurse(json[key], state[key], path.concat(key));
                    });
                }
            }
        }
        _recurse(json, state, []);
        return paths;
    }
    const CARET_POSITION = {
        INSIDE: 'inside',
        AFTER: 'after',
        KEY: 'key',
        VALUE: 'value'
    };
    /**
     * Get all caret position which are visible and rendered:
     * before a node, at a key, at a value, appending an object/arrayc
     * @param {JSON} json
     * @param {JSON} state
     * @param {boolean} [includeInside=true]
     * @returns {CaretPosition[]}
     */
    // TODO: create memoized version of getVisibleCaretPositions which remembers just the previous result if json and state are the same
    function getVisibleCaretPositions(json, state, includeInside = true) {
        const paths = [];
        function _recurse(json, state, path) {
            paths.push({ path, type: CARET_POSITION.VALUE });
            if (json && state && state[STATE_EXPANDED] === true) {
                if (includeInside) {
                    paths.push({ path, type: CARET_POSITION.INSIDE });
                }
                if (Array.isArray(json)) {
                    forEachVisibleIndex(json, state, (index) => {
                        const itemPath = path.concat(index);
                        _recurse(json[index], state[index], itemPath);
                        if (includeInside) {
                            paths.push({ path: itemPath, type: CARET_POSITION.AFTER });
                        }
                    });
                }
                else {
                    // Object
                    forEachKey(state, (key) => {
                        const propertyPath = path.concat(key);
                        paths.push({ path: propertyPath, type: CARET_POSITION.KEY });
                        _recurse(json[key], state[key], propertyPath);
                        if (includeInside) {
                            paths.push({ path: propertyPath, type: CARET_POSITION.AFTER });
                        }
                    });
                }
            }
        }
        _recurse(json, state, []);
        return paths;
    }
    /**
     * Find the previous visible path.
     * This can be the last child of the previous object or array, or the parent of a first entry.
     * @param {JSON} json
     * @param {JSON} state
     * @param {Path} path
     * @return {Path | null}
     */
    // TODO: write tests for getPreviousVisiblePath
    function getPreviousVisiblePath(json, state, path) {
        const visiblePaths = getVisiblePaths(json, state);
        const visiblePathPointers = visiblePaths.map(immutableJSONPatch.compileJSONPointer);
        const pathPointer = immutableJSONPatch.compileJSONPointer(path);
        const index = visiblePathPointers.indexOf(pathPointer);
        if (index !== -1 && index > 0) {
            return visiblePaths[index - 1];
        }
        return null;
    }
    /**
     * Find the next visible path.
     * This can be the next parent entry.
     * @param {JSON} json
     * @param {JSON} state
     * @param {Path} path
     * @return {Path | null} path
     */
    // TODO: write tests for getNextVisiblePath
    function getNextVisiblePath(json, state, path) {
        const visiblePaths = getVisiblePaths(json, state);
        const visiblePathPointers = visiblePaths.map(immutableJSONPatch.compileJSONPointer);
        const index = visiblePathPointers.indexOf(immutableJSONPatch.compileJSONPointer(path));
        if (index !== -1 && index < visiblePaths.length - 1) {
            return visiblePaths[index + 1];
        }
        return null;
    }

    const SELECTION_TYPE = {
        AFTER: 'after',
        INSIDE: 'inside',
        KEY: 'key',
        VALUE: 'value',
        MULTI: 'multi'
    };
    /**
     * Expand a selection start and end into an array containing all paths
     * between (and including) start and end
     *
     * @param {JSON} json
     * @param {JSON} state
     * @param {Path} anchorPath
     * @param {Path} focusPath
     * @return {Path[]} paths
     */
    function expandSelection(json, state, anchorPath, focusPath) {
        if (isEqual(anchorPath, focusPath)) {
            // just a single node
            return [anchorPath];
        }
        else {
            // multiple nodes
            const sharedPath = findSharedPath(anchorPath, focusPath);
            if (anchorPath.length === sharedPath.length || focusPath.length === sharedPath.length) {
                // a parent and a child, like ['arr', 1] and ['arr']
                return [sharedPath];
            }
            const anchorKey = anchorPath[sharedPath.length];
            const focusKey = focusPath[sharedPath.length];
            const value = immutableJSONPatch.getIn(json, sharedPath);
            if (isObject$1(value)) {
                const keys = getKeys(state, sharedPath);
                const anchorIndex = keys.indexOf(anchorKey);
                const focusIndex = keys.indexOf(focusKey);
                if (anchorIndex !== -1 && focusIndex !== -1) {
                    const startIndex = Math.min(anchorIndex, focusIndex);
                    const endIndex = Math.max(anchorIndex, focusIndex);
                    const paths = [];
                    for (let i = startIndex; i <= endIndex; i++) {
                        paths.push(sharedPath.concat(keys[i]));
                    }
                    return paths;
                }
            }
            if (Array.isArray(value)) {
                const startIndex = Math.min(anchorKey, focusKey);
                const endIndex = Math.max(anchorKey, focusKey);
                const paths = [];
                for (let i = startIndex; i <= endIndex; i++) {
                    paths.push(sharedPath.concat(i));
                }
                return paths;
            }
        }
        throw new Error('Failed to create selection');
    }
    /**
     * @param {Selection} selection
     * @return {Path} Returns parent path
     */
    function getParentPath(selection) {
        if (selection.type === SELECTION_TYPE.INSIDE) {
            return selection.focusPath;
        }
        else {
            return initial(selection.focusPath);
        }
    }
    /**
     * @param {Selection} selection
     * @returns {Path}
     */
    function getStartPath(selection) {
        return selection.paths ? head(selection.paths) : selection.focusPath;
    }
    /**
     * @param {Selection} selection
     * @returns {Path}
     */
    function getEndPath(selection) {
        return selection.paths ? last(selection.paths) : selection.focusPath;
    }
    /**
     * @param {Selection} selection
     * @param {Path} path
     * @return boolean
     */
    // TODO: write unit test
    function isSelectionInsidePath(selection, path) {
        return (pathStartsWith(selection.focusPath, path) &&
            (selection.focusPath.length > path.length || selection.type === SELECTION_TYPE.INSIDE));
    }
    /**
     * @param {Selection} selection
     * @param {Path} path
     * @param {string} anchorType
     * @return boolean
     */
    // TODO: write unit test
    function isPathInsideSelection(selection, path, anchorType) {
        if (!selection) {
            return false;
        }
        const p = path.slice(0);
        if (selection.type === SELECTION_TYPE.MULTI) {
            while (p.length > 0) {
                if (selection.pathsMap[immutableJSONPatch.compileJSONPointer(p)] === true) {
                    return true;
                }
                p.pop();
            }
        }
        if (selection.type === SELECTION_TYPE.KEY) {
            return anchorType === SELECTION_TYPE.KEY && isEqual(selection.focusPath, path);
        }
        if (selection.type === SELECTION_TYPE.VALUE) {
            if (anchorType === SELECTION_TYPE.VALUE && isEqual(selection.focusPath, path)) {
                return true;
            }
            if (pathStartsWith(path, selection.focusPath) &&
                path.length > selection.focusPath.length &&
                (anchorType === SELECTION_TYPE.KEY ||
                    anchorType === SELECTION_TYPE.VALUE ||
                    anchorType === SELECTION_TYPE.MULTI)) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {JSON} json
     * @param {JSON} state
     * @param {Selection} selection
     * @param {boolean} [keepAnchorPath=false]
     * @param {boolean} [useFocusPath=false]
     * @returns {Selection | null}
     */
    function getSelectionUp(json, state, selection, keepAnchorPath = false, useFocusPath = false) {
        const path = !useFocusPath && selection.paths ? head(selection.paths) : selection.focusPath;
        const previousPath = getPreviousVisiblePath(json, state, path);
        if (previousPath === null) {
            return null;
        }
        const anchorPath = previousPath;
        const focusPath = previousPath;
        if (keepAnchorPath) {
            // multi selection
            if (selection.type === SELECTION_TYPE.AFTER || selection.type === SELECTION_TYPE.INSIDE) {
                return createSelection(json, state, {
                    type: SELECTION_TYPE.MULTI,
                    anchorPath: selection.anchorPath,
                    focusPath: selection.anchorPath
                });
            }
            return createSelection(json, state, {
                type: SELECTION_TYPE.MULTI,
                anchorPath: selection.anchorPath,
                focusPath
            });
        }
        if (selection.type === SELECTION_TYPE.KEY) {
            const parentPath = initial(previousPath);
            const parent = immutableJSONPatch.getIn(json, parentPath);
            if (Array.isArray(parent) || isEmpty(previousPath)) {
                // switch to value selection: array has no keys, and root object also not
                return { type: SELECTION_TYPE.VALUE, anchorPath, focusPath };
            }
            else {
                return { type: SELECTION_TYPE.KEY, anchorPath, focusPath };
            }
        }
        if (selection.type === SELECTION_TYPE.VALUE) {
            return { type: SELECTION_TYPE.VALUE, anchorPath, focusPath };
        }
        if (selection.type === SELECTION_TYPE.AFTER) {
            // select the node itself, not the previous node,
            // FIXME: when after an expanded object/array, should go to the last item inside the object/array
            return createSelection(json, state, {
                type: SELECTION_TYPE.MULTI,
                anchorPath: path,
                focusPath: path
            });
        }
        if (selection.type === SELECTION_TYPE.INSIDE) {
            // select the node itself, not the previous node,
            return createSelection(json, state, {
                type: SELECTION_TYPE.MULTI,
                anchorPath: path,
                focusPath: path
            });
        }
        // multi selection -> select previous node
        return createSelection(json, state, {
            type: SELECTION_TYPE.MULTI,
            anchorPath,
            focusPath
        });
    }
    /**
     * @param {JSON} json
     * @param {JSON} state
     * @param {Selection} selection
     * @param {boolean} [keepAnchorPath=false]
     * @param {boolean} [useFocusPath=false]
     * @returns {Selection | null}
     */
    function getSelectionDown(json, state, selection, keepAnchorPath = false, useFocusPath = false) {
        // TODO: this function is too large, break it down in two separate functions: one for keepAnchorPath = true, and one for keepAnchorPath = false?
        const path = !useFocusPath && selection.paths ? last(selection.paths) : selection.focusPath;
        const nextPath = getNextVisiblePath(json, state, path);
        const anchorPath = nextPath;
        const focusPath = nextPath;
        if (nextPath === null) {
            return null;
        }
        if (keepAnchorPath) {
            // if the focusPath is an Array or object, we must not step into it but
            // over it, we pass state with this array/object collapsed
            const collapsedState = isObjectOrArray(immutableJSONPatch.getIn(json, path))
                ? immutableJSONPatch.setIn(state, path.concat(STATE_EXPANDED), false, true)
                : state;
            const nextPathAfter = getNextVisiblePath(json, collapsedState, path);
            // multi selection
            if (nextPathAfter === null) {
                return null;
            }
            if (selection.type === SELECTION_TYPE.AFTER) {
                return createSelection(json, state, {
                    type: SELECTION_TYPE.MULTI,
                    anchorPath: nextPathAfter,
                    focusPath: nextPathAfter
                });
            }
            if (selection.type === SELECTION_TYPE.INSIDE) {
                return createSelection(json, state, {
                    type: SELECTION_TYPE.MULTI,
                    anchorPath,
                    focusPath
                });
            }
            return createSelection(json, state, {
                type: SELECTION_TYPE.MULTI,
                anchorPath: selection.anchorPath,
                focusPath: nextPathAfter
            });
        }
        if (selection.type === SELECTION_TYPE.KEY) {
            const parentPath = initial(nextPath);
            const parent = immutableJSONPatch.getIn(json, parentPath);
            if (Array.isArray(parent)) {
                // switch to value selection: array has no keys
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                return { type: SELECTION_TYPE.VALUE, anchorPath, focusPath };
            }
            else {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                return { type: SELECTION_TYPE.KEY, anchorPath, focusPath };
            }
        }
        if (selection.type === SELECTION_TYPE.VALUE) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            return { type: SELECTION_TYPE.VALUE, anchorPath, focusPath };
        }
        if (selection.type === SELECTION_TYPE.INSIDE) {
            return createSelection(json, state, {
                type: SELECTION_TYPE.MULTI,
                anchorPath,
                focusPath
            });
        }
        // selection type MULTI or AFTER
        return createSelection(json, state, {
            type: SELECTION_TYPE.MULTI,
            anchorPath: nextPath,
            focusPath: nextPath
        });
    }
    /**
     * Get the next selection for a value inside the current object/array
     * If there is no next value, select AFTER.
     * Only applicable for SELECTION_TYPE.VALUE
     * @param {JSON} json
     * @param {JSON} state
     * @param {Selection} selection
     * @returns {Selection | null}
     */
    function getSelectionNextInside(json, state, selection) {
        // TODO: write unit tests for getSelectionNextInside
        const path = selection.focusPath;
        const parentPath = initial(path);
        const childPath = [last(path)];
        const nextPathInside = getNextVisiblePath(immutableJSONPatch.getIn(json, parentPath), immutableJSONPatch.getIn(state, parentPath), childPath);
        if (nextPathInside) {
            return createSelection(json, state, {
                type: SELECTION_TYPE.VALUE,
                path: parentPath.concat(nextPathInside)
            });
        }
        else {
            return createSelection(json, state, {
                type: SELECTION_TYPE.AFTER,
                path
            });
        }
    }
    /**
     * Find the caret position and its siblings for a given selection
     * @param {JSON} json
     * @param {JSON} state
     * @param {Selection} selection
     * @param {boolean} includeInside
     * @returns {{next: (CaretPosition|null), caret: (CaretPosition|null), previous: (CaretPosition|null)}}
     */
    // TODO: unit test
    function findCaretAndSiblings(json, state, selection, includeInside) {
        const visibleCaretPositions = getVisibleCaretPositions(json, state, includeInside);
        const index = visibleCaretPositions.findIndex((caret) => {
            return isEqual(caret.path, selection.focusPath) && caret.type === selection.type;
        });
        return {
            caret: index !== -1 ? visibleCaretPositions[index] : null,
            previous: index !== -1 && index > 0 ? visibleCaretPositions[index - 1] : null,
            next: index !== -1 && index < visibleCaretPositions.length - 1
                ? visibleCaretPositions[index + 1]
                : null
        };
    }
    /**
     * @param {JSON} json
     * @param {JSON} state
     * @param {Selection} selection
     * @param {boolean} [keepAnchorPath=false]
     * @param {boolean} [includeInside=true]
     * @returns {Selection | null}
     */
    function getSelectionLeft(json, state, selection, keepAnchorPath = false, includeInside = true) {
        const { caret, previous } = findCaretAndSiblings(json, state, selection, includeInside);
        if (keepAnchorPath) {
            if (selection.type !== SELECTION_TYPE.MULTI) {
                return createSelection(json, state, {
                    type: SELECTION_TYPE.MULTI,
                    anchorPath: selection.anchorPath,
                    focusPath: selection.focusPath
                });
            }
            return null;
        }
        if (caret && previous) {
            return createSelection(json, state, {
                type: previous.type,
                path: previous.path
            });
        }
        const parentPath = initial(selection.focusPath);
        const parent = immutableJSONPatch.getIn(json, parentPath);
        if (selection.type === SELECTION_TYPE.VALUE && Array.isArray(parent)) {
            return createSelection(json, state, {
                type: SELECTION_TYPE.MULTI,
                anchorPath: selection.focusPath,
                focusPath: selection.focusPath
            });
        }
        if (selection.type === SELECTION_TYPE.MULTI && !Array.isArray(parent)) {
            return createSelection(json, state, {
                type: SELECTION_TYPE.KEY,
                path: selection.focusPath
            });
        }
        return null;
    }
    /**
     * @param {JSON} json
     * @param {JSON} state
     * @param {Selection} selection
     * @param {boolean} [keepAnchorPath=false]
     * @param {boolean} [includeInside=true]
     * @returns {Selection | null}
     */
    function getSelectionRight(json, state, selection, keepAnchorPath = false, includeInside = true) {
        const { caret, next } = findCaretAndSiblings(json, state, selection, includeInside);
        if (keepAnchorPath) {
            if (selection.type !== SELECTION_TYPE.MULTI) {
                return createSelection(json, state, {
                    type: SELECTION_TYPE.MULTI,
                    anchorPath: selection.anchorPath,
                    focusPath: selection.focusPath
                });
            }
            return null;
        }
        if (caret && next) {
            return createSelection(json, state, {
                type: next.type,
                path: next.path
            });
        }
        if (selection.type === SELECTION_TYPE.MULTI) {
            return createSelection(json, state, {
                type: SELECTION_TYPE.VALUE,
                path: selection.focusPath
            });
        }
        return null;
    }
    /**
     * Get a proper initial selection based on what is visible
     * @param {JSON} json
     * @param {JSON} state
     * @returns {Selection}
     */
    function getInitialSelection(json, state) {
        const visiblePaths = getVisiblePaths(json, state);
        // find the first, deepest nested entry (normally a value, not an Object/Array)
        let index = 0;
        while (index < visiblePaths.length - 1 &&
            visiblePaths[index + 1].length > visiblePaths[index].length) {
            index++;
        }
        const path = visiblePaths[index];
        return path.length === 0 || Array.isArray(immutableJSONPatch.getIn(json, initial(path)))
            ? { type: SELECTION_TYPE.VALUE, anchorPath: path, focusPath: path } // Array items and root object/array do not have a key, so select value in that case
            : { type: SELECTION_TYPE.KEY, anchorPath: path, focusPath: path };
    }
    function createSelectionFromOperations(json, state, operations) {
        if (operations.length === 1) {
            const operation = head(operations);
            if (operation.op === 'replace' || operation.op === 'move') {
                // replaced value
                const path = parseJSONPointerWithArrayIndices(json, operation.path);
                return {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    type: SELECTION_TYPE.VALUE,
                    anchorPath: path,
                    focusPath: path,
                    edit: false
                };
            }
        }
        if (!isEmpty(operations) && operations.every((operation) => operation.op === 'move')) {
            const firstOp = head(operations);
            const otherOps = operations.slice(1);
            if (firstOp.from !== firstOp.path &&
                otherOps.every((operation) => operation.from === operation.path)) {
                // a renamed key
                const path = parseJSONPointerWithArrayIndices(json, firstOp.path);
                return {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    type: SELECTION_TYPE.KEY,
                    anchorPath: path,
                    focusPath: path,
                    edit: false
                };
            }
        }
        const paths = operations
            .filter((operation) => {
            return (operation.op !== 'test' &&
                operation.op !== 'remove' &&
                (operation.op !== 'move' || operation.from !== operation.path) &&
                typeof operation.path === 'string');
        })
            .map((operation) => parseJSONPointerWithArrayIndices(json, operation.path));
        if (isEmpty(paths)) {
            return null;
        }
        // TODO: make this function robust against operations which do not have consecutive paths or have wrongly ordered paths
        return {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            type: SELECTION_TYPE.MULTI,
            paths,
            anchorPath: head(paths),
            focusPath: last(paths),
            pathsMap: createPathsMap(paths)
        };
    }
    /**
     * @param {Path[]} paths
     * @returns {Object}
     */
    // TODO: write unit tests
    function createPathsMap(paths) {
        const pathsMap = {};
        paths.forEach((path) => {
            pathsMap[immutableJSONPatch.compileJSONPointer(path)] = true;
        });
        return pathsMap;
    }
    /**
     * Find the common path of two paths.
     * For example findCommonRoot(['arr', '1', 'name'], ['arr', '1', 'address', 'contact']) returns ['arr', '1']
     * @param {Path} path1
     * @param {Path} path2
     * @return {Path}
     */
    // TODO: write unit tests for findSharedPath
    function findSharedPath(path1, path2) {
        let i = 0;
        while (i < path1.length && i < path2.length && path1[i] === path2[i]) {
            i++;
        }
        return path1.slice(0, i);
    }
    /**
     * @param {Selection} [selection]
     * @returns {boolean}
     */
    function singleItemSelected(selection) {
        return (selection &&
            (selection.type === SELECTION_TYPE.KEY ||
                selection.type === SELECTION_TYPE.VALUE ||
                (selection.type === SELECTION_TYPE.MULTI && selection.paths.length === 1)));
    }
    /**
     * @param {JSON} json
     * @param {Selection} selection
     * @return {Path}
     */
    function findRootPath(json, selection) {
        return singleItemSelected(selection) && isObjectOrArray(immutableJSONPatch.getIn(json, selection.focusPath))
            ? selection.focusPath
            : initial(selection.focusPath); // the parent path of the paths
    }
    /**
     * @param {Path} path
     * @param {Path} parentPath
     * @return boolean
     */
    // TODO: unit test
    function pathStartsWith(path, parentPath) {
        if (path.length < parentPath.length) {
            return false;
        }
        for (let i = 0; i < parentPath.length; i++) {
            if (path[i] !== parentPath[i]) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {Selection} selection
     * @return {Selection}
     */
    // TODO: write unit tests
    function removeEditModeFromSelection(selection) {
        if (selection && selection.edit) {
            return {
                ...selection,
                edit: false
            };
        }
        else {
            return selection;
        }
    }
    /**
     * @param {JSON} json
     * @param {JSON} state
     * @param {SelectionSchema} selectionSchema
     * @return {Selection}
     */
    // TODO: write unit tests
    function createSelection(json, state, selectionSchema) {
        // TODO: remove next from SelectionSchema, pass it as a separate argument
        const { type, anchorPath, focusPath, path, edit = false, next = false, nextInside = false } = selectionSchema;
        if (type === SELECTION_TYPE.KEY) {
            let selection = {
                type,
                anchorPath: path,
                focusPath: path,
                edit
            };
            if (next) {
                selection = {
                    ...selection,
                    type: SELECTION_TYPE.VALUE
                };
            }
            return selection;
        }
        else if (type === SELECTION_TYPE.VALUE) {
            let selection = {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                type: SELECTION_TYPE.VALUE,
                anchorPath: path,
                focusPath: path,
                edit
            };
            if (next) {
                selection = getSelectionDown(json, state, selection) || selection;
            }
            if (nextInside) {
                selection = getSelectionNextInside(json, state, selection) || selection;
            }
            return selection;
        }
        else if (type === SELECTION_TYPE.AFTER) {
            return {
                type,
                anchorPath: path,
                focusPath: path
            };
        }
        else if (type === SELECTION_TYPE.INSIDE) {
            return {
                type,
                anchorPath: path,
                focusPath: path
            };
        }
        else if (type === SELECTION_TYPE.MULTI && path) {
            const paths = [path];
            return {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                type: SELECTION_TYPE.MULTI,
                anchorPath: path,
                focusPath: path,
                paths: paths,
                pathsMap: createPathsMap(paths)
            };
        }
        else if (anchorPath && focusPath) {
            const paths = expandSelection(json, state, anchorPath, focusPath);
            // the original anchorPath or focusPath may be somewhere inside the
            // returned paths: when one of the two paths is inside an object and the
            // other is outside. Then the selection is enlarged to span the whole object.
            const focusPathLast = pathStartsWith(focusPath, last(paths)) || pathStartsWith(anchorPath, head(paths));
            return {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                type: SELECTION_TYPE.MULTI,
                anchorPath: focusPathLast ? head(paths) : last(paths),
                focusPath: focusPathLast ? last(paths) : head(paths),
                paths,
                pathsMap: createPathsMap(paths)
            };
        }
        else {
            throw new TypeError(`Unknown type of selection ${JSON.stringify(selectionSchema)}`);
        }
    }
    /**
     * Turn selected contents into plain text partial JSON, usable for copying to
     * clipboard for example.
     * @param {JSON} json
     * @param {Selection} selection
     * @param {number} [indentation=2]
     * @returns {string | null}
     */
    function selectionToPartialJson(json, selection, indentation = 2) {
        if (selection.type === SELECTION_TYPE.KEY) {
            return last(selection.focusPath);
        }
        if (selection.type === SELECTION_TYPE.VALUE) {
            const value = immutableJSONPatch.getIn(json, selection.focusPath);
            return typeof value === 'string' ? value : JSON.stringify(value, null, indentation); // TODO: customizable indentation?
        }
        if (selection.type === SELECTION_TYPE.MULTI) {
            if (isEmpty(selection.focusPath)) {
                // root object -> does not have a parent key/index
                return JSON.stringify(json, null, indentation);
            }
            const parentPath = getParentPath(selection);
            const parent = immutableJSONPatch.getIn(json, parentPath);
            if (Array.isArray(parent)) {
                if (selection.paths.length === 1) {
                    // do not suffix a single selected array item with a comma
                    const item = immutableJSONPatch.getIn(json, head(selection.paths));
                    return JSON.stringify(item, null, indentation);
                }
                else {
                    return selection.paths
                        .map((path) => {
                        const item = immutableJSONPatch.getIn(json, path);
                        return `${JSON.stringify(item, null, indentation)},`;
                    })
                        .join('\n');
                }
            }
            else {
                // parent is Object
                return selection.paths
                    .map((path) => {
                    const key = last(path);
                    const value = immutableJSONPatch.getIn(json, path);
                    return `${JSON.stringify(key)}: ${JSON.stringify(value, null, indentation)},`;
                })
                    .join('\n');
            }
        }
        return null;
    }
    /**
     * @param {JSON} referenceJson
     * @param {Selection} selection
     * @returns {RecursiveSelection | null}
     */
    // TODO: write unit tests
    function createRecursiveSelection(referenceJson, selection) {
        if (!selection) {
            return null;
        }
        let result = {};
        const paths = selection.type === SELECTION_TYPE.MULTI ? selection.paths : [selection.focusPath];
        paths.forEach((path) => {
            const selectionPath = path.concat(STATE_SELECTION);
            // when the path is an array, we'll add a symbol on the array, but then
            // setIn has no information to determine whether to create an array or an
            // object, so we do that here explicitly based on referenceJson
            if (!immutableJSONPatch.existsIn(result, selectionPath)) {
                const item = immutableJSONPatch.getIn(referenceJson, selectionPath);
                result = immutableJSONPatch.setIn(result, selectionPath, Array.isArray(item) ? [] : {}, true);
            }
            result = immutableJSONPatch.setIn(result, selectionPath, selection, true);
        });
        return result;
    }
    /**
     * Create a selection which selects the whole document
     * @returns {Selection}
     */
    // TODO: write tests
    function selectAll$1() {
        return {
            type: SELECTION_TYPE.VALUE,
            anchorPath: [],
            focusPath: []
        };
    }
    /**
     * Test whether the current selection can be converted.
     * That is the case when the selection is a key/value, or a multi selection with only one path
     * @param {Selection} selection
     * @return {boolean}
     */
    function canConvert(selection) {
        if (!selection) {
            return false;
        }
        if (selection.type === SELECTION_TYPE.KEY || selection.type === SELECTION_TYPE.VALUE) {
            return true;
        }
        if (selection.type === SELECTION_TYPE.MULTI && selection.paths.length === 1) {
            return true;
        }
    }
    /**
     * @param {Path} path
     * @param {string} key
     * @param {RecursiveSelection} resolvedSelection
     * @returns {boolean}
     */
    // TODO: write unit test
    function keyIsSelected(path, key, resolvedSelection) {
        var _a;
        const keySelection = (_a = resolvedSelection === null || resolvedSelection === void 0 ? void 0 : resolvedSelection[key]) === null || _a === void 0 ? void 0 : _a[STATE_SELECTION];
        return keySelection && keySelection.type === SELECTION_TYPE.KEY && !keySelection.edit
            ? isEqual(keySelection.focusPath, path.concat(key))
            : false;
    }

    /**
     * Create serialization functions to escape and stringify text,
     * and the other way around: to parse and unescape text.
     * @param {{
     *   escapeControlCharacters: boolean,
     *   escapeUnicodeCharacters: boolean
     * }} options
     * @return {ValueNormalization}
     */
    function createNormalizationFunctions({ escapeControlCharacters, escapeUnicodeCharacters }) {
        if (escapeControlCharacters) {
            if (escapeUnicodeCharacters) {
                return normalizeControlAndUnicode;
            }
            else {
                return normalizeControl;
            }
        }
        else {
            if (escapeUnicodeCharacters) {
                return normalizeUnicode;
            }
            else {
                return normalizeNothing;
            }
        }
    }
    const normalizeControlAndUnicode = {
        escapeValue: (value) => jsonEscapeUnicode(jsonEscapeControl(String(value))),
        unescapeValue: (value) => jsonUnescapeControl(jsonUnescapeUnicode(value))
    };
    const normalizeControl = {
        escapeValue: (value) => jsonEscapeControl(String(value)),
        unescapeValue: (value) => jsonUnescapeControl(value)
    };
    const normalizeUnicode = {
        escapeValue: (value) => jsonEscapeUnicode(String(value)),
        unescapeValue: (value) => jsonUnescapeUnicode(value)
    };
    const normalizeNothing = {
        escapeValue: (value) => String(value),
        unescapeValue: (value) => value
    };
    /**
     * Source:  https://stackoverflow.com/questions/12271547/shouldnt-json-stringify-escape-unicode-characters
     * @param {string} value
     * @returns {string}
     */
    function jsonEscapeUnicode(value) {
        return value.replace(/[^\x20-\x7F]/g, (x) => {
            if (x === '\b' || x === '\f' || x === '\n' || x === '\r' || x === '\t') {
                return x;
            }
            return '\\u' + ('000' + x.codePointAt(0).toString(16)).slice(-4);
        });
    }
    /**
     * @param {string} value
     */
    function jsonUnescapeUnicode(value) {
        return value.replace(/\\u[a-fA-F0-9]{4}/g, (x) => {
            try {
                return JSON.parse('"' + x + '"');
            }
            catch (err) {
                return x;
            }
        });
    }
    const controlCharacters = {
        '\b': '\\b',
        '\f': '\\f',
        '\n': '\\n',
        '\r': '\\r',
        '\t': '\\t'
    };
    const escapedControlCharacters = {
        '\\b': '\b',
        '\\f': '\f',
        '\\n': '\n',
        '\\r': '\r',
        '\\t': '\t'
    };
    /**
     * @param {string} value
     */
    function jsonEscapeControl(value) {
        return value.replace(/[\b\f\n\r\t]/g, (x) => {
            return controlCharacters[x] || x;
        });
    }
    /**
     * @param {string} value
     */
    function jsonUnescapeControl(value) {
        return value.replace(/\\[bfnrt]/g, (x) => {
            return escapedControlCharacters[x] || x;
        });
    }
    /**
     * @param {any} value
     * @return {string} value
     */
    function addNewLineSuffix(value) {
        if (typeof value !== 'string') {
            return String(value);
        }
        if (value.endsWith('\n')) {
            // DOM innerText strips the last \n, therefore we add an extra \n here
            return value + '\n';
        }
        return value;
    }
    /**
     * Remove a newline suffix from text returned by element.innerText, it adds
     * one return too much.
     * @param {string} text
     * @returns {string}
     */
    function removeNewLineSuffix(text) {
        return text.replace(/\n$/, '');
    }
    function isChildOfNodeName(element, nodeName) {
        return isChildOf(element, (e) => e.nodeName.toUpperCase() === nodeName.toUpperCase());
    }
    function isChildOfAttribute(element, name, value) {
        return isChildOf(element, (e) => hasAttribute(e, name, value));
    }
    // test whether a DOM element is a content editable div
    function isContentEditableDiv(element) {
        return element.nodeName === 'DIV' && element.contentEditable === 'true';
    }
    function hasAttribute(element, name, value) {
        return typeof element.getAttribute === 'function' && element.getAttribute(name) === value;
    }
    /**
     * Test if the element or one of it's parents has a certain predicate
     * Can be use for example to check whether the element or it's parent has
     * a specific attribute or nodeName.
     * @param {HTMLElement} element
     * @param {function (element: HTMLElement) : boolean} predicate
     * @returns {*}
     */
    function isChildOf(element, predicate) {
        return !!findParent(element, predicate);
    }
    /**
     * Test if the element or one of its parents has a certain predicate
     * Can be use for example to check whether the element or it's parent has
     * a specific attribute or nodeName.
     * @param {HTMLElement} element
     * @param {function (element: HTMLElement) : boolean} predicate
     * @returns {HTMLElement | undefined}
     */
    function findParent(element, predicate) {
        let e = element;
        while (e && !predicate(e)) {
            e = e.parentNode;
        }
        return e || undefined;
    }
    /**
     * Set the cursor to the end of a content editable div
     * Source: https://stackoverflow.com/questions/13513329/set-cursor-to-the-end-of-contenteditable-div
     * @param {HTMLElement} element
     */
    function setCursorToEnd(element) {
        if (element.firstChild == null) {
            element.focus();
            return;
        }
        const range = document.createRange();
        const selection = window.getSelection();
        range.setStart(element, 1);
        range.collapse(true);
        selection.removeAllRanges();
        selection.addRange(range);
    }
    /**
     * Gets a DOM element's Window.  This is normally just the global `window`
     * variable, but if we opened a child window, it may be different.
     * @param {HTMLElement} element
     * @return {Window}
     */
    function getWindow(element) {
        return element && element.ownerDocument && element.ownerDocument.defaultView;
    }
    /**
     * @param {HTMLElement} element
     * @return {boolean}
     */
    function activeElementIsChildOf(element) {
        const window = getWindow(element);
        return isChildOf(window.document.activeElement, (e) => e === element);
    }
    /**
     * Traverse over the parents of the element until a node is found with the
     * searched for node name. If the element itself contains the nodeName, the
     * element itself will be returned
     * @param {HTMLElement} element
     * @param {string} nodeName
     * @return {HTMLElement | undefined}
     */
    function findParentWithNodeName(element, nodeName) {
        return findParent(element, (e) => e.nodeName === nodeName);
    }
    /**
     * @param {HTMLElement} target
     * @returns {string | null}
     */
    function getSelectionTypeFromTarget(target) {
        if (isChildOfAttribute(target, 'data-type', 'selectable-key')) {
            return SELECTION_TYPE.KEY;
        }
        if (isChildOfAttribute(target, 'data-type', 'selectable-value')) {
            return SELECTION_TYPE.VALUE;
        }
        if (isChildOfAttribute(target, 'data-type', 'insert-selection-area-inside')) {
            return SELECTION_TYPE.INSIDE;
        }
        if (isChildOfAttribute(target, 'data-type', 'insert-selection-area-after')) {
            return SELECTION_TYPE.AFTER;
        }
        return SELECTION_TYPE.MULTI;
    }
    /**
     * Encode a path into a string that can be used as attribute in HTML
     * @param {Path} path
     * @returns {string}
     */
    function encodeDataPath(path) {
        return encodeURIComponent(JSON.stringify(path));
    }
    /**
     * Decode a path that was stringified for use as an HTML attribute
     * @param {string} pathStr
     * @returns {Path}
     */
    function decodeDataPath(pathStr) {
        return JSON.parse(decodeURIComponent(pathStr));
    }
    /**
     * Find the data path of the given element. Traverses the parent nodes until find
     * @param {HTMLElement} target
     * @returns {Path | null}
     */
    function getDataPathFromTarget(target) {
        const parent = findParent(target, (element) => {
            return element.hasAttribute('data-path');
        });
        return parent ? decodeDataPath(parent.getAttribute('data-path')) : null;
    }
    /**
     * Find the nearest element in a given context menu with buttons or inputs
     */
    // TODO: unit test
    function findNearestElement({ allElements, currentElement, direction, hasPrio = () => true, margin = 10 }) {
        const all = map(allElements.filter(isVisible), calculateCenter);
        const current = calculateCenter(currentElement);
        function isVisible(element) {
            const rect = element.getBoundingClientRect();
            return rect.width > 0 && rect.height > 0;
        }
        function calculateCenter(element) {
            const rect = element.getBoundingClientRect();
            return {
                x: rect.left + rect.width / 2,
                y: rect.top + rect.height / 2,
                rect,
                element
            };
        }
        const isOnSameRow = (a, b) => Math.abs(a.y - b.y) < margin;
        const isLeft = (a, b) => a.rect.left + margin < b.rect.left;
        const isRight = (a, b) => a.rect.right > b.rect.right + margin;
        const isAbove = (a, b) => a.y + margin < b.y;
        const isBelow = (a, b) => a.y > b.y + margin;
        function distance(a, b, weightY = 1) {
            const diffX = a.x - b.x;
            const diffY = (a.y - b.y) * weightY;
            return Math.sqrt(diffX * diffX + diffY * diffY);
        }
        const distanceToCurrent = (candidate) => distance(candidate, current);
        const distanceToCurrentWeighted = (candidate) => distance(candidate, current, 10);
        if (direction === 'Left' || direction === 'Right') {
            // First we find the first button left from the current button on the same row
            // if not found, search the closest button left/right from current button
            const candidatesLeft = direction === 'Left'
                ? all.filter((button) => isLeft(button, current))
                : all.filter((button) => isRight(button, current));
            const candidatesLeftOnRow = candidatesLeft.filter((button) => isOnSameRow(button, current));
            const nearest = minBy(candidatesLeftOnRow, distanceToCurrent) ||
                minBy(candidatesLeft, distanceToCurrentWeighted);
            return nearest === null || nearest === void 0 ? void 0 : nearest.element;
        }
        if (direction === 'Up' || direction === 'Down') {
            // first we only search through the prio buttons
            // if there were no matching prio buttons, search all matching buttons
            const candidates = direction === 'Up'
                ? all.filter((button) => isAbove(button, current))
                : all.filter((button) => isBelow(button, current));
            const prioCandidates = candidates.filter((button) => hasPrio(button.element));
            const nearest = minBy(prioCandidates, distanceToCurrent) || minBy(candidates, distanceToCurrent);
            return nearest === null || nearest === void 0 ? void 0 : nearest.element;
        }
        return undefined;
    }

    const IS_MAC = typeof navigator !== 'undefined' ? navigator.platform.toUpperCase().indexOf('MAC') >= 0 : false;

    // inspiration: https://github.com/andrepolischuk/keycomb
    /**
     * Get a named key from a key code.
     * For example:
     *     keyFromCode(65) returns 'A'
     *     keyFromCode(13) returns 'Enter'
     */
    function nameFromKeyCode(code) {
        return codes[code] || '';
    }
    /**
     * Get the active key combination from a keyboard event.
     * For example returns "Ctrl+Shift+Up" or "Ctrl+A"
     * @param {KeyboardEvent} event
     * @return {string}
     */
    function keyComboFromEvent(event) {
        const combi = [];
        if (event.ctrlKey) {
            combi.push('Ctrl');
        }
        if (event.metaKey) {
            combi.push('Command');
        }
        if (event.altKey) {
            combi.push(IS_MAC ? 'Option' : 'Alt');
        }
        if (event.shiftKey) {
            combi.push('Shift');
        }
        const keyName = nameFromKeyCode(event.which);
        if (!metaCodes[keyName]) {
            // prevent output like 'Ctrl+Ctrl'
            combi.push(keyName);
        }
        return combi.join('+');
    }
    const metaCodes = {
        Ctrl: true,
        Command: true,
        Alt: true,
        Option: true,
        Shift: true
    };
    const codes = {
        8: 'Backspace',
        9: 'Tab',
        13: 'Enter',
        16: 'Shift',
        17: 'Ctrl',
        18: 'Alt',
        19: 'Pause_Break',
        20: 'Caps_Lock',
        27: 'Escape',
        33: 'Page_Up',
        34: 'Page_Down',
        35: 'End',
        36: 'Home',
        37: 'Left',
        38: 'Up',
        39: 'Right',
        40: 'Down',
        45: 'Insert',
        46: 'Delete',
        48: '0',
        49: '1',
        50: '2',
        51: '3',
        52: '4',
        53: '5',
        54: '6',
        55: '7',
        56: '8',
        57: '9',
        65: 'A',
        66: 'B',
        67: 'C',
        68: 'D',
        69: 'E',
        70: 'F',
        71: 'G',
        72: 'H',
        73: 'I',
        74: 'J',
        75: 'K',
        76: 'L',
        77: 'M',
        78: 'N',
        79: 'O',
        80: 'P',
        81: 'Q',
        82: 'R',
        83: 'S',
        84: 'T',
        85: 'U',
        86: 'V',
        87: 'W',
        88: 'X',
        89: 'Y',
        90: 'Z',
        91: 'Left_Window_Key',
        92: 'Right_Window_Key',
        93: 'Select_Key',
        96: 'Numpad_0',
        97: 'Numpad_1',
        98: 'Numpad_2',
        99: 'Numpad_3',
        100: 'Numpad_4',
        101: 'Numpad_5',
        102: 'Numpad_6',
        103: 'Numpad_7',
        104: 'Numpad_8',
        105: 'Numpad_9',
        106: 'Numpad_*',
        107: 'Numpad_+',
        109: 'Numpad_-',
        110: 'Numpad_.',
        111: 'Numpad_/',
        112: 'F1',
        113: 'F2',
        114: 'F3',
        115: 'F4',
        116: 'F5',
        117: 'F6',
        118: 'F7',
        119: 'F8',
        120: 'F9',
        121: 'F10',
        122: 'F11',
        123: 'F12',
        144: 'Num_Lock',
        145: 'Scroll_Lock',
        186: ';',
        187: '=',
        188: ',',
        189: '-',
        190: '.',
        191: '/',
        192: '`',
        219: '[',
        220: '\\',
        221: ']',
        222: "'"
    };

    /* node_modules/svelte-jsoneditor/components/modals/popup/AbsolutePopup.svelte generated by Svelte v3.48.0 */

    const { Error: Error_1$2, window: window_1$1 } = globals;
    const file$P = "node_modules/svelte-jsoneditor/components/modals/popup/AbsolutePopup.svelte";

    // (112:2) {#if popupComponent && popupProps}
    function create_if_block$t(ctx) {
    	let div;
    	let input;
    	let t;
    	let switch_instance;
    	let current;
    	const switch_instance_spread_levels = [/*popupProps*/ ctx[1]];
    	var switch_value = /*popupComponent*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			input = element("input");
    			t = space();
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(input, "class", "jse-hidden-input svelte-p9zniz");
    			add_location(input, file$P, 113, 6, 3915);
    			attr_dev(div, "class", "jse-absolute-popup-content svelte-p9zniz");
    			attr_dev(div, "style", /*calculateStyle*/ ctx[7]());
    			add_location(div, file$P, 112, 4, 3843);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input);
    			/*input_binding*/ ctx[10](input);
    			append_dev(div, t);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*popupProps*/ 2)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*popupProps*/ ctx[1])])
    			: {};

    			if (switch_value !== (switch_value = /*popupComponent*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*input_binding*/ ctx[10](null);
    			if (switch_instance) destroy_component(switch_instance);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$t.name,
    		type: "if",
    		source: "(112:2) {#if popupComponent && popupProps}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$U(ctx) {
    	let div;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*popupComponent*/ ctx[0] && /*popupProps*/ ctx[1] && create_if_block$t(ctx);
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t = space();
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "jse-absolute-popup svelte-p9zniz");
    			add_location(div, file$P, 105, 0, 3671);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$2("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			/*div_binding*/ ctx[11](div);
    			insert_dev(target, t, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window_1$1, "mousedown", /*handleWindowMouseDown*/ ctx[4], true, false, false),
    					listen_dev(window_1$1, "keydown", /*handleKeyDown*/ ctx[5], true, false, false),
    					listen_dev(window_1$1, "wheel", /*handleScrollWheel*/ ctx[6], true, false, false),
    					listen_dev(div, "mousedown", handleMouseDownInside, false, false, false),
    					listen_dev(div, "keydown", /*handleKeyDown*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*popupComponent*/ ctx[0] && /*popupProps*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*popupComponent, popupProps*/ 3) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$t(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			/*div_binding*/ ctx[11](null);
    			if (detaching) detach_dev(t);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$U.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function handleMouseDownInside(event) {
    	event.stopPropagation();
    }

    function instance$U($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AbsolutePopup', slots, ['default']);
    	const debug = createDebug('jsoneditor:AbsolutePopup');
    	let popupComponent = null;
    	let popupProps = null;
    	let popupOptions = {};
    	let refRootPopup;
    	let refHiddenInput;

    	function openAbsolutePopup(Component, props, options) {
    		debug('open...', options);
    		$$invalidate(0, popupComponent = Component);
    		$$invalidate(1, popupProps = props || {});
    		popupOptions = options || {};
    		tick().then(focus);
    	}

    	function closeAbsolutePopup() {
    		if (popupComponent) {
    			const onClose = popupOptions.onClose;
    			$$invalidate(0, popupComponent = null);
    			$$invalidate(1, popupProps = null);
    			popupOptions = {};

    			if (onClose) {
    				onClose();
    			}
    		}
    	}

    	function closeWhenOutside(event) {
    		if (popupOptions && popupOptions.closeOnOuterClick && !isChildOf(event.target, e => e === refRootPopup)) {
    			closeAbsolutePopup();
    		}
    	}

    	function handleWindowMouseDown(event) {
    		closeWhenOutside(event);
    	}

    	function handleKeyDown(event) {
    		const combo = keyComboFromEvent(event);

    		if (combo === 'Escape') {
    			closeAbsolutePopup();
    		}
    	}

    	function handleScrollWheel(event) {
    		closeWhenOutside(event);
    	}

    	function calculateStyle() {
    		function calculatePosition() {
    			if (popupOptions.anchor) {
    				const { anchor, width = 0, height = 0, offsetTop = 0, offsetLeft = 0, position } = popupOptions;
    				const { left, top, bottom, right } = anchor.getBoundingClientRect();
    				const positionAbove = position === 'top' || top + height > window.innerHeight && top > height;
    				const positionLeft = position === 'left' || left + width > window.innerWidth && left > width;

    				return {
    					left: positionLeft ? right - offsetLeft : left + offsetLeft,
    					top: positionAbove ? top - offsetTop : bottom + offsetTop,
    					positionAbove,
    					positionLeft
    				};
    			} else if (typeof popupOptions.left === 'number' && typeof popupOptions.top === 'number') {
    				const { left, top, width = 0, height = 0 } = popupOptions;
    				const positionAbove = top + height > window.innerHeight && top > height;
    				const positionLeft = left + width > window.innerWidth && left > width;
    				return { left, top, positionAbove, positionLeft };
    			} else {
    				throw new Error('Invalid config: pass either "left" and "top", or pass "anchor"');
    			}
    		}

    		const rootRect = refRootPopup.getBoundingClientRect();
    		const { left, top, positionAbove, positionLeft } = calculatePosition();

    		const verticalStyling = positionAbove
    		? `bottom: ${rootRect.top - top}px;`
    		: `top: ${top - rootRect.top}px;`;

    		const horizontalStyling = positionLeft
    		? `right: ${rootRect.left - left}px;`
    		: `left: ${left - rootRect.left}px;`;

    		return verticalStyling + horizontalStyling;
    	}

    	function focus() {
    		if (refHiddenInput) {
    			refHiddenInput.focus();
    		}
    	}

    	setContext('absolute-popup', { openAbsolutePopup, closeAbsolutePopup });
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AbsolutePopup> was created with unknown prop '${key}'`);
    	});

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refHiddenInput = $$value;
    			$$invalidate(3, refHiddenInput);
    		});
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refRootPopup = $$value;
    			$$invalidate(2, refRootPopup);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		createDebug,
    		setContext,
    		tick,
    		isChildOf,
    		keyComboFromEvent,
    		debug,
    		popupComponent,
    		popupProps,
    		popupOptions,
    		refRootPopup,
    		refHiddenInput,
    		openAbsolutePopup,
    		closeAbsolutePopup,
    		closeWhenOutside,
    		handleWindowMouseDown,
    		handleMouseDownInside,
    		handleKeyDown,
    		handleScrollWheel,
    		calculateStyle,
    		focus
    	});

    	$$self.$inject_state = $$props => {
    		if ('popupComponent' in $$props) $$invalidate(0, popupComponent = $$props.popupComponent);
    		if ('popupProps' in $$props) $$invalidate(1, popupProps = $$props.popupProps);
    		if ('popupOptions' in $$props) popupOptions = $$props.popupOptions;
    		if ('refRootPopup' in $$props) $$invalidate(2, refRootPopup = $$props.refRootPopup);
    		if ('refHiddenInput' in $$props) $$invalidate(3, refHiddenInput = $$props.refHiddenInput);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		popupComponent,
    		popupProps,
    		refRootPopup,
    		refHiddenInput,
    		handleWindowMouseDown,
    		handleKeyDown,
    		handleScrollWheel,
    		calculateStyle,
    		$$scope,
    		slots,
    		input_binding,
    		div_binding
    	];
    }

    class AbsolutePopup extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$U, create_fragment$U, not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AbsolutePopup",
    			options,
    			id: create_fragment$U.name
    		});
    	}
    }

    /*!
     * Font Awesome Free 6.1.1 by @fontawesome - https://fontawesome.com
     * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
     * Copyright 2022 Fonticons, Inc.
     */
    var faAngleDown = {
      prefix: 'fas',
      iconName: 'angle-down',
      icon: [384, 512, [8964], "f107", "M192 384c-8.188 0-16.38-3.125-22.62-9.375l-160-160c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L192 306.8l137.4-137.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-160 160C208.4 380.9 200.2 384 192 384z"]
    };
    var faAngleRight = {
      prefix: 'fas',
      iconName: 'angle-right',
      icon: [256, 512, [8250], "f105", "M64 448c-8.188 0-16.38-3.125-22.62-9.375c-12.5-12.5-12.5-32.75 0-45.25L178.8 256L41.38 118.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0l160 160c12.5 12.5 12.5 32.75 0 45.25l-160 160C80.38 444.9 72.19 448 64 448z"]
    };
    var faArrowDown = {
      prefix: 'fas',
      iconName: 'arrow-down',
      icon: [384, 512, [8595], "f063", "M374.6 310.6l-160 160C208.4 476.9 200.2 480 192 480s-16.38-3.125-22.62-9.375l-160-160c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 370.8V64c0-17.69 14.33-31.1 31.1-31.1S224 46.31 224 64v306.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0S387.1 298.1 374.6 310.6z"]
    };
    var faArrowDownShortWide = {
      prefix: 'fas',
      iconName: 'arrow-down-short-wide',
      icon: [576, 512, ["sort-amount-desc", "sort-amount-down-alt"], "f884", "M320 224H416c17.67 0 32-14.33 32-32s-14.33-32-32-32h-95.1c-17.67 0-32 14.33-32 32S302.3 224 320 224zM320 352H480c17.67 0 32-14.33 32-32s-14.33-32-32-32h-159.1c-17.67 0-32 14.33-32 32S302.3 352 320 352zM320 96h32c17.67 0 31.1-14.33 31.1-32s-14.33-32-31.1-32h-32c-17.67 0-32 14.33-32 32S302.3 96 320 96zM544 416h-223.1c-17.67 0-32 14.33-32 32s14.33 32 32 32H544c17.67 0 32-14.33 32-32S561.7 416 544 416zM192.4 330.7L160 366.1V64.03C160 46.33 145.7 32 128 32S96 46.33 96 64.03v302L63.6 330.7c-6.312-6.883-14.94-10.38-23.61-10.38c-7.719 0-15.47 2.781-21.61 8.414c-13.03 11.95-13.9 32.22-1.969 45.27l87.1 96.09c12.12 13.26 35.06 13.26 47.19 0l87.1-96.09c11.94-13.05 11.06-33.31-1.969-45.27C224.6 316.8 204.4 317.7 192.4 330.7z"]
    };
    var faSortAmountDownAlt = faArrowDownShortWide;
    var faArrowRotateLeft = {
      prefix: 'fas',
      iconName: 'arrow-rotate-left',
      icon: [512, 512, [8634, "arrow-left-rotate", "arrow-rotate-back", "arrow-rotate-backward", "undo"], "f0e2", "M480 256c0 123.4-100.5 223.9-223.9 223.9c-48.86 0-95.19-15.58-134.2-44.86c-14.14-10.59-17-30.66-6.391-44.81c10.61-14.09 30.69-16.97 44.8-6.375c27.84 20.91 61 31.94 95.89 31.94C344.3 415.8 416 344.1 416 256s-71.67-159.8-159.8-159.8C205.9 96.22 158.6 120.3 128.6 160H192c17.67 0 32 14.31 32 32S209.7 224 192 224H48c-17.67 0-32-14.31-32-32V48c0-17.69 14.33-32 32-32s32 14.31 32 32v70.23C122.1 64.58 186.1 32.11 256.1 32.11C379.5 32.11 480 132.6 480 256z"]
    };
    var faUndo = faArrowRotateLeft;
    var faArrowRotateRight = {
      prefix: 'fas',
      iconName: 'arrow-rotate-right',
      icon: [512, 512, [8635, "arrow-right-rotate", "arrow-rotate-forward", "redo"], "f01e", "M496 48V192c0 17.69-14.31 32-32 32H320c-17.69 0-32-14.31-32-32s14.31-32 32-32h63.39c-29.97-39.7-77.25-63.78-127.6-63.78C167.7 96.22 96 167.9 96 256s71.69 159.8 159.8 159.8c34.88 0 68.03-11.03 95.88-31.94c14.22-10.53 34.22-7.75 44.81 6.375c10.59 14.16 7.75 34.22-6.375 44.81c-39.03 29.28-85.36 44.86-134.2 44.86C132.5 479.9 32 379.4 32 256s100.5-223.9 223.9-223.9c69.15 0 134 32.47 176.1 86.12V48c0-17.69 14.31-32 32-32S496 30.31 496 48z"]
    };
    var faRedo = faArrowRotateRight;
    var faCaretDown = {
      prefix: 'fas',
      iconName: 'caret-down',
      icon: [320, 512, [], "f0d7", "M310.6 246.6l-127.1 128C176.4 380.9 168.2 384 160 384s-16.38-3.125-22.63-9.375l-127.1-128C.2244 237.5-2.516 223.7 2.438 211.8S19.07 192 32 192h255.1c12.94 0 24.62 7.781 29.58 19.75S319.8 237.5 310.6 246.6z"]
    };
    var faCaretRight = {
      prefix: 'fas',
      iconName: 'caret-right',
      icon: [256, 512, [], "f0da", "M118.6 105.4l128 127.1C252.9 239.6 256 247.8 256 255.1s-3.125 16.38-9.375 22.63l-128 127.1c-9.156 9.156-22.91 11.9-34.88 6.943S64 396.9 64 383.1V128c0-12.94 7.781-24.62 19.75-29.58S109.5 96.23 118.6 105.4z"]
    };
    var faCheck = {
      prefix: 'fas',
      iconName: 'check',
      icon: [448, 512, [10004, 10003], "f00c", "M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z"]
    };
    var faChevronDown = {
      prefix: 'fas',
      iconName: 'chevron-down',
      icon: [448, 512, [], "f078", "M224 416c-8.188 0-16.38-3.125-22.62-9.375l-192-192c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L224 338.8l169.4-169.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-192 192C240.4 412.9 232.2 416 224 416z"]
    };
    var faChevronUp = {
      prefix: 'fas',
      iconName: 'chevron-up',
      icon: [448, 512, [], "f077", "M416 352c-8.188 0-16.38-3.125-22.62-9.375L224 173.3l-169.4 169.4c-12.5 12.5-32.75 12.5-45.25 0s-12.5-32.75 0-45.25l192-192c12.5-12.5 32.75-12.5 45.25 0l192 192c12.5 12.5 12.5 32.75 0 45.25C432.4 348.9 424.2 352 416 352z"]
    };
    var faCircleNotch = {
      prefix: 'fas',
      iconName: 'circle-notch',
      icon: [512, 512, [], "f1ce", "M222.7 32.15C227.7 49.08 218.1 66.9 201.1 71.94C121.8 95.55 64 169.1 64 255.1C64 362 149.1 447.1 256 447.1C362 447.1 448 362 448 255.1C448 169.1 390.2 95.55 310.9 71.94C293.9 66.9 284.3 49.08 289.3 32.15C294.4 15.21 312.2 5.562 329.1 10.6C434.9 42.07 512 139.1 512 255.1C512 397.4 397.4 511.1 256 511.1C114.6 511.1 0 397.4 0 255.1C0 139.1 77.15 42.07 182.9 10.6C199.8 5.562 217.6 15.21 222.7 32.15V32.15z"]
    };
    var faClone = {
      prefix: 'fas',
      iconName: 'clone',
      icon: [512, 512, [], "f24d", "M0 224C0 188.7 28.65 160 64 160H128V288C128 341 170.1 384 224 384H352V448C352 483.3 323.3 512 288 512H64C28.65 512 0 483.3 0 448V224zM224 352C188.7 352 160 323.3 160 288V64C160 28.65 188.7 0 224 0H448C483.3 0 512 28.65 512 64V288C512 323.3 483.3 352 448 352H224z"]
    };
    var faCode = {
      prefix: 'fas',
      iconName: 'code',
      icon: [640, 512, [], "f121", "M414.8 40.79L286.8 488.8C281.9 505.8 264.2 515.6 247.2 510.8C230.2 505.9 220.4 488.2 225.2 471.2L353.2 23.21C358.1 6.216 375.8-3.624 392.8 1.232C409.8 6.087 419.6 23.8 414.8 40.79H414.8zM518.6 121.4L630.6 233.4C643.1 245.9 643.1 266.1 630.6 278.6L518.6 390.6C506.1 403.1 485.9 403.1 473.4 390.6C460.9 378.1 460.9 357.9 473.4 345.4L562.7 256L473.4 166.6C460.9 154.1 460.9 133.9 473.4 121.4C485.9 108.9 506.1 108.9 518.6 121.4V121.4zM166.6 166.6L77.25 256L166.6 345.4C179.1 357.9 179.1 378.1 166.6 390.6C154.1 403.1 133.9 403.1 121.4 390.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4L121.4 121.4C133.9 108.9 154.1 108.9 166.6 121.4C179.1 133.9 179.1 154.1 166.6 166.6V166.6z"]
    };
    var faCopy = {
      prefix: 'fas',
      iconName: 'copy',
      icon: [512, 512, [], "f0c5", "M384 96L384 0h-112c-26.51 0-48 21.49-48 48v288c0 26.51 21.49 48 48 48H464c26.51 0 48-21.49 48-48V128h-95.1C398.4 128 384 113.6 384 96zM416 0v96h96L416 0zM192 352V128h-144c-26.51 0-48 21.49-48 48v288c0 26.51 21.49 48 48 48h192c26.51 0 48-21.49 48-48L288 416h-32C220.7 416 192 387.3 192 352z"]
    };
    var faCropSimple = {
      prefix: 'fas',
      iconName: 'crop-simple',
      icon: [512, 512, ["crop-alt"], "f565", "M128 384H352V448H128C92.65 448 64 419.3 64 384V128H32C14.33 128 0 113.7 0 96C0 78.33 14.33 64 32 64H64V32C64 14.33 78.33 0 96 0C113.7 0 128 14.33 128 32V384zM384 128H160V64H384C419.3 64 448 92.65 448 128V384H480C497.7 384 512 398.3 512 416C512 433.7 497.7 448 480 448H448V480C448 497.7 433.7 512 416 512C398.3 512 384 497.7 384 480V128z"]
    };
    var faCropAlt = faCropSimple;
    var faEllipsisVertical = {
      prefix: 'fas',
      iconName: 'ellipsis-vertical',
      icon: [128, 512, ["ellipsis-v"], "f142", "M64 360C94.93 360 120 385.1 120 416C120 446.9 94.93 472 64 472C33.07 472 8 446.9 8 416C8 385.1 33.07 360 64 360zM64 200C94.93 200 120 225.1 120 256C120 286.9 94.93 312 64 312C33.07 312 8 286.9 8 256C8 225.1 33.07 200 64 200zM64 152C33.07 152 8 126.9 8 96C8 65.07 33.07 40 64 40C94.93 40 120 65.07 120 96C120 126.9 94.93 152 64 152z"]
    };
    var faEllipsisV = faEllipsisVertical;
    var faFilter = {
      prefix: 'fas',
      iconName: 'filter',
      icon: [512, 512, [], "f0b0", "M3.853 54.87C10.47 40.9 24.54 32 40 32H472C487.5 32 501.5 40.9 508.1 54.87C514.8 68.84 512.7 85.37 502.1 97.33L320 320.9V448C320 460.1 313.2 471.2 302.3 476.6C291.5 482 278.5 480.9 268.8 473.6L204.8 425.6C196.7 419.6 192 410.1 192 400V320.9L9.042 97.33C-.745 85.37-2.765 68.84 3.854 54.87L3.853 54.87z"]
    };
    var faGear = {
      prefix: 'fas',
      iconName: 'gear',
      icon: [512, 512, [9881, "cog"], "f013", "M495.9 166.6C499.2 175.2 496.4 184.9 489.6 191.2L446.3 230.6C447.4 238.9 448 247.4 448 256C448 264.6 447.4 273.1 446.3 281.4L489.6 320.8C496.4 327.1 499.2 336.8 495.9 345.4C491.5 357.3 486.2 368.8 480.2 379.7L475.5 387.8C468.9 398.8 461.5 409.2 453.4 419.1C447.4 426.2 437.7 428.7 428.9 425.9L373.2 408.1C359.8 418.4 344.1 427 329.2 433.6L316.7 490.7C314.7 499.7 307.7 506.1 298.5 508.5C284.7 510.8 270.5 512 255.1 512C241.5 512 227.3 510.8 213.5 508.5C204.3 506.1 197.3 499.7 195.3 490.7L182.8 433.6C167 427 152.2 418.4 138.8 408.1L83.14 425.9C74.3 428.7 64.55 426.2 58.63 419.1C50.52 409.2 43.12 398.8 36.52 387.8L31.84 379.7C25.77 368.8 20.49 357.3 16.06 345.4C12.82 336.8 15.55 327.1 22.41 320.8L65.67 281.4C64.57 273.1 64 264.6 64 256C64 247.4 64.57 238.9 65.67 230.6L22.41 191.2C15.55 184.9 12.82 175.3 16.06 166.6C20.49 154.7 25.78 143.2 31.84 132.3L36.51 124.2C43.12 113.2 50.52 102.8 58.63 92.95C64.55 85.8 74.3 83.32 83.14 86.14L138.8 103.9C152.2 93.56 167 84.96 182.8 78.43L195.3 21.33C197.3 12.25 204.3 5.04 213.5 3.51C227.3 1.201 241.5 0 256 0C270.5 0 284.7 1.201 298.5 3.51C307.7 5.04 314.7 12.25 316.7 21.33L329.2 78.43C344.1 84.96 359.8 93.56 373.2 103.9L428.9 86.14C437.7 83.32 447.4 85.8 453.4 92.95C461.5 102.8 468.9 113.2 475.5 124.2L480.2 132.3C486.2 143.2 491.5 154.7 495.9 166.6V166.6zM256 336C300.2 336 336 300.2 336 255.1C336 211.8 300.2 175.1 256 175.1C211.8 175.1 176 211.8 176 255.1C176 300.2 211.8 336 256 336z"]
    };
    var faCog = faGear;
    var faMagnifyingGlass = {
      prefix: 'fas',
      iconName: 'magnifying-glass',
      icon: [512, 512, [128269, "search"], "f002", "M500.3 443.7l-119.7-119.7c27.22-40.41 40.65-90.9 33.46-144.7C401.8 87.79 326.8 13.32 235.2 1.723C99.01-15.51-15.51 99.01 1.724 235.2c11.6 91.64 86.08 166.7 177.6 178.9c53.8 7.189 104.3-6.236 144.7-33.46l119.7 119.7c15.62 15.62 40.95 15.62 56.57 0C515.9 484.7 515.9 459.3 500.3 443.7zM79.1 208c0-70.58 57.42-128 128-128s128 57.42 128 128c0 70.58-57.42 128-128 128S79.1 278.6 79.1 208z"]
    };
    var faSearch = faMagnifyingGlass;
    var faPaste = {
      prefix: 'fas',
      iconName: 'paste',
      icon: [512, 512, ["file-clipboard"], "f0ea", "M320 96V80C320 53.49 298.5 32 272 32H215.4C204.3 12.89 183.6 0 160 0S115.7 12.89 104.6 32H48C21.49 32 0 53.49 0 80v320C0 426.5 21.49 448 48 448l144 .0013L192 176C192 131.8 227.8 96 272 96H320zM160 88C146.8 88 136 77.25 136 64S146.8 40 160 40S184 50.75 184 64S173.3 88 160 88zM416 128v96h96L416 128zM384 224L384 128h-112C245.5 128 224 149.5 224 176v288c0 26.51 21.49 48 48 48h192c26.51 0 48-21.49 48-48V256h-95.99C398.4 256 384 241.6 384 224z"]
    };
    var faPen = {
      prefix: 'fas',
      iconName: 'pen',
      icon: [512, 512, [128394], "f304", "M362.7 19.32C387.7-5.678 428.3-5.678 453.3 19.32L492.7 58.75C517.7 83.74 517.7 124.3 492.7 149.3L444.3 197.7L314.3 67.72L362.7 19.32zM421.7 220.3L188.5 453.4C178.1 463.8 165.2 471.5 151.1 475.6L30.77 511C22.35 513.5 13.24 511.2 7.03 504.1C.8198 498.8-1.502 489.7 .976 481.2L36.37 360.9C40.53 346.8 48.16 333.9 58.57 323.5L291.7 90.34L421.7 220.3z"]
    };
    var faScissors = {
      prefix: 'fas',
      iconName: 'scissors',
      icon: [512, 512, [9986, 9988, 9984, "cut"], "f0c4", "M396.8 51.2C425.1 22.92 470.9 22.92 499.2 51.2C506.3 58.27 506.3 69.73 499.2 76.8L216.5 359.5C221.3 372.1 224 385.7 224 400C224 461.9 173.9 512 112 512C50.14 512 0 461.9 0 400C0 338.1 50.14 287.1 112 287.1C126.3 287.1 139.9 290.7 152.5 295.5L191.1 255.1L152.5 216.5C139.9 221.3 126.3 224 112 224C50.14 224 0 173.9 0 112C0 50.14 50.14 0 112 0C173.9 0 224 50.14 224 112C224 126.3 221.3 139.9 216.5 152.5L255.1 191.1L396.8 51.2zM160 111.1C160 85.49 138.5 63.1 112 63.1C85.49 63.1 64 85.49 64 111.1C64 138.5 85.49 159.1 112 159.1C138.5 159.1 160 138.5 160 111.1zM112 448C138.5 448 160 426.5 160 400C160 373.5 138.5 352 112 352C85.49 352 64 373.5 64 400C64 426.5 85.49 448 112 448zM278.6 342.6L342.6 278.6L499.2 435.2C506.3 442.3 506.3 453.7 499.2 460.8C470.9 489.1 425.1 489.1 396.8 460.8L278.6 342.6z"]
    };
    var faCut = faScissors;
    var faSquareCaretDown = {
      prefix: 'fas',
      iconName: 'square-caret-down',
      icon: [448, 512, ["caret-square-down"], "f150", "M384 32H64C28.65 32 0 60.65 0 96v320c0 35.34 28.65 64 64 64h320c35.35 0 64-28.66 64-64V96C448 60.65 419.3 32 384 32zM345.6 232.3l-104 112C237 349.2 230.7 352 224 352s-13.03-2.781-17.59-7.656l-104-112c-6.5-7-8.219-17.19-4.407-25.94C101.8 197.7 110.5 192 120 192h208c9.531 0 18.19 5.656 21.1 14.41C353.8 215.2 352.1 225.3 345.6 232.3z"]
    };
    var faCaretSquareDown = faSquareCaretDown;
    var faSquareCaretUp = {
      prefix: 'fas',
      iconName: 'square-caret-up',
      icon: [448, 512, ["caret-square-up"], "f151", "M384 32H64C28.65 32 0 60.65 0 96v320c0 35.34 28.65 64 64 64h320c35.35 0 64-28.66 64-64V96C448 60.65 419.3 32 384 32zM349.1 305.6C346.2 314.3 337.5 320 328 320h-208c-9.531 0-18.19-5.656-22-14.41C94.19 296.8 95.91 286.7 102.4 279.7l104-112c9.125-9.75 26.06-9.75 35.19 0l104 112C352.1 286.7 353.8 296.8 349.1 305.6z"]
    };
    var faCaretSquareUp = faSquareCaretUp;
    var faTriangleExclamation = {
      prefix: 'fas',
      iconName: 'triangle-exclamation',
      icon: [512, 512, [9888, "exclamation-triangle", "warning"], "f071", "M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z"]
    };
    var faExclamationTriangle = faTriangleExclamation;
    var faWrench = {
      prefix: 'fas',
      iconName: 'wrench',
      icon: [512, 512, [128295], "f0ad", "M507.6 122.8c-2.904-12.09-18.25-16.13-27.04-7.338l-76.55 76.56l-83.1-.0002l0-83.1l76.55-76.56c8.791-8.789 4.75-24.14-7.336-27.04c-23.69-5.693-49.34-6.111-75.92 .2484c-61.45 14.7-109.4 66.9-119.2 129.3C189.8 160.8 192.3 186.7 200.1 210.1l-178.1 178.1c-28.12 28.12-28.12 73.69 0 101.8C35.16 504.1 53.56 512 71.1 512s36.84-7.031 50.91-21.09l178.1-178.1c23.46 7.736 49.31 10.24 76.17 6.004c62.41-9.84 114.6-57.8 129.3-119.2C513.7 172.1 513.3 146.5 507.6 122.8zM80 456c-13.25 0-24-10.75-24-24c0-13.26 10.75-24 24-24s24 10.74 24 24C104 445.3 93.25 456 80 456z"]
    };
    var faXmark = {
      prefix: 'fas',
      iconName: 'xmark',
      icon: [320, 512, [128473, 10005, 10006, 10060, 215, "close", "multiply", "remove", "times"], "f00d", "M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z"]
    };
    var faTimes = faXmark;

    /**
     * Return a human readable document size
     * For example formatSize(7570718) outputs '7.6 MB'
     * @param size
     * @param kilo Is 1000 by default, you can specify 1024 if you
     *                             want the output in KiB
     * @return Returns a human readable size
     */
    function formatSize(size, kilo = 1000) {
        if (size < 0.9 * kilo) {
            return size.toFixed() + ' B';
        }
        const KB = size / kilo;
        if (KB < 0.9 * kilo) {
            return KB.toFixed(1) + ' KB';
        }
        const MB = KB / kilo;
        if (MB < 0.9 * kilo) {
            return MB.toFixed(1) + ' MB';
        }
        const GB = MB / kilo;
        if (GB < 0.9 * kilo) {
            return GB.toFixed(1) + ' GB';
        }
        const TB = GB / kilo;
        return TB.toFixed(1) + ' TB';
    }

    const debug$1 = createDebug('jsoneditor:FocusTracker');
    function createFocusTracker({ onMount, onDestroy, getWindow, hasFocus, onFocus, onBlur }) {
        let blurTimeoutHandle;
        let focus = false;
        function handleFocusIn() {
            const newFocus = hasFocus();
            if (newFocus) {
                clearTimeout(blurTimeoutHandle);
                if (!focus) {
                    debug$1('focus');
                    onFocus();
                    focus = newFocus;
                }
            }
        }
        function handleFocusOut() {
            if (focus) {
                // We set focus to false after timeout. Often, you get a blur and directly
                // another focus when moving focus from one button to another.
                // The focusIn handler will cancel any pending blur timer in those cases
                clearTimeout(blurTimeoutHandle);
                blurTimeoutHandle = setTimeout(() => {
                    debug$1('blur');
                    focus = false;
                    onBlur();
                });
            }
        }
        onMount(() => {
            debug$1('mount FocusTracker');
            const window = getWindow();
            if (window) {
                window.addEventListener('focusin', handleFocusIn, true);
                window.addEventListener('focusout', handleFocusOut, true);
            }
        });
        onDestroy(() => {
            debug$1('destroy FocusTracker');
            const window = getWindow();
            if (window) {
                window.removeEventListener('focusin', handleFocusIn, true);
                window.removeEventListener('focusout', handleFocusOut, true);
            }
        });
    }

    /* node_modules/svelte-awesome/components/svg/Path.svelte generated by Svelte v3.48.0 */

    const file$O = "node_modules/svelte-awesome/components/svg/Path.svelte";

    function create_fragment$T(ctx) {
    	let path;
    	let path_id_value;

    	let path_levels = [
    		{
    			id: path_id_value = "path-" + /*id*/ ctx[0]
    		},
    		/*data*/ ctx[1]
    	];

    	let path_data = {};

    	for (let i = 0; i < path_levels.length; i += 1) {
    		path_data = assign(path_data, path_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			set_svg_attributes(path, path_data);
    			add_location(path, file$O, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(path, path_data = get_spread_update(path_levels, [
    				dirty & /*id*/ 1 && path_id_value !== (path_id_value = "path-" + /*id*/ ctx[0]) && { id: path_id_value },
    				dirty & /*data*/ 2 && /*data*/ ctx[1]
    			]));
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$T.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$T($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Path', slots, []);
    	let { id } = $$props;
    	let { data = {} } = $$props;
    	const writable_props = ['id', 'data'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Path> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    	};

    	$$self.$capture_state = () => ({ id, data });

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [id, data];
    }

    class Path extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$T, create_fragment$T, safe_not_equal, { id: 0, data: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Path",
    			options,
    			id: create_fragment$T.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[0] === undefined && !('id' in props)) {
    			console.warn("<Path> was created without expected prop 'id'");
    		}
    	}

    	get id() {
    		throw new Error("<Path>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Path>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get data() {
    		throw new Error("<Path>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<Path>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-awesome/components/svg/Polygon.svelte generated by Svelte v3.48.0 */

    const file$N = "node_modules/svelte-awesome/components/svg/Polygon.svelte";

    function create_fragment$S(ctx) {
    	let polygon;
    	let polygon_id_value;

    	let polygon_levels = [
    		{
    			id: polygon_id_value = "polygon-" + /*id*/ ctx[0]
    		},
    		/*data*/ ctx[1]
    	];

    	let polygon_data = {};

    	for (let i = 0; i < polygon_levels.length; i += 1) {
    		polygon_data = assign(polygon_data, polygon_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			polygon = svg_element("polygon");
    			set_svg_attributes(polygon, polygon_data);
    			add_location(polygon, file$N, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, polygon, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			set_svg_attributes(polygon, polygon_data = get_spread_update(polygon_levels, [
    				dirty & /*id*/ 1 && polygon_id_value !== (polygon_id_value = "polygon-" + /*id*/ ctx[0]) && { id: polygon_id_value },
    				dirty & /*data*/ 2 && /*data*/ ctx[1]
    			]));
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(polygon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$S.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$S($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Polygon', slots, []);
    	let { id } = $$props;
    	let { data = {} } = $$props;
    	const writable_props = ['id', 'data'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Polygon> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    	};

    	$$self.$capture_state = () => ({ id, data });

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [id, data];
    }

    class Polygon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$S, create_fragment$S, safe_not_equal, { id: 0, data: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Polygon",
    			options,
    			id: create_fragment$S.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[0] === undefined && !('id' in props)) {
    			console.warn("<Polygon> was created without expected prop 'id'");
    		}
    	}

    	get id() {
    		throw new Error("<Polygon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Polygon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get data() {
    		throw new Error("<Polygon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<Polygon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-awesome/components/svg/Raw.svelte generated by Svelte v3.48.0 */

    const file$M = "node_modules/svelte-awesome/components/svg/Raw.svelte";

    function create_fragment$R(ctx) {
    	let g;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			add_location(g, file$M, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			g.innerHTML = /*raw*/ ctx[0];
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*raw*/ 1) g.innerHTML = /*raw*/ ctx[0];		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$R.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$R($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Raw', slots, []);
    	let cursor = 0xd4937;

    	function getId() {
    		cursor += 1;
    		return `fa-${cursor.toString(16)}`;
    	}

    	let raw;
    	let { data } = $$props;

    	function getRaw(data) {
    		if (!data || !data.raw) {
    			return null;
    		}

    		let rawData = data.raw;
    		const ids = {};

    		rawData = rawData.replace(/\s(?:xml:)?id=["']?([^"')\s]+)/g, (match, id) => {
    			const uniqueId = getId();
    			ids[id] = uniqueId;
    			return ` id="${uniqueId}"`;
    		});

    		rawData = rawData.replace(/#(?:([^'")\s]+)|xpointer\(id\((['"]?)([^')]+)\2\)\))/g, (match, rawId, _, pointerId) => {
    			const id = rawId || pointerId;

    			if (!id || !ids[id]) {
    				return match;
    			}

    			return `#${ids[id]}`;
    		});

    		return rawData;
    	}

    	const writable_props = ['data'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Raw> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    	};

    	$$self.$capture_state = () => ({ cursor, getId, raw, data, getRaw });

    	$$self.$inject_state = $$props => {
    		if ('cursor' in $$props) cursor = $$props.cursor;
    		if ('raw' in $$props) $$invalidate(0, raw = $$props.raw);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*data*/ 2) {
    			$$invalidate(0, raw = getRaw(data));
    		}
    	};

    	return [raw, data];
    }

    class Raw extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$R, create_fragment$R, safe_not_equal, { data: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Raw",
    			options,
    			id: create_fragment$R.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[1] === undefined && !('data' in props)) {
    			console.warn("<Raw> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		throw new Error("<Raw>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<Raw>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-awesome/components/svg/Svg.svelte generated by Svelte v3.48.0 */

    const file$L = "node_modules/svelte-awesome/components/svg/Svg.svelte";

    function create_fragment$Q(ctx) {
    	let svg;
    	let svg_class_value;
    	let svg_role_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			if (default_slot) default_slot.c();
    			attr_dev(svg, "version", "1.1");
    			attr_dev(svg, "class", svg_class_value = "fa-icon " + /*className*/ ctx[0] + " svelte-1dof0an");
    			attr_dev(svg, "x", /*x*/ ctx[8]);
    			attr_dev(svg, "y", /*y*/ ctx[9]);
    			attr_dev(svg, "width", /*width*/ ctx[1]);
    			attr_dev(svg, "height", /*height*/ ctx[2]);
    			attr_dev(svg, "aria-label", /*label*/ ctx[11]);
    			attr_dev(svg, "role", svg_role_value = /*label*/ ctx[11] ? 'img' : 'presentation');
    			attr_dev(svg, "viewBox", /*box*/ ctx[3]);
    			attr_dev(svg, "style", /*style*/ ctx[10]);
    			toggle_class(svg, "fa-spin", /*spin*/ ctx[4]);
    			toggle_class(svg, "fa-pulse", /*pulse*/ ctx[6]);
    			toggle_class(svg, "fa-inverse", /*inverse*/ ctx[5]);
    			toggle_class(svg, "fa-flip-horizontal", /*flip*/ ctx[7] === 'horizontal');
    			toggle_class(svg, "fa-flip-vertical", /*flip*/ ctx[7] === 'vertical');
    			add_location(svg, file$L, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);

    			if (default_slot) {
    				default_slot.m(svg, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[12],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*className*/ 1 && svg_class_value !== (svg_class_value = "fa-icon " + /*className*/ ctx[0] + " svelte-1dof0an")) {
    				attr_dev(svg, "class", svg_class_value);
    			}

    			if (!current || dirty & /*x*/ 256) {
    				attr_dev(svg, "x", /*x*/ ctx[8]);
    			}

    			if (!current || dirty & /*y*/ 512) {
    				attr_dev(svg, "y", /*y*/ ctx[9]);
    			}

    			if (!current || dirty & /*width*/ 2) {
    				attr_dev(svg, "width", /*width*/ ctx[1]);
    			}

    			if (!current || dirty & /*height*/ 4) {
    				attr_dev(svg, "height", /*height*/ ctx[2]);
    			}

    			if (!current || dirty & /*label*/ 2048) {
    				attr_dev(svg, "aria-label", /*label*/ ctx[11]);
    			}

    			if (!current || dirty & /*label*/ 2048 && svg_role_value !== (svg_role_value = /*label*/ ctx[11] ? 'img' : 'presentation')) {
    				attr_dev(svg, "role", svg_role_value);
    			}

    			if (!current || dirty & /*box*/ 8) {
    				attr_dev(svg, "viewBox", /*box*/ ctx[3]);
    			}

    			if (!current || dirty & /*style*/ 1024) {
    				attr_dev(svg, "style", /*style*/ ctx[10]);
    			}

    			if (dirty & /*className, spin*/ 17) {
    				toggle_class(svg, "fa-spin", /*spin*/ ctx[4]);
    			}

    			if (dirty & /*className, pulse*/ 65) {
    				toggle_class(svg, "fa-pulse", /*pulse*/ ctx[6]);
    			}

    			if (dirty & /*className, inverse*/ 33) {
    				toggle_class(svg, "fa-inverse", /*inverse*/ ctx[5]);
    			}

    			if (dirty & /*className, flip*/ 129) {
    				toggle_class(svg, "fa-flip-horizontal", /*flip*/ ctx[7] === 'horizontal');
    			}

    			if (dirty & /*className, flip*/ 129) {
    				toggle_class(svg, "fa-flip-vertical", /*flip*/ ctx[7] === 'vertical');
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Svg', slots, ['default']);
    	let { class: className } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { box } = $$props;
    	let { spin = false } = $$props;
    	let { inverse = false } = $$props;
    	let { pulse = false } = $$props;
    	let { flip = null } = $$props;
    	let { x = undefined } = $$props;
    	let { y = undefined } = $$props;
    	let { style = undefined } = $$props;
    	let { label = undefined } = $$props;

    	const writable_props = [
    		'class',
    		'width',
    		'height',
    		'box',
    		'spin',
    		'inverse',
    		'pulse',
    		'flip',
    		'x',
    		'y',
    		'style',
    		'label'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Svg> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, className = $$props.class);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('height' in $$props) $$invalidate(2, height = $$props.height);
    		if ('box' in $$props) $$invalidate(3, box = $$props.box);
    		if ('spin' in $$props) $$invalidate(4, spin = $$props.spin);
    		if ('inverse' in $$props) $$invalidate(5, inverse = $$props.inverse);
    		if ('pulse' in $$props) $$invalidate(6, pulse = $$props.pulse);
    		if ('flip' in $$props) $$invalidate(7, flip = $$props.flip);
    		if ('x' in $$props) $$invalidate(8, x = $$props.x);
    		if ('y' in $$props) $$invalidate(9, y = $$props.y);
    		if ('style' in $$props) $$invalidate(10, style = $$props.style);
    		if ('label' in $$props) $$invalidate(11, label = $$props.label);
    		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		className,
    		width,
    		height,
    		box,
    		spin,
    		inverse,
    		pulse,
    		flip,
    		x,
    		y,
    		style,
    		label
    	});

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(0, className = $$props.className);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('height' in $$props) $$invalidate(2, height = $$props.height);
    		if ('box' in $$props) $$invalidate(3, box = $$props.box);
    		if ('spin' in $$props) $$invalidate(4, spin = $$props.spin);
    		if ('inverse' in $$props) $$invalidate(5, inverse = $$props.inverse);
    		if ('pulse' in $$props) $$invalidate(6, pulse = $$props.pulse);
    		if ('flip' in $$props) $$invalidate(7, flip = $$props.flip);
    		if ('x' in $$props) $$invalidate(8, x = $$props.x);
    		if ('y' in $$props) $$invalidate(9, y = $$props.y);
    		if ('style' in $$props) $$invalidate(10, style = $$props.style);
    		if ('label' in $$props) $$invalidate(11, label = $$props.label);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		className,
    		width,
    		height,
    		box,
    		spin,
    		inverse,
    		pulse,
    		flip,
    		x,
    		y,
    		style,
    		label,
    		$$scope,
    		slots
    	];
    }

    class Svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$Q, create_fragment$Q, safe_not_equal, {
    			class: 0,
    			width: 1,
    			height: 2,
    			box: 3,
    			spin: 4,
    			inverse: 5,
    			pulse: 6,
    			flip: 7,
    			x: 8,
    			y: 9,
    			style: 10,
    			label: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Svg",
    			options,
    			id: create_fragment$Q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*className*/ ctx[0] === undefined && !('class' in props)) {
    			console.warn("<Svg> was created without expected prop 'class'");
    		}

    		if (/*width*/ ctx[1] === undefined && !('width' in props)) {
    			console.warn("<Svg> was created without expected prop 'width'");
    		}

    		if (/*height*/ ctx[2] === undefined && !('height' in props)) {
    			console.warn("<Svg> was created without expected prop 'height'");
    		}

    		if (/*box*/ ctx[3] === undefined && !('box' in props)) {
    			console.warn("<Svg> was created without expected prop 'box'");
    		}
    	}

    	get class() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get box() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set box(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get spin() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set spin(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inverse() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inverse(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pulse() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pulse(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flip() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flip(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-awesome/components/Icon.svelte generated by Svelte v3.48.0 */

    const { Object: Object_1$5, console: console_1$6 } = globals;

    function get_each_context$h(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[29] = list[i];
    	child_ctx[31] = i;
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	child_ctx[31] = i;
    	return child_ctx;
    }

    // (4:4) {#if self}
    function create_if_block$s(ctx) {
    	let t0;
    	let t1;
    	let if_block2_anchor;
    	let current;
    	let if_block0 = /*self*/ ctx[6].paths && create_if_block_3$9(ctx);
    	let if_block1 = /*self*/ ctx[6].polygons && create_if_block_2$c(ctx);
    	let if_block2 = /*self*/ ctx[6].raw && create_if_block_1$d(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*self*/ ctx[6].paths) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*self*/ 64) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_3$9(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*self*/ ctx[6].polygons) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*self*/ 64) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_2$c(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*self*/ ctx[6].raw) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*self*/ 64) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_1$d(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$s.name,
    		type: "if",
    		source: "(4:4) {#if self}",
    		ctx
    	});

    	return block;
    }

    // (5:6) {#if self.paths}
    function create_if_block_3$9(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_1 = /*self*/ ctx[6].paths;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*self*/ 64) {
    				each_value_1 = /*self*/ ctx[6].paths;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$9.name,
    		type: "if",
    		source: "(5:6) {#if self.paths}",
    		ctx
    	});

    	return block;
    }

    // (6:8) {#each self.paths as path, i}
    function create_each_block_1$1(ctx) {
    	let path;
    	let current;

    	path = new Path({
    			props: {
    				id: /*i*/ ctx[31],
    				data: /*path*/ ctx[32]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(path.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(path, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const path_changes = {};
    			if (dirty[0] & /*self*/ 64) path_changes.data = /*path*/ ctx[32];
    			path.$set(path_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(path.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(path.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(path, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(6:8) {#each self.paths as path, i}",
    		ctx
    	});

    	return block;
    }

    // (10:6) {#if self.polygons}
    function create_if_block_2$c(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*self*/ ctx[6].polygons;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$h(get_each_context$h(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*self*/ 64) {
    				each_value = /*self*/ ctx[6].polygons;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$h(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$h(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$c.name,
    		type: "if",
    		source: "(10:6) {#if self.polygons}",
    		ctx
    	});

    	return block;
    }

    // (11:8) {#each self.polygons as polygon, i}
    function create_each_block$h(ctx) {
    	let polygon;
    	let current;

    	polygon = new Polygon({
    			props: {
    				id: /*i*/ ctx[31],
    				data: /*polygon*/ ctx[29]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(polygon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(polygon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const polygon_changes = {};
    			if (dirty[0] & /*self*/ 64) polygon_changes.data = /*polygon*/ ctx[29];
    			polygon.$set(polygon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(polygon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(polygon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(polygon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$h.name,
    		type: "each",
    		source: "(11:8) {#each self.polygons as polygon, i}",
    		ctx
    	});

    	return block;
    }

    // (15:6) {#if self.raw}
    function create_if_block_1$d(ctx) {
    	let raw;
    	let updating_data;
    	let current;

    	function raw_data_binding(value) {
    		/*raw_data_binding*/ ctx[15](value);
    	}

    	let raw_props = {};

    	if (/*self*/ ctx[6] !== void 0) {
    		raw_props.data = /*self*/ ctx[6];
    	}

    	raw = new Raw({ props: raw_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(raw, 'data', raw_data_binding));

    	const block = {
    		c: function create() {
    			create_component(raw.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(raw, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const raw_changes = {};

    			if (!updating_data && dirty[0] & /*self*/ 64) {
    				updating_data = true;
    				raw_changes.data = /*self*/ ctx[6];
    				add_flush_callback(() => updating_data = false);
    			}

    			raw.$set(raw_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(raw.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(raw.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(raw, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$d.name,
    		type: "if",
    		source: "(15:6) {#if self.raw}",
    		ctx
    	});

    	return block;
    }

    // (3:8)      
    function fallback_block$1(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*self*/ ctx[6] && create_if_block$s(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*self*/ ctx[6]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*self*/ 64) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$s(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$1.name,
    		type: "fallback",
    		source: "(3:8)      ",
    		ctx
    	});

    	return block;
    }

    // (1:0) <Svg label={label} width={width} height={height} box={box} style={combinedStyle}   spin={spin} flip={flip} inverse={inverse} pulse={pulse} class={className}>
    function create_default_slot$3(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[14].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
    	const default_slot_or_fallback = default_slot || fallback_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 65536)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[16],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[16])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[16], dirty, null),
    						null
    					);
    				}
    			} else {
    				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty[0] & /*self*/ 64)) {
    					default_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(1:0) <Svg label={label} width={width} height={height} box={box} style={combinedStyle}   spin={spin} flip={flip} inverse={inverse} pulse={pulse} class={className}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$P(ctx) {
    	let svg;
    	let current;

    	svg = new Svg({
    			props: {
    				label: /*label*/ ctx[5],
    				width: /*width*/ ctx[7],
    				height: /*height*/ ctx[8],
    				box: /*box*/ ctx[10],
    				style: /*combinedStyle*/ ctx[9],
    				spin: /*spin*/ ctx[1],
    				flip: /*flip*/ ctx[4],
    				inverse: /*inverse*/ ctx[2],
    				pulse: /*pulse*/ ctx[3],
    				class: /*className*/ ctx[0],
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(svg.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(svg, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const svg_changes = {};
    			if (dirty[0] & /*label*/ 32) svg_changes.label = /*label*/ ctx[5];
    			if (dirty[0] & /*width*/ 128) svg_changes.width = /*width*/ ctx[7];
    			if (dirty[0] & /*height*/ 256) svg_changes.height = /*height*/ ctx[8];
    			if (dirty[0] & /*box*/ 1024) svg_changes.box = /*box*/ ctx[10];
    			if (dirty[0] & /*combinedStyle*/ 512) svg_changes.style = /*combinedStyle*/ ctx[9];
    			if (dirty[0] & /*spin*/ 2) svg_changes.spin = /*spin*/ ctx[1];
    			if (dirty[0] & /*flip*/ 16) svg_changes.flip = /*flip*/ ctx[4];
    			if (dirty[0] & /*inverse*/ 4) svg_changes.inverse = /*inverse*/ ctx[2];
    			if (dirty[0] & /*pulse*/ 8) svg_changes.pulse = /*pulse*/ ctx[3];
    			if (dirty[0] & /*className*/ 1) svg_changes.class = /*className*/ ctx[0];

    			if (dirty[0] & /*$$scope, self*/ 65600) {
    				svg_changes.$$scope = { dirty, ctx };
    			}

    			svg.$set(svg_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(svg.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(svg.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(svg, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$P.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function normaliseData(data) {
    	if ('iconName' in data && 'icon' in data) {
    		let normalisedData = {};
    		let faIcon = data.icon;
    		let name = data.iconName;
    		let width = faIcon[0];
    		let height = faIcon[1];
    		let paths = faIcon[4];
    		let iconData = { width, height, paths: [{ d: paths }] };
    		normalisedData[name] = iconData;
    		return normalisedData;
    	}

    	return data;
    }

    function instance$P($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Icon', slots, ['default']);
    	let { class: className = "" } = $$props;
    	let { data } = $$props;
    	let { scale = 1 } = $$props;
    	let { spin = false } = $$props;
    	let { inverse = false } = $$props;
    	let { pulse = false } = $$props;
    	let { flip = null } = $$props;
    	let { label = null } = $$props;
    	let self = null;
    	let { style = null } = $$props;

    	// internal
    	let x = 0;

    	let y = 0;
    	let childrenHeight = 0;
    	let childrenWidth = 0;
    	let outerScale = 1;
    	let width;
    	let height;
    	let combinedStyle;
    	let box;

    	function init() {
    		if (typeof data === 'undefined') {
    			return;
    		}

    		const normalisedData = normaliseData(data);
    		const [name] = Object.keys(normalisedData);
    		const icon = normalisedData[name];

    		if (!icon.paths) {
    			icon.paths = [];
    		}

    		if (icon.d) {
    			icon.paths.push({ d: icon.d });
    		}

    		if (!icon.polygons) {
    			icon.polygons = [];
    		}

    		if (icon.points) {
    			icon.polygons.push({ points: icon.points });
    		}

    		$$invalidate(6, self = icon);
    	}

    	function normalisedScale() {
    		let numScale = 1;

    		if (typeof scale !== 'undefined') {
    			numScale = Number(scale);
    		}

    		if (isNaN(numScale) || numScale <= 0) {
    			// eslint-disable-line no-restricted-globals
    			console.warn('Invalid prop: prop "scale" should be a number over 0.'); // eslint-disable-line no-console

    			return outerScale;
    		}

    		return numScale * outerScale;
    	}

    	function calculateBox() {
    		if (self) {
    			return `0 0 ${self.width} ${self.height}`;
    		}

    		return `0 0 ${width} ${height}`;
    	}

    	function calculateRatio() {
    		if (!self) {
    			return 1;
    		}

    		return Math.max(self.width, self.height) / 16;
    	}

    	function calculateWidth() {
    		if (childrenWidth) {
    			return childrenWidth;
    		}

    		if (self) {
    			return self.width / calculateRatio() * normalisedScale();
    		}

    		return 0;
    	}

    	function calculateHeight() {
    		if (childrenHeight) {
    			return childrenHeight;
    		}

    		if (self) {
    			return self.height / calculateRatio() * normalisedScale();
    		}

    		return 0;
    	}

    	function calculateStyle() {
    		let combined = "";

    		if (style !== null) {
    			combined += style;
    		}

    		let size = normalisedScale();

    		if (size === 1) {
    			if (combined.length === 0) {
    				return undefined;
    			}

    			return combined;
    		}

    		if (combined !== "" && !combined.endsWith(';')) {
    			combined += '; ';
    		}

    		return `${combined}font-size: ${size}em`;
    	}

    	const writable_props = ['class', 'data', 'scale', 'spin', 'inverse', 'pulse', 'flip', 'label', 'style'];

    	Object_1$5.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$6.warn(`<Icon> was created with unknown prop '${key}'`);
    	});

    	function raw_data_binding(value) {
    		self = value;
    		$$invalidate(6, self);
    	}

    	$$self.$$set = $$props => {
    		if ('class' in $$props) $$invalidate(0, className = $$props.class);
    		if ('data' in $$props) $$invalidate(11, data = $$props.data);
    		if ('scale' in $$props) $$invalidate(12, scale = $$props.scale);
    		if ('spin' in $$props) $$invalidate(1, spin = $$props.spin);
    		if ('inverse' in $$props) $$invalidate(2, inverse = $$props.inverse);
    		if ('pulse' in $$props) $$invalidate(3, pulse = $$props.pulse);
    		if ('flip' in $$props) $$invalidate(4, flip = $$props.flip);
    		if ('label' in $$props) $$invalidate(5, label = $$props.label);
    		if ('style' in $$props) $$invalidate(13, style = $$props.style);
    		if ('$$scope' in $$props) $$invalidate(16, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Path,
    		Polygon,
    		Raw,
    		Svg,
    		className,
    		data,
    		scale,
    		spin,
    		inverse,
    		pulse,
    		flip,
    		label,
    		self,
    		style,
    		x,
    		y,
    		childrenHeight,
    		childrenWidth,
    		outerScale,
    		width,
    		height,
    		combinedStyle,
    		box,
    		init,
    		normaliseData,
    		normalisedScale,
    		calculateBox,
    		calculateRatio,
    		calculateWidth,
    		calculateHeight,
    		calculateStyle
    	});

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(0, className = $$props.className);
    		if ('data' in $$props) $$invalidate(11, data = $$props.data);
    		if ('scale' in $$props) $$invalidate(12, scale = $$props.scale);
    		if ('spin' in $$props) $$invalidate(1, spin = $$props.spin);
    		if ('inverse' in $$props) $$invalidate(2, inverse = $$props.inverse);
    		if ('pulse' in $$props) $$invalidate(3, pulse = $$props.pulse);
    		if ('flip' in $$props) $$invalidate(4, flip = $$props.flip);
    		if ('label' in $$props) $$invalidate(5, label = $$props.label);
    		if ('self' in $$props) $$invalidate(6, self = $$props.self);
    		if ('style' in $$props) $$invalidate(13, style = $$props.style);
    		if ('x' in $$props) x = $$props.x;
    		if ('y' in $$props) y = $$props.y;
    		if ('childrenHeight' in $$props) childrenHeight = $$props.childrenHeight;
    		if ('childrenWidth' in $$props) childrenWidth = $$props.childrenWidth;
    		if ('outerScale' in $$props) outerScale = $$props.outerScale;
    		if ('width' in $$props) $$invalidate(7, width = $$props.width);
    		if ('height' in $$props) $$invalidate(8, height = $$props.height);
    		if ('combinedStyle' in $$props) $$invalidate(9, combinedStyle = $$props.combinedStyle);
    		if ('box' in $$props) $$invalidate(10, box = $$props.box);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*data, style, scale*/ 14336) {
    			{
    				init();
    				$$invalidate(7, width = calculateWidth());
    				$$invalidate(8, height = calculateHeight());
    				$$invalidate(9, combinedStyle = calculateStyle());
    				$$invalidate(10, box = calculateBox());
    			}
    		}
    	};

    	return [
    		className,
    		spin,
    		inverse,
    		pulse,
    		flip,
    		label,
    		self,
    		width,
    		height,
    		combinedStyle,
    		box,
    		data,
    		scale,
    		style,
    		slots,
    		raw_data_binding,
    		$$scope
    	];
    }

    class Icon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$P,
    			create_fragment$P,
    			safe_not_equal,
    			{
    				class: 0,
    				data: 11,
    				scale: 12,
    				spin: 1,
    				inverse: 2,
    				pulse: 3,
    				flip: 4,
    				label: 5,
    				style: 13
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Icon",
    			options,
    			id: create_fragment$P.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[11] === undefined && !('data' in props)) {
    			console_1$6.warn("<Icon> was created without expected prop 'data'");
    		}
    	}

    	get class() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get data() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scale() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scale(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get spin() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set spin(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inverse() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inverse(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pulse() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pulse(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flip() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flip(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/controls/Message.svelte generated by Svelte v3.48.0 */
    const file$K = "node_modules/svelte-jsoneditor/components/controls/Message.svelte";

    function get_each_context$g(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (18:4) {#if icon}
    function create_if_block_1$c(ctx) {
    	let icon_1;
    	let current;

    	icon_1 = new Icon({
    			props: { data: /*icon*/ ctx[1] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_1_changes = {};
    			if (dirty & /*icon*/ 2) icon_1_changes.data = /*icon*/ ctx[1];
    			icon_1.$set(icon_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$c.name,
    		type: "if",
    		source: "(18:4) {#if icon}",
    		ctx
    	});

    	return block;
    }

    // (33:8) {#if action.icon}
    function create_if_block$r(ctx) {
    	let icon_1;
    	let current;

    	icon_1 = new Icon({
    			props: { data: /*action*/ ctx[8].icon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_1_changes = {};
    			if (dirty & /*actions*/ 8) icon_1_changes.data = /*action*/ ctx[8].icon;
    			icon_1.$set(icon_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$r.name,
    		type: "if",
    		source: "(33:8) {#if action.icon}",
    		ctx
    	});

    	return block;
    }

    // (24:4) {#each actions as action}
    function create_each_block$g(ctx) {
    	let button;
    	let t0;
    	let t1_value = /*action*/ ctx[8].text + "";
    	let t1;
    	let t2;
    	let button_title_value;
    	let button_disabled_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*action*/ ctx[8].icon && create_if_block$r(ctx);

    	function click_handler() {
    		return /*click_handler*/ ctx[6](/*action*/ ctx[8]);
    	}

    	function mousedown_handler() {
    		return /*mousedown_handler*/ ctx[7](/*action*/ ctx[8]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (if_block) if_block.c();
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-button jse-action jse-primary svelte-kvi5ls");
    			attr_dev(button, "title", button_title_value = /*action*/ ctx[8].title);
    			button.disabled = button_disabled_value = /*action*/ ctx[8].disabled;
    			add_location(button, file$K, 24, 6, 607);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			if (if_block) if_block.m(button, null);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			append_dev(button, t2);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "click", click_handler, false, false, false),
    					listen_dev(button, "mousedown", mousedown_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*action*/ ctx[8].icon) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*actions*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$r(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(button, t0);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*actions*/ 8) && t1_value !== (t1_value = /*action*/ ctx[8].text + "")) set_data_dev(t1, t1_value);

    			if (!current || dirty & /*actions*/ 8 && button_title_value !== (button_title_value = /*action*/ ctx[8].title)) {
    				attr_dev(button, "title", button_title_value);
    			}

    			if (!current || dirty & /*actions*/ 8 && button_disabled_value !== (button_disabled_value = /*action*/ ctx[8].disabled)) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$g.name,
    		type: "each",
    		source: "(24:4) {#each actions as action}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$O(ctx) {
    	let div2;
    	let div0;
    	let t0;
    	let t1;
    	let t2;
    	let div1;
    	let div2_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*icon*/ ctx[1] && create_if_block_1$c(ctx);
    	let each_value = /*actions*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$g(get_each_context$g(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			t1 = text(/*message*/ ctx[2]);
    			t2 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "jse-text svelte-kvi5ls");
    			toggle_class(div0, "jse-clickable", /*onClick*/ ctx[4] !== null);
    			add_location(div0, file$K, 16, 2, 383);
    			attr_dev(div1, "class", "jse-actions svelte-kvi5ls");
    			add_location(div1, file$K, 22, 2, 545);
    			attr_dev(div2, "class", div2_class_value = "jse-message jse-" + /*type*/ ctx[0] + " svelte-kvi5ls");
    			add_location(div2, file$K, 15, 0, 344);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			if (if_block) if_block.m(div0, null);
    			append_dev(div0, t0);
    			append_dev(div0, t1);
    			append_dev(div2, t2);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div0, "click", /*handleClick*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*icon*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*icon*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$c(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div0, t0);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*message*/ 4) set_data_dev(t1, /*message*/ ctx[2]);

    			if (dirty & /*onClick*/ 16) {
    				toggle_class(div0, "jse-clickable", /*onClick*/ ctx[4] !== null);
    			}

    			if (dirty & /*actions*/ 8) {
    				each_value = /*actions*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$g(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$g(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*type*/ 1 && div2_class_value !== (div2_class_value = "jse-message jse-" + /*type*/ ctx[0] + " svelte-kvi5ls")) {
    				attr_dev(div2, "class", div2_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$O.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$O($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Message', slots, []);
    	let { type = 'success' } = $$props;
    	let { icon = undefined } = $$props;
    	let { message = undefined } = $$props;
    	let { actions = [] } = $$props;
    	let { onClick = undefined } = $$props;

    	function handleClick() {
    		if (onClick) {
    			onClick();
    		}
    	}

    	const writable_props = ['type', 'icon', 'message', 'actions', 'onClick'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Message> was created with unknown prop '${key}'`);
    	});

    	const click_handler = action => action.onClick();
    	const mousedown_handler = action => action.onMouseDown();

    	$$self.$$set = $$props => {
    		if ('type' in $$props) $$invalidate(0, type = $$props.type);
    		if ('icon' in $$props) $$invalidate(1, icon = $$props.icon);
    		if ('message' in $$props) $$invalidate(2, message = $$props.message);
    		if ('actions' in $$props) $$invalidate(3, actions = $$props.actions);
    		if ('onClick' in $$props) $$invalidate(4, onClick = $$props.onClick);
    	};

    	$$self.$capture_state = () => ({
    		Icon,
    		type,
    		icon,
    		message,
    		actions,
    		onClick,
    		handleClick
    	});

    	$$self.$inject_state = $$props => {
    		if ('type' in $$props) $$invalidate(0, type = $$props.type);
    		if ('icon' in $$props) $$invalidate(1, icon = $$props.icon);
    		if ('message' in $$props) $$invalidate(2, message = $$props.message);
    		if ('actions' in $$props) $$invalidate(3, actions = $$props.actions);
    		if ('onClick' in $$props) $$invalidate(4, onClick = $$props.onClick);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		type,
    		icon,
    		message,
    		actions,
    		onClick,
    		handleClick,
    		click_handler,
    		mousedown_handler
    	];
    }

    class Message extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$O, create_fragment$O, not_equal, {
    			type: 0,
    			icon: 1,
    			message: 2,
    			actions: 3,
    			onClick: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Message",
    			options,
    			id: create_fragment$O.name
    		});
    	}

    	get type() {
    		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get message() {
    		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set message(value) {
    		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get actions() {
    		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set actions(value) {
    		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * Stringify a path like
     *
     *     ["data", 2, "nested", "property"]
     *
     * into a string:
     *
     *     ".data[2].nested.property"
     */
    function stringifyPath(path) {
        return path
            .map((prop) => {
            if (typeof prop === 'number') {
                return '[' + prop + ']';
            }
            else if (typeof prop === 'string' && prop.match(/^[A-Za-z0-9_$]+$/)) {
                return '.' + prop;
            }
            else {
                return '["' + String(prop) + '"]';
            }
        })
            .join('');
    }
    /**
     * Create a JavaScript property selector
     *
     * Turn a paths like:
     *
     *   ['location', 'latitude']
     *   ['address', 'full name']
     *
     * into a JavaScript selector (string) like:
     *
     *   '?.location?.latitude'
     *   '?.address?.["full name"]'
     */
    function createPropertySelector(path) {
        return path
            .map((prop) => {
            const propStr = String(prop);
            return javaScriptPropertyRegex.test(propStr) ? `?.${propStr}` : `?.[${JSON.stringify(prop)}]`;
        })
            .join('');
    }
    // https://developer.mozilla.org/en-US/docs/Glossary/Identifier
    // Note: We can extend this regex to allow unicode characters too.
    // I'm too lazy to figure that out right now
    const javaScriptPropertyRegex = /^[A-z$_][A-z$_\d]*$/i;
    /**
     * Create a memoized function that will memoize the input path, and return
     * the memoized instance of the path when the stringified version is the same.
     */
    function createMemoizePath() {
        return memoize((path) => path, stringifyPath);
    }

    /* node_modules/svelte-jsoneditor/components/controls/ValidationErrorsOverview.svelte generated by Svelte v3.48.0 */
    const file$J = "node_modules/svelte-jsoneditor/components/controls/ValidationErrorsOverview.svelte";

    function get_each_context$f(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	child_ctx[8] = i;
    	return child_ctx;
    }

    // (18:0) {#if !isEmpty(validationErrors)}
    function create_if_block$q(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block_1$b, create_else_block$f];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*expanded*/ ctx[2] || /*validationErrors*/ ctx[0].length === 1) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "jse-validation-errors-overview svelte-1oe8e8r");
    			add_location(div, file$J, 18, 2, 499);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$q.name,
    		type: "if",
    		source: "(18:0) {#if !isEmpty(validationErrors)}",
    		ctx
    	});

    	return block;
    }

    // (56:4) {:else}
    function create_else_block$f(ctx) {
    	let table;
    	let tbody;
    	let tr;
    	let td0;
    	let icon0;
    	let t0;
    	let td1;
    	let t1_value = /*validationErrors*/ ctx[0].length + "";
    	let t1;
    	let t2;
    	let div;
    	let icon1;
    	let current;
    	let mounted;
    	let dispose;

    	icon0 = new Icon({
    			props: { data: faExclamationTriangle },
    			$$inline: true
    		});

    	icon1 = new Icon({
    			props: { data: faAngleRight },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			table = element("table");
    			tbody = element("tbody");
    			tr = element("tr");
    			td0 = element("td");
    			create_component(icon0.$$.fragment);
    			t0 = space();
    			td1 = element("td");
    			t1 = text(t1_value);
    			t2 = text(" validation errors\n              ");
    			div = element("div");
    			create_component(icon1.$$.fragment);
    			attr_dev(td0, "class", "jse-validation-error-icon svelte-1oe8e8r");
    			add_location(td0, file$J, 59, 12, 1929);
    			attr_dev(div, "class", "jse-validation-errors-expand svelte-1oe8e8r");
    			add_location(div, file$J, 64, 14, 2127);
    			attr_dev(td1, "class", "svelte-1oe8e8r");
    			add_location(td1, file$J, 62, 12, 2050);
    			attr_dev(tr, "class", "jse-validation-error svelte-1oe8e8r");
    			add_location(tr, file$J, 58, 10, 1865);
    			add_location(tbody, file$J, 57, 8, 1847);
    			attr_dev(table, "class", "svelte-1oe8e8r");
    			add_location(table, file$J, 56, 6, 1831);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tbody);
    			append_dev(tbody, tr);
    			append_dev(tr, td0);
    			mount_component(icon0, td0, null);
    			append_dev(tr, t0);
    			append_dev(tr, td1);
    			append_dev(td1, t1);
    			append_dev(td1, t2);
    			append_dev(td1, div);
    			mount_component(icon1, div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(tr, "click", /*expand*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*validationErrors*/ 1) && t1_value !== (t1_value = /*validationErrors*/ ctx[0].length + "")) set_data_dev(t1, t1_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon0.$$.fragment, local);
    			transition_in(icon1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon0.$$.fragment, local);
    			transition_out(icon1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(table);
    			destroy_component(icon0);
    			destroy_component(icon1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$f.name,
    		type: "else",
    		source: "(56:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (20:4) {#if expanded || validationErrors.length === 1}
    function create_if_block_1$b(ctx) {
    	let table;
    	let tbody;
    	let current;
    	let each_value = /*validationErrors*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$f(get_each_context$f(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			table = element("table");
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(tbody, file$J, 21, 8, 618);
    			attr_dev(table, "class", "svelte-1oe8e8r");
    			add_location(table, file$J, 20, 6, 602);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tbody, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*setTimeout, selectError, validationErrors, collapse, faAngleDown, stringifyPath, faExclamationTriangle*/ 11) {
    				each_value = /*validationErrors*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$f(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$f(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(table);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(20:4) {#if expanded || validationErrors.length === 1}",
    		ctx
    	});

    	return block;
    }

    // (41:16) {#if index === 0 && validationErrors.length > 1}
    function create_if_block_2$b(ctx) {
    	let button;
    	let icon;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: { data: faAngleDown },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(icon.$$.fragment);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-validation-errors-collapse svelte-1oe8e8r");
    			attr_dev(button, "title", "Collapse validation errors");
    			add_location(button, file$J, 41, 18, 1395);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(icon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", stop_propagation(/*collapse*/ ctx[3]), false, false, true);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$b.name,
    		type: "if",
    		source: "(41:16) {#if index === 0 && validationErrors.length > 1}",
    		ctx
    	});

    	return block;
    }

    // (23:10) {#each validationErrors as validationError, index}
    function create_each_block$f(ctx) {
    	let tr;
    	let td0;
    	let icon;
    	let t0;
    	let td1;
    	let t1_value = stringifyPath(/*validationError*/ ctx[6].path) + "";
    	let t1;
    	let t2;
    	let td2;
    	let t3_value = /*validationError*/ ctx[6].message + "";
    	let t3;
    	let t4;
    	let td3;
    	let t5;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: { data: faExclamationTriangle },
    			$$inline: true
    		});

    	let if_block = /*index*/ ctx[8] === 0 && /*validationErrors*/ ctx[0].length > 1 && create_if_block_2$b(ctx);

    	function click_handler() {
    		return /*click_handler*/ ctx[5](/*validationError*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			create_component(icon.$$.fragment);
    			t0 = space();
    			td1 = element("td");
    			t1 = text(t1_value);
    			t2 = space();
    			td2 = element("td");
    			t3 = text(t3_value);
    			t4 = space();
    			td3 = element("td");
    			if (if_block) if_block.c();
    			t5 = space();
    			attr_dev(td0, "class", "jse-validation-error-icon svelte-1oe8e8r");
    			add_location(td0, file$J, 30, 14, 970);
    			attr_dev(td1, "class", "svelte-1oe8e8r");
    			add_location(td1, file$J, 33, 14, 1097);
    			attr_dev(td2, "class", "svelte-1oe8e8r");
    			add_location(td2, file$J, 36, 14, 1190);
    			attr_dev(td3, "class", "jse-validation-error-action svelte-1oe8e8r");
    			add_location(td3, file$J, 39, 14, 1271);
    			attr_dev(tr, "class", "jse-validation-error svelte-1oe8e8r");
    			add_location(tr, file$J, 23, 12, 699);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			mount_component(icon, td0, null);
    			append_dev(tr, t0);
    			append_dev(tr, td1);
    			append_dev(td1, t1);
    			append_dev(tr, t2);
    			append_dev(tr, td2);
    			append_dev(td2, t3);
    			append_dev(tr, t4);
    			append_dev(tr, td3);
    			if (if_block) if_block.m(td3, null);
    			append_dev(tr, t5);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(tr, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*validationErrors*/ 1) && t1_value !== (t1_value = stringifyPath(/*validationError*/ ctx[6].path) + "")) set_data_dev(t1, t1_value);
    			if ((!current || dirty & /*validationErrors*/ 1) && t3_value !== (t3_value = /*validationError*/ ctx[6].message + "")) set_data_dev(t3, t3_value);

    			if (/*index*/ ctx[8] === 0 && /*validationErrors*/ ctx[0].length > 1) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*validationErrors*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$b(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(td3, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_component(icon);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$f.name,
    		type: "each",
    		source: "(23:10) {#each validationErrors as validationError, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$N(ctx) {
    	let show_if = !isEmpty(/*validationErrors*/ ctx[0]);
    	let if_block_anchor;
    	let current;
    	let if_block = show_if && create_if_block$q(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*validationErrors*/ 1) show_if = !isEmpty(/*validationErrors*/ ctx[0]);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*validationErrors*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$q(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$N.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$N($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ValidationErrorsOverview', slots, []);
    	let { validationErrors } = $$props;
    	let { selectError } = $$props;
    	let expanded = true;

    	function collapse() {
    		$$invalidate(2, expanded = false);
    	}

    	function expand() {
    		$$invalidate(2, expanded = true);
    	}

    	const writable_props = ['validationErrors', 'selectError'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ValidationErrorsOverview> was created with unknown prop '${key}'`);
    	});

    	const click_handler = validationError => {
    		// trigger on the next tick to prevent the editor not getting focus
    		setTimeout(() => selectError(validationError));
    	};

    	$$self.$$set = $$props => {
    		if ('validationErrors' in $$props) $$invalidate(0, validationErrors = $$props.validationErrors);
    		if ('selectError' in $$props) $$invalidate(1, selectError = $$props.selectError);
    	};

    	$$self.$capture_state = () => ({
    		faAngleDown,
    		faAngleRight,
    		faExclamationTriangle,
    		isEmpty,
    		Icon,
    		stringifyPath,
    		validationErrors,
    		selectError,
    		expanded,
    		collapse,
    		expand
    	});

    	$$self.$inject_state = $$props => {
    		if ('validationErrors' in $$props) $$invalidate(0, validationErrors = $$props.validationErrors);
    		if ('selectError' in $$props) $$invalidate(1, selectError = $$props.selectError);
    		if ('expanded' in $$props) $$invalidate(2, expanded = $$props.expanded);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [validationErrors, selectError, expanded, collapse, expand, click_handler];
    }

    class ValidationErrorsOverview extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$N, create_fragment$N, not_equal, { validationErrors: 0, selectError: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ValidationErrorsOverview",
    			options,
    			id: create_fragment$N.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*validationErrors*/ ctx[0] === undefined && !('validationErrors' in props)) {
    			console.warn("<ValidationErrorsOverview> was created without expected prop 'validationErrors'");
    		}

    		if (/*selectError*/ ctx[1] === undefined && !('selectError' in props)) {
    			console.warn("<ValidationErrorsOverview> was created without expected prop 'selectError'");
    		}
    	}

    	get validationErrors() {
    		throw new Error("<ValidationErrorsOverview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validationErrors(value) {
    		throw new Error("<ValidationErrorsOverview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectError() {
    		throw new Error("<ValidationErrorsOverview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectError(value) {
    		throw new Error("<ValidationErrorsOverview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const faJSONEditorExpand = {
        prefix: 'fas',
        iconName: 'jsoneditor-expand',
        icon: [
            512,
            512,
            [],
            null,
            'M 0,448 V 512 h 512 v -64 z ' +
                'M 0,0 V 64 H 512 V 0 Z ' +
                'M 256,96 128,224 h 256 z ' +
                'M 256,416 384,288 H 128 Z'
        ]
    };
    const faJSONEditorCollapse = {
        prefix: 'fas',
        iconName: 'jsoneditor-collapse',
        icon: [
            512,
            512,
            [],
            null,
            'm 0,224 v 64 h 512 v -64 z ' + 'M 256,192 384,64 H 128 Z ' + 'M 256,320 128,448 h 256 z'
        ]
    };
    const faJSONEditorFormat = {
        prefix: 'fas',
        iconName: 'jsoneditor-format',
        icon: [
            512,
            512,
            [],
            null,
            'M 0,32 v 64 h 416 v -64 z ' +
                'M 160,160 v 64 h 352 v -64 z ' +
                'M 160,288 v 64 h 288 v -64 z ' +
                'M 0,416 v 64 h 320 v -64 z'
        ]
    };
    const faJSONEditorCompact = {
        prefix: 'fas',
        iconName: 'jsoneditor-compact',
        icon: [
            512,
            512,
            [],
            null,
            'M 0,32 v 64 h 512 v -64 z ' + 'M 0,160 v 64 h 512 v -64 z ' + 'M 0,288 v 64 h 352 v -64 z'
        ]
    };

    /* node_modules/svelte-jsoneditor/components/controls/Menu.svelte generated by Svelte v3.48.0 */
    const file$I = "node_modules/svelte-jsoneditor/components/controls/Menu.svelte";
    const get_right_slot_changes = dirty => ({});
    const get_right_slot_context = ctx => ({});

    function get_each_context$e(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    const get_left_slot_changes = dirty => ({});
    const get_left_slot_context = ctx => ({});

    // (15:4) {:else}
    function create_else_block$e(ctx) {
    	let button;
    	let t;
    	let button_class_value;
    	let button_title_value;
    	let button_disabled_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*item*/ ctx[3].icon && create_if_block_3$8(ctx);
    	let if_block1 = /*item*/ ctx[3].text && create_if_block_2$a(ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", button_class_value = "jse-button " + /*item*/ ctx[3].className + " svelte-v4jelk");
    			attr_dev(button, "title", button_title_value = /*item*/ ctx[3].title);
    			button.disabled = button_disabled_value = /*item*/ ctx[3].disabled || false;
    			add_location(button, file$I, 15, 6, 342);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			if (if_block0) if_block0.m(button, null);
    			append_dev(button, t);
    			if (if_block1) if_block1.m(button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*item*/ ctx[3].onClick)) /*item*/ ctx[3].onClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*item*/ ctx[3].icon) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*items*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_3$8(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(button, t);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*item*/ ctx[3].text) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_2$a(ctx);
    					if_block1.c();
    					if_block1.m(button, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (!current || dirty & /*items*/ 1 && button_class_value !== (button_class_value = "jse-button " + /*item*/ ctx[3].className + " svelte-v4jelk")) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (!current || dirty & /*items*/ 1 && button_title_value !== (button_title_value = /*item*/ ctx[3].title)) {
    				attr_dev(button, "title", button_title_value);
    			}

    			if (!current || dirty & /*items*/ 1 && button_disabled_value !== (button_disabled_value = /*item*/ ctx[3].disabled || false)) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$e.name,
    		type: "else",
    		source: "(15:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (13:34) 
    function create_if_block_1$a(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "jse-space svelte-v4jelk");
    			add_location(div, file$I, 13, 6, 298);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(13:34) ",
    		ctx
    	});

    	return block;
    }

    // (11:4) {#if item.separator === true}
    function create_if_block$p(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "jse-separator svelte-v4jelk");
    			add_location(div, file$I, 11, 6, 227);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$p.name,
    		type: "if",
    		source: "(11:4) {#if item.separator === true}",
    		ctx
    	});

    	return block;
    }

    // (23:8) {#if item.icon}
    function create_if_block_3$8(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { data: /*item*/ ctx[3].icon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty & /*items*/ 1) icon_changes.data = /*item*/ ctx[3].icon;
    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$8.name,
    		type: "if",
    		source: "(23:8) {#if item.icon}",
    		ctx
    	});

    	return block;
    }

    // (26:8) {#if item.text}
    function create_if_block_2$a(ctx) {
    	let t_value = /*item*/ ctx[3].text + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*items*/ 1 && t_value !== (t_value = /*item*/ ctx[3].text + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$a.name,
    		type: "if",
    		source: "(26:8) {#if item.text}",
    		ctx
    	});

    	return block;
    }

    // (10:2) {#each items as item}
    function create_each_block$e(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$p, create_if_block_1$a, create_else_block$e];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*item*/ ctx[3].separator === true) return 0;
    		if (/*item*/ ctx[3].space === true) return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$e.name,
    		type: "each",
    		source: "(10:2) {#each items as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$M(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let current;
    	const left_slot_template = /*#slots*/ ctx[2].left;
    	const left_slot = create_slot(left_slot_template, ctx, /*$$scope*/ ctx[1], get_left_slot_context);
    	let each_value = /*items*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$e(get_each_context$e(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const right_slot_template = /*#slots*/ ctx[2].right;
    	const right_slot = create_slot(right_slot_template, ctx, /*$$scope*/ ctx[1], get_right_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (left_slot) left_slot.c();
    			t0 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			if (right_slot) right_slot.c();
    			attr_dev(div, "class", "jse-menu svelte-v4jelk");
    			add_location(div, file$I, 6, 0, 116);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (left_slot) {
    				left_slot.m(div, null);
    			}

    			append_dev(div, t0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append_dev(div, t1);

    			if (right_slot) {
    				right_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (left_slot) {
    				if (left_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						left_slot,
    						left_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(left_slot_template, /*$$scope*/ ctx[1], dirty, get_left_slot_changes),
    						get_left_slot_context
    					);
    				}
    			}

    			if (dirty & /*items*/ 1) {
    				each_value = /*items*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$e(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$e(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, t1);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (right_slot) {
    				if (right_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						right_slot,
    						right_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(right_slot_template, /*$$scope*/ ctx[1], dirty, get_right_slot_changes),
    						get_right_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(left_slot, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(right_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(left_slot, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(right_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (left_slot) left_slot.d(detaching);
    			destroy_each(each_blocks, detaching);
    			if (right_slot) right_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$M.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$M($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Menu', slots, ['left','right']);
    	let { items = [] } = $$props;
    	const writable_props = ['items'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Menu> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('items' in $$props) $$invalidate(0, items = $$props.items);
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ Icon, items });

    	$$self.$inject_state = $$props => {
    		if ('items' in $$props) $$invalidate(0, items = $$props.items);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [items, $$scope, slots];
    }

    class Menu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$M, create_fragment$M, not_equal, { items: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Menu",
    			options,
    			id: create_fragment$M.name
    		});
    	}

    	get items() {
    		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modes/codemode/menu/CodeMenu.svelte generated by Svelte v3.48.0 */
    const file$H = "node_modules/svelte-jsoneditor/components/modes/codemode/menu/CodeMenu.svelte";

    // (92:2) 
    function create_right_slot(ctx) {
    	let div;
    	let a;

    	const block = {
    		c: function create() {
    			div = element("div");
    			a = element("a");
    			a.textContent = "powered by CodeMirror";
    			attr_dev(a, "href", "https://codemirror.net");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "rel", "noopener noreferrer");
    			attr_dev(a, "title", "Code mode is powered by CodeMirror");
    			attr_dev(a, "class", "svelte-1yyupsl");
    			add_location(a, file$H, 92, 4, 2640);
    			attr_dev(div, "slot", "right");
    			attr_dev(div, "class", "jse-powered-by svelte-1yyupsl");
    			add_location(div, file$H, 91, 2, 2594);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_right_slot.name,
    		type: "slot",
    		source: "(92:2) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$L(ctx) {
    	let menu;
    	let current;

    	menu = new Menu({
    			props: {
    				items: /*items*/ ctx[0],
    				$$slots: { right: [create_right_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(menu.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(menu, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const menu_changes = {};
    			if (dirty & /*items*/ 1) menu_changes.items = /*items*/ ctx[0];

    			if (dirty & /*$$scope*/ 131072) {
    				menu_changes.$$scope = { dirty, ctx };
    			}

    			menu.$set(menu_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(menu, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$L.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$L($$self, $$props, $$invalidate) {
    	let defaultItems;
    	let items;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CodeMenu', slots, []);
    	let { readOnly = false } = $$props;
    	let { onFormat } = $$props;
    	let { onCompact } = $$props;
    	let { onSort } = $$props;
    	let { onTransform } = $$props;
    	let { onToggleSearch } = $$props;
    	let { onUndo } = $$props;
    	let { onRedo } = $$props;
    	let { canUndo } = $$props;
    	let { canRedo } = $$props;
    	let { canFormat } = $$props;
    	let { canCompact } = $$props;
    	let { canSort } = $$props;
    	let { canTransform } = $$props;
    	let { onRenderMenu = noop$1 } = $$props;

    	const writable_props = [
    		'readOnly',
    		'onFormat',
    		'onCompact',
    		'onSort',
    		'onTransform',
    		'onToggleSearch',
    		'onUndo',
    		'onRedo',
    		'canUndo',
    		'canRedo',
    		'canFormat',
    		'canCompact',
    		'canSort',
    		'canTransform',
    		'onRenderMenu'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CodeMenu> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('readOnly' in $$props) $$invalidate(1, readOnly = $$props.readOnly);
    		if ('onFormat' in $$props) $$invalidate(2, onFormat = $$props.onFormat);
    		if ('onCompact' in $$props) $$invalidate(3, onCompact = $$props.onCompact);
    		if ('onSort' in $$props) $$invalidate(4, onSort = $$props.onSort);
    		if ('onTransform' in $$props) $$invalidate(5, onTransform = $$props.onTransform);
    		if ('onToggleSearch' in $$props) $$invalidate(6, onToggleSearch = $$props.onToggleSearch);
    		if ('onUndo' in $$props) $$invalidate(7, onUndo = $$props.onUndo);
    		if ('onRedo' in $$props) $$invalidate(8, onRedo = $$props.onRedo);
    		if ('canUndo' in $$props) $$invalidate(9, canUndo = $$props.canUndo);
    		if ('canRedo' in $$props) $$invalidate(10, canRedo = $$props.canRedo);
    		if ('canFormat' in $$props) $$invalidate(11, canFormat = $$props.canFormat);
    		if ('canCompact' in $$props) $$invalidate(12, canCompact = $$props.canCompact);
    		if ('canSort' in $$props) $$invalidate(13, canSort = $$props.canSort);
    		if ('canTransform' in $$props) $$invalidate(14, canTransform = $$props.canTransform);
    		if ('onRenderMenu' in $$props) $$invalidate(15, onRenderMenu = $$props.onRenderMenu);
    	};

    	$$self.$capture_state = () => ({
    		faFilter,
    		faRedo,
    		faSearch,
    		faSortAmountDownAlt,
    		faUndo,
    		faJSONEditorCompact,
    		faJSONEditorFormat,
    		Menu,
    		noop: noop$1,
    		readOnly,
    		onFormat,
    		onCompact,
    		onSort,
    		onTransform,
    		onToggleSearch,
    		onUndo,
    		onRedo,
    		canUndo,
    		canRedo,
    		canFormat,
    		canCompact,
    		canSort,
    		canTransform,
    		onRenderMenu,
    		defaultItems,
    		items
    	});

    	$$self.$inject_state = $$props => {
    		if ('readOnly' in $$props) $$invalidate(1, readOnly = $$props.readOnly);
    		if ('onFormat' in $$props) $$invalidate(2, onFormat = $$props.onFormat);
    		if ('onCompact' in $$props) $$invalidate(3, onCompact = $$props.onCompact);
    		if ('onSort' in $$props) $$invalidate(4, onSort = $$props.onSort);
    		if ('onTransform' in $$props) $$invalidate(5, onTransform = $$props.onTransform);
    		if ('onToggleSearch' in $$props) $$invalidate(6, onToggleSearch = $$props.onToggleSearch);
    		if ('onUndo' in $$props) $$invalidate(7, onUndo = $$props.onUndo);
    		if ('onRedo' in $$props) $$invalidate(8, onRedo = $$props.onRedo);
    		if ('canUndo' in $$props) $$invalidate(9, canUndo = $$props.canUndo);
    		if ('canRedo' in $$props) $$invalidate(10, canRedo = $$props.canRedo);
    		if ('canFormat' in $$props) $$invalidate(11, canFormat = $$props.canFormat);
    		if ('canCompact' in $$props) $$invalidate(12, canCompact = $$props.canCompact);
    		if ('canSort' in $$props) $$invalidate(13, canSort = $$props.canSort);
    		if ('canTransform' in $$props) $$invalidate(14, canTransform = $$props.canTransform);
    		if ('onRenderMenu' in $$props) $$invalidate(15, onRenderMenu = $$props.onRenderMenu);
    		if ('defaultItems' in $$props) $$invalidate(16, defaultItems = $$props.defaultItems);
    		if ('items' in $$props) $$invalidate(0, items = $$props.items);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*readOnly, onFormat, canFormat, onCompact, canCompact, onSort, canSort, onTransform, canTransform, onToggleSearch, onUndo, canUndo, onRedo, canRedo*/ 32766) {
    			/* @type {MenuItem[]} */
    			$$invalidate(16, defaultItems = !readOnly
    			? [
    					{
    						icon: faJSONEditorFormat,
    						title: 'Format JSON: add proper indentation and new lines (Ctrl+I)',
    						className: 'jse-format',
    						onClick: onFormat,
    						disabled: readOnly || !canFormat
    					},
    					{
    						icon: faJSONEditorCompact,
    						title: 'Compact JSON: remove all white spacing and new lines (Ctrl+Shift+I)',
    						className: 'jse-compact',
    						onClick: onCompact,
    						disabled: readOnly || !canCompact
    					},
    					{ separator: true },
    					{
    						icon: faSortAmountDownAlt,
    						title: 'Sort',
    						className: 'jse-sort',
    						onClick: onSort,
    						disabled: readOnly || !canSort
    					},
    					{
    						icon: faFilter,
    						title: 'Transform contents (filter, sort, project)',
    						className: 'jse-transform',
    						onClick: onTransform,
    						disabled: readOnly || !canTransform
    					},
    					{
    						icon: faSearch,
    						title: 'Search (Ctrl+F)',
    						className: 'jse-search',
    						onClick: onToggleSearch
    					},
    					{ separator: true },
    					{
    						icon: faUndo,
    						title: 'Undo (Ctrl+Z)',
    						className: 'jse-undo',
    						onClick: onUndo,
    						disabled: !canUndo
    					},
    					{
    						icon: faRedo,
    						title: 'Redo (Ctrl+Shift+Z)',
    						className: 'jse-redo',
    						onClick: onRedo,
    						disabled: !canRedo
    					},
    					{ space: true }
    				]
    			: [{ space: true }]);
    		}

    		if ($$self.$$.dirty & /*onRenderMenu, defaultItems*/ 98304) {
    			$$invalidate(0, items = onRenderMenu('code', defaultItems) || defaultItems);
    		}
    	};

    	return [
    		items,
    		readOnly,
    		onFormat,
    		onCompact,
    		onSort,
    		onTransform,
    		onToggleSearch,
    		onUndo,
    		onRedo,
    		canUndo,
    		canRedo,
    		canFormat,
    		canCompact,
    		canSort,
    		canTransform,
    		onRenderMenu,
    		defaultItems
    	];
    }

    class CodeMenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$L, create_fragment$L, not_equal, {
    			readOnly: 1,
    			onFormat: 2,
    			onCompact: 3,
    			onSort: 4,
    			onTransform: 5,
    			onToggleSearch: 6,
    			onUndo: 7,
    			onRedo: 8,
    			canUndo: 9,
    			canRedo: 10,
    			canFormat: 11,
    			canCompact: 12,
    			canSort: 13,
    			canTransform: 14,
    			onRenderMenu: 15
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CodeMenu",
    			options,
    			id: create_fragment$L.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*onFormat*/ ctx[2] === undefined && !('onFormat' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'onFormat'");
    		}

    		if (/*onCompact*/ ctx[3] === undefined && !('onCompact' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'onCompact'");
    		}

    		if (/*onSort*/ ctx[4] === undefined && !('onSort' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'onSort'");
    		}

    		if (/*onTransform*/ ctx[5] === undefined && !('onTransform' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'onTransform'");
    		}

    		if (/*onToggleSearch*/ ctx[6] === undefined && !('onToggleSearch' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'onToggleSearch'");
    		}

    		if (/*onUndo*/ ctx[7] === undefined && !('onUndo' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'onUndo'");
    		}

    		if (/*onRedo*/ ctx[8] === undefined && !('onRedo' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'onRedo'");
    		}

    		if (/*canUndo*/ ctx[9] === undefined && !('canUndo' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'canUndo'");
    		}

    		if (/*canRedo*/ ctx[10] === undefined && !('canRedo' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'canRedo'");
    		}

    		if (/*canFormat*/ ctx[11] === undefined && !('canFormat' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'canFormat'");
    		}

    		if (/*canCompact*/ ctx[12] === undefined && !('canCompact' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'canCompact'");
    		}

    		if (/*canSort*/ ctx[13] === undefined && !('canSort' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'canSort'");
    		}

    		if (/*canTransform*/ ctx[14] === undefined && !('canTransform' in props)) {
    			console.warn("<CodeMenu> was created without expected prop 'canTransform'");
    		}
    	}

    	get readOnly() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readOnly(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onFormat() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onFormat(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onCompact() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onCompact(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSort() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSort(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTransform() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTransform(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onToggleSearch() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onToggleSearch(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onUndo() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onUndo(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRedo() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRedo(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get canUndo() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set canUndo(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get canRedo() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set canRedo(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get canFormat() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set canFormat(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get canCompact() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set canCompact(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get canSort() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set canSort(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get canTransform() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set canTransform(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRenderMenu() {
    		throw new Error("<CodeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRenderMenu(value) {
    		throw new Error("<CodeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
    The data structure for documents. @nonabstract
    */
    class Text {
        /**
        @internal
        */
        constructor() { }
        /**
        Get the line description around the given position.
        */
        lineAt(pos) {
            if (pos < 0 || pos > this.length)
                throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
            return this.lineInner(pos, false, 1, 0);
        }
        /**
        Get the description for the given (1-based) line number.
        */
        line(n) {
            if (n < 1 || n > this.lines)
                throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
            return this.lineInner(n, true, 1, 0);
        }
        /**
        Replace a range of the text with the given content.
        */
        replace(from, to, text) {
            let parts = [];
            this.decompose(0, from, parts, 2 /* To */);
            if (text.length)
                text.decompose(0, text.length, parts, 1 /* From */ | 2 /* To */);
            this.decompose(to, this.length, parts, 1 /* From */);
            return TextNode.from(parts, this.length - (to - from) + text.length);
        }
        /**
        Append another document to this one.
        */
        append(other) {
            return this.replace(this.length, this.length, other);
        }
        /**
        Retrieve the text between the given points.
        */
        slice(from, to = this.length) {
            let parts = [];
            this.decompose(from, to, parts, 0);
            return TextNode.from(parts, to - from);
        }
        /**
        Test whether this text is equal to another instance.
        */
        eq(other) {
            if (other == this)
                return true;
            if (other.length != this.length || other.lines != this.lines)
                return false;
            let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
            let a = new RawTextCursor(this), b = new RawTextCursor(other);
            for (let skip = start, pos = start;;) {
                a.next(skip);
                b.next(skip);
                skip = 0;
                if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                    return false;
                pos += a.value.length;
                if (a.done || pos >= end)
                    return true;
            }
        }
        /**
        Iterate over the text. When `dir` is `-1`, iteration happens
        from end to start. This will return lines and the breaks between
        them as separate strings.
        */
        iter(dir = 1) { return new RawTextCursor(this, dir); }
        /**
        Iterate over a range of the text. When `from` > `to`, the
        iterator will run in reverse.
        */
        iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
        /**
        Return a cursor that iterates over the given range of lines,
        _without_ returning the line breaks between, and yielding empty
        strings for empty lines.
        
        When `from` and `to` are given, they should be 1-based line numbers.
        */
        iterLines(from, to) {
            let inner;
            if (from == null) {
                inner = this.iter();
            }
            else {
                if (to == null)
                    to = this.lines + 1;
                let start = this.line(from).from;
                inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
            }
            return new LineCursor(inner);
        }
        /**
        @internal
        */
        toString() { return this.sliceString(0); }
        /**
        Convert the document to an array of lines (which can be
        deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
        */
        toJSON() {
            let lines = [];
            this.flatten(lines);
            return lines;
        }
        /**
        Create a `Text` instance for the given array of lines.
        */
        static of(text) {
            if (text.length == 0)
                throw new RangeError("A document must have at least one line");
            if (text.length == 1 && !text[0])
                return Text.empty;
            return text.length <= 32 /* Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
        }
    }
    // Leaves store an array of line strings. There are always line breaks
    // between these strings. Leaves are limited in size and have to be
    // contained in TextNode instances for bigger documents.
    class TextLeaf extends Text {
        constructor(text, length = textLength(text)) {
            super();
            this.text = text;
            this.length = length;
        }
        get lines() { return this.text.length; }
        get children() { return null; }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let string = this.text[i], end = offset + string.length;
                if ((isLine ? line : end) >= target)
                    return new Line(offset, end, line, string);
                offset = end + 1;
                line++;
            }
        }
        decompose(from, to, target, open) {
            let text = from <= 0 && to >= this.length ? this
                : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
            if (open & 1 /* From */) {
                let prev = target.pop();
                let joined = appendText(text.text, prev.text.slice(), 0, text.length);
                if (joined.length <= 32 /* Branch */) {
                    target.push(new TextLeaf(joined, prev.length + text.length));
                }
                else {
                    let mid = joined.length >> 1;
                    target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
                }
            }
            else {
                target.push(text);
            }
        }
        replace(from, to, text) {
            if (!(text instanceof TextLeaf))
                return super.replace(from, to, text);
            let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
            let newLen = this.length + text.length - (to - from);
            if (lines.length <= 32 /* Branch */)
                return new TextLeaf(lines, newLen);
            return TextNode.from(TextLeaf.split(lines, []), newLen);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
                let line = this.text[i], end = pos + line.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += line.slice(Math.max(0, from - pos), to - pos);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let line of this.text)
                target.push(line);
        }
        scanIdentical() { return 0; }
        static split(text, target) {
            let part = [], len = -1;
            for (let line of text) {
                part.push(line);
                len += line.length + 1;
                if (part.length == 32 /* Branch */) {
                    target.push(new TextLeaf(part, len));
                    part = [];
                    len = -1;
                }
            }
            if (len > -1)
                target.push(new TextLeaf(part, len));
            return target;
        }
    }
    // Nodes provide the tree structure of the `Text` type. They store a
    // number of other nodes or leaves, taking care to balance themselves
    // on changes. There are implied line breaks _between_ the children of
    // a node (but not before the first or after the last child).
    class TextNode extends Text {
        constructor(children, length) {
            super();
            this.children = children;
            this.length = length;
            this.lines = 0;
            for (let child of children)
                this.lines += child.lines;
        }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
                if ((isLine ? endLine : end) >= target)
                    return child.lineInner(target, isLine, line, offset);
                offset = end + 1;
                line = endLine + 1;
            }
        }
        decompose(from, to, target, open) {
            for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (from <= end && to >= pos) {
                    let childOpen = open & ((pos <= from ? 1 /* From */ : 0) | (end >= to ? 2 /* To */ : 0));
                    if (pos >= from && end <= to && !childOpen)
                        target.push(child);
                    else
                        child.decompose(from - pos, to - pos, target, childOpen);
                }
                pos = end + 1;
            }
        }
        replace(from, to, text) {
            if (text.lines < this.lines)
                for (let i = 0, pos = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = pos + child.length;
                    // Fast path: if the change only affects one child and the
                    // child's size remains in the acceptable range, only update
                    // that child
                    if (from >= pos && to <= end) {
                        let updated = child.replace(from - pos, to - pos, text);
                        let totalLines = this.lines - child.lines + updated.lines;
                        if (updated.lines < (totalLines >> (5 /* BranchShift */ - 1)) &&
                            updated.lines > (totalLines >> (5 /* BranchShift */ + 1))) {
                            let copy = this.children.slice();
                            copy[i] = updated;
                            return new TextNode(copy, this.length - (to - from) + text.length);
                        }
                        return super.replace(pos, end, updated);
                    }
                    pos = end + 1;
                }
            return super.replace(from, to, text);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += child.sliceString(from - pos, to - pos, lineSep);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let child of this.children)
                child.flatten(target);
        }
        scanIdentical(other, dir) {
            if (!(other instanceof TextNode))
                return 0;
            let length = 0;
            let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
                : [this.children.length - 1, other.children.length - 1, -1, -1];
            for (;; iA += dir, iB += dir) {
                if (iA == eA || iB == eB)
                    return length;
                let chA = this.children[iA], chB = other.children[iB];
                if (chA != chB)
                    return length + chA.scanIdentical(chB, dir);
                length += chA.length + 1;
            }
        }
        static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
            let lines = 0;
            for (let ch of children)
                lines += ch.lines;
            if (lines < 32 /* Branch */) {
                let flat = [];
                for (let ch of children)
                    ch.flatten(flat);
                return new TextLeaf(flat, length);
            }
            let chunk = Math.max(32 /* Branch */, lines >> 5 /* BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
            let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
            function add(child) {
                let last;
                if (child.lines > maxChunk && child instanceof TextNode) {
                    for (let node of child.children)
                        add(node);
                }
                else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                    flush();
                    chunked.push(child);
                }
                else if (child instanceof TextLeaf && currentLines &&
                    (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                    child.lines + last.lines <= 32 /* Branch */) {
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
                }
                else {
                    if (currentLines + child.lines > chunk)
                        flush();
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk.push(child);
                }
            }
            function flush() {
                if (currentLines == 0)
                    return;
                chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
                currentLen = -1;
                currentLines = currentChunk.length = 0;
            }
            for (let child of children)
                add(child);
            flush();
            return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
        }
    }
    Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
    function textLength(text) {
        let length = -1;
        for (let line of text)
            length += line.length + 1;
        return length;
    }
    function appendText(text, target, from = 0, to = 1e9) {
        for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
            let line = text[i], end = pos + line.length;
            if (end >= from) {
                if (end > to)
                    line = line.slice(0, to - pos);
                if (pos < from)
                    line = line.slice(from - pos);
                if (first) {
                    target[target.length - 1] += line;
                    first = false;
                }
                else
                    target.push(line);
            }
            pos = end + 1;
        }
        return target;
    }
    function sliceText(text, from, to) {
        return appendText(text, [""], from, to);
    }
    class RawTextCursor {
        constructor(text, dir = 1) {
            this.dir = dir;
            this.done = false;
            this.lineBreak = false;
            this.value = "";
            this.nodes = [text];
            this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
        }
        nextInner(skip, dir) {
            this.done = this.lineBreak = false;
            for (;;) {
                let last = this.nodes.length - 1;
                let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
                let size = top instanceof TextLeaf ? top.text.length : top.children.length;
                if (offset == (dir > 0 ? size : 0)) {
                    if (last == 0) {
                        this.done = true;
                        this.value = "";
                        return this;
                    }
                    if (dir > 0)
                        this.offsets[last - 1]++;
                    this.nodes.pop();
                    this.offsets.pop();
                }
                else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                    this.offsets[last] += dir;
                    if (skip == 0) {
                        this.lineBreak = true;
                        this.value = "\n";
                        return this;
                    }
                    skip--;
                }
                else if (top instanceof TextLeaf) {
                    // Move to the next string
                    let next = top.text[offset + (dir < 0 ? -1 : 0)];
                    this.offsets[last] += dir;
                    if (next.length > Math.max(0, skip)) {
                        this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                        return this;
                    }
                    skip -= next.length;
                }
                else {
                    let next = top.children[offset + (dir < 0 ? -1 : 0)];
                    if (skip > next.length) {
                        skip -= next.length;
                        this.offsets[last] += dir;
                    }
                    else {
                        if (dir < 0)
                            this.offsets[last]--;
                        this.nodes.push(next);
                        this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                    }
                }
            }
        }
        next(skip = 0) {
            if (skip < 0) {
                this.nextInner(-skip, (-this.dir));
                skip = this.value.length;
            }
            return this.nextInner(skip, this.dir);
        }
    }
    class PartialTextCursor {
        constructor(text, start, end) {
            this.value = "";
            this.done = false;
            this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
            this.pos = start > end ? text.length : 0;
            this.from = Math.min(start, end);
            this.to = Math.max(start, end);
        }
        nextInner(skip, dir) {
            if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
                this.value = "";
                this.done = true;
                return this;
            }
            skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
            let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
            if (skip > limit)
                skip = limit;
            limit -= skip;
            let { value } = this.cursor.next(skip);
            this.pos += (value.length + skip) * dir;
            this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
            this.done = !this.value;
            return this;
        }
        next(skip = 0) {
            if (skip < 0)
                skip = Math.max(skip, this.from - this.pos);
            else if (skip > 0)
                skip = Math.min(skip, this.to - this.pos);
            return this.nextInner(skip, this.cursor.dir);
        }
        get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
    }
    class LineCursor {
        constructor(inner) {
            this.inner = inner;
            this.afterBreak = true;
            this.value = "";
            this.done = false;
        }
        next(skip = 0) {
            let { done, lineBreak, value } = this.inner.next(skip);
            if (done) {
                this.done = true;
                this.value = "";
            }
            else if (lineBreak) {
                if (this.afterBreak) {
                    this.value = "";
                }
                else {
                    this.afterBreak = true;
                    this.next();
                }
            }
            else {
                this.value = value;
                this.afterBreak = false;
            }
            return this;
        }
        get lineBreak() { return false; }
    }
    if (typeof Symbol != "undefined") {
        Text.prototype[Symbol.iterator] = function () { return this.iter(); };
        RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
            LineCursor.prototype[Symbol.iterator] = function () { return this; };
    }
    /**
    This type describes a line in the document. It is created
    on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
    */
    class Line {
        /**
        @internal
        */
        constructor(
        /**
        The position of the start of the line.
        */
        from, 
        /**
        The position at the end of the line (_before_ the line break,
        or at the end of document for the last line).
        */
        to, 
        /**
        This line's line number (1-based).
        */
        number, 
        /**
        The line's content.
        */
        text) {
            this.from = from;
            this.to = to;
            this.number = number;
            this.text = text;
        }
        /**
        The length of the line (not including any line break after it).
        */
        get length() { return this.to - this.from; }
    }

    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    let extend$1 = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
    // Convert offsets into absolute values
    for (let i = 1; i < extend$1.length; i++)
        extend$1[i] += extend$1[i - 1];
    function isExtendingChar(code) {
        for (let i = 1; i < extend$1.length; i += 2)
            if (extend$1[i] > code)
                return extend$1[i - 1] <= code;
        return false;
    }
    function isRegionalIndicator(code) {
        return code >= 0x1F1E6 && code <= 0x1F1FF;
    }
    const ZWJ = 0x200d;
    /**
    Returns a next grapheme cluster break _after_ (not equal to)
    `pos`, if `forward` is true, or before otherwise. Returns `pos`
    itself if no further cluster break is available in the string.
    Moves across surrogate pairs, extending characters (when
    `includeExtending` is true), characters joined with zero-width
    joiners, and flag emoji.
    */
    function findClusterBreak(str, pos, forward = true, includeExtending = true) {
        return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
    }
    function nextClusterBreak(str, pos, includeExtending) {
        if (pos == str.length)
            return pos;
        // If pos is in the middle of a surrogate pair, move to its start
        if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
            pos--;
        let prev = codePointAt(str, pos);
        pos += codePointSize(prev);
        while (pos < str.length) {
            let next = codePointAt(str, pos);
            if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
                pos += codePointSize(next);
                prev = next;
            }
            else if (isRegionalIndicator(next)) {
                let countBefore = 0, i = pos - 2;
                while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
                    countBefore++;
                    i -= 2;
                }
                if (countBefore % 2 == 0)
                    break;
                else
                    pos += 2;
            }
            else {
                break;
            }
        }
        return pos;
    }
    function prevClusterBreak(str, pos, includeExtending) {
        while (pos > 0) {
            let found = nextClusterBreak(str, pos - 2, includeExtending);
            if (found < pos)
                return found;
            pos--;
        }
        return 0;
    }
    function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
    function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
    /**
    Find the code point at the given position in a string (like the
    [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
    string method).
    */
    function codePointAt(str, pos) {
        let code0 = str.charCodeAt(pos);
        if (!surrogateHigh(code0) || pos + 1 == str.length)
            return code0;
        let code1 = str.charCodeAt(pos + 1);
        if (!surrogateLow(code1))
            return code0;
        return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
    }
    /**
    Given a Unicode codepoint, return the JavaScript string that
    respresents it (like
    [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
    */
    function fromCodePoint(code) {
        if (code <= 0xffff)
            return String.fromCharCode(code);
        code -= 0x10000;
        return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
    }
    /**
    The amount of positions a character takes up a JavaScript string.
    */
    function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

    const DefaultSplit = /\r\n?|\n/;
    /**
    Distinguishes different ways in which positions can be mapped.
    */
    var MapMode = /*@__PURE__*/(function (MapMode) {
        /**
        Map a position to a valid new position, even when its context
        was deleted.
        */
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /**
        Return null if deletion happens across the position.
        */
        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /**
        Return null if the character _before_ the position is deleted.
        */
        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /**
        Return null if the character _after_ the position is deleted.
        */
        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    return MapMode})(MapMode || (MapMode = {}));
    /**
    A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
    that doesn't store the inserted text. As such, it can't be
    applied, but is cheaper to store and manipulate.
    */
    class ChangeDesc {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        sections) {
            this.sections = sections;
        }
        /**
        The length of the document before the change.
        */
        get length() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2)
                result += this.sections[i];
            return result;
        }
        /**
        The length of the document after the change.
        */
        get newLength() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2) {
                let ins = this.sections[i + 1];
                result += ins < 0 ? this.sections[i] : ins;
            }
            return result;
        }
        /**
        False when there are actual changes in this set.
        */
        get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
        /**
        Iterate over the unchanged parts left by these changes. `posA`
        provides the position of the range in the old document, `posB`
        the new position in the changed document.
        */
        iterGaps(f) {
            for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0) {
                    f(posA, posB, len);
                    posB += len;
                }
                else {
                    posB += ins;
                }
                posA += len;
            }
        }
        /**
        Iterate over the ranges changed by these changes. (See
        [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
        variant that also provides you with the inserted text.)
        `fromA`/`toA` provides the extent of the change in the starting
        document, `fromB`/`toB` the extent of the replacement in the
        changed document.
        
        When `individual` is true, adjacent changes (which are kept
        separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
        reported separately.
        */
        iterChangedRanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a description of the inverted form of these changes.
        */
        get invertedDesc() {
            let sections = [];
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0)
                    sections.push(len, ins);
                else
                    sections.push(ins, len);
            }
            return new ChangeDesc(sections);
        }
        /**
        Compute the combined effect of applying another set of changes
        after this one. The length of the document after this set should
        match the length before `other`.
        */
        composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
        /**
        Map this description, which should start with the same document
        as `other`, over another set of changes, so that it can be
        applied after it. When `before` is true, map as if the changes
        in `other` happened before the ones in `this`.
        */
        mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
        mapPos(pos, assoc = -1, mode = MapMode.Simple) {
            let posA = 0, posB = 0;
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
                if (ins < 0) {
                    if (endA > pos)
                        return posB + (pos - posA);
                    posB += len;
                }
                else {
                    if (mode != MapMode.Simple && endA >= pos &&
                        (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                            mode == MapMode.TrackBefore && posA < pos ||
                            mode == MapMode.TrackAfter && endA > pos))
                        return null;
                    if (endA > pos || endA == pos && assoc < 0 && !len)
                        return pos == posA || assoc < 0 ? posB : posB + ins;
                    posB += ins;
                }
                posA = endA;
            }
            if (pos > posA)
                throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
            return posB;
        }
        /**
        Check whether these changes touch a given range. When one of the
        changes entirely covers the range, the string `"cover"` is
        returned.
        */
        touchesRange(from, to = from) {
            for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
                let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
                if (ins >= 0 && pos <= to && end >= from)
                    return pos < from && end > to ? "cover" : true;
                pos = end;
            }
            return false;
        }
        /**
        @internal
        */
        toString() {
            let result = "";
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }
            return result;
        }
        /**
        Serialize this change desc to a JSON-representable value.
        */
        toJSON() { return this.sections; }
        /**
        Create a change desc from its JSON representation (as produced
        by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
                throw new RangeError("Invalid JSON representation of ChangeDesc");
            return new ChangeDesc(json);
        }
        /**
        @internal
        */
        static create(sections) { return new ChangeDesc(sections); }
    }
    /**
    A change set represents a group of modifications to a document. It
    stores the document length, and can only be applied to documents
    with exactly that length.
    */
    class ChangeSet extends ChangeDesc {
        constructor(sections, 
        /**
        @internal
        */
        inserted) {
            super(sections);
            this.inserted = inserted;
        }
        /**
        Apply the changes to a document, returning the modified
        document.
        */
        apply(doc) {
            if (this.length != doc.length)
                throw new RangeError("Applying change set to a document with the wrong length");
            iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
            return doc;
        }
        mapDesc(other, before = false) { return mapSet(this, other, before, true); }
        /**
        Given the document as it existed _before_ the changes, return a
        change set that represents the inverse of this set, which could
        be used to go from the document created by the changes back to
        the document as it existed before the changes.
        */
        invert(doc) {
            let sections = this.sections.slice(), inserted = [];
            for (let i = 0, pos = 0; i < sections.length; i += 2) {
                let len = sections[i], ins = sections[i + 1];
                if (ins >= 0) {
                    sections[i] = ins;
                    sections[i + 1] = len;
                    let index = i >> 1;
                    while (inserted.length < index)
                        inserted.push(Text.empty);
                    inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
                }
                pos += len;
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        Combine two subsequent change sets into a single set. `other`
        must start in the document produced by `this`. If `this` goes
        `docA` → `docB` and `other` represents `docB` → `docC`, the
        returned value will represent the change `docA` → `docC`.
        */
        compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
        /**
        Given another change set starting in the same document, maps this
        change set over the other, producing a new change set that can be
        applied to the document produced by applying `other`. When
        `before` is `true`, order changes as if `this` comes before
        `other`, otherwise (the default) treat `other` as coming first.
        
        Given two changes `A` and `B`, `A.compose(B.map(A))` and
        `B.compose(A.map(B, true))` will produce the same document. This
        provides a basic form of [operational
        transformation](https://en.wikipedia.org/wiki/Operational_transformation),
        and can be used for collaborative editing.
        */
        map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
        /**
        Iterate over the changed ranges in the document, calling `f` for
        each, with the range in the original document (`fromA`-`toA`)
        and the range that replaces it in the new document
        (`fromB`-`toB`).
        
        When `individual` is true, adjacent changes are reported
        separately.
        */
        iterChanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
        set.
        */
        get desc() { return ChangeDesc.create(this.sections); }
        /**
        @internal
        */
        filter(ranges) {
            let resultSections = [], resultInserted = [], filteredSections = [];
            let iter = new SectionIter(this);
            done: for (let i = 0, pos = 0;;) {
                let next = i == ranges.length ? 1e9 : ranges[i++];
                while (pos < next || pos == next && iter.len == 0) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, next - pos);
                    addSection(filteredSections, len, -1);
                    let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                    addSection(resultSections, len, ins);
                    if (ins > 0)
                        addInsert(resultInserted, resultSections, iter.text);
                    iter.forward(len);
                    pos += len;
                }
                let end = ranges[i++];
                while (pos < end) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, end - pos);
                    addSection(resultSections, len, -1);
                    addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                    iter.forward(len);
                    pos += len;
                }
            }
            return { changes: new ChangeSet(resultSections, resultInserted),
                filtered: ChangeDesc.create(filteredSections) };
        }
        /**
        Serialize this change set to a JSON-representable value.
        */
        toJSON() {
            let parts = [];
            for (let i = 0; i < this.sections.length; i += 2) {
                let len = this.sections[i], ins = this.sections[i + 1];
                if (ins < 0)
                    parts.push(len);
                else if (ins == 0)
                    parts.push([len]);
                else
                    parts.push([len].concat(this.inserted[i >> 1].toJSON()));
            }
            return parts;
        }
        /**
        Create a change set for the given changes, for a document of the
        given length, using `lineSep` as line separator.
        */
        static of(changes, length, lineSep) {
            let sections = [], inserted = [], pos = 0;
            let total = null;
            function flush(force = false) {
                if (!force && !sections.length)
                    return;
                if (pos < length)
                    addSection(sections, length - pos, -1);
                let set = new ChangeSet(sections, inserted);
                total = total ? total.compose(set.map(total)) : set;
                sections = [];
                inserted = [];
                pos = 0;
            }
            function process(spec) {
                if (Array.isArray(spec)) {
                    for (let sub of spec)
                        process(sub);
                }
                else if (spec instanceof ChangeSet) {
                    if (spec.length != length)
                        throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                    flush();
                    total = total ? total.compose(spec.map(total)) : spec;
                }
                else {
                    let { from, to = from, insert } = spec;
                    if (from > to || from < 0 || to > length)
                        throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                    let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                    let insLen = insText.length;
                    if (from == to && insLen == 0)
                        return;
                    if (from < pos)
                        flush();
                    if (from > pos)
                        addSection(sections, from - pos, -1);
                    addSection(sections, to - from, insLen);
                    addInsert(inserted, sections, insText);
                    pos = to;
                }
            }
            process(changes);
            flush(!total);
            return total;
        }
        /**
        Create an empty changeset of the given length.
        */
        static empty(length) {
            return new ChangeSet(length ? [length, -1] : [], []);
        }
        /**
        Create a changeset from its JSON representation (as produced by
        [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json))
                throw new RangeError("Invalid JSON representation of ChangeSet");
            let sections = [], inserted = [];
            for (let i = 0; i < json.length; i++) {
                let part = json[i];
                if (typeof part == "number") {
                    sections.push(part, -1);
                }
                else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                    throw new RangeError("Invalid JSON representation of ChangeSet");
                }
                else if (part.length == 1) {
                    sections.push(part[0], 0);
                }
                else {
                    while (inserted.length < i)
                        inserted.push(Text.empty);
                    inserted[i] = Text.of(part.slice(1));
                    sections.push(part[0], inserted[i].length);
                }
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        @internal
        */
        static createSet(sections, inserted) {
            return new ChangeSet(sections, inserted);
        }
    }
    function addSection(sections, len, ins, forceJoin = false) {
        if (len == 0 && ins <= 0)
            return;
        let last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1])
            sections[last] += len;
        else if (len == 0 && sections[last] == 0)
            sections[last + 1] += ins;
        else if (forceJoin) {
            sections[last] += len;
            sections[last + 1] += ins;
        }
        else
            sections.push(len, ins);
    }
    function addInsert(values, sections, value) {
        if (value.length == 0)
            return;
        let index = (sections.length - 2) >> 1;
        if (index < values.length) {
            values[values.length - 1] = values[values.length - 1].append(value);
        }
        else {
            while (values.length < index)
                values.push(Text.empty);
            values.push(value);
        }
    }
    function iterChanges(desc, f, individual) {
        let inserted = desc.inserted;
        for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
            let len = desc.sections[i++], ins = desc.sections[i++];
            if (ins < 0) {
                posA += len;
                posB += len;
            }
            else {
                let endA = posA, endB = posB, text = Text.empty;
                for (;;) {
                    endA += len;
                    endB += ins;
                    if (ins && inserted)
                        text = text.append(inserted[(i - 2) >> 1]);
                    if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                        break;
                    len = desc.sections[i++];
                    ins = desc.sections[i++];
                }
                f(posA, endA, posB, endB, text);
                posA = endA;
                posB = endB;
            }
        }
    }
    function mapSet(setA, setB, before, mkSet = false) {
        let sections = [], insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let posA = 0, posB = 0;;) {
            if (a.ins == -1) {
                posA += a.len;
                a.next();
            }
            else if (b.ins == -1 && posB < posA) {
                let skip = Math.min(b.len, posA - posB);
                b.forward(skip);
                addSection(sections, skip, -1);
                posB += skip;
            }
            else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {
                addSection(sections, b.ins, -1);
                while (posA > posB && !a.done && posA + a.len < posB + b.len) {
                    posA += a.len;
                    a.next();
                }
                posB += b.len;
                b.next();
            }
            else if (a.ins >= 0) {
                let len = 0, end = posA + a.len;
                for (;;) {
                    if (b.ins >= 0 && posB > posA && posB + b.len < end) {
                        len += b.ins;
                        posB += b.len;
                        b.next();
                    }
                    else if (b.ins == -1 && posB < end) {
                        let skip = Math.min(b.len, end - posB);
                        len += skip;
                        b.forward(skip);
                        posB += skip;
                    }
                    else {
                        break;
                    }
                }
                addSection(sections, len, a.ins);
                if (insert)
                    addInsert(insert, sections, a.text);
                posA = end;
                a.next();
            }
            else if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else {
                throw new Error("Mismatched change set lengths");
            }
        }
    }
    function composeSets(setA, setB, mkSet = false) {
        let sections = [];
        let insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let open = false;;) {
            if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else if (a.ins == 0) { // Deletion in A
                addSection(sections, a.len, 0, open);
                a.next();
            }
            else if (b.len == 0 && !b.done) { // Insertion in B
                addSection(sections, 0, b.ins, open);
                if (insert)
                    addInsert(insert, sections, b.text);
                b.next();
            }
            else if (a.done || b.done) {
                throw new Error("Mismatched change set lengths");
            }
            else {
                let len = Math.min(a.len2, b.len), sectionLen = sections.length;
                if (a.ins == -1) {
                    let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                    addSection(sections, len, insB, open);
                    if (insert && insB)
                        addInsert(insert, sections, b.text);
                }
                else if (b.ins == -1) {
                    addSection(sections, a.off ? 0 : a.len, len, open);
                    if (insert)
                        addInsert(insert, sections, a.textBit(len));
                }
                else {
                    addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                    if (insert && !b.off)
                        addInsert(insert, sections, b.text);
                }
                open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
                a.forward2(len);
                b.forward(len);
            }
        }
    }
    class SectionIter {
        constructor(set) {
            this.set = set;
            this.i = 0;
            this.next();
        }
        next() {
            let { sections } = this.set;
            if (this.i < sections.length) {
                this.len = sections[this.i++];
                this.ins = sections[this.i++];
            }
            else {
                this.len = 0;
                this.ins = -2;
            }
            this.off = 0;
        }
        get done() { return this.ins == -2; }
        get len2() { return this.ins < 0 ? this.len : this.ins; }
        get text() {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length ? Text.empty : inserted[index];
        }
        textBit(len) {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length && !len ? Text.empty
                : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
        }
        forward(len) {
            if (len == this.len)
                this.next();
            else {
                this.len -= len;
                this.off += len;
            }
        }
        forward2(len) {
            if (this.ins == -1)
                this.forward(len);
            else if (len == this.ins)
                this.next();
            else {
                this.ins -= len;
                this.off += len;
            }
        }
    }

    /**
    A single selection range. When
    [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
    is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
    multiple ranges. By default, selections hold exactly one range.
    */
    class SelectionRange {
        constructor(
        /**
        The lower boundary of the range.
        */
        from, 
        /**
        The upper boundary of the range.
        */
        to, flags) {
            this.from = from;
            this.to = to;
            this.flags = flags;
        }
        /**
        The anchor of the range—the side that doesn't move when you
        extend it.
        */
        get anchor() { return this.flags & 16 /* Inverted */ ? this.to : this.from; }
        /**
        The head of the range, which is moved when the range is
        [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
        */
        get head() { return this.flags & 16 /* Inverted */ ? this.from : this.to; }
        /**
        True when `anchor` and `head` are at the same position.
        */
        get empty() { return this.from == this.to; }
        /**
        If this is a cursor that is explicitly associated with the
        character on one of its sides, this returns the side. -1 means
        the character before its position, 1 the character after, and 0
        means no association.
        */
        get assoc() { return this.flags & 4 /* AssocBefore */ ? -1 : this.flags & 8 /* AssocAfter */ ? 1 : 0; }
        /**
        The bidirectional text level associated with this cursor, if
        any.
        */
        get bidiLevel() {
            let level = this.flags & 3 /* BidiLevelMask */;
            return level == 3 ? null : level;
        }
        /**
        The goal column (stored vertical offset) associated with a
        cursor. This is used to preserve the vertical position when
        [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
        lines of different length.
        */
        get goalColumn() {
            let value = this.flags >> 5 /* GoalColumnOffset */;
            return value == 33554431 /* NoGoalColumn */ ? undefined : value;
        }
        /**
        Map this range through a change, producing a valid range in the
        updated document.
        */
        map(change, assoc = -1) {
            let from, to;
            if (this.empty) {
                from = to = change.mapPos(this.from, assoc);
            }
            else {
                from = change.mapPos(this.from, 1);
                to = change.mapPos(this.to, -1);
            }
            return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
        }
        /**
        Extend this range to cover at least `from` to `to`.
        */
        extend(from, to = from) {
            if (from <= this.anchor && to >= this.anchor)
                return EditorSelection.range(from, to);
            let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection.range(this.anchor, head);
        }
        /**
        Compare this range to another range.
        */
        eq(other) {
            return this.anchor == other.anchor && this.head == other.head;
        }
        /**
        Return a JSON-serializable object representing the range.
        */
        toJSON() { return { anchor: this.anchor, head: this.head }; }
        /**
        Convert a JSON representation of a range to a `SelectionRange`
        instance.
        */
        static fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection.range(json.anchor, json.head);
        }
        /**
        @internal
        */
        static create(from, to, flags) {
            return new SelectionRange(from, to, flags);
        }
    }
    /**
    An editor selection holds one or more selection ranges.
    */
    class EditorSelection {
        constructor(
        /**
        The ranges in the selection, sorted by position. Ranges cannot
        overlap (but they may touch, if they aren't empty).
        */
        ranges, 
        /**
        The index of the _main_ range in the selection (which is
        usually the range that was added last).
        */
        mainIndex) {
            this.ranges = ranges;
            this.mainIndex = mainIndex;
        }
        /**
        Map a selection through a change. Used to adjust the selection
        position for changes.
        */
        map(change, assoc = -1) {
            if (change.empty)
                return this;
            return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
        }
        /**
        Compare this selection to another selection.
        */
        eq(other) {
            if (this.ranges.length != other.ranges.length ||
                this.mainIndex != other.mainIndex)
                return false;
            for (let i = 0; i < this.ranges.length; i++)
                if (!this.ranges[i].eq(other.ranges[i]))
                    return false;
            return true;
        }
        /**
        Get the primary selection range. Usually, you should make sure
        your code applies to _all_ ranges, by using methods like
        [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
        */
        get main() { return this.ranges[this.mainIndex]; }
        /**
        Make sure the selection only has one range. Returns a selection
        holding only the main range from this selection.
        */
        asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
        }
        /**
        Extend this selection with an extra range.
        */
        addRange(range, main = true) {
            return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
        }
        /**
        Replace a given range with another range, and then normalize the
        selection to merge and sort ranges if necessary.
        */
        replaceRange(range, which = this.mainIndex) {
            let ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection.create(ranges, this.mainIndex);
        }
        /**
        Convert this selection to an object that can be serialized to
        JSON.
        */
        toJSON() {
            return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
        }
        /**
        Create a selection from a JSON representation.
        */
        static fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
                throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
        }
        /**
        Create a selection holding a single range.
        */
        static single(anchor, head = anchor) {
            return new EditorSelection([EditorSelection.range(anchor, head)], 0);
        }
        /**
        Sort and merge the given set of ranges, creating a valid
        selection.
        */
        static create(ranges, mainIndex = 0) {
            if (ranges.length == 0)
                throw new RangeError("A selection needs at least one range");
            for (let pos = 0, i = 0; i < ranges.length; i++) {
                let range = ranges[i];
                if (range.empty ? range.from <= pos : range.from < pos)
                    return EditorSelection.normalized(ranges.slice(), mainIndex);
                pos = range.to;
            }
            return new EditorSelection(ranges, mainIndex);
        }
        /**
        Create a cursor selection range at the given position. You can
        safely ignore the optional arguments in most situations.
        */
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
            return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* AssocBefore */ : 8 /* AssocAfter */) |
                (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
                ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */));
        }
        /**
        Create a selection range.
        */
        static range(anchor, head, goalColumn) {
            let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */;
            return head < anchor ? SelectionRange.create(head, anchor, 16 /* Inverted */ | goal | 8 /* AssocAfter */)
                : SelectionRange.create(anchor, head, goal | (head > anchor ? 4 /* AssocBefore */ : 0));
        }
        /**
        @internal
        */
        static normalized(ranges, mainIndex = 0) {
            let main = ranges[mainIndex];
            ranges.sort((a, b) => a.from - b.from);
            mainIndex = ranges.indexOf(main);
            for (let i = 1; i < ranges.length; i++) {
                let range = ranges[i], prev = ranges[i - 1];
                if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                    let from = prev.from, to = Math.max(range.to, prev.to);
                    if (i <= mainIndex)
                        mainIndex--;
                    ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
                }
            }
            return new EditorSelection(ranges, mainIndex);
        }
    }
    function checkSelection(selection, docLength) {
        for (let range of selection.ranges)
            if (range.to > docLength)
                throw new RangeError("Selection points outside of document");
    }

    let nextID = 0;
    /**
    A facet is a labeled value that is associated with an editor
    state. It takes inputs from any number of extensions, and combines
    those into a single output value.

    Examples of uses of facets are the [tab
    size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
    attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
    listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
    */
    class Facet {
        constructor(
        /**
        @internal
        */
        combine, 
        /**
        @internal
        */
        compareInput, 
        /**
        @internal
        */
        compare, isStatic, 
        /**
        @internal
        */
        extensions) {
            this.combine = combine;
            this.compareInput = compareInput;
            this.compare = compare;
            this.isStatic = isStatic;
            this.extensions = extensions;
            /**
            @internal
            */
            this.id = nextID++;
            this.default = combine([]);
        }
        /**
        Define a new facet.
        */
        static define(config = {}) {
            return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
        }
        /**
        Returns an extension that adds the given value to this facet.
        */
        of(value) {
            return new FacetProvider([], this, 0 /* Static */, value);
        }
        /**
        Create an extension that computes a value for the facet from a
        state. You must take care to declare the parts of the state that
        this value depends on, since your function is only called again
        for a new state when one of those parts changed.
        
        In cases where your value depends only on a single field, you'll
        want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
        */
        compute(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 1 /* Single */, get);
        }
        /**
        Create an extension that computes zero or more values for this
        facet from a state.
        */
        computeN(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 2 /* Multi */, get);
        }
        from(field, get) {
            if (!get)
                get = x => x;
            return this.compute([field], state => get(state.field(field)));
        }
    }
    function sameArray$1(a, b) {
        return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
    }
    class FacetProvider {
        constructor(dependencies, facet, type, value) {
            this.dependencies = dependencies;
            this.facet = facet;
            this.type = type;
            this.value = value;
            this.id = nextID++;
        }
        dynamicSlot(addresses) {
            var _a;
            let getter = this.value;
            let compare = this.facet.compareInput;
            let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Multi */;
            let depDoc = false, depSel = false, depAddrs = [];
            for (let dep of this.dependencies) {
                if (dep == "doc")
                    depDoc = true;
                else if (dep == "selection")
                    depSel = true;
                else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                    depAddrs.push(addresses[dep.id]);
            }
            return {
                create(state) {
                    state.values[idx] = getter(state);
                    return 1 /* Changed */;
                },
                update(state, tr) {
                    if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                        let newVal = getter(state);
                        if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                            state.values[idx] = newVal;
                            return 1 /* Changed */;
                        }
                    }
                    return 0;
                },
                reconfigure: (state, oldState) => {
                    let newVal = getter(state);
                    let oldAddr = oldState.config.address[id];
                    if (oldAddr != null) {
                        let oldVal = getAddr(oldState, oldAddr);
                        if (this.dependencies.every(dep => {
                            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                                dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                        }) || (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal))) {
                            state.values[idx] = oldVal;
                            return 0;
                        }
                    }
                    state.values[idx] = newVal;
                    return 1 /* Changed */;
                }
            };
        }
    }
    function compareArray(a, b, compare) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!compare(a[i], b[i]))
                return false;
        return true;
    }
    function ensureAll(state, addrs) {
        let changed = false;
        for (let addr of addrs)
            if (ensureAddr(state, addr) & 1 /* Changed */)
                changed = true;
        return changed;
    }
    function dynamicFacetSlot(addresses, facet, providers) {
        let providerAddrs = providers.map(p => addresses[p.id]);
        let providerTypes = providers.map(p => p.type);
        let dynamic = providerAddrs.filter(p => !(p & 1));
        let idx = addresses[facet.id] >> 1;
        function get(state) {
            let values = [];
            for (let i = 0; i < providerAddrs.length; i++) {
                let value = getAddr(state, providerAddrs[i]);
                if (providerTypes[i] == 2 /* Multi */)
                    for (let val of value)
                        values.push(val);
                else
                    values.push(value);
            }
            return facet.combine(values);
        }
        return {
            create(state) {
                for (let addr of providerAddrs)
                    ensureAddr(state, addr);
                state.values[idx] = get(state);
                return 1 /* Changed */;
            },
            update(state, tr) {
                if (!ensureAll(state, dynamic))
                    return 0;
                let value = get(state);
                if (facet.compare(value, state.values[idx]))
                    return 0;
                state.values[idx] = value;
                return 1 /* Changed */;
            },
            reconfigure(state, oldState) {
                let depChanged = ensureAll(state, providerAddrs);
                let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
                if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                let value = get(state);
                if (facet.compare(value, oldValue)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                state.values[idx] = value;
                return 1 /* Changed */;
            }
        };
    }
    const initField = /*@__PURE__*/Facet.define({ static: true });
    /**
    Fields can store additional information in an editor state, and
    keep it in sync with the rest of the state.
    */
    class StateField {
        constructor(
        /**
        @internal
        */
        id, createF, updateF, compareF, 
        /**
        @internal
        */
        spec) {
            this.id = id;
            this.createF = createF;
            this.updateF = updateF;
            this.compareF = compareF;
            this.spec = spec;
            /**
            @internal
            */
            this.provides = undefined;
        }
        /**
        Define a state field.
        */
        static define(config) {
            let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
            if (config.provide)
                field.provides = config.provide(field);
            return field;
        }
        create(state) {
            let init = state.facet(initField).find(i => i.field == this);
            return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
        }
        /**
        @internal
        */
        slot(addresses) {
            let idx = addresses[this.id] >> 1;
            return {
                create: (state) => {
                    state.values[idx] = this.create(state);
                    return 1 /* Changed */;
                },
                update: (state, tr) => {
                    let oldVal = state.values[idx];
                    let value = this.updateF(oldVal, tr);
                    if (this.compareF(oldVal, value))
                        return 0;
                    state.values[idx] = value;
                    return 1 /* Changed */;
                },
                reconfigure: (state, oldState) => {
                    if (oldState.config.address[this.id] != null) {
                        state.values[idx] = oldState.field(this);
                        return 0;
                    }
                    state.values[idx] = this.create(state);
                    return 1 /* Changed */;
                }
            };
        }
        /**
        Returns an extension that enables this field and overrides the
        way it is initialized. Can be useful when you need to provide a
        non-default starting value for the field.
        */
        init(create) {
            return [this, initField.of({ field: this, create })];
        }
        /**
        State field instances can be used as
        [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
        given state.
        */
        get extension() { return this; }
    }
    const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
    function prec(value) {
        return (ext) => new PrecExtension(ext, value);
    }
    /**
    By default extensions are registered in the order they are found
    in the flattened form of nested array that was provided.
    Individual extension values can be assigned a precedence to
    override this. Extensions that do not have a precedence set get
    the precedence of the nearest parent with a precedence, or
    [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
    final ordering of extensions is determined by first sorting by
    precedence and then by order within each precedence.
    */
    const Prec = {
        /**
        The highest precedence level, for extensions that should end up
        near the start of the precedence ordering.
        */
        highest: /*@__PURE__*/prec(Prec_.highest),
        /**
        A higher-than-default precedence, for extensions that should
        come before those with default precedence.
        */
        high: /*@__PURE__*/prec(Prec_.high),
        /**
        The default precedence, which is also used for extensions
        without an explicit precedence.
        */
        default: /*@__PURE__*/prec(Prec_.default),
        /**
        A lower-than-default precedence.
        */
        low: /*@__PURE__*/prec(Prec_.low),
        /**
        The lowest precedence level. Meant for things that should end up
        near the end of the extension order.
        */
        lowest: /*@__PURE__*/prec(Prec_.lowest)
    };
    class PrecExtension {
        constructor(inner, prec) {
            this.inner = inner;
            this.prec = prec;
        }
    }
    /**
    Extension compartments can be used to make a configuration
    dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
    configuration in a compartment, you can later
    [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
    transaction.
    */
    class Compartment {
        /**
        Create an instance of this compartment to add to your [state
        configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
        */
        of(ext) { return new CompartmentInstance(this, ext); }
        /**
        Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
        reconfigures this compartment.
        */
        reconfigure(content) {
            return Compartment.reconfigure.of({ compartment: this, extension: content });
        }
        /**
        Get the current content of the compartment in the state, or
        `undefined` if it isn't present.
        */
        get(state) {
            return state.config.compartments.get(this);
        }
    }
    class CompartmentInstance {
        constructor(compartment, inner) {
            this.compartment = compartment;
            this.inner = inner;
        }
    }
    class Configuration {
        constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
            this.base = base;
            this.compartments = compartments;
            this.dynamicSlots = dynamicSlots;
            this.address = address;
            this.staticValues = staticValues;
            this.facets = facets;
            this.statusTemplate = [];
            while (this.statusTemplate.length < dynamicSlots.length)
                this.statusTemplate.push(0 /* Unresolved */);
        }
        staticFacet(facet) {
            let addr = this.address[facet.id];
            return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(base, compartments, oldState) {
            let fields = [];
            let facets = Object.create(null);
            let newCompartments = new Map();
            for (let ext of flatten(base, compartments, newCompartments)) {
                if (ext instanceof StateField)
                    fields.push(ext);
                else
                    (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
            }
            let address = Object.create(null);
            let staticValues = [];
            let dynamicSlots = [];
            for (let field of fields) {
                address[field.id] = dynamicSlots.length << 1;
                dynamicSlots.push(a => field.slot(a));
            }
            let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
            for (let id in facets) {
                let providers = facets[id], facet = providers[0].facet;
                let oldProviders = oldFacets && oldFacets[id] || [];
                if (providers.every(p => p.type == 0 /* Static */)) {
                    address[facet.id] = (staticValues.length << 1) | 1;
                    if (sameArray$1(oldProviders, providers)) {
                        staticValues.push(oldState.facet(facet));
                    }
                    else {
                        let value = facet.combine(providers.map(p => p.value));
                        staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                    }
                }
                else {
                    for (let p of providers) {
                        if (p.type == 0 /* Static */) {
                            address[p.id] = (staticValues.length << 1) | 1;
                            staticValues.push(p.value);
                        }
                        else {
                            address[p.id] = dynamicSlots.length << 1;
                            dynamicSlots.push(a => p.dynamicSlot(a));
                        }
                    }
                    address[facet.id] = dynamicSlots.length << 1;
                    dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
                }
            }
            let dynamic = dynamicSlots.map(f => f(address));
            return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
        }
    }
    function flatten(extension, compartments, newCompartments) {
        let result = [[], [], [], [], []];
        let seen = new Map();
        function inner(ext, prec) {
            let known = seen.get(ext);
            if (known != null) {
                if (known <= prec)
                    return;
                let found = result[known].indexOf(ext);
                if (found > -1)
                    result[known].splice(found, 1);
                if (ext instanceof CompartmentInstance)
                    newCompartments.delete(ext.compartment);
            }
            seen.set(ext, prec);
            if (Array.isArray(ext)) {
                for (let e of ext)
                    inner(e, prec);
            }
            else if (ext instanceof CompartmentInstance) {
                if (newCompartments.has(ext.compartment))
                    throw new RangeError(`Duplicate use of compartment in extensions`);
                let content = compartments.get(ext.compartment) || ext.inner;
                newCompartments.set(ext.compartment, content);
                inner(content, prec);
            }
            else if (ext instanceof PrecExtension) {
                inner(ext.inner, ext.prec);
            }
            else if (ext instanceof StateField) {
                result[prec].push(ext);
                if (ext.provides)
                    inner(ext.provides, prec);
            }
            else if (ext instanceof FacetProvider) {
                result[prec].push(ext);
                if (ext.facet.extensions)
                    inner(ext.facet.extensions, prec);
            }
            else {
                let content = ext.extension;
                if (!content)
                    throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
                inner(content, prec);
            }
        }
        inner(extension, Prec_.default);
        return result.reduce((a, b) => a.concat(b));
    }
    function ensureAddr(state, addr) {
        if (addr & 1)
            return 2 /* Computed */;
        let idx = addr >> 1;
        let status = state.status[idx];
        if (status == 4 /* Computing */)
            throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2 /* Computed */)
            return status;
        state.status[idx] = 4 /* Computing */;
        let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
        return state.status[idx] = 2 /* Computed */ | changed;
    }
    function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
    }

    const languageData = /*@__PURE__*/Facet.define();
    const allowMultipleSelections = /*@__PURE__*/Facet.define({
        combine: values => values.some(v => v),
        static: true
    });
    const lineSeparator = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : undefined,
        static: true
    });
    const changeFilter = /*@__PURE__*/Facet.define();
    const transactionFilter = /*@__PURE__*/Facet.define();
    const transactionExtender = /*@__PURE__*/Facet.define();
    const readOnly = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : false
    });

    /**
    Annotations are tagged values that are used to add metadata to
    transactions in an extensible way. They should be used to model
    things that effect the entire transaction (such as its [time
    stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
    [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
    _alongside_ the other changes made by the transaction, [state
    effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
    */
    class Annotation {
        /**
        @internal
        */
        constructor(
        /**
        The annotation type.
        */
        type, 
        /**
        The value of this annotation.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Define a new type of annotation.
        */
        static define() { return new AnnotationType(); }
    }
    /**
    Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
    */
    class AnnotationType {
        /**
        Create an instance of this annotation.
        */
        of(value) { return new Annotation(this, value); }
    }
    /**
    Representation of a type of state effect. Defined with
    [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
    */
    class StateEffectType {
        /**
        @internal
        */
        constructor(
        // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.
        /**
        @internal
        */
        map) {
            this.map = map;
        }
        /**
        Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
        type.
        */
        of(value) { return new StateEffect(this, value); }
    }
    /**
    State effects can be used to represent additional effects
    associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
    are often useful to model changes to custom [state
    fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
    document or selection changes.
    */
    class StateEffect {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        type, 
        /**
        The value of this effect.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Map this effect through a position mapping. Will return
        `undefined` when that ends up deleting the effect.
        */
        map(mapping) {
            let mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
        }
        /**
        Tells you whether this effect object is of a given
        [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
        */
        is(type) { return this.type == type; }
        /**
        Define a new effect type. The type parameter indicates the type
        of values that his effect holds.
        */
        static define(spec = {}) {
            return new StateEffectType(spec.map || (v => v));
        }
        /**
        Map an array of effects through a change set.
        */
        static mapEffects(effects, mapping) {
            if (!effects.length)
                return effects;
            let result = [];
            for (let effect of effects) {
                let mapped = effect.map(mapping);
                if (mapped)
                    result.push(mapped);
            }
            return result;
        }
    }
    /**
    This effect can be used to reconfigure the root extensions of
    the editor. Doing this will discard any extensions
    [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
    the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
    compartments.
    */
    StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
    /**
    Append extensions to the top-level configuration of the editor.
    */
    StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
    /**
    Changes to the editor state are grouped into transactions.
    Typically, a user action creates a single transaction, which may
    contain any number of document changes, may change the selection,
    or have other effects. Create a transaction by calling
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
    dispatch one by calling
    [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
    */
    class Transaction {
        constructor(
        /**
        The state from which the transaction starts.
        */
        startState, 
        /**
        The document changes made by this transaction.
        */
        changes, 
        /**
        The selection set by this transaction, or undefined if it
        doesn't explicitly set a selection.
        */
        selection, 
        /**
        The effects added to the transaction.
        */
        effects, 
        /**
        @internal
        */
        annotations, 
        /**
        Whether the selection should be scrolled into view after this
        transaction is dispatched.
        */
        scrollIntoView) {
            this.startState = startState;
            this.changes = changes;
            this.selection = selection;
            this.effects = effects;
            this.annotations = annotations;
            this.scrollIntoView = scrollIntoView;
            /**
            @internal
            */
            this._doc = null;
            /**
            @internal
            */
            this._state = null;
            if (selection)
                checkSelection(selection, changes.newLength);
            if (!annotations.some((a) => a.type == Transaction.time))
                this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /**
        @internal
        */
        static create(startState, changes, selection, effects, annotations, scrollIntoView) {
            return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
        }
        /**
        The new document produced by the transaction. Contrary to
        [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
        force the entire new state to be computed right away, so it is
        recommended that [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
        when they need to look at the new document.
        */
        get newDoc() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        /**
        The new selection produced by the transaction. If
        [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
        this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
        current selection through the changes made by the transaction.
        */
        get newSelection() {
            return this.selection || this.startState.selection.map(this.changes);
        }
        /**
        The new state created by the transaction. Computed on demand
        (but retained for subsequent access), so it is recommended not to
        access it in [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
        */
        get state() {
            if (!this._state)
                this.startState.applyTransaction(this);
            return this._state;
        }
        /**
        Get the value of the given annotation type, if any.
        */
        annotation(type) {
            for (let ann of this.annotations)
                if (ann.type == type)
                    return ann.value;
            return undefined;
        }
        /**
        Indicates whether the transaction changed the document.
        */
        get docChanged() { return !this.changes.empty; }
        /**
        Indicates whether this transaction reconfigures the state
        (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
        with a top-level configuration
        [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
        */
        get reconfigured() { return this.startState.config != this.state.config; }
        /**
        Returns true if the transaction has a [user
        event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
        or more specific than `event`. For example, if the transaction
        has `"select.pointer"` as user event, `"select"` and
        `"select.pointer"` will match it.
        */
        isUserEvent(event) {
            let e = this.annotation(Transaction.userEvent);
            return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
        }
    }
    /**
    Annotation used to store transaction timestamps. Automatically
    added to every transaction, holding `Date.now()`.
    */
    Transaction.time = /*@__PURE__*/Annotation.define();
    /**
    Annotation used to associate a transaction with a user interface
    event. Holds a string identifying the event, using a
    dot-separated format to support attaching more specific
    information. The events used by the core libraries are:

     - `"input"` when content is entered
       - `"input.type"` for typed input
         - `"input.type.compose"` for composition
       - `"input.paste"` for pasted input
       - `"input.drop"` when adding content with drag-and-drop
       - `"input.complete"` when autocompleting
     - `"delete"` when the user deletes content
       - `"delete.selection"` when deleting the selection
       - `"delete.forward"` when deleting forward from the selection
       - `"delete.backward"` when deleting backward from the selection
       - `"delete.cut"` when cutting to the clipboard
     - `"move"` when content is moved
       - `"move.drop"` when content is moved within the editor through drag-and-drop
     - `"select"` when explicitly changing the selection
       - `"select.pointer"` when selecting with a mouse or other pointing device
     - `"undo"` and `"redo"` for history actions

    Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
    whether the annotation matches a given event.
    */
    Transaction.userEvent = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating whether a transaction should be added to
    the undo history or not.
    */
    Transaction.addToHistory = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating (when present and true) that a transaction
    represents a change made by some other actor, not the user. This
    is used, for example, to tag other people's changes in
    collaborative editing.
    */
    Transaction.remote = /*@__PURE__*/Annotation.define();
    function joinRanges(a, b) {
        let result = [];
        for (let iA = 0, iB = 0;;) {
            let from, to;
            if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
                from = a[iA++];
                to = a[iA++];
            }
            else if (iB < b.length) {
                from = b[iB++];
                to = b[iB++];
            }
            else
                return result;
            if (!result.length || result[result.length - 1] < from)
                result.push(from, to);
            else if (result[result.length - 1] < to)
                result[result.length - 1] = to;
        }
    }
    function mergeTransaction(a, b, sequential) {
        var _a;
        let mapForA, mapForB, changes;
        if (sequential) {
            mapForA = b.changes;
            mapForB = ChangeSet.empty(b.changes.length);
            changes = a.changes.compose(b.changes);
        }
        else {
            mapForA = b.changes.map(a.changes);
            mapForB = a.changes.mapDesc(b.changes, true);
            changes = a.changes.compose(mapForA);
        }
        return {
            changes,
            selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
            effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
            annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
            scrollIntoView: a.scrollIntoView || b.scrollIntoView
        };
    }
    function resolveTransactionInner(state, spec, docSize) {
        let sel = spec.selection, annotations = asArray$1(spec.annotations);
        if (spec.userEvent)
            annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
        return {
            changes: spec.changes instanceof ChangeSet ? spec.changes
                : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
            selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
            effects: asArray$1(spec.effects),
            annotations,
            scrollIntoView: !!spec.scrollIntoView
        };
    }
    function resolveTransaction(state, specs, filter) {
        let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false)
            filter = false;
        for (let i = 1; i < specs.length; i++) {
            if (specs[i].filter === false)
                filter = false;
            let seq = !!specs[i].sequential;
            s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
        }
        let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
        return extendTransaction(filter ? filterTransaction(tr) : tr);
    }
    // Finish a transaction by applying filters if necessary.
    function filterTransaction(tr) {
        let state = tr.startState;
        // Change filters
        let result = true;
        for (let filter of state.facet(changeFilter)) {
            let value = filter(tr);
            if (value === false) {
                result = false;
                break;
            }
            if (Array.isArray(value))
                result = result === true ? value : joinRanges(result, value);
        }
        if (result !== true) {
            let changes, back;
            if (result === false) {
                back = tr.changes.invertedDesc;
                changes = ChangeSet.empty(state.doc.length);
            }
            else {
                let filtered = tr.changes.filter(result);
                changes = filtered.changes;
                back = filtered.filtered.invertedDesc;
            }
            tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
        }
        // Transaction filters
        let filters = state.facet(transactionFilter);
        for (let i = filters.length - 1; i >= 0; i--) {
            let filtered = filters[i](tr);
            if (filtered instanceof Transaction)
                tr = filtered;
            else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
                tr = filtered[0];
            else
                tr = resolveTransaction(state, asArray$1(filtered), false);
        }
        return tr;
    }
    function extendTransaction(tr) {
        let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
        for (let i = extenders.length - 1; i >= 0; i--) {
            let extension = extenders[i](tr);
            if (extension && Object.keys(extension).length)
                spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);
        }
        return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
    }
    const none$4 = [];
    function asArray$1(value) {
        return value == null ? none$4 : Array.isArray(value) ? value : [value];
    }

    /**
    The categories produced by a [character
    categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
    do things like selecting by word.
    */
    var CharCategory = /*@__PURE__*/(function (CharCategory) {
        /**
        Word characters.
        */
        CharCategory[CharCategory["Word"] = 0] = "Word";
        /**
        Whitespace.
        */
        CharCategory[CharCategory["Space"] = 1] = "Space";
        /**
        Anything else.
        */
        CharCategory[CharCategory["Other"] = 2] = "Other";
    return CharCategory})(CharCategory || (CharCategory = {}));
    const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    let wordChar;
    try {
        wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    }
    catch (_) { }
    function hasWordChar(str) {
        if (wordChar)
            return wordChar.test(str);
        for (let i = 0; i < str.length; i++) {
            let ch = str[i];
            if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
                return true;
        }
        return false;
    }
    function makeCategorizer(wordChars) {
        return (char) => {
            if (!/\S/.test(char))
                return CharCategory.Space;
            if (hasWordChar(char))
                return CharCategory.Word;
            for (let i = 0; i < wordChars.length; i++)
                if (char.indexOf(wordChars[i]) > -1)
                    return CharCategory.Word;
            return CharCategory.Other;
        };
    }

    /**
    The editor state class is a persistent (immutable) data structure.
    To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
    [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
    instance, without modifying the original object.

    As such, _never_ mutate properties of a state directly. That'll
    just break things.
    */
    class EditorState {
        constructor(
        /**
        @internal
        */
        config, 
        /**
        The current document.
        */
        doc, 
        /**
        The current selection.
        */
        selection, 
        /**
        @internal
        */
        values, computeSlot, tr) {
            this.config = config;
            this.doc = doc;
            this.selection = selection;
            this.values = values;
            this.status = config.statusTemplate.slice();
            this.computeSlot = computeSlot;
            // Fill in the computed state immediately, so that further queries
            // for it made during the update return this state
            if (tr)
                tr._state = this;
            for (let i = 0; i < this.config.dynamicSlots.length; i++)
                ensureAddr(this, i << 1);
            this.computeSlot = null;
        }
        field(field, require = true) {
            let addr = this.config.address[field.id];
            if (addr == null) {
                if (require)
                    throw new RangeError("Field is not present in this state");
                return undefined;
            }
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
        state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
        can be passed. Unless
        [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
        [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
        are assumed to start in the _current_ document (not the document
        produced by previous specs), and its
        [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
        [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
        to the document created by its _own_ changes. The resulting
        transaction contains the combined effect of all the different
        specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
        specs take precedence over earlier ones.
        */
        update(...specs) {
            return resolveTransaction(this, specs, true);
        }
        /**
        @internal
        */
        applyTransaction(tr) {
            let conf = this.config, { base, compartments } = conf;
            for (let effect of tr.effects) {
                if (effect.is(Compartment.reconfigure)) {
                    if (conf) {
                        compartments = new Map;
                        conf.compartments.forEach((val, key) => compartments.set(key, val));
                        conf = null;
                    }
                    compartments.set(effect.value.compartment, effect.value.extension);
                }
                else if (effect.is(StateEffect.reconfigure)) {
                    conf = null;
                    base = effect.value;
                }
                else if (effect.is(StateEffect.appendConfig)) {
                    conf = null;
                    base = asArray$1(base).concat(effect.value);
                }
            }
            let startValues;
            if (!conf) {
                conf = Configuration.resolve(base, compartments, this);
                let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
                startValues = intermediateState.values;
            }
            else {
                startValues = tr.startState.values.slice();
            }
            new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);
        }
        /**
        Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
        replaces every selection range with the given content.
        */
        replaceSelection(text) {
            if (typeof text == "string")
                text = this.toText(text);
            return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
                range: EditorSelection.cursor(range.from + text.length) }));
        }
        /**
        Create a set of changes and a new selection by running the given
        function for each range in the active selection. The function
        can return an optional set of changes (in the coordinate space
        of the start document), plus an updated range (in the coordinate
        space of the document produced by the call's own changes). This
        method will merge all the changes and ranges into a single
        changeset and selection, and return it as a [transaction
        spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
        [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
        */
        changeByRange(f) {
            let sel = this.selection;
            let result1 = f(sel.ranges[0]);
            let changes = this.changes(result1.changes), ranges = [result1.range];
            let effects = asArray$1(result1.effects);
            for (let i = 1; i < sel.ranges.length; i++) {
                let result = f(sel.ranges[i]);
                let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
                for (let j = 0; j < i; j++)
                    ranges[j] = ranges[j].map(newMapped);
                let mapBy = changes.mapDesc(newChanges, true);
                ranges.push(result.range.map(mapBy));
                changes = changes.compose(newMapped);
                effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
            }
            return {
                changes,
                selection: EditorSelection.create(ranges, sel.mainIndex),
                effects
            };
        }
        /**
        Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
        description, taking the state's document length and line
        separator into account.
        */
        changes(spec = []) {
            if (spec instanceof ChangeSet)
                return spec;
            return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
        }
        /**
        Using the state's [line
        separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
        [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
        */
        toText(string) {
            return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
        }
        /**
        Return the given range of the document as a string.
        */
        sliceDoc(from = 0, to = this.doc.length) {
            return this.doc.sliceString(from, to, this.lineBreak);
        }
        /**
        Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
        */
        facet(facet) {
            let addr = this.config.address[facet.id];
            if (addr == null)
                return facet.default;
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Convert this state to a JSON-serializable object. When custom
        fields should be serialized, you can pass them in as an object
        mapping property names (in the resulting object, which should
        not use `doc` or `selection`) to fields.
        */
        toJSON(fields) {
            let result = {
                doc: this.sliceDoc(),
                selection: this.selection.toJSON()
            };
            if (fields)
                for (let prop in fields) {
                    let value = fields[prop];
                    if (value instanceof StateField)
                        result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
                }
            return result;
        }
        /**
        Deserialize a state from its JSON representation. When custom
        fields should be deserialized, pass the same object you passed
        to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
        third argument.
        */
        static fromJSON(json, config = {}, fields) {
            if (!json || typeof json.doc != "string")
                throw new RangeError("Invalid JSON representation for EditorState");
            let fieldInit = [];
            if (fields)
                for (let prop in fields) {
                    let field = fields[prop], value = json[prop];
                    fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                }
            return EditorState.create({
                doc: json.doc,
                selection: EditorSelection.fromJSON(json.selection),
                extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
            });
        }
        /**
        Create a new state. You'll usually only need this when
        initializing an editor—updated states are created by applying
        transactions.
        */
        static create(config = {}) {
            let configuration = Configuration.resolve(config.extensions || [], new Map);
            let doc = config.doc instanceof Text ? config.doc
                : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
            let selection = !config.selection ? EditorSelection.single(0)
                : config.selection instanceof EditorSelection ? config.selection
                    : EditorSelection.single(config.selection.anchor, config.selection.head);
            checkSelection(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections))
                selection = selection.asSingle();
            return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
        }
        /**
        The size (in columns) of a tab in the document, determined by
        the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
        */
        get tabSize() { return this.facet(EditorState.tabSize); }
        /**
        Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
        string for this state.
        */
        get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
        /**
        Returns true when the editor is
        [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
        */
        get readOnly() { return this.facet(readOnly); }
        /**
        Look up a translation for the given phrase (via the
        [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
        original string if no translation is found.
        
        If additional arguments are passed, they will be inserted in
        place of markers like `$1` (for the first value) and `$2`, etc.
        A single `$` is equivalent to `$1`, and `$$` will produce a
        literal dollar sign.
        */
        phrase(phrase, ...insert) {
            for (let map of this.facet(EditorState.phrases))
                if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                    phrase = map[phrase];
                    break;
                }
            if (insert.length)
                phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                    if (i == "$")
                        return "$";
                    let n = +(i || 1);
                    return n > insert.length ? m : insert[n - 1];
                });
            return phrase;
        }
        /**
        Find the values for a given language data field, provided by the
        the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
        */
        languageDataAt(name, pos, side = -1) {
            let values = [];
            for (let provider of this.facet(languageData)) {
                for (let result of provider(this, pos, side)) {
                    if (Object.prototype.hasOwnProperty.call(result, name))
                        values.push(result[name]);
                }
            }
            return values;
        }
        /**
        Return a function that can categorize strings (expected to
        represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
        into one of:
        
         - Word (contains an alphanumeric character or a character
           explicitly listed in the local language's `"wordChars"`
           language data, which should be a string)
         - Space (contains only whitespace)
         - Other (anything else)
        */
        charCategorizer(at) {
            return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
        }
        /**
        Find the word at the given position, meaning the range
        containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
        around it. If no word characters are adjacent to the position,
        this returns null.
        */
        wordAt(pos) {
            let { text, from, length } = this.doc.lineAt(pos);
            let cat = this.charCategorizer(pos);
            let start = pos - from, end = pos - from;
            while (start > 0) {
                let prev = findClusterBreak(text, start, false);
                if (cat(text.slice(prev, start)) != CharCategory.Word)
                    break;
                start = prev;
            }
            while (end < length) {
                let next = findClusterBreak(text, end);
                if (cat(text.slice(end, next)) != CharCategory.Word)
                    break;
                end = next;
            }
            return start == end ? null : EditorSelection.range(start + from, end + from);
        }
    }
    /**
    A facet that, when enabled, causes the editor to allow multiple
    ranges to be selected. Be careful though, because by default the
    editor relies on the native DOM selection, which cannot handle
    multiple selections. An extension like
    [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
    secondary selections visible to the user.
    */
    EditorState.allowMultipleSelections = allowMultipleSelections;
    /**
    Configures the tab size to use in this state. The first
    (highest-precedence) value of the facet is used. If no value is
    given, this defaults to 4.
    */
    EditorState.tabSize = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : 4
    });
    /**
    The line separator to use. By default, any of `"\n"`, `"\r\n"`
    and `"\r"` is treated as a separator when splitting lines, and
    lines are joined with `"\n"`.

    When you configure a value here, only that precise separator
    will be used, allowing you to round-trip documents through the
    editor without normalizing line separators.
    */
    EditorState.lineSeparator = lineSeparator;
    /**
    This facet controls the value of the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
    consulted by commands and extensions that implement editing
    functionality to determine whether they should apply. It
    defaults to false, but when its highest-precedence value is
    `true`, such functionality disables itself.

    Not to be confused with
    [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
    controls whether the editor's DOM is set to be editable (and
    thus focusable).
    */
    EditorState.readOnly = readOnly;
    /**
    Registers translation phrases. The
    [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
    all objects registered with this facet to find translations for
    its argument.
    */
    EditorState.phrases = /*@__PURE__*/Facet.define({
        compare(a, b) {
            let kA = Object.keys(a), kB = Object.keys(b);
            return kA.length == kB.length && kA.every(k => a[k] == b[k]);
        }
    });
    /**
    A facet used to register [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
    */
    EditorState.languageData = languageData;
    /**
    Facet used to register change filters, which are called for each
    transaction (unless explicitly
    [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
    part of the transaction's changes.

    Such a function can return `true` to indicate that it doesn't
    want to do anything, `false` to completely stop the changes in
    the transaction, or a set of ranges in which changes should be
    suppressed. Such ranges are represented as an array of numbers,
    with each pair of two numbers indicating the start and end of a
    range. So for example `[10, 20, 100, 110]` suppresses changes
    between 10 and 20, and between 100 and 110.
    */
    EditorState.changeFilter = changeFilter;
    /**
    Facet used to register a hook that gets a chance to update or
    replace transaction specs before they are applied. This will
    only be applied for transactions that don't have
    [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
    can either return a single transaction spec (possibly the input
    transaction), or an array of specs (which will be combined in
    the same way as the arguments to
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

    When possible, it is recommended to avoid accessing
    [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
    since it will force creation of a state that will then be
    discarded again, if the transaction is actually filtered.

    (This functionality should be used with care. Indiscriminately
    modifying transaction is likely to break something or degrade
    the user experience.)
    */
    EditorState.transactionFilter = transactionFilter;
    /**
    This is a more limited form of
    [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
    which can only add
    [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
    of filter runs even if the transaction has disabled regular
    [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
    for effects that don't need to touch the changes or selection,
    but do want to process every transaction.

    Extenders run _after_ filters, when both are present.
    */
    EditorState.transactionExtender = transactionExtender;
    Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

    /**
    Utility function for combining behaviors to fill in a config
    object from an array of provided configs. `defaults` should hold
    default values for all optional fields in `Config`.

    The function will, by default, error
    when a field gets two values that aren't `===`-equal, but you can
    provide combine functions per field to do something else.
    */
    function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
    combine = {}) {
        let result = {};
        for (let config of configs)
            for (let key of Object.keys(config)) {
                let value = config[key], current = result[key];
                if (current === undefined)
                    result[key] = value;
                else if (current === value || value === undefined) ; // No conflict
                else if (Object.hasOwnProperty.call(combine, key))
                    result[key] = combine[key](current, value);
                else
                    throw new Error("Config merge conflict for field " + key);
            }
        for (let key in defaults)
            if (result[key] === undefined)
                result[key] = defaults[key];
        return result;
    }

    /**
    Each range is associated with a value, which must inherit from
    this class.
    */
    class RangeValue {
        /**
        Compare this value with another value. Used when comparing
        rangesets. The default implementation compares by identity.
        Unless you are only creating a fixed number of unique instances
        of your value type, it is a good idea to implement this
        properly.
        */
        eq(other) { return this == other; }
        /**
        Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
        */
        range(from, to = from) { return Range$1.create(from, to, this); }
    }
    RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
    RangeValue.prototype.point = false;
    RangeValue.prototype.mapMode = MapMode.TrackDel;
    /**
    A range associates a value with a range of positions.
    */
    class Range$1 {
        constructor(
        /**
        The range's start position.
        */
        from, 
        /**
        Its end position.
        */
        to, 
        /**
        The value associated with this range.
        */
        value) {
            this.from = from;
            this.to = to;
            this.value = value;
        }
        /**
        @internal
        */
        static create(from, to, value) {
            return new Range$1(from, to, value);
        }
    }
    function cmpRange(a, b) {
        return a.from - b.from || a.value.startSide - b.value.startSide;
    }
    class Chunk {
        constructor(from, to, value, 
        // Chunks are marked with the largest point that occurs
        // in them (or -1 for no points), so that scans that are
        // only interested in points (such as the
        // heightmap-related logic) can skip range-only chunks.
        maxPoint) {
            this.from = from;
            this.to = to;
            this.value = value;
            this.maxPoint = maxPoint;
        }
        get length() { return this.to[this.to.length - 1]; }
        // Find the index of the given position and side. Use the ranges'
        // `from` pos when `end == false`, `to` when `end == true`.
        findIndex(pos, side, end, startAt = 0) {
            let arr = end ? this.to : this.from;
            for (let lo = startAt, hi = arr.length;;) {
                if (lo == hi)
                    return lo;
                let mid = (lo + hi) >> 1;
                let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
                if (mid == lo)
                    return diff >= 0 ? lo : hi;
                if (diff >= 0)
                    hi = mid;
                else
                    lo = mid + 1;
            }
        }
        between(offset, from, to, f) {
            for (let i = this.findIndex(from, -1000000000 /* Far */, true), e = this.findIndex(to, 1000000000 /* Far */, false, i); i < e; i++)
                if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                    return false;
        }
        map(offset, changes) {
            let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
            for (let i = 0; i < this.value.length; i++) {
                let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
                if (curFrom == curTo) {
                    let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                    if (mapped == null)
                        continue;
                    newFrom = newTo = mapped;
                    if (val.startSide != val.endSide) {
                        newTo = changes.mapPos(curFrom, val.endSide);
                        if (newTo < newFrom)
                            continue;
                    }
                }
                else {
                    newFrom = changes.mapPos(curFrom, val.startSide);
                    newTo = changes.mapPos(curTo, val.endSide);
                    if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                        continue;
                }
                if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                    continue;
                if (newPos < 0)
                    newPos = newFrom;
                if (val.point)
                    maxPoint = Math.max(maxPoint, newTo - newFrom);
                value.push(val);
                from.push(newFrom - newPos);
                to.push(newTo - newPos);
            }
            return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
        }
    }
    /**
    A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
    way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
    [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
    structure.
    */
    class RangeSet {
        constructor(
        /**
        @internal
        */
        chunkPos, 
        /**
        @internal
        */
        chunk, 
        /**
        @internal
        */
        nextLayer, 
        /**
        @internal
        */
        maxPoint) {
            this.chunkPos = chunkPos;
            this.chunk = chunk;
            this.nextLayer = nextLayer;
            this.maxPoint = maxPoint;
        }
        /**
        @internal
        */
        static create(chunkPos, chunk, nextLayer, maxPoint) {
            return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
        }
        /**
        @internal
        */
        get length() {
            let last = this.chunk.length - 1;
            return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
        }
        /**
        The number of ranges in the set.
        */
        get size() {
            if (this.isEmpty)
                return 0;
            let size = this.nextLayer.size;
            for (let chunk of this.chunk)
                size += chunk.value.length;
            return size;
        }
        /**
        @internal
        */
        chunkEnd(index) {
            return this.chunkPos[index] + this.chunk[index].length;
        }
        /**
        Update the range set, optionally adding new ranges or filtering
        out existing ones.
        
        (Note: The type parameter is just there as a kludge to work
        around TypeScript variance issues that prevented `RangeSet<X>`
        from being a subtype of `RangeSet<Y>` when `X` is a subtype of
        `Y`.)
        */
        update(updateSpec) {
            let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
            let filter = updateSpec.filter;
            if (add.length == 0 && !filter)
                return this;
            if (sort)
                add = add.slice().sort(cmpRange);
            if (this.isEmpty)
                return add.length ? RangeSet.of(add) : this;
            let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
            let builder = new RangeSetBuilder();
            while (cur.value || i < add.length) {
                if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                    let range = add[i++];
                    if (!builder.addInner(range.from, range.to, range.value))
                        spill.push(range);
                }
                else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                    (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                    (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                    builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                    cur.nextChunk();
                }
                else {
                    if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                        if (!builder.addInner(cur.from, cur.to, cur.value))
                            spill.push(Range$1.create(cur.from, cur.to, cur.value));
                    }
                    cur.next();
                }
            }
            return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
                : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
        }
        /**
        Map this range set through a set of changes, return the new set.
        */
        map(changes) {
            if (changes.empty || this.isEmpty)
                return this;
            let chunks = [], chunkPos = [], maxPoint = -1;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                let touch = changes.touchesRange(start, start + chunk.length);
                if (touch === false) {
                    maxPoint = Math.max(maxPoint, chunk.maxPoint);
                    chunks.push(chunk);
                    chunkPos.push(changes.mapPos(start));
                }
                else if (touch === true) {
                    let { mapped, pos } = chunk.map(start, changes);
                    if (mapped) {
                        maxPoint = Math.max(maxPoint, mapped.maxPoint);
                        chunks.push(mapped);
                        chunkPos.push(pos);
                    }
                }
            }
            let next = this.nextLayer.map(changes);
            return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
        }
        /**
        Iterate over the ranges that touch the region `from` to `to`,
        calling `f` for each. There is no guarantee that the ranges will
        be reported in any specific order. When the callback returns
        `false`, iteration stops.
        */
        between(from, to, f) {
            if (this.isEmpty)
                return;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                if (to >= start && from <= start + chunk.length &&
                    chunk.between(start, from - start, to - start, f) === false)
                    return;
            }
            this.nextLayer.between(from, to, f);
        }
        /**
        Iterate over the ranges in this set, in order, including all
        ranges that end at or after `from`.
        */
        iter(from = 0) {
            return HeapCursor.from([this]).goto(from);
        }
        /**
        @internal
        */
        get isEmpty() { return this.nextLayer == this; }
        /**
        Iterate over the ranges in a collection of sets, in order,
        starting from `from`.
        */
        static iter(sets, from = 0) {
            return HeapCursor.from(sets).goto(from);
        }
        /**
        Iterate over two groups of sets, calling methods on `comparator`
        to notify it of possible differences.
        */
        static compare(oldSets, newSets, 
        /**
        This indicates how the underlying data changed between these
        ranges, and is needed to synchronize the iteration. `from` and
        `to` are coordinates in the _new_ space, after these changes.
        */
        textDiff, comparator, 
        /**
        Can be used to ignore all non-point ranges, and points below
        the given size. When -1, all ranges are compared.
        */
        minPointSize = -1) {
            let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let sharedChunks = findSharedChunks(a, b, textDiff);
            let sideA = new SpanCursor(a, sharedChunks, minPointSize);
            let sideB = new SpanCursor(b, sharedChunks, minPointSize);
            textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
            if (textDiff.empty && textDiff.length == 0)
                compare(sideA, 0, sideB, 0, 0, comparator);
        }
        /**
        Compare the contents of two groups of range sets, returning true
        if they are equivalent in the given range.
        */
        static eq(oldSets, newSets, from = 0, to) {
            if (to == null)
                to = 1000000000 /* Far */;
            let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
            let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
            if (a.length != b.length)
                return false;
            if (!a.length)
                return true;
            let sharedChunks = findSharedChunks(a, b);
            let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
            for (;;) {
                if (sideA.to != sideB.to ||
                    !sameValues(sideA.active, sideB.active) ||
                    sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                    return false;
                if (sideA.to > to)
                    return true;
                sideA.next();
                sideB.next();
            }
        }
        /**
        Iterate over a group of range sets at the same time, notifying
        the iterator about the ranges covering every given piece of
        content. Returns the open count (see
        [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
        of the iteration.
        */
        static spans(sets, from, to, iterator, 
        /**
        When given and greater than -1, only points of at least this
        size are taken into account.
        */
        minPointSize = -1) {
            let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
            let open = cursor.openStart;
            for (;;) {
                let curTo = Math.min(cursor.to, to);
                if (cursor.point) {
                    iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open, cursor.pointRank);
                    open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);
                }
                else if (curTo > pos) {
                    iterator.span(pos, curTo, cursor.active, open);
                    open = cursor.openEnd(curTo);
                }
                if (cursor.to > to)
                    break;
                pos = cursor.to;
                cursor.next();
            }
            return open;
        }
        /**
        Create a range set for the given range or array of ranges. By
        default, this expects the ranges to be _sorted_ (by start
        position and, if two start at the same position,
        `value.startSide`). You can pass `true` as second argument to
        cause the method to sort them.
        */
        static of(ranges, sort = false) {
            let build = new RangeSetBuilder();
            for (let range of ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges)
                build.add(range.from, range.to, range.value);
            return build.finish();
        }
    }
    /**
    The empty set of ranges.
    */
    RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
    function lazySort(ranges) {
        if (ranges.length > 1)
            for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
                let cur = ranges[i];
                if (cmpRange(prev, cur) > 0)
                    return ranges.slice().sort(cmpRange);
                prev = cur;
            }
        return ranges;
    }
    RangeSet.empty.nextLayer = RangeSet.empty;
    /**
    A range set builder is a data structure that helps build up a
    [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
    an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
    */
    class RangeSetBuilder {
        /**
        Create an empty builder.
        */
        constructor() {
            this.chunks = [];
            this.chunkPos = [];
            this.chunkStart = -1;
            this.last = null;
            this.lastFrom = -1000000000 /* Far */;
            this.lastTo = -1000000000 /* Far */;
            this.from = [];
            this.to = [];
            this.value = [];
            this.maxPoint = -1;
            this.setMaxPoint = -1;
            this.nextLayer = null;
        }
        finishChunk(newArrays) {
            this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
            this.chunkPos.push(this.chunkStart);
            this.chunkStart = -1;
            this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
            this.maxPoint = -1;
            if (newArrays) {
                this.from = [];
                this.to = [];
                this.value = [];
            }
        }
        /**
        Add a range. Ranges should be added in sorted (by `from` and
        `value.startSide`) order.
        */
        add(from, to, value) {
            if (!this.addInner(from, to, value))
                (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
        }
        /**
        @internal
        */
        addInner(from, to, value) {
            let diff = from - this.lastTo || value.startSide - this.last.endSide;
            if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
                throw new Error("Ranges must be added sorted by `from` position and `startSide`");
            if (diff < 0)
                return false;
            if (this.from.length == 250 /* ChunkSize */)
                this.finishChunk(true);
            if (this.chunkStart < 0)
                this.chunkStart = from;
            this.from.push(from - this.chunkStart);
            this.to.push(to - this.chunkStart);
            this.last = value;
            this.lastFrom = from;
            this.lastTo = to;
            this.value.push(value);
            if (value.point)
                this.maxPoint = Math.max(this.maxPoint, to - from);
            return true;
        }
        /**
        @internal
        */
        addChunk(from, chunk) {
            if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
                return false;
            if (this.from.length)
                this.finishChunk(true);
            this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
            this.chunks.push(chunk);
            this.chunkPos.push(from);
            let last = chunk.value.length - 1;
            this.last = chunk.value[last];
            this.lastFrom = chunk.from[last] + from;
            this.lastTo = chunk.to[last] + from;
            return true;
        }
        /**
        Finish the range set. Returns the new set. The builder can't be
        used anymore after this has been called.
        */
        finish() { return this.finishInner(RangeSet.empty); }
        /**
        @internal
        */
        finishInner(next) {
            if (this.from.length)
                this.finishChunk(false);
            if (this.chunks.length == 0)
                return next;
            let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
            this.from = null; // Make sure further `add` calls produce errors
            return result;
        }
    }
    function findSharedChunks(a, b, textDiff) {
        let inA = new Map();
        for (let set of a)
            for (let i = 0; i < set.chunk.length; i++)
                if (set.chunk[i].maxPoint <= 0)
                    inA.set(set.chunk[i], set.chunkPos[i]);
        let shared = new Set();
        for (let set of b)
            for (let i = 0; i < set.chunk.length; i++) {
                let known = inA.get(set.chunk[i]);
                if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                    !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                    shared.add(set.chunk[i]);
            }
        return shared;
    }
    class LayerCursor {
        constructor(layer, skip, minPoint, rank = 0) {
            this.layer = layer;
            this.skip = skip;
            this.minPoint = minPoint;
            this.rank = rank;
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        get endSide() { return this.value ? this.value.endSide : 0; }
        goto(pos, side = -1000000000 /* Far */) {
            this.chunkIndex = this.rangeIndex = 0;
            this.gotoInner(pos, side, false);
            return this;
        }
        gotoInner(pos, side, forward) {
            while (this.chunkIndex < this.layer.chunk.length) {
                let next = this.layer.chunk[this.chunkIndex];
                if (!(this.skip && this.skip.has(next) ||
                    this.layer.chunkEnd(this.chunkIndex) < pos ||
                    next.maxPoint < this.minPoint))
                    break;
                this.chunkIndex++;
                forward = false;
            }
            if (this.chunkIndex < this.layer.chunk.length) {
                let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
                if (!forward || this.rangeIndex < rangeIndex)
                    this.setRangeIndex(rangeIndex);
            }
            this.next();
        }
        forward(pos, side) {
            if ((this.to - pos || this.endSide - side) < 0)
                this.gotoInner(pos, side, true);
        }
        next() {
            for (;;) {
                if (this.chunkIndex == this.layer.chunk.length) {
                    this.from = this.to = 1000000000 /* Far */;
                    this.value = null;
                    break;
                }
                else {
                    let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                    let from = chunkPos + chunk.from[this.rangeIndex];
                    this.from = from;
                    this.to = chunkPos + chunk.to[this.rangeIndex];
                    this.value = chunk.value[this.rangeIndex];
                    this.setRangeIndex(this.rangeIndex + 1);
                    if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                        break;
                }
            }
        }
        setRangeIndex(index) {
            if (index == this.layer.chunk[this.chunkIndex].value.length) {
                this.chunkIndex++;
                if (this.skip) {
                    while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                        this.chunkIndex++;
                }
                this.rangeIndex = 0;
            }
            else {
                this.rangeIndex = index;
            }
        }
        nextChunk() {
            this.chunkIndex++;
            this.rangeIndex = 0;
            this.next();
        }
        compare(other) {
            return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
                this.to - other.to || this.endSide - other.endSide;
        }
    }
    class HeapCursor {
        constructor(heap) {
            this.heap = heap;
        }
        static from(sets, skip = null, minPoint = -1) {
            let heap = [];
            for (let i = 0; i < sets.length; i++) {
                for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                    if (cur.maxPoint >= minPoint)
                        heap.push(new LayerCursor(cur, skip, minPoint, i));
                }
            }
            return heap.length == 1 ? heap[0] : new HeapCursor(heap);
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        goto(pos, side = -1000000000 /* Far */) {
            for (let cur of this.heap)
                cur.goto(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            this.next();
            return this;
        }
        forward(pos, side) {
            for (let cur of this.heap)
                cur.forward(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            if ((this.to - pos || this.value.endSide - side) < 0)
                this.next();
        }
        next() {
            if (this.heap.length == 0) {
                this.from = this.to = 1000000000 /* Far */;
                this.value = null;
                this.rank = -1;
            }
            else {
                let top = this.heap[0];
                this.from = top.from;
                this.to = top.to;
                this.value = top.value;
                this.rank = top.rank;
                if (top.value)
                    top.next();
                heapBubble(this.heap, 0);
            }
        }
    }
    function heapBubble(heap, index) {
        for (let cur = heap[index];;) {
            let childIndex = (index << 1) + 1;
            if (childIndex >= heap.length)
                break;
            let child = heap[childIndex];
            if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
                child = heap[childIndex + 1];
                childIndex++;
            }
            if (cur.compare(child) < 0)
                break;
            heap[childIndex] = cur;
            heap[index] = child;
            index = childIndex;
        }
    }
    class SpanCursor {
        constructor(sets, skip, minPoint) {
            this.minPoint = minPoint;
            this.active = [];
            this.activeTo = [];
            this.activeRank = [];
            this.minActive = -1;
            // A currently active point range, if any
            this.point = null;
            this.pointFrom = 0;
            this.pointRank = 0;
            this.to = -1000000000 /* Far */;
            this.endSide = 0;
            this.openStart = -1;
            this.cursor = HeapCursor.from(sets, skip, minPoint);
        }
        goto(pos, side = -1000000000 /* Far */) {
            this.cursor.goto(pos, side);
            this.active.length = this.activeTo.length = this.activeRank.length = 0;
            this.minActive = -1;
            this.to = pos;
            this.endSide = side;
            this.openStart = -1;
            this.next();
            return this;
        }
        forward(pos, side) {
            while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
                this.removeActive(this.minActive);
            this.cursor.forward(pos, side);
        }
        removeActive(index) {
            remove$2(this.active, index);
            remove$2(this.activeTo, index);
            remove$2(this.activeRank, index);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        addActive(trackOpen) {
            let i = 0, { value, to, rank } = this.cursor;
            while (i < this.activeRank.length && this.activeRank[i] <= rank)
                i++;
            insert$1(this.active, i, value);
            insert$1(this.activeTo, i, to);
            insert$1(this.activeRank, i, rank);
            if (trackOpen)
                insert$1(trackOpen, i, this.cursor.from);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        // After calling this, if `this.point` != null, the next range is a
        // point. Otherwise, it's a regular range, covered by `this.active`.
        next() {
            let from = this.to, wasPoint = this.point;
            this.point = null;
            let trackOpen = this.openStart < 0 ? [] : null, trackExtra = 0;
            for (;;) {
                let a = this.minActive;
                if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                    if (this.activeTo[a] > from) {
                        this.to = this.activeTo[a];
                        this.endSide = this.active[a].endSide;
                        break;
                    }
                    this.removeActive(a);
                    if (trackOpen)
                        remove$2(trackOpen, a);
                }
                else if (!this.cursor.value) {
                    this.to = this.endSide = 1000000000 /* Far */;
                    break;
                }
                else if (this.cursor.from > from) {
                    this.to = this.cursor.from;
                    this.endSide = this.cursor.startSide;
                    break;
                }
                else {
                    let nextVal = this.cursor.value;
                    if (!nextVal.point) { // Opening a range
                        this.addActive(trackOpen);
                        this.cursor.next();
                    }
                    else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                        // Ignore any non-empty points that end precisely at the end of the prev point
                        this.cursor.next();
                    }
                    else { // New point
                        this.point = nextVal;
                        this.pointFrom = this.cursor.from;
                        this.pointRank = this.cursor.rank;
                        this.to = this.cursor.to;
                        this.endSide = nextVal.endSide;
                        if (this.cursor.from < from)
                            trackExtra = 1;
                        this.cursor.next();
                        this.forward(this.to, this.endSide);
                        break;
                    }
                }
            }
            if (trackOpen) {
                let openStart = 0;
                while (openStart < trackOpen.length && trackOpen[openStart] < from)
                    openStart++;
                this.openStart = openStart + trackExtra;
            }
        }
        activeForPoint(to) {
            if (!this.active.length)
                return this.active;
            let active = [];
            for (let i = this.active.length - 1; i >= 0; i--) {
                if (this.activeRank[i] < this.pointRank)
                    break;
                if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                    active.push(this.active[i]);
            }
            return active.reverse();
        }
        openEnd(to) {
            let open = 0;
            for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
                open++;
            return open;
        }
    }
    function compare(a, startA, b, startB, length, comparator) {
        a.goto(startA);
        b.goto(startB);
        let endB = startB + length;
        let pos = startB, dPos = startB - startA;
        for (;;) {
            let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
            let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
            if (a.point || b.point) {
                if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                    sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to))))
                    comparator.comparePoint(pos, clipEnd, a.point, b.point);
            }
            else {
                if (clipEnd > pos && !sameValues(a.active, b.active))
                    comparator.compareRange(pos, clipEnd, a.active, b.active);
            }
            if (end > endB)
                break;
            pos = end;
            if (diff <= 0)
                a.next();
            if (diff >= 0)
                b.next();
        }
    }
    function sameValues(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (a[i] != b[i] && !a[i].eq(b[i]))
                return false;
        return true;
    }
    function remove$2(array, index) {
        for (let i = index, e = array.length - 1; i < e; i++)
            array[i] = array[i + 1];
        array.pop();
    }
    function insert$1(array, index, value) {
        for (let i = array.length - 1; i >= index; i--)
            array[i + 1] = array[i];
        array[index] = value;
    }
    function findMinIndex(value, array) {
        let found = -1, foundPos = 1000000000 /* Far */;
        for (let i = 0; i < array.length; i++)
            if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
                found = i;
                foundPos = array[i];
            }
        return found;
    }

    /**
    Count the column position at the given offset into the string,
    taking extending characters and tab size into account.
    */
    function countColumn(string, tabSize, to = string.length) {
        let n = 0;
        for (let i = 0; i < to;) {
            if (string.charCodeAt(i) == 9) {
                n += tabSize - (n % tabSize);
                i++;
            }
            else {
                n++;
                i = findClusterBreak(string, i);
            }
        }
        return n;
    }
    /**
    Find the offset that corresponds to the given column position in a
    string, taking extending characters and tab size into account. By
    default, the string length is returned when it is too short to
    reach the column. Pass `strict` true to make it return -1 in that
    situation.
    */
    function findColumn(string, col, tabSize, strict) {
        for (let i = 0, n = 0;;) {
            if (n >= col)
                return i;
            if (i == string.length)
                break;
            n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
            i = findClusterBreak(string, i);
        }
        return strict === true ? -1 : string.length;
    }

    const C = "\u037c";
    const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
    const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

    // :: - Style modules encapsulate a set of CSS rules defined from
    // JavaScript. Their definitions are only available in a given DOM
    // root after it has been _mounted_ there with `StyleModule.mount`.
    //
    // Style modules should be created once and stored somewhere, as
    // opposed to re-creating them every time you need them. The amount of
    // CSS rules generated for a given DOM root is bounded by the amount
    // of style modules that were used. So to avoid leaking rules, don't
    // create these dynamically, but treat them as one-time allocations.
    class StyleModule {
      // :: (Object<Style>, ?{finish: ?(string) → string})
      // Create a style module from the given spec.
      //
      // When `finish` is given, it is called on regular (non-`@`)
      // selectors (after `&` expansion) to compute the final selector.
      constructor(spec, options) {
        this.rules = [];
        let {finish} = options || {};

        function splitSelector(selector) {
          return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
        }

        function render(selectors, spec, target, isKeyframes) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
          if (isAt && spec == null) return target.push(selectors[0] + ";")
          for (let prop in spec) {
            let value = spec[prop];
            if (/&/.test(prop)) {
              render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                     value, target);
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
              render(splitSelector(prop), value, local, keyframes);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || keyframes) {
            target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                        " {" + local.join(" ") + "}");
          }
        }

        for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
      }

      // :: () → string
      // Returns a string containing the module's CSS rules.
      getRules() { return this.rules.join("\n") }

      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id = top[COUNT] || 1;
        top[COUNT] = id + 1;
        return C + id.toString(36)
      }

      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      static mount(root, modules) {
        (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
      }
    }

    let adoptedSet = null;

    class StyleSet {
      constructor(root) {
        if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
          if (adoptedSet) {
            root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
            return root[SET] = adoptedSet
          }
          this.sheet = new CSSStyleSheet;
          root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
          adoptedSet = this;
        } else {
          this.styleTag = (root.ownerDocument || root).createElement("style");
          let target = root.head || root;
          target.insertBefore(this.styleTag, target.firstChild);
        }
        this.modules = [];
        root[SET] = this;
      }

      mount(modules) {
        let sheet = this.sheet;
        let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
        for (let i = 0; i < modules.length; i++) {
          let mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) { // Ordering conflict
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (let k = 0; k < mod.rules.length; k++)
              sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }

        if (!sheet) {
          let text = "";
          for (let i = 0; i < this.modules.length; i++)
            text += this.modules[i].getRules() + "\n";
          this.styleTag.textContent = text;
        }
      }
    }

    // Style::Object<union<Style,string>>
    //
    // A style is an object that, in the simple case, maps CSS property
    // names to strings holding their values, as in `{color: "red",
    // fontWeight: "bold"}`. The property names can be given in
    // camel-case—the library will insert a dash before capital letters
    // when converting them to CSS.
    //
    // If you include an underscore in a property name, it and everything
    // after it will be removed from the output, which can be useful when
    // providing a property multiple times, for browser compatibility
    // reasons.
    //
    // A property in a style object can also be a sub-selector, which
    // extends the current context to add a pseudo-selector or a child
    // selector. Such a property should contain a `&` character, which
    // will be replaced by the current selector. For example `{"&:before":
    // {content: '"hi"'}}`. Sub-selectors and regular properties can
    // freely be mixed in a given object. Any property containing a `&` is
    // assumed to be a sub-selector.
    //
    // Finally, a property can specify an @-block to be wrapped around the
    // styles defined inside the object that's the property's value. For
    // example to create a media query you can do `{"@media screen and
    // (min-width: 400px)": {...}}`.

    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'",
      229: "q"
    };

    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\"",
      229: "Q"
    };

    var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
    var safari$1 = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
    var gecko$1 = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
    var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
    var brokenModifierNames = chrome$1 && (mac || +chrome$1[1] < 57) || gecko$1 && mac;

    // Fill in the digit keys
    for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

    // The function keys
    for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

    // And the alphabetic keys
    for (var i = 65; i <= 90; i++) {
      base[i] = String.fromCharCode(i + 32);
      shift[i] = String.fromCharCode(i);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

    function keyName(event) {
      // Don't trust event.key in Chrome when there are modifiers until
      // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
      var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
        (safari$1 || ie$1) && event.shiftKey && event.key && event.key.length == 1;
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift : base)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }

    function getSelection(root) {
        let target;
        // Browsers differ on whether shadow roots have a getSelection
        // method. If it exists, use that, otherwise, call it on the
        // document.
        if (root.nodeType == 11) { // Shadow root
            target = root.getSelection ? root : root.ownerDocument;
        }
        else {
            target = root;
        }
        return target.getSelection();
    }
    function contains(dom, node) {
        return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
    }
    function deepActiveElement() {
        let elt = document.activeElement;
        while (elt && elt.shadowRoot)
            elt = elt.shadowRoot.activeElement;
        return elt;
    }
    function hasSelection(dom, selection) {
        if (!selection.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return contains(dom, selection.anchorNode);
        }
        catch (_) {
            return false;
        }
    }
    function clientRectsFor(dom) {
        if (dom.nodeType == 3)
            return textRange(dom, 0, dom.nodeValue.length).getClientRects();
        else if (dom.nodeType == 1)
            return dom.getClientRects();
        else
            return [];
    }
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    function isEquivalentPosition(node, off, targetNode, targetOff) {
        return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1)) : false;
    }
    function domIndex(node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    }
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : maxOffset(node))) {
                if (node.nodeName == "DIV")
                    return false;
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1)
                    return false;
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                if (node.nodeType == 1 && node.contentEditable == "false")
                    return false;
                off = dir < 0 ? maxOffset(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    const Rect0 = { left: 0, right: 0, top: 0, bottom: 0 };
    function flattenRect(rect, left) {
        let x = left ? rect.left : rect.right;
        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
    }
    function windowRect(win) {
        return { left: 0, right: win.innerWidth,
            top: 0, bottom: win.innerHeight };
    }
    function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
        let doc = dom.ownerDocument, win = doc.defaultView;
        for (let cur = dom; cur;) {
            if (cur.nodeType == 1) { // Element
                let bounding, top = cur == doc.body;
                if (top) {
                    bounding = windowRect(win);
                }
                else {
                    if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                        cur = cur.parentNode;
                        continue;
                    }
                    let rect = cur.getBoundingClientRect();
                    // Make sure scrollbar width isn't included in the rectangle
                    bounding = { left: rect.left, right: rect.left + cur.clientWidth,
                        top: rect.top, bottom: rect.top + cur.clientHeight };
                }
                let moveX = 0, moveY = 0;
                if (y == "nearest") {
                    if (rect.top < bounding.top) {
                        moveY = -(bounding.top - rect.top + yMargin);
                        if (side > 0 && rect.bottom > bounding.bottom + moveY)
                            moveY = rect.bottom - bounding.bottom + moveY + yMargin;
                    }
                    else if (rect.bottom > bounding.bottom) {
                        moveY = rect.bottom - bounding.bottom + yMargin;
                        if (side < 0 && (rect.top - moveY) < bounding.top)
                            moveY = -(bounding.top + moveY - rect.top + yMargin);
                    }
                }
                else {
                    let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                    let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                        y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                            rect.bottom - boundingHeight + yMargin;
                    moveY = targetTop - bounding.top;
                }
                if (x == "nearest") {
                    if (rect.left < bounding.left) {
                        moveX = -(bounding.left - rect.left + xMargin);
                        if (side > 0 && rect.right > bounding.right + moveX)
                            moveX = rect.right - bounding.right + moveX + xMargin;
                    }
                    else if (rect.right > bounding.right) {
                        moveX = rect.right - bounding.right + xMargin;
                        if (side < 0 && rect.left < bounding.left + moveX)
                            moveX = -(bounding.left + moveX - rect.left + xMargin);
                    }
                }
                else {
                    let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                        (x == "start") == ltr ? rect.left - xMargin :
                            rect.right - (bounding.right - bounding.left) + xMargin;
                    moveX = targetLeft - bounding.left;
                }
                if (moveX || moveY) {
                    if (top) {
                        win.scrollBy(moveX, moveY);
                    }
                    else {
                        if (moveY) {
                            let start = cur.scrollTop;
                            cur.scrollTop += moveY;
                            moveY = cur.scrollTop - start;
                        }
                        if (moveX) {
                            let start = cur.scrollLeft;
                            cur.scrollLeft += moveX;
                            moveX = cur.scrollLeft - start;
                        }
                        rect = { left: rect.left - moveX, top: rect.top - moveY,
                            right: rect.right - moveX, bottom: rect.bottom - moveY };
                    }
                }
                if (top)
                    break;
                cur = cur.assignedSlot || cur.parentNode;
                x = y = "nearest";
            }
            else if (cur.nodeType == 11) { // A shadow root
                cur = cur.host;
            }
            else {
                break;
            }
        }
    }
    class DOMSelectionState {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
                this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        setRange(range) {
            this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);
        }
        set(anchorNode, anchorOffset, focusNode, focusOffset) {
            this.anchorNode = anchorNode;
            this.anchorOffset = anchorOffset;
            this.focusNode = focusNode;
            this.focusOffset = focusOffset;
        }
    }
    let preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported)
            return dom.focus(preventScrollSupported);
        let stack = [];
        for (let cur = dom; cur; cur = cur.parentNode) {
            stack.push(cur, cur.scrollTop, cur.scrollLeft);
            if (cur == cur.ownerDocument)
                break;
        }
        dom.focus(preventScrollSupported == null ? {
            get preventScroll() {
                preventScrollSupported = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported) {
            preventScrollSupported = false;
            for (let i = 0; i < stack.length;) {
                let elt = stack[i++], top = stack[i++], left = stack[i++];
                if (elt.scrollTop != top)
                    elt.scrollTop = top;
                if (elt.scrollLeft != left)
                    elt.scrollLeft = left;
            }
        }
    }
    let scratchRange;
    function textRange(node, from, to = from) {
        let range = scratchRange || (scratchRange = document.createRange());
        range.setEnd(node, to);
        range.setStart(node, from);
        return range;
    }
    function dispatchKey(elt, name, code) {
        let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
        let down = new KeyboardEvent("keydown", options);
        down.synthetic = true;
        elt.dispatchEvent(down);
        let up = new KeyboardEvent("keyup", options);
        up.synthetic = true;
        elt.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
    }
    function getRoot(node) {
        while (node) {
            if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
                return node;
            node = node.assignedSlot || node.parentNode;
        }
        return null;
    }
    function clearAttributes(node) {
        while (node.attributes.length)
            node.removeAttributeNode(node.attributes[0]);
    }

    class DOMPos {
        constructor(node, offset, precise = true) {
            this.node = node;
            this.offset = offset;
            this.precise = precise;
        }
        static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
        static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
    }
    const noChildren = [];
    class ContentView {
        constructor() {
            this.parent = null;
            this.dom = null;
            this.dirty = 2 /* Node */;
        }
        get editorView() {
            if (!this.parent)
                throw new Error("Accessing view in orphan content view");
            return this.parent.editorView;
        }
        get overrideDOMText() { return null; }
        get posAtStart() {
            return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
            return this.posAtStart + this.length;
        }
        posBefore(view) {
            let pos = this.posAtStart;
            for (let child of this.children) {
                if (child == view)
                    return pos;
                pos += child.length + child.breakAfter;
            }
            throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
            return this.posBefore(view) + view.length;
        }
        // Will return a rectangle directly before (when side < 0), after
        // (side > 0) or directly on (when the browser supports it) the
        // given position.
        coordsAt(_pos, _side) { return null; }
        sync(track) {
            if (this.dirty & 2 /* Node */) {
                let parent = this.dom;
                let prev = null, next;
                for (let child of this.children) {
                    if (child.dirty) {
                        if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                            let contentView = ContentView.get(next);
                            if (!contentView || !contentView.parent && contentView.constructor == child.constructor)
                                child.reuseDOM(next);
                        }
                        child.sync(track);
                        child.dirty = 0 /* Not */;
                    }
                    next = prev ? prev.nextSibling : parent.firstChild;
                    if (track && !track.written && track.node == parent && next != child.dom)
                        track.written = true;
                    if (child.dom.parentNode == parent) {
                        while (next && next != child.dom)
                            next = rm$1(next);
                    }
                    else {
                        parent.insertBefore(child.dom, next);
                    }
                    prev = child.dom;
                }
                next = prev ? prev.nextSibling : parent.firstChild;
                if (next && track && track.node == parent)
                    track.written = true;
                while (next)
                    next = rm$1(next);
            }
            else if (this.dirty & 1 /* Child */) {
                for (let child of this.children)
                    if (child.dirty) {
                        child.sync(track);
                        child.dirty = 0 /* Not */;
                    }
            }
        }
        reuseDOM(_dom) { }
        localPosFromDOM(node, offset) {
            let after;
            if (node == this.dom) {
                after = this.dom.childNodes[offset];
            }
            else {
                let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
                for (;;) {
                    let parent = node.parentNode;
                    if (parent == this.dom)
                        break;
                    if (bias == 0 && parent.firstChild != parent.lastChild) {
                        if (node == parent.firstChild)
                            bias = -1;
                        else
                            bias = 1;
                    }
                    node = parent;
                }
                if (bias < 0)
                    after = node;
                else
                    after = node.nextSibling;
            }
            if (after == this.dom.firstChild)
                return 0;
            while (after && !ContentView.get(after))
                after = after.nextSibling;
            if (!after)
                return this.length;
            for (let i = 0, pos = 0;; i++) {
                let child = this.children[i];
                if (child.dom == after)
                    return pos;
                pos += child.length + child.breakAfter;
            }
        }
        domBoundsAround(from, to, offset = 0) {
            let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
            for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos < from && end > to)
                    return child.domBoundsAround(from, to, pos);
                if (end >= from && fromI == -1) {
                    fromI = i;
                    fromStart = pos;
                }
                if (pos > to && child.dom.parentNode == this.dom) {
                    toI = i;
                    toEnd = prevEnd;
                    break;
                }
                prevEnd = end;
                pos = end + child.breakAfter;
            }
            return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
                startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
                endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
        }
        markDirty(andParent = false) {
            this.dirty |= 2 /* Node */;
            this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
            for (let parent = this.parent; parent; parent = parent.parent) {
                if (childList)
                    parent.dirty |= 2 /* Node */;
                if (parent.dirty & 1 /* Child */)
                    return;
                parent.dirty |= 1 /* Child */;
                childList = false;
            }
        }
        setParent(parent) {
            if (this.parent != parent) {
                this.parent = parent;
                if (this.dirty)
                    this.markParentsDirty(true);
            }
        }
        setDOM(dom) {
            if (this.dom)
                this.dom.cmView = null;
            this.dom = dom;
            dom.cmView = this;
        }
        get rootView() {
            for (let v = this;;) {
                let parent = v.parent;
                if (!parent)
                    return v;
                v = parent;
            }
        }
        replaceChildren(from, to, children = noChildren) {
            this.markDirty();
            for (let i = from; i < to; i++) {
                let child = this.children[i];
                if (child.parent == this)
                    child.destroy();
            }
            this.children.splice(from, to - from, ...children);
            for (let i = 0; i < children.length; i++)
                children[i].setParent(this);
        }
        ignoreMutation(_rec) { return false; }
        ignoreEvent(_event) { return false; }
        childCursor(pos = this.length) {
            return new ChildCursor(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
            return this.childCursor().findPos(pos, bias);
        }
        toString() {
            let name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" :
                this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
                (this.breakAfter ? "#" : "");
        }
        static get(node) { return node.cmView; }
        get isEditable() { return true; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            return false;
        }
        become(other) { return false; }
        // When this is a zero-length view with a side, this should return a
        // number <= 0 to indicate it is before its position, or a
        // number > 0 when after its position.
        getSide() { return 0; }
        destroy() {
            this.parent = null;
        }
    }
    ContentView.prototype.breakAfter = 0;
    // Remove a DOM node and return its next sibling.
    function rm$1(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    class ChildCursor {
        constructor(children, pos, i) {
            this.children = children;
            this.pos = pos;
            this.i = i;
            this.off = 0;
        }
        findPos(pos, bias = 1) {
            for (;;) {
                if (pos > this.pos || pos == this.pos &&
                    (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                    this.off = pos - this.pos;
                    return this;
                }
                let next = this.children[--this.i];
                this.pos -= next.length + next.breakAfter;
            }
        }
    }
    function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
        let { children } = parent;
        let before = children.length ? children[fromI] : null;
        let last = insert.length ? insert[insert.length - 1] : null;
        let breakAtEnd = last ? last.breakAfter : breakAtStart;
        // Change within a single child
        if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
            before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
            return;
        if (toI < children.length) {
            let after = children[toI];
            // Make sure the end of the child after the update is preserved in `after`
            if (after && toOff < after.length) {
                // If we're splitting a child, separate part of it to avoid that
                // being mangled when updating the child before the update.
                if (fromI == toI) {
                    after = after.split(toOff);
                    toOff = 0;
                }
                // If the element after the replacement should be merged with
                // the last replacing element, update `content`
                if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                    insert[insert.length - 1] = after;
                }
                else {
                    // Remove the start of the after element, if necessary, and
                    // add it to `content`.
                    if (toOff)
                        after.merge(0, toOff, null, false, 0, openEnd);
                    insert.push(after);
                }
            }
            else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
                // The element at `toI` is entirely covered by this range.
                // Preserve its line break, if any.
                if (last)
                    last.breakAfter = 1;
                else
                    breakAtStart = 1;
            }
            // Since we've handled the next element from the current elements
            // now, make sure `toI` points after that.
            toI++;
        }
        if (before) {
            before.breakAfter = breakAtStart;
            if (fromOff > 0) {
                if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                    before.breakAfter = insert.shift().breakAfter;
                }
                else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                    before.merge(fromOff, before.length, null, false, openStart, 0);
                }
                fromI++;
            }
        }
        // Try to merge widgets on the boundaries of the replacement
        while (fromI < toI && insert.length) {
            if (children[toI - 1].become(insert[insert.length - 1])) {
                toI--;
                insert.pop();
                openEnd = insert.length ? 0 : openStart;
            }
            else if (children[fromI].become(insert[0])) {
                fromI++;
                insert.shift();
                openStart = insert.length ? 0 : openEnd;
            }
            else {
                break;
            }
        }
        if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
            children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
            fromI--;
        if (fromI < toI || insert.length)
            parent.replaceChildren(fromI, toI, insert);
    }
    function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
        let cur = parent.childCursor();
        let { i: toI, off: toOff } = cur.findPos(to, 1);
        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
        let dLen = from - to;
        for (let view of insert)
            dLen += view.length;
        parent.length += dLen;
        replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
    }

    let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
    let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
    const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
    const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
    const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
    const ie = !!(ie_upto10 || ie_11up || ie_edge);
    const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
    const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
    const webkit = "webkitFontSmoothing" in doc.documentElement.style;
    const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
    const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
    var browser = {
        mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
        windows: /*@__PURE__*//Win/.test(nav.platform),
        linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
        ie,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko,
        gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome,
        chrome_version: chrome ? +chrome[1] : 0,
        ios,
        android: /*@__PURE__*//Android\b/.test(nav.userAgent),
        webkit,
        safari,
        webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };

    const MaxJoinLen = 256;
    class TextView extends ContentView {
        constructor(text) {
            super();
            this.text = text;
        }
        get length() { return this.text.length; }
        createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(track) {
            if (!this.dom)
                this.createDOM();
            if (this.dom.nodeValue != this.text) {
                if (track && track.node == this.dom)
                    track.written = true;
                this.dom.nodeValue = this.text;
            }
        }
        reuseDOM(dom) {
            if (dom.nodeType == 3)
                this.createDOM(dom);
        }
        merge(from, to, source) {
            if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))
                return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = new TextView(this.text.slice(from));
            this.text = this.text.slice(0, from);
            this.markDirty();
            return result;
        }
        localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
        }
        domAtPos(pos) { return new DOMPos(this.dom, pos); }
        domBoundsAround(_from, _to, offset) {
            return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
            return textCoords(this.dom, pos, side);
        }
    }
    class MarkView extends ContentView {
        constructor(mark, children = [], length = 0) {
            super();
            this.mark = mark;
            this.children = children;
            this.length = length;
            for (let ch of children)
                ch.setParent(this);
        }
        setAttrs(dom) {
            clearAttributes(dom);
            if (this.mark.class)
                dom.className = this.mark.class;
            if (this.mark.attrs)
                for (let name in this.mark.attrs)
                    dom.setAttribute(name, this.mark.attrs[name]);
            return dom;
        }
        reuseDOM(node) {
            if (node.nodeName == this.mark.tagName.toUpperCase()) {
                this.setDOM(node);
                this.dirty |= 4 /* Attrs */ | 2 /* Node */;
            }
        }
        sync(track) {
            if (!this.dom)
                this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
            else if (this.dirty & 4 /* Attrs */)
                this.setAttrs(this.dom);
            super.sync(track);
        }
        merge(from, to, source, _hasStart, openStart, openEnd) {
            if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
                (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
                return false;
            mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = [], off = 0, detachFrom = -1, i = 0;
            for (let elt of this.children) {
                let end = off + elt.length;
                if (end > from)
                    result.push(off < from ? elt.split(from - off) : elt);
                if (detachFrom < 0 && off >= from)
                    detachFrom = i;
                off = end;
                i++;
            }
            let length = this.length - from;
            this.length = from;
            if (detachFrom > -1) {
                this.children.length = detachFrom;
                this.markDirty();
            }
            return new MarkView(this.mark, result, length);
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
    }
    function textCoords(text, pos, side) {
        let length = text.nodeValue.length;
        if (pos > length)
            pos = length;
        let from = pos, to = pos, flatten = 0;
        if (pos == 0 && side < 0 || pos == length && side >= 0) {
            if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
                if (pos) {
                    from--;
                    flatten = 1;
                } // FIXME this is wrong in RTL text
                else if (to < length) {
                    to++;
                    flatten = -1;
                }
            }
        }
        else {
            if (side < 0)
                from--;
            else if (to < length)
                to++;
        }
        let rects = textRange(text, from, to).getClientRects();
        if (!rects.length)
            return Rect0;
        let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
        if (browser.safari && !flatten && rect.width == 0)
            rect = Array.prototype.find.call(rects, r => r.width) || rect;
        return flatten ? flattenRect(rect, flatten < 0) : rect || null;
    }
    // Also used for collapsed ranges that don't have a placeholder widget!
    class WidgetView extends ContentView {
        constructor(widget, length, side) {
            super();
            this.widget = widget;
            this.length = length;
            this.side = side;
            this.prevWidget = null;
        }
        static create(widget, length, side) {
            return new (widget.customView || WidgetView)(widget, length, side);
        }
        split(from) {
            let result = WidgetView.create(this.widget, this.length - from, this.side);
            this.length -= from;
            return result;
        }
        sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(this.editorView));
                this.dom.contentEditable = "false";
            }
        }
        getSide() { return this.side; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        become(other) {
            if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
                if (this.widget.constructor == other.widget.constructor) {
                    if (!this.widget.eq(other.widget))
                        this.markDirty(true);
                    if (this.dom && !this.prevWidget)
                        this.prevWidget = this.widget;
                    this.widget = other.widget;
                    return true;
                }
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get overrideDOMText() {
            if (this.length == 0)
                return Text.empty;
            let top = this;
            while (top.parent)
                top = top.parent;
            let view = top.editorView, text = view && view.state.doc, start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : Text.empty;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        domBoundsAround() { return null; }
        coordsAt(pos, side) {
            let rects = this.dom.getClientRects(), rect = null;
            if (!rects.length)
                return Rect0;
            for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {
                rect = rects[i];
                if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                    break;
            }
            return (pos == 0 && side > 0 || pos == this.length && side <= 0) ? rect : flattenRect(rect, pos == 0);
        }
        get isEditable() { return false; }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
    }
    class CompositionView extends WidgetView {
        domAtPos(pos) {
            let { topView, text } = this.widget;
            if (!topView)
                return new DOMPos(text, Math.min(pos, text.nodeValue.length));
            return scanCompositionTree(pos, 0, topView, text, (v, p) => v.domAtPos(p), p => new DOMPos(text, Math.min(p, text.nodeValue.length)));
        }
        sync() { this.setDOM(this.widget.toDOM()); }
        localPosFromDOM(node, offset) {
            let { topView, text } = this.widget;
            if (!topView)
                return Math.min(offset, this.length);
            return posFromDOMInCompositionTree(node, offset, topView, text);
        }
        ignoreMutation() { return false; }
        get overrideDOMText() { return null; }
        coordsAt(pos, side) {
            let { topView, text } = this.widget;
            if (!topView)
                return textCoords(text, pos, side);
            return scanCompositionTree(pos, side, topView, text, (v, pos, side) => v.coordsAt(pos, side), (pos, side) => textCoords(text, pos, side));
        }
        destroy() {
            var _a;
            super.destroy();
            (_a = this.widget.topView) === null || _a === void 0 ? void 0 : _a.destroy();
        }
        get isEditable() { return true; }
    }
    // Uses the old structure of a chunk of content view frozen for
    // composition to try and find a reasonable DOM location for the given
    // offset.
    function scanCompositionTree(pos, side, view, text, enterView, fromText) {
        if (view instanceof MarkView) {
            for (let child of view.children) {
                let hasComp = contains(child.dom, text);
                let len = hasComp ? text.nodeValue.length : child.length;
                if (pos < len || pos == len && child.getSide() <= 0)
                    return hasComp ? scanCompositionTree(pos, side, child, text, enterView, fromText) : enterView(child, pos, side);
                pos -= len;
            }
            return enterView(view, view.length, -1);
        }
        else if (view.dom == text) {
            return fromText(pos, side);
        }
        else {
            return enterView(view, pos, side);
        }
    }
    function posFromDOMInCompositionTree(node, offset, view, text) {
        if (view instanceof MarkView) {
            for (let child of view.children) {
                let pos = 0, hasComp = contains(child.dom, text);
                if (contains(child.dom, node))
                    return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, child, text) : child.localPosFromDOM(node, offset));
                pos += hasComp ? text.nodeValue.length : child.length;
            }
        }
        else if (view.dom == text) {
            return Math.min(offset, text.nodeValue.length);
        }
        return view.localPosFromDOM(node, offset);
    }
    // These are drawn around uneditable widgets to avoid a number of
    // browser bugs that show up when the cursor is directly next to
    // uneditable inline content.
    class WidgetBufferView extends ContentView {
        constructor(side) {
            super();
            this.side = side;
        }
        get length() { return 0; }
        merge() { return false; }
        become(other) {
            return other instanceof WidgetBufferView && other.side == this.side;
        }
        split() { return new WidgetBufferView(this.side); }
        sync() {
            if (!this.dom) {
                let dom = document.createElement("img");
                dom.className = "cm-widgetBuffer";
                dom.setAttribute("aria-hidden", "true");
                this.setDOM(dom);
            }
        }
        getSide() { return this.side; }
        domAtPos(pos) { return DOMPos.before(this.dom); }
        localPosFromDOM() { return 0; }
        domBoundsAround() { return null; }
        coordsAt(pos) {
            let imgRect = this.dom.getBoundingClientRect();
            // Since the <img> height doesn't correspond to text height, try
            // to borrow the height from some sibling node.
            let siblingRect = inlineSiblingRect(this, this.side > 0 ? -1 : 1);
            return siblingRect && siblingRect.top < imgRect.bottom && siblingRect.bottom > imgRect.top
                ? { left: imgRect.left, right: imgRect.right, top: siblingRect.top, bottom: siblingRect.bottom } : imgRect;
        }
        get overrideDOMText() {
            return Text.empty;
        }
    }
    TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
    function inlineSiblingRect(view, side) {
        let parent = view.parent, index = parent ? parent.children.indexOf(view) : -1;
        while (parent && index >= 0) {
            if (side < 0 ? index > 0 : index < parent.children.length) {
                let next = parent.children[index + side];
                if (next instanceof TextView) {
                    let nextRect = next.coordsAt(side < 0 ? next.length : 0, side);
                    if (nextRect)
                        return nextRect;
                }
                index += side;
            }
            else if (parent instanceof MarkView && parent.parent) {
                index = parent.parent.children.indexOf(parent) + (side < 0 ? 0 : 1);
                parent = parent.parent;
            }
            else {
                let last = parent.dom.lastChild;
                if (last && last.nodeName == "BR")
                    return last.getClientRects()[0];
                break;
            }
        }
        return undefined;
    }
    function inlineDOMAtPos(dom, children, pos) {
        let i = 0;
        for (let off = 0; i < children.length; i++) {
            let child = children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (pos > off && pos < end && child.dom.parentNode == dom)
                return child.domAtPos(pos - off);
            if (pos <= off)
                break;
            off = end;
        }
        for (; i > 0; i--) {
            let before = children[i - 1].dom;
            if (before.parentNode == dom)
                return DOMPos.after(before);
        }
        return new DOMPos(dom, 0);
    }
    // Assumes `view`, if a mark view, has precisely 1 child.
    function joinInlineInto(parent, view, open) {
        let last, { children } = parent;
        if (open > 0 && view instanceof MarkView && children.length &&
            (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
            joinInlineInto(last, view.children[0], open - 1);
        }
        else {
            children.push(view);
            view.setParent(parent);
        }
        parent.length += view.length;
    }
    function coordsInChildren(view, pos, side) {
        for (let off = 0, i = 0; i < view.children.length; i++) {
            let child = view.children[i], end = off + child.length, next;
            if ((side <= 0 || end == view.length || child.getSide() > 0 ? end >= pos : end > pos) &&
                (pos < end || i + 1 == view.children.length || (next = view.children[i + 1]).length || next.getSide() > 0)) {
                let flatten = 0;
                if (end == off) {
                    if (child.getSide() <= 0)
                        continue;
                    flatten = side = -child.getSide();
                }
                let rect = child.coordsAt(Math.max(0, pos - off), side);
                return flatten && rect ? flattenRect(rect, side < 0) : rect;
            }
            off = end;
        }
        let last = view.dom.lastChild;
        if (!last)
            return view.dom.getBoundingClientRect();
        let rects = clientRectsFor(last);
        return rects[rects.length - 1] || null;
    }

    function combineAttrs(source, target) {
        for (let name in source) {
            if (name == "class" && target.class)
                target.class += " " + source.class;
            else if (name == "style" && target.style)
                target.style += ";" + source.style;
            else
                target[name] = source[name];
        }
        return target;
    }
    function attrsEq(a, b) {
        if (a == b)
            return true;
        if (!a || !b)
            return false;
        let keysA = Object.keys(a), keysB = Object.keys(b);
        if (keysA.length != keysB.length)
            return false;
        for (let key of keysA) {
            if (keysB.indexOf(key) == -1 || a[key] !== b[key])
                return false;
        }
        return true;
    }
    function updateAttrs(dom, prev, attrs) {
        let changed = null;
        if (prev)
            for (let name in prev)
                if (!(attrs && name in attrs))
                    dom.removeAttribute(changed = name);
        if (attrs)
            for (let name in attrs)
                if (!(prev && prev[name] == attrs[name]))
                    dom.setAttribute(changed = name, attrs[name]);
        return !!changed;
    }

    /**
    Widgets added to the content are described by subclasses of this
    class. Using a description object like that makes it possible to
    delay creating of the DOM structure for a widget until it is
    needed, and to avoid redrawing widgets even if the decorations
    that define them are recreated.
    */
    class WidgetType {
        /**
        Compare this instance to another instance of the same type.
        (TypeScript can't express this, but only instances of the same
        specific class will be passed to this method.) This is used to
        avoid redrawing widgets when they are replaced by a new
        decoration of the same type. The default implementation just
        returns `false`, which will cause new instances of the widget to
        always be redrawn.
        */
        eq(widget) { return false; }
        /**
        Update a DOM element created by a widget of the same type (but
        different, non-`eq` content) to reflect this widget. May return
        true to indicate that it could update, false to indicate it
        couldn't (in which case the widget will be redrawn). The default
        implementation just returns false.
        */
        updateDOM(dom) { return false; }
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        The estimated height this widget will have, to be used when
        estimating the height of content that hasn't been drawn. May
        return -1 to indicate you don't know. The default implementation
        returns -1.
        */
        get estimatedHeight() { return -1; }
        /**
        Can be used to configure which kinds of events inside the widget
        should be ignored by the editor. The default is to ignore all
        events.
        */
        ignoreEvent(event) { return true; }
        /**
        @internal
        */
        get customView() { return null; }
        /**
        This is called when the an instance of the widget is removed
        from the editor view.
        */
        destroy(dom) { }
    }
    /**
    The different types of blocks that can occur in an editor view.
    */
    var BlockType = /*@__PURE__*/(function (BlockType) {
        /**
        A line of text.
        */
        BlockType[BlockType["Text"] = 0] = "Text";
        /**
        A block widget associated with the position after it.
        */
        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /**
        A block widget associated with the position before it.
        */
        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /**
        A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
        */
        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    return BlockType})(BlockType || (BlockType = {}));
    /**
    A decoration provides information on how to draw or style a piece
    of content. You'll usually use it wrapped in a
    [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
    @nonabstract
    */
    class Decoration extends RangeValue {
        constructor(
        /**
        @internal
        */
        startSide, 
        /**
        @internal
        */
        endSide, 
        /**
        @internal
        */
        widget, 
        /**
        The config object used to create this decoration. You can
        include additional properties in there to store metadata about
        your decoration.
        */
        spec) {
            super();
            this.startSide = startSide;
            this.endSide = endSide;
            this.widget = widget;
            this.spec = spec;
        }
        /**
        @internal
        */
        get heightRelevant() { return false; }
        /**
        Create a mark decoration, which influences the styling of the
        content in its range. Nested mark decorations will cause nested
        DOM elements to be created. Nesting order is determined by
        precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
        the higher-precedence decorations creating the inner DOM nodes.
        Such elements are split on line boundaries and on the boundaries
        of lower-precedence decorations.
        */
        static mark(spec) {
            return new MarkDecoration(spec);
        }
        /**
        Create a widget decoration, which displays a DOM element at the
        given position.
        */
        static widget(spec) {
            let side = spec.side || 0, block = !!spec.block;
            side += block ? (side > 0 ? 300000000 /* BlockAfter */ : -400000000 /* BlockBefore */) : (side > 0 ? 100000000 /* InlineAfter */ : -100000000 /* InlineBefore */);
            return new PointDecoration(spec, side, side, block, spec.widget || null, false);
        }
        /**
        Create a replace decoration which replaces the given range with
        a widget, or simply hides it.
        */
        static replace(spec) {
            let block = !!spec.block, startSide, endSide;
            if (spec.isBlockGap) {
                startSide = -500000000 /* GapStart */;
                endSide = 400000000 /* GapEnd */;
            }
            else {
                let { start, end } = getInclusive(spec, block);
                startSide = (start ? (block ? -300000000 /* BlockIncStart */ : -1 /* InlineIncStart */) : 500000000 /* NonIncStart */) - 1;
                endSide = (end ? (block ? 200000000 /* BlockIncEnd */ : 1 /* InlineIncEnd */) : -600000000 /* NonIncEnd */) + 1;
            }
            return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
        }
        /**
        Create a line decoration, which can add DOM attributes to the
        line starting at the given position.
        */
        static line(spec) {
            return new LineDecoration(spec);
        }
        /**
        Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
        decorated range or ranges. If the ranges aren't already sorted,
        pass `true` for `sort` to make the library sort them for you.
        */
        static set(of, sort = false) {
            return RangeSet.of(of, sort);
        }
        /**
        @internal
        */
        hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
    }
    /**
    The empty set of decorations.
    */
    Decoration.none = RangeSet.empty;
    class MarkDecoration extends Decoration {
        constructor(spec) {
            let { start, end } = getInclusive(spec);
            super(start ? -1 /* InlineIncStart */ : 500000000 /* NonIncStart */, end ? 1 /* InlineIncEnd */ : -600000000 /* NonIncEnd */, null, spec);
            this.tagName = spec.tagName || "span";
            this.class = spec.class || "";
            this.attrs = spec.attributes || null;
        }
        eq(other) {
            return this == other ||
                other instanceof MarkDecoration &&
                    this.tagName == other.tagName &&
                    this.class == other.class &&
                    attrsEq(this.attrs, other.attrs);
        }
        range(from, to = from) {
            if (from >= to)
                throw new RangeError("Mark decorations may not be empty");
            return super.range(from, to);
        }
    }
    MarkDecoration.prototype.point = false;
    class LineDecoration extends Decoration {
        constructor(spec) {
            super(-200000000 /* Line */, -200000000 /* Line */, null, spec);
        }
        eq(other) {
            return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
        }
        range(from, to = from) {
            if (to != from)
                throw new RangeError("Line decoration ranges must be zero-length");
            return super.range(from, to);
        }
    }
    LineDecoration.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration.prototype.point = true;
    class PointDecoration extends Decoration {
        constructor(spec, startSide, endSide, block, widget, isReplace) {
            super(startSide, endSide, widget, spec);
            this.block = block;
            this.isReplace = isReplace;
            this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
        }
        // Only relevant when this.block == true
        get type() {
            return this.startSide < this.endSide ? BlockType.WidgetRange
                : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
        }
        get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }
        eq(other) {
            return other instanceof PointDecoration &&
                widgetsEq(this.widget, other.widget) &&
                this.block == other.block &&
                this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from, to = from) {
            if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
                throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from)
                throw new RangeError("Widget decorations can only have zero-length ranges");
            return super.range(from, to);
        }
    }
    PointDecoration.prototype.point = true;
    function getInclusive(spec, block = false) {
        let { inclusiveStart: start, inclusiveEnd: end } = spec;
        if (start == null)
            start = spec.inclusive;
        if (end == null)
            end = spec.inclusive;
        return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
    }
    function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
    }
    function addRange(from, to, ranges, margin = 0) {
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last] + margin >= from)
            ranges[last] = Math.max(ranges[last], to);
        else
            ranges.push(from, to);
    }

    class LineView extends ContentView {
        constructor() {
            super(...arguments);
            this.children = [];
            this.length = 0;
            this.prevAttrs = undefined;
            this.attrs = null;
            this.breakAfter = 0;
        }
        // Consumes source
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source) {
                if (!(source instanceof LineView))
                    return false;
                if (!this.dom)
                    source.transferDOM(this); // Reuse source.dom when appropriate
            }
            if (hasStart)
                this.setDeco(source ? source.attrs : null);
            mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
            return true;
        }
        split(at) {
            let end = new LineView;
            end.breakAfter = this.breakAfter;
            if (this.length == 0)
                return end;
            let { i, off } = this.childPos(at);
            if (off) {
                end.append(this.children[i].split(off), 0);
                this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
                i++;
            }
            for (let j = i; j < this.children.length; j++)
                end.append(this.children[j], 0);
            while (i > 0 && this.children[i - 1].length == 0)
                this.children[--i].destroy();
            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
        }
        transferDOM(other) {
            if (!this.dom)
                return;
            this.markDirty();
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
        }
        setDeco(attrs) {
            if (!attrsEq(this.attrs, attrs)) {
                if (this.dom) {
                    this.prevAttrs = this.attrs;
                    this.markDirty();
                }
                this.attrs = attrs;
            }
        }
        append(child, openStart) {
            joinInlineInto(this, child, openStart);
        }
        // Only called when building a line view in ContentBuilder
        addLineDeco(deco) {
            let attrs = deco.spec.attributes, cls = deco.spec.class;
            if (attrs)
                this.attrs = combineAttrs(attrs, this.attrs || {});
            if (cls)
                this.attrs = combineAttrs({ class: cls }, this.attrs || {});
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
        }
        reuseDOM(node) {
            if (node.nodeName == "DIV") {
                this.setDOM(node);
                this.dirty |= 4 /* Attrs */ | 2 /* Node */;
            }
        }
        sync(track) {
            var _a;
            if (!this.dom) {
                this.setDOM(document.createElement("div"));
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            else if (this.dirty & 4 /* Attrs */) {
                clearAttributes(this.dom);
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            if (this.prevAttrs !== undefined) {
                updateAttrs(this.dom, this.prevAttrs, this.attrs);
                this.dom.classList.add("cm-line");
                this.prevAttrs = undefined;
            }
            super.sync(track);
            let last = this.dom.lastChild;
            while (last && ContentView.get(last) instanceof MarkView)
                last = last.lastChild;
            if (!last || !this.length ||
                last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                    (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
                let hack = document.createElement("BR");
                hack.cmIgnore = true;
                this.dom.appendChild(hack);
            }
        }
        measureTextSize() {
            if (this.children.length == 0 || this.length > 20)
                return null;
            let totalWidth = 0;
            for (let child of this.children) {
                if (!(child instanceof TextView))
                    return null;
                let rects = clientRectsFor(child.dom);
                if (rects.length != 1)
                    return null;
                totalWidth += rects[0].width;
            }
            return { lineHeight: this.dom.getBoundingClientRect().height,
                charWidth: totalWidth / this.length };
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
        become(_other) { return false; }
        get type() { return BlockType.Text; }
        static find(docView, pos) {
            for (let i = 0, off = 0; i < docView.children.length; i++) {
                let block = docView.children[i], end = off + block.length;
                if (end >= pos) {
                    if (block instanceof LineView)
                        return block;
                    if (end > pos)
                        break;
                }
                off = end + block.breakAfter;
            }
            return null;
        }
    }
    class BlockWidgetView extends ContentView {
        constructor(widget, length, type) {
            super();
            this.widget = widget;
            this.length = length;
            this.type = type;
            this.breakAfter = 0;
            this.prevWidget = null;
        }
        merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        split(at) {
            let len = this.length - at;
            this.length = at;
            let end = new BlockWidgetView(this.widget, len, this.type);
            end.breakAfter = this.breakAfter;
            return end;
        }
        get children() { return noChildren; }
        sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(this.editorView));
                this.dom.contentEditable = "false";
            }
        }
        get overrideDOMText() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
        }
        domBoundsAround() { return null; }
        become(other) {
            if (other instanceof BlockWidgetView && other.type == this.type &&
                other.widget.constructor == this.widget.constructor) {
                if (!other.widget.eq(this.widget))
                    this.markDirty(true);
                if (this.dom && !this.prevWidget)
                    this.prevWidget = this.widget;
                this.widget = other.widget;
                this.length = other.length;
                this.breakAfter = other.breakAfter;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
    }

    class ContentBuilder {
        constructor(doc, pos, end, disallowBlockEffectsFor) {
            this.doc = doc;
            this.pos = pos;
            this.end = end;
            this.disallowBlockEffectsFor = disallowBlockEffectsFor;
            this.content = [];
            this.curLine = null;
            this.breakAtStart = 0;
            this.pendingBuffer = 0 /* No */;
            // Set to false directly after a widget that covers the position after it
            this.atCursorPos = true;
            this.openStart = -1;
            this.openEnd = -1;
            this.text = "";
            this.textOff = 0;
            this.cursor = doc.iter();
            this.skip = pos;
        }
        posCovered() {
            if (this.content.length == 0)
                return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            let last = this.content[this.content.length - 1];
            return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
        }
        getLine() {
            if (!this.curLine) {
                this.content.push(this.curLine = new LineView);
                this.atCursorPos = true;
            }
            return this.curLine;
        }
        flushBuffer(active) {
            if (this.pendingBuffer) {
                this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
                this.pendingBuffer = 0 /* No */;
            }
        }
        addBlockWidget(view) {
            this.flushBuffer([]);
            this.curLine = null;
            this.content.push(view);
        }
        finish(openEnd) {
            if (!openEnd)
                this.flushBuffer([]);
            else
                this.pendingBuffer = 0 /* No */;
            if (!this.posCovered())
                this.getLine();
        }
        buildText(length, active, openStart) {
            while (length > 0) {
                if (this.textOff == this.text.length) {
                    let { value, lineBreak, done } = this.cursor.next(this.skip);
                    this.skip = 0;
                    if (done)
                        throw new Error("Ran out of text content when drawing inline views");
                    if (lineBreak) {
                        if (!this.posCovered())
                            this.getLine();
                        if (this.content.length)
                            this.content[this.content.length - 1].breakAfter = 1;
                        else
                            this.breakAtStart = 1;
                        this.flushBuffer([]);
                        this.curLine = null;
                        length--;
                        continue;
                    }
                    else {
                        this.text = value;
                        this.textOff = 0;
                    }
                }
                let take = Math.min(this.text.length - this.textOff, length, 512 /* Chunk */);
                this.flushBuffer(active.slice(0, openStart));
                this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
                this.atCursorPos = true;
                this.textOff += take;
                length -= take;
                openStart = 0;
            }
        }
        span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        point(from, to, deco, active, openStart, index) {
            if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
                if (deco.block)
                    throw new RangeError("Block decorations may not be specified via plugins");
                if (to > this.doc.lineAt(this.pos).to)
                    throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
            }
            let len = to - from;
            if (deco instanceof PointDecoration) {
                if (deco.block) {
                    let { type } = deco;
                    if (type == BlockType.WidgetAfter && !this.posCovered())
                        this.getLine();
                    this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
                }
                else {
                    let view = WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide);
                    let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
                    let cursorAfter = !view.isEditable && (from < to || deco.startSide <= 0);
                    let line = this.getLine();
                    if (this.pendingBuffer == 2 /* IfCursor */ && !cursorBefore)
                        this.pendingBuffer = 0 /* No */;
                    this.flushBuffer(active);
                    if (cursorBefore) {
                        line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                        openStart = active.length + Math.max(0, openStart - active.length);
                    }
                    line.append(wrapMarks(view, active), openStart);
                    this.atCursorPos = cursorAfter;
                    this.pendingBuffer = !cursorAfter ? 0 /* No */ : from < to ? 1 /* Yes */ : 2 /* IfCursor */;
                }
            }
            else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
                this.getLine().addLineDeco(deco);
            }
            if (len) {
                // Advance the iterator past the replaced content
                if (this.textOff + len <= this.text.length) {
                    this.textOff += len;
                }
                else {
                    this.skip += len - (this.text.length - this.textOff);
                    this.text = "";
                    this.textOff = 0;
                }
                this.pos = to;
            }
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        static build(text, from, to, decorations, dynamicDecorationMap) {
            let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
            builder.openEnd = RangeSet.spans(decorations, from, to, builder);
            if (builder.openStart < 0)
                builder.openStart = builder.openEnd;
            builder.finish(builder.openEnd);
            return builder;
        }
    }
    function wrapMarks(view, active) {
        for (let mark of active)
            view = new MarkView(mark, [view], view.length);
        return view;
    }
    class NullWidget extends WidgetType {
        constructor(tag) {
            super();
            this.tag = tag;
        }
        eq(other) { return other.tag == this.tag; }
        toDOM() { return document.createElement(this.tag); }
        updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
    }

    const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
    const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
    const mouseSelectionStyle = /*@__PURE__*/Facet.define();
    const exceptionSink = /*@__PURE__*/Facet.define();
    const updateListener = /*@__PURE__*/Facet.define();
    const inputHandler$1 = /*@__PURE__*/Facet.define();
    const perLineTextDirection = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    class ScrollTarget {
        constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5) {
            this.range = range;
            this.y = y;
            this.x = x;
            this.yMargin = yMargin;
            this.xMargin = xMargin;
        }
        map(changes) {
            return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
        }
    }
    const scrollIntoView$1 = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
    /**
    Log or report an unhandled exception in client code. Should
    probably only be used by extension code that allows client code to
    provide functions, and calls those functions in a context where an
    exception can't be propagated to calling code in a reasonable way
    (for example when in an event handler).

    Either calls a handler registered with
    [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
    `window.onerror`, if defined, or `console.error` (in which case
    it'll pass `context`, when given, as first argument).
    */
    function logException(state, exception, context) {
        let handler = state.facet(exceptionSink);
        if (handler.length)
            handler[0](exception);
        else if (window.onerror)
            window.onerror(String(exception), context, undefined, undefined, exception);
        else if (context)
            console.error(context + ":", exception);
        else
            console.error(exception);
    }
    const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
    let nextPluginID = 0;
    const viewPlugin = /*@__PURE__*/Facet.define();
    /**
    View plugins associate stateful values with a view. They can
    influence the way the content is drawn, and are notified of things
    that happen in the view.
    */
    class ViewPlugin {
        constructor(
        /**
        @internal
        */
        id, 
        /**
        @internal
        */
        create, 
        /**
        @internal
        */
        domEventHandlers, buildExtensions) {
            this.id = id;
            this.create = create;
            this.domEventHandlers = domEventHandlers;
            this.extension = buildExtensions(this);
        }
        /**
        Define a plugin from a constructor function that creates the
        plugin's value, given an editor view.
        */
        static define(create, spec) {
            const { eventHandlers, provide, decorations: deco } = spec || {};
            return new ViewPlugin(nextPluginID++, create, eventHandlers, plugin => {
                let ext = [viewPlugin.of(plugin)];
                if (deco)
                    ext.push(decorations.of(view => {
                        let pluginInst = view.plugin(plugin);
                        return pluginInst ? deco(pluginInst) : Decoration.none;
                    }));
                if (provide)
                    ext.push(provide(plugin));
                return ext;
            });
        }
        /**
        Create a plugin for a class whose constructor takes a single
        editor view as argument.
        */
        static fromClass(cls, spec) {
            return ViewPlugin.define(view => new cls(view), spec);
        }
    }
    class PluginInstance {
        constructor(spec) {
            this.spec = spec;
            // When starting an update, all plugins have this field set to the
            // update object, indicating they need to be updated. When finished
            // updating, it is set to `false`. Retrieving a plugin that needs to
            // be updated with `view.plugin` forces an eager update.
            this.mustUpdate = null;
            // This is null when the plugin is initially created, but
            // initialized on the first update.
            this.value = null;
        }
        update(view) {
            if (!this.value) {
                if (this.spec) {
                    try {
                        this.value = this.spec.create(view);
                    }
                    catch (e) {
                        logException(view.state, e, "CodeMirror plugin crashed");
                        this.deactivate();
                    }
                }
            }
            else if (this.mustUpdate) {
                let update = this.mustUpdate;
                this.mustUpdate = null;
                if (this.value.update) {
                    try {
                        this.value.update(update);
                    }
                    catch (e) {
                        logException(update.state, e, "CodeMirror plugin crashed");
                        if (this.value.destroy)
                            try {
                                this.value.destroy();
                            }
                            catch (_) { }
                        this.deactivate();
                    }
                }
            }
            return this;
        }
        destroy(view) {
            var _a;
            if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
                try {
                    this.value.destroy();
                }
                catch (e) {
                    logException(view.state, e, "CodeMirror plugin crashed");
                }
            }
        }
        deactivate() {
            this.spec = this.value = null;
        }
    }
    const editorAttributes = /*@__PURE__*/Facet.define();
    const contentAttributes = /*@__PURE__*/Facet.define();
    // Provide decorations
    const decorations = /*@__PURE__*/Facet.define();
    const atomicRanges = /*@__PURE__*/Facet.define();
    const scrollMargins = /*@__PURE__*/Facet.define();
    const styleModule = /*@__PURE__*/Facet.define();
    class ChangedRange {
        constructor(fromA, toA, fromB, toB) {
            this.fromA = fromA;
            this.toA = toA;
            this.fromB = fromB;
            this.toB = toB;
        }
        join(other) {
            return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set) {
            let i = set.length, me = this;
            for (; i > 0; i--) {
                let range = set[i - 1];
                if (range.fromA > me.toA)
                    continue;
                if (range.toA < me.fromA)
                    break;
                me = me.join(range);
                set.splice(i - 1, 1);
            }
            set.splice(i, 0, me);
            return set;
        }
        static extendWithRanges(diff, ranges) {
            if (ranges.length == 0)
                return diff;
            let result = [];
            for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
                let next = dI == diff.length ? null : diff[dI], off = posA - posB;
                let end = next ? next.fromB : 1e9;
                while (rI < ranges.length && ranges[rI] < end) {
                    let from = ranges[rI], to = ranges[rI + 1];
                    let fromB = Math.max(posB, from), toB = Math.min(end, to);
                    if (fromB <= toB)
                        new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                    if (to > end)
                        break;
                    else
                        rI += 2;
                }
                if (!next)
                    return result;
                new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
                posA = next.toA;
                posB = next.toB;
            }
        }
    }
    /**
    View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
    class, which describe what happened, whenever the view is updated.
    */
    class ViewUpdate {
        constructor(
        /**
        The editor view that the update is associated with.
        */
        view, 
        /**
        The new editor state.
        */
        state, 
        /**
        The transactions involved in the update. May be empty.
        */
        transactions) {
            this.view = view;
            this.state = state;
            this.transactions = transactions;
            /**
            @internal
            */
            this.flags = 0;
            this.startState = view.state;
            this.changes = ChangeSet.empty(this.startState.doc.length);
            for (let tr of transactions)
                this.changes = this.changes.compose(tr.changes);
            let changedRanges = [];
            this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
            this.changedRanges = changedRanges;
            let focus = view.hasFocus;
            if (focus != view.inputState.notifiedFocused) {
                view.inputState.notifiedFocused = focus;
                this.flags |= 1 /* Focus */;
            }
        }
        /**
        @internal
        */
        static create(view, state, transactions) {
            return new ViewUpdate(view, state, transactions);
        }
        /**
        Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
        [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
        update.
        */
        get viewportChanged() {
            return (this.flags & 4 /* Viewport */) > 0;
        }
        /**
        Indicates whether the height of a block element in the editor
        changed in this update.
        */
        get heightChanged() {
            return (this.flags & 2 /* Height */) > 0;
        }
        /**
        Returns true when the document was modified or the size of the
        editor, or elements within the editor, changed.
        */
        get geometryChanged() {
            return this.docChanged || (this.flags & (8 /* Geometry */ | 2 /* Height */)) > 0;
        }
        /**
        True when this update indicates a focus change.
        */
        get focusChanged() {
            return (this.flags & 1 /* Focus */) > 0;
        }
        /**
        Whether the document changed in this update.
        */
        get docChanged() {
            return !this.changes.empty;
        }
        /**
        Whether the selection was explicitly set in this update.
        */
        get selectionSet() {
            return this.transactions.some(tr => tr.selection);
        }
        /**
        @internal
        */
        get empty() { return this.flags == 0 && this.transactions.length == 0; }
    }

    /**
    Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    */
    var Direction = /*@__PURE__*/(function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)
        /**
        Left-to-right.
        */
        Direction[Direction["LTR"] = 0] = "LTR";
        /**
        Right-to-left.
        */
        Direction[Direction["RTL"] = 1] = "RTL";
    return Direction})(Direction || (Direction = {}));
    const LTR = Direction.LTR, RTL = Direction.RTL;
    // Decode a string with each type encoded as log2(type)
    function dec(str) {
        let result = [];
        for (let i = 0; i < str.length; i++)
            result.push(1 << +str[i]);
        return result;
    }
    // Character types for codepoints 0 to 0xf8
    const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    // Character types for codepoints 0x600 to 0x6f9
    const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
    // There's a lot more in
    // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
    // which are left out to keep code size down.
    for (let p of ["()", "[]", "{}"]) {
        let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
        Brackets[l] = r;
        Brackets[r] = -l;
    }
    function charType(ch) {
        return ch <= 0xf7 ? LowTypes[ch] :
            0x590 <= ch && ch <= 0x5f4 ? 2 /* R */ :
                0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                    0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */ :
                        0x2000 <= ch && ch <= 0x200b ? 256 /* NI */ :
                            ch == 0x200c ? 256 /* NI */ : 1 /* L */;
    }
    const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
    /**
    Represents a contiguous range of text that has a single direction
    (as in left-to-right or right-to-left).
    */
    class BidiSpan {
        /**
        @internal
        */
        constructor(
        /**
        The start of the span (relative to the start of the line).
        */
        from, 
        /**
        The end of the span.
        */
        to, 
        /**
        The ["bidi
        level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
        of the span (in this context, 0 means
        left-to-right, 1 means right-to-left, 2 means left-to-right
        number inside right-to-left text).
        */
        level) {
            this.from = from;
            this.to = to;
            this.level = level;
        }
        /**
        The direction of this span.
        */
        get dir() { return this.level % 2 ? RTL : LTR; }
        /**
        @internal
        */
        side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
        /**
        @internal
        */
        static find(order, index, level, assoc) {
            let maybe = -1;
            for (let i = 0; i < order.length; i++) {
                let span = order[i];
                if (span.from <= index && span.to >= index) {
                    if (span.level == level)
                        return i;
                    // When multiple spans match, if assoc != 0, take the one that
                    // covers that side, otherwise take the one with the minimum
                    // level.
                    if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                        maybe = i;
                }
            }
            if (maybe < 0)
                throw new RangeError("Index out of range");
            return maybe;
        }
    }
    // Reused array of character types
    const types = [];
    function computeOrder(line, direction) {
        let len = line.length, outerType = direction == LTR ? 1 /* L */ : 2 /* R */, oppositeType = direction == LTR ? 2 /* R */ : 1 /* L */;
        if (!line || outerType == 1 /* L */ && !BidiRE.test(line))
            return trivialOrder(len);
        // W1. Examine each non-spacing mark (NSM) in the level run, and
        // change the type of the NSM to the type of the previous
        // character. If the NSM is at the start of the level run, it will
        // get the type of sor.
        // W2. Search backwards from each instance of a European number
        // until the first strong type (R, L, AL, or sor) is found. If an
        // AL is found, change the type of the European number to Arabic
        // number.
        // W3. Change all ALs to R.
        // (Left after this: L, R, EN, AN, ET, CS, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = charType(line.charCodeAt(i));
            if (type == 512 /* NSM */)
                type = prev;
            else if (type == 8 /* EN */ && prevStrong == 4 /* AL */)
                type = 16 /* AN */;
            types[i] = type == 4 /* AL */ ? 2 /* R */ : type;
            if (type & 7 /* Strong */)
                prevStrong = type;
            prev = type;
        }
        // W5. A sequence of European terminators adjacent to European
        // numbers changes to all European numbers.
        // W6. Otherwise, separators and terminators change to Other
        // Neutral.
        // W7. Search backwards from each instance of a European number
        // until the first strong type (R, L, or sor) is found. If an L is
        // found, then change the type of the European number to L.
        // (Left after this: L, R, EN+AN, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = types[i];
            if (type == 128 /* CS */) {
                if (i < len - 1 && prev == types[i + 1] && (prev & 24 /* Num */))
                    type = types[i] = prev;
                else
                    types[i] = 256 /* NI */;
            }
            else if (type == 64 /* ET */) {
                let end = i + 1;
                while (end < len && types[end] == 64 /* ET */)
                    end++;
                let replace = (i && prev == 8 /* EN */) || (end < len && types[end] == 8 /* EN */) ? (prevStrong == 1 /* L */ ? 1 /* L */ : 8 /* EN */) : 256 /* NI */;
                for (let j = i; j < end; j++)
                    types[j] = replace;
                i = end - 1;
            }
            else if (type == 8 /* EN */ && prevStrong == 1 /* L */) {
                types[i] = 1 /* L */;
            }
            prev = type;
            if (type & 7 /* Strong */)
                prevStrong = type;
        }
        // N0. Process bracket pairs in an isolating run sequence
        // sequentially in the logical order of the text positions of the
        // opening paired brackets using the logic given below. Within this
        // scope, bidirectional types EN and AN are treated as R.
        for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {
            // Keeps [startIndex, type, strongSeen] triples for each open
            // bracket on BracketStack.
            if (br = Brackets[ch = line.charCodeAt(i)]) {
                if (br < 0) { // Closing bracket
                    for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                        if (BracketStack[sJ + 1] == -br) {
                            let flags = BracketStack[sJ + 2];
                            let type = (flags & 2 /* EmbedInside */) ? outerType :
                                !(flags & 4 /* OppositeInside */) ? 0 :
                                    (flags & 1 /* OppositeBefore */) ? oppositeType : outerType;
                            if (type)
                                types[i] = types[BracketStack[sJ]] = type;
                            sI = sJ;
                            break;
                        }
                    }
                }
                else if (BracketStack.length == 189 /* MaxDepth */) {
                    break;
                }
                else {
                    BracketStack[sI++] = i;
                    BracketStack[sI++] = ch;
                    BracketStack[sI++] = context;
                }
            }
            else if ((type = types[i]) == 2 /* R */ || type == 1 /* L */) {
                let embed = type == outerType;
                context = embed ? 0 : 1 /* OppositeBefore */;
                for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                    let cur = BracketStack[sJ + 2];
                    if (cur & 2 /* EmbedInside */)
                        break;
                    if (embed) {
                        BracketStack[sJ + 2] |= 2 /* EmbedInside */;
                    }
                    else {
                        if (cur & 4 /* OppositeInside */)
                            break;
                        BracketStack[sJ + 2] |= 4 /* OppositeInside */;
                    }
                }
            }
        }
        // N1. A sequence of neutrals takes the direction of the
        // surrounding strong text if the text on both sides has the same
        // direction. European and Arabic numbers act as if they were R in
        // terms of their influence on neutrals. Start-of-level-run (sor)
        // and end-of-level-run (eor) are used at level run boundaries.
        // N2. Any remaining neutrals take the embedding direction.
        // (Left after this: L, R, EN+AN)
        for (let i = 0; i < len; i++) {
            if (types[i] == 256 /* NI */) {
                let end = i + 1;
                while (end < len && types[end] == 256 /* NI */)
                    end++;
                let beforeL = (i ? types[i - 1] : outerType) == 1 /* L */;
                let afterL = (end < len ? types[end] : outerType) == 1 /* L */;
                let replace = beforeL == afterL ? (beforeL ? 1 /* L */ : 2 /* R */) : outerType;
                for (let j = i; j < end; j++)
                    types[j] = replace;
                i = end - 1;
            }
        }
        // Here we depart from the documented algorithm, in order to avoid
        // building up an actual levels array. Since there are only three
        // levels (0, 1, 2) in an implementation that doesn't take
        // explicit embedding into account, we can build up the order on
        // the fly, without following the level-based algorithm.
        let order = [];
        if (outerType == 1 /* L */) {
            for (let i = 0; i < len;) {
                let start = i, rtl = types[i++] != 1 /* L */;
                while (i < len && rtl == (types[i] != 1 /* L */))
                    i++;
                if (rtl) {
                    for (let j = i; j > start;) {
                        let end = j, l = types[--j] != 2 /* R */;
                        while (j > start && l == (types[j - 1] != 2 /* R */))
                            j--;
                        order.push(new BidiSpan(j, end, l ? 2 : 1));
                    }
                }
                else {
                    order.push(new BidiSpan(start, i, 0));
                }
            }
        }
        else {
            for (let i = 0; i < len;) {
                let start = i, rtl = types[i++] == 2 /* R */;
                while (i < len && rtl == (types[i] == 2 /* R */))
                    i++;
                order.push(new BidiSpan(start, i, rtl ? 1 : 2));
            }
        }
        return order;
    }
    function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
    }
    let movedOver = "";
    function moveVisually(line, order, dir, start, forward) {
        var _a;
        let startIndex = start.head - line.from, spanI = -1;
        if (startIndex == 0) {
            if (!forward || !line.length)
                return null;
            if (order[0].level != dir) {
                startIndex = order[0].side(false, dir);
                spanI = 0;
            }
        }
        else if (startIndex == line.length) {
            if (forward)
                return null;
            let last = order[order.length - 1];
            if (last.level != dir) {
                startIndex = last.side(true, dir);
                spanI = order.length - 1;
            }
        }
        if (spanI < 0)
            spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        let span = order[spanI];
        // End of span. (But not end of line--that was checked for above.)
        if (startIndex == span.side(forward, dir)) {
            span = order[spanI += forward ? 1 : -1];
            startIndex = span.side(!forward, dir);
        }
        let indexForward = forward == (span.dir == dir);
        let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
        movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        if (nextIndex != span.side(forward, dir))
            return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
        let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (!nextSpan && span.level != dir)
            return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
        if (nextSpan && nextSpan.level < span.level)
            return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
        return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
    }

    const LineBreakPlaceholder = "\uffff";
    class DOMReader {
        constructor(points, state) {
            this.points = points;
            this.text = "";
            this.lineSeparator = state.facet(EditorState.lineSeparator);
        }
        append(text) {
            this.text += text;
        }
        lineBreak() {
            this.text += LineBreakPlaceholder;
        }
        readRange(start, end) {
            if (!start)
                return this;
            let parent = start.parentNode;
            for (let cur = start;;) {
                this.findPointBefore(parent, cur);
                this.readNode(cur);
                let next = cur.nextSibling;
                if (next == end)
                    break;
                let view = ContentView.get(cur), nextView = ContentView.get(next);
                if (view && nextView ? view.breakAfter :
                    (view ? view.breakAfter : isBlockElement(cur)) ||
                        (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore)))
                    this.lineBreak();
                cur = next;
            }
            this.findPointBefore(parent, end);
            return this;
        }
        readTextNode(node) {
            let text = node.nodeValue;
            for (let point of this.points)
                if (point.node == node)
                    point.pos = this.text.length + Math.min(point.offset, text.length);
            for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
                let nextBreak = -1, breakSize = 1, m;
                if (this.lineSeparator) {
                    nextBreak = text.indexOf(this.lineSeparator, off);
                    breakSize = this.lineSeparator.length;
                }
                else if (m = re.exec(text)) {
                    nextBreak = m.index;
                    breakSize = m[0].length;
                }
                this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
                if (nextBreak < 0)
                    break;
                this.lineBreak();
                if (breakSize > 1)
                    for (let point of this.points)
                        if (point.node == node && point.pos > this.text.length)
                            point.pos -= breakSize - 1;
                off = nextBreak + breakSize;
            }
        }
        readNode(node) {
            if (node.cmIgnore)
                return;
            let view = ContentView.get(node);
            let fromView = view && view.overrideDOMText;
            if (fromView != null) {
                this.findPointInside(node, fromView.length);
                for (let i = fromView.iter(); !i.next().done;) {
                    if (i.lineBreak)
                        this.lineBreak();
                    else
                        this.append(i.value);
                }
            }
            else if (node.nodeType == 3) {
                this.readTextNode(node);
            }
            else if (node.nodeName == "BR") {
                if (node.nextSibling)
                    this.lineBreak();
            }
            else if (node.nodeType == 1) {
                this.readRange(node.firstChild, null);
            }
        }
        findPointBefore(node, next) {
            for (let point of this.points)
                if (point.node == node && node.childNodes[point.offset] == next)
                    point.pos = this.text.length;
        }
        findPointInside(node, maxLen) {
            for (let point of this.points)
                if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                    point.pos = this.text.length + Math.min(maxLen, point.offset);
        }
    }
    function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
    }
    class DOMPoint {
        constructor(node, offset) {
            this.node = node;
            this.offset = offset;
            this.pos = -1;
        }
    }

    class DocView extends ContentView {
        constructor(view) {
            super();
            this.view = view;
            this.compositionDeco = Decoration.none;
            this.decorations = [];
            this.dynamicDecorationMap = [];
            // Track a minimum width for the editor. When measuring sizes in
            // measureVisibleLineHeights, this is updated to point at the width
            // of a given element and its extent in the document. When a change
            // happens in that range, these are reset. That way, once we've seen
            // a line/element of a given length, we keep the editor wide enough
            // to fit at least that element, until it is changed, at which point
            // we forget it again.
            this.minWidth = 0;
            this.minWidthFrom = 0;
            this.minWidthTo = 0;
            // Track whether the DOM selection was set in a lossy way, so that
            // we don't mess it up when reading it back it
            this.impreciseAnchor = null;
            this.impreciseHead = null;
            this.forceSelection = false;
            // Used by the resize observer to ignore resizes that we caused
            // ourselves
            this.lastUpdate = Date.now();
            this.setDOM(view.contentDOM);
            this.children = [new LineView];
            this.children[0].setParent(this);
            this.updateDeco();
            this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);
        }
        get root() { return this.view.root; }
        get editorView() { return this.view; }
        get length() { return this.view.state.doc.length; }
        // Update the document view to a given state. scrollIntoView can be
        // used as a hint to compute a new viewport that includes that
        // position, if we know the editor is going to scroll that position
        // into view.
        update(update) {
            let changedRanges = update.changedRanges;
            if (this.minWidth > 0 && changedRanges.length) {
                if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                    this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
                }
                else {
                    this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                    this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
                }
            }
            if (this.view.inputState.composing < 0)
                this.compositionDeco = Decoration.none;
            else if (update.transactions.length || this.dirty)
                this.compositionDeco = computeCompositionDeco(this.view, update.changes);
            // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54
            if ((browser.ie || browser.chrome) && !this.compositionDeco.size && update &&
                update.state.doc.lines != update.startState.doc.lines)
                this.forceSelection = true;
            let prevDeco = this.decorations, deco = this.updateDeco();
            let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
            changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
            if (this.dirty == 0 /* Not */ && changedRanges.length == 0) {
                return false;
            }
            else {
                this.updateInner(changedRanges, update.startState.doc.length);
                if (update.transactions.length)
                    this.lastUpdate = Date.now();
                return true;
            }
        }
        // Used by update and the constructor do perform the actual DOM
        // update
        updateInner(changes, oldLength) {
            this.view.viewState.mustMeasureContent = true;
            this.updateChildren(changes, oldLength);
            let { observer } = this.view;
            observer.ignore(() => {
                // Lock the height during redrawing, since Chrome sometimes
                // messes with the scroll position during DOM mutation (though
                // no relayout is triggered and I cannot imagine how it can
                // recompute the scroll position without a layout)
                this.dom.style.height = this.view.viewState.contentHeight + "px";
                this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
                // Chrome will sometimes, when DOM mutations occur directly
                // around the selection, get confused and report a different
                // selection from the one it displays (issue #218). This tries
                // to detect that situation.
                let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
                this.sync(track);
                this.dirty = 0 /* Not */;
                if (track && (track.written || observer.selectionRange.focusNode != track.node))
                    this.forceSelection = true;
                this.dom.style.height = "";
            });
            let gaps = [];
            if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
                for (let child of this.children)
                    if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                        gaps.push(child.dom);
            observer.updateGaps(gaps);
        }
        updateChildren(changes, oldLength) {
            let cursor = this.childCursor(oldLength);
            for (let i = changes.length - 1;; i--) {
                let next = i >= 0 ? changes[i] : null;
                if (!next)
                    break;
                let { fromA, toA, fromB, toB } = next;
                let { content, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);
                let { i: toI, off: toOff } = cursor.findPos(toA, 1);
                let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
                replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
        }
        // Sync the DOM selection to this.state.selection
        updateSelection(mustRead = false, fromPointer = false) {
            if (mustRead)
                this.view.observer.readSelectionRange();
            if (!(fromPointer || this.mayControlSelection()) ||
                browser.ios && this.view.inputState.rapidCompositionStart)
                return;
            let force = this.forceSelection;
            this.forceSelection = false;
            let main = this.view.state.selection.main;
            // FIXME need to handle the case where the selection falls inside a block range
            let anchor = this.domAtPos(main.anchor);
            let head = main.empty ? anchor : this.domAtPos(main.head);
            // Always reset on Firefox when next to an uneditable node to
            // avoid invisible cursor bugs (#111)
            if (browser.gecko && main.empty && betweenUneditable(anchor)) {
                let dummy = document.createTextNode("");
                this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
                anchor = head = new DOMPos(dummy, 0);
                force = true;
            }
            let domSel = this.view.observer.selectionRange;
            // If the selection is already here, or in an equivalent position, don't touch it
            if (force || !domSel.focusNode ||
                !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
                !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
                this.view.observer.ignore(() => {
                    // Chrome Android will hide the virtual keyboard when tapping
                    // inside an uneditable node, and not bring it back when we
                    // move the cursor to its proper position. This tries to
                    // restore the keyboard by cycling focus.
                    if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
                        inUneditable(domSel.focusNode, this.dom)) {
                        this.dom.blur();
                        this.dom.focus({ preventScroll: true });
                    }
                    let rawSel = getSelection(this.root);
                    if (main.empty) {
                        // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                        if (browser.gecko) {
                            let nextTo = nextToUneditable(anchor.node, anchor.offset);
                            if (nextTo && nextTo != (1 /* Before */ | 2 /* After */)) {
                                let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* Before */ ? 1 : -1);
                                if (text)
                                    anchor = new DOMPos(text, nextTo == 1 /* Before */ ? 0 : text.nodeValue.length);
                            }
                        }
                        rawSel.collapse(anchor.node, anchor.offset);
                        if (main.bidiLevel != null && domSel.cursorBidiLevel != null)
                            domSel.cursorBidiLevel = main.bidiLevel;
                    }
                    else if (rawSel.extend) {
                        // Selection.extend can be used to create an 'inverted' selection
                        // (one where the focus is before the anchor), but not all
                        // browsers support it yet.
                        rawSel.collapse(anchor.node, anchor.offset);
                        rawSel.extend(head.node, head.offset);
                    }
                    else {
                        // Primitive (IE) way
                        let range = document.createRange();
                        if (main.anchor > main.head)
                            [anchor, head] = [head, anchor];
                        range.setEnd(head.node, head.offset);
                        range.setStart(anchor.node, anchor.offset);
                        rawSel.removeAllRanges();
                        rawSel.addRange(range);
                    }
                });
                this.view.observer.setSelectionRange(anchor, head);
            }
            this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
        }
        enforceCursorAssoc() {
            if (this.compositionDeco.size)
                return;
            let cursor = this.view.state.selection.main;
            let sel = getSelection(this.root);
            if (!cursor.empty || !cursor.assoc || !sel.modify)
                return;
            let line = LineView.find(this, cursor.head);
            if (!line)
                return;
            let lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length)
                return;
            let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top)
                return;
            let dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
        }
        mayControlSelection() {
            return this.view.state.facet(editable) ? this.root.activeElement == this.dom
                : hasSelection(this.dom, this.view.observer.selectionRange);
        }
        nearest(dom) {
            for (let cur = dom; cur;) {
                let domView = ContentView.get(cur);
                if (domView && domView.rootView == this)
                    return domView;
                cur = cur.parentNode;
            }
            return null;
        }
        posFromDOM(node, offset) {
            let view = this.nearest(node);
            if (!view)
                throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
        }
        domAtPos(pos) {
            let { i, off } = this.childCursor().findPos(pos, -1);
            for (; i < this.children.length - 1;) {
                let child = this.children[i];
                if (off < child.length || child instanceof LineView)
                    break;
                i++;
                off = 0;
            }
            return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
            for (let off = this.length, i = this.children.length - 1;; i--) {
                let child = this.children[i], start = off - child.breakAfter - child.length;
                if (pos > start ||
                    (pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter &&
                        (!i || side == 2 || this.children[i - 1].breakAfter ||
                            (this.children[i - 1].type == BlockType.WidgetBefore && side > -2))))
                    return child.coordsAt(pos - start, side);
                off = start;
            }
        }
        measureVisibleLineHeights(viewport) {
            let result = [], { from, to } = viewport;
            let contentWidth = this.view.contentDOM.clientWidth;
            let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
            let widest = -1, ltr = this.view.textDirection == Direction.LTR;
            for (let pos = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (end > to)
                    break;
                if (pos >= from) {
                    let childRect = child.dom.getBoundingClientRect();
                    result.push(childRect.height);
                    if (isWider) {
                        let last = child.dom.lastChild;
                        let rects = last ? clientRectsFor(last) : [];
                        if (rects.length) {
                            let rect = rects[rects.length - 1];
                            let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                            if (width > widest) {
                                widest = width;
                                this.minWidth = contentWidth;
                                this.minWidthFrom = pos;
                                this.minWidthTo = end;
                            }
                        }
                    }
                }
                pos = end + child.breakAfter;
            }
            return result;
        }
        textDirectionAt(pos) {
            let { i } = this.childPos(pos, 1);
            return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
        }
        measureTextSize() {
            for (let child of this.children) {
                if (child instanceof LineView) {
                    let measure = child.measureTextSize();
                    if (measure)
                        return measure;
                }
            }
            // If no workable line exists, force a layout of a measurable element
            let dummy = document.createElement("div"), lineHeight, charWidth;
            dummy.className = "cm-line";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(() => {
                this.dom.appendChild(dummy);
                let rect = clientRectsFor(dummy.firstChild)[0];
                lineHeight = dummy.getBoundingClientRect().height;
                charWidth = rect ? rect.width / 27 : 7;
                dummy.remove();
            });
            return { lineHeight, charWidth };
        }
        childCursor(pos = this.length) {
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            let i = this.children.length;
            if (i)
                pos -= this.children[--i].length;
            return new ChildCursor(this.children, pos, i);
        }
        computeBlockGapDeco() {
            let deco = [], vs = this.view.viewState;
            for (let pos = 0, i = 0;; i++) {
                let next = i == vs.viewports.length ? null : vs.viewports[i];
                let end = next ? next.from - 1 : this.length;
                if (end > pos) {
                    let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
                    deco.push(Decoration.replace({
                        widget: new BlockGapWidget(height),
                        block: true,
                        inclusive: true,
                        isBlockGap: true,
                    }).range(pos, end));
                }
                if (!next)
                    break;
                pos = next.to + 1;
            }
            return Decoration.set(deco);
        }
        updateDeco() {
            let allDeco = this.view.state.facet(decorations).map((d, i) => {
                let dynamic = this.dynamicDecorationMap[i] = typeof d == "function";
                return dynamic ? d(this.view) : d;
            });
            for (let i = allDeco.length; i < allDeco.length + 3; i++)
                this.dynamicDecorationMap[i] = false;
            return this.decorations = [
                ...allDeco,
                this.compositionDeco,
                this.computeBlockGapDeco(),
                this.view.viewState.lineGapDeco
            ];
        }
        scrollIntoView(target) {
            let { range } = target;
            let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
            if (!rect)
                return;
            if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
                rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                    right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
            let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
            for (let margins of this.view.state.facet(scrollMargins).map(f => f(this.view)))
                if (margins) {
                    let { left, right, top, bottom } = margins;
                    if (left != null)
                        mLeft = Math.max(mLeft, left);
                    if (right != null)
                        mRight = Math.max(mRight, right);
                    if (top != null)
                        mTop = Math.max(mTop, top);
                    if (bottom != null)
                        mBottom = Math.max(mBottom, bottom);
                }
            let targetRect = {
                left: rect.left - mLeft, top: rect.top - mTop,
                right: rect.right + mRight, bottom: rect.bottom + mBottom
            };
            scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
        }
    }
    function betweenUneditable(pos) {
        return pos.node.nodeType == 1 && pos.node.firstChild &&
            (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
            (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
    }
    class BlockGapWidget extends WidgetType {
        constructor(height) {
            super();
            this.height = height;
        }
        toDOM() {
            let elt = document.createElement("div");
            this.updateDOM(elt);
            return elt;
        }
        eq(other) { return other.height == this.height; }
        updateDOM(elt) {
            elt.style.height = this.height + "px";
            return true;
        }
        get estimatedHeight() { return this.height; }
    }
    function compositionSurroundingNode(view) {
        let sel = view.observer.selectionRange;
        let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
        if (!textNode)
            return null;
        let cView = view.docView.nearest(textNode);
        if (!cView)
            return null;
        if (cView instanceof LineView) {
            let topNode = textNode;
            while (topNode.parentNode != cView.dom)
                topNode = topNode.parentNode;
            let prev = topNode.previousSibling;
            while (prev && !ContentView.get(prev))
                prev = prev.previousSibling;
            let pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
            return { from: pos, to: pos, node: topNode, text: textNode };
        }
        else {
            for (;;) {
                let { parent } = cView;
                if (!parent)
                    return null;
                if (parent instanceof LineView)
                    break;
                cView = parent;
            }
            let from = cView.posAtStart;
            return { from, to: from + cView.length, node: cView.dom, text: textNode };
        }
    }
    function computeCompositionDeco(view, changes) {
        let surrounding = compositionSurroundingNode(view);
        if (!surrounding)
            return Decoration.none;
        let { from, to, node, text: textNode } = surrounding;
        let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
        let { state } = view, text = node.nodeType == 3 ? node.nodeValue :
            new DOMReader([], state).readRange(node.firstChild, null).text;
        if (newTo - newFrom < text.length) {
            if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length), LineBreakPlaceholder) == text)
                newTo = newFrom + text.length;
            else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo, LineBreakPlaceholder) == text)
                newFrom = newTo - text.length;
            else
                return Decoration.none;
        }
        else if (state.doc.sliceString(newFrom, newTo, LineBreakPlaceholder) != text) {
            return Decoration.none;
        }
        let topView = ContentView.get(node);
        if (topView instanceof CompositionView)
            topView = topView.widget.topView;
        else if (topView)
            topView.parent = null;
        return Decoration.set(Decoration.replace({ widget: new CompositionWidget(node, textNode, topView), inclusive: true })
            .range(newFrom, newTo));
    }
    class CompositionWidget extends WidgetType {
        constructor(top, text, topView) {
            super();
            this.top = top;
            this.text = text;
            this.topView = topView;
        }
        eq(other) { return this.top == other.top && this.text == other.text; }
        toDOM() { return this.top; }
        ignoreEvent() { return false; }
        get customView() { return CompositionView; }
    }
    function nearbyTextNode(node, offset, side) {
        for (;;) {
            if (node.nodeType == 3)
                return node;
            if (node.nodeType == 1 && offset > 0 && side <= 0) {
                node = node.childNodes[offset - 1];
                offset = maxOffset(node);
            }
            else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
                node = node.childNodes[offset];
                offset = 0;
            }
            else {
                return null;
            }
        }
    }
    function nextToUneditable(node, offset) {
        if (node.nodeType != 1)
            return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* Before */ : 0) |
            (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* After */ : 0);
    }
    class DecorationComparator$1 {
        constructor() {
            this.changes = [];
        }
        compareRange(from, to) { addRange(from, to, this.changes); }
        comparePoint(from, to) { addRange(from, to, this.changes); }
    }
    function findChangedDeco(a, b, diff) {
        let comp = new DecorationComparator$1;
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }
    function inUneditable(node, inside) {
        for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
            if (cur.nodeType == 1 && cur.contentEditable == 'false') {
                return true;
            }
        }
        return false;
    }

    function groupAt(state, pos, bias = 1) {
        let categorize = state.charCategorizer(pos);
        let line = state.doc.lineAt(pos), linePos = pos - line.from;
        if (line.length == 0)
            return EditorSelection.cursor(pos);
        if (linePos == 0)
            bias = 1;
        else if (linePos == line.length)
            bias = -1;
        let from = linePos, to = linePos;
        if (bias < 0)
            from = findClusterBreak(line.text, linePos, false);
        else
            to = findClusterBreak(line.text, linePos);
        let cat = categorize(line.text.slice(from, to));
        while (from > 0) {
            let prev = findClusterBreak(line.text, from, false);
            if (categorize(line.text.slice(prev, from)) != cat)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = findClusterBreak(line.text, to);
            if (categorize(line.text.slice(to, next)) != cat)
                break;
            to = next;
        }
        return EditorSelection.range(from + line.from, to + line.from);
    }
    // Search the DOM for the {node, offset} position closest to the given
    // coordinates. Very inefficient and crude, but can usually be avoided
    // by calling caret(Position|Range)FromPoint instead.
    function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
    }
    function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
    }
    function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
    }
    function upTop(rect, top) {
        return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
    }
    function upBot(rect, bottom) {
        return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
    }
    function domPosAtCoords(parent, x, y) {
        let closest, closestRect, closestX, closestY;
        let above, below, aboveRect, belowRect;
        for (let child = parent.firstChild; child; child = child.nextSibling) {
            let rects = clientRectsFor(child);
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (closestRect && yOverlap(closestRect, rect))
                    rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
                let dx = getdx(x, rect), dy = getdy(y, rect);
                if (dx == 0 && dy == 0)
                    return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
                if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                    closest = child;
                    closestRect = rect;
                    closestX = dx;
                    closestY = dy;
                }
                if (dx == 0) {
                    if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                        above = child;
                        aboveRect = rect;
                    }
                    else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                        below = child;
                        belowRect = rect;
                    }
                }
                else if (aboveRect && yOverlap(aboveRect, rect)) {
                    aboveRect = upBot(aboveRect, rect.bottom);
                }
                else if (belowRect && yOverlap(belowRect, rect)) {
                    belowRect = upTop(belowRect, rect.top);
                }
            }
        }
        if (aboveRect && aboveRect.bottom >= y) {
            closest = above;
            closestRect = aboveRect;
        }
        else if (belowRect && belowRect.top <= y) {
            closest = below;
            closestRect = belowRect;
        }
        if (!closest)
            return { node: parent, offset: 0 };
        let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3)
            return domPosInText(closest, clipX, y);
        if (!closestX && closest.contentEditable == "true")
            return domPosAtCoords(closest, clipX, y);
        let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
            (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return { node: parent, offset };
    }
    function domPosInText(node, x, y) {
        let len = node.nodeValue.length;
        let closestOffset = -1, closestDY = 1e9, generalSide = 0;
        for (let i = 0; i < len; i++) {
            let rects = textRange(node, i, i + 1).getClientRects();
            for (let j = 0; j < rects.length; j++) {
                let rect = rects[j];
                if (rect.top == rect.bottom)
                    continue;
                if (!generalSide)
                    generalSide = x - rect.left;
                let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
                if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                    let right = x >= (rect.left + rect.right) / 2, after = right;
                    if (browser.chrome || browser.gecko) {
                        // Check for RTL on browsers that support getting client
                        // rects for empty ranges.
                        let rectBefore = textRange(node, i).getBoundingClientRect();
                        if (rectBefore.left == rect.right)
                            after = !right;
                    }
                    if (dy <= 0)
                        return { node, offset: i + (after ? 1 : 0) };
                    closestOffset = i + (after ? 1 : 0);
                    closestDY = dy;
                }
            }
        }
        return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
    }
    function posAtCoords(view, { x, y }, precise, bias = -1) {
        var _a;
        let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
        let block, { docHeight } = view.viewState;
        let yOffset = y - docTop;
        if (yOffset < 0)
            return 0;
        if (yOffset > docHeight)
            return view.state.doc.length;
        // Scan for a text block near the queried y position
        for (let halfLine = view.defaultLineHeight / 2, bounced = false;;) {
            block = view.elementAtHeight(yOffset);
            if (block.type == BlockType.Text)
                break;
            for (;;) {
                // Move the y position out of this block
                yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
                if (yOffset >= 0 && yOffset <= docHeight)
                    break;
                // If the document consists entirely of replaced widgets, we
                // won't find a text block, so return 0
                if (bounced)
                    return precise ? null : 0;
                bounced = true;
                bias = -bias;
            }
        }
        y = docTop + yOffset;
        let lineStart = block.from;
        // If this is outside of the rendered viewport, we can't determine a position
        if (lineStart < view.viewport.from)
            return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        if (lineStart > view.viewport.to)
            return view.viewport.to == view.state.doc.length ? view.state.doc.length :
                precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
        let doc = view.dom.ownerDocument;
        let root = view.root.elementFromPoint ? view.root : doc;
        let element = root.elementFromPoint(x, y);
        if (element && !view.contentDOM.contains(element))
            element = null;
        // If the element is unexpected, clip x at the sides of the content area and try again
        if (!element) {
            x = Math.max(content.left + 1, Math.min(content.right - 1, x));
            element = root.elementFromPoint(x, y);
            if (element && !view.contentDOM.contains(element))
                element = null;
        }
        // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut
        let node, offset = -1;
        if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
            if (doc.caretPositionFromPoint) {
                let pos = doc.caretPositionFromPoint(x, y);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            else if (doc.caretRangeFromPoint) {
                let range = doc.caretRangeFromPoint(x, y);
                if (range) {
                    ({ startContainer: node, startOffset: offset } = range);
                    if (browser.safari && isSuspiciousCaretResult(node, offset, x))
                        node = undefined;
                }
            }
        }
        // No luck, do our own (potentially expensive) search
        if (!node || !view.docView.dom.contains(node)) {
            let line = LineView.find(view.docView, lineStart);
            if (!line)
                return yOffset > block.top + block.height / 2 ? block.to : block.from;
            ({ node, offset } = domPosAtCoords(line.dom, x, y));
        }
        return view.docView.posFromDOM(node, offset);
    }
    function posAtCoordsImprecise(view, contentRect, block, x, y) {
        let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
        if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
            let line = Math.floor((y - block.top) / view.defaultLineHeight);
            into += line * view.viewState.heightOracle.lineLength;
        }
        let content = view.state.sliceDoc(block.from, block.to);
        return block.from + findColumn(content, into, view.state.tabSize);
    }
    // In case of a high line height, Safari's caretRangeFromPoint treats
    // the space between lines as belonging to the last character of the
    // line before. This is used to detect such a result so that it can be
    // ignored (issue #401).
    function isSuspiciousCaretResult(node, offset, x) {
        let len;
        if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
            return false;
        for (let next = node.nextSibling; next; next = next.nextSibling)
            if (next.nodeType != 1 || next.nodeName != "BR")
                return false;
        return textRange(node, len - 1, len).getBoundingClientRect().left > x;
    }
    function moveToLineBoundary(view, start, forward, includeWrap) {
        let line = view.state.doc.lineAt(start.head);
        let coords = !includeWrap || !view.lineWrapping ? null
            : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
        if (coords) {
            let editorRect = view.dom.getBoundingClientRect();
            let direction = view.textDirectionAt(line.from);
            let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
                y: (coords.top + coords.bottom) / 2 });
            if (pos != null)
                return EditorSelection.cursor(pos, forward ? -1 : 1);
        }
        let lineView = LineView.find(view.docView, start.head);
        let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);
        return EditorSelection.cursor(end, forward ? -1 : 1);
    }
    function moveByChar(view, start, forward, by) {
        let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
        let direction = view.textDirectionAt(line.from);
        for (let cur = start, check = null;;) {
            let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
            if (!next) {
                if (line.number == (forward ? view.state.doc.lines : 1))
                    return cur;
                char = "\n";
                line = view.state.doc.line(line.number + (forward ? 1 : -1));
                spans = view.bidiSpans(line);
                next = EditorSelection.cursor(forward ? line.from : line.to);
            }
            if (!check) {
                if (!by)
                    return next;
                check = by(char);
            }
            else if (!check(char)) {
                return cur;
            }
            cur = next;
        }
    }
    function byGroup(view, pos, start) {
        let categorize = view.state.charCategorizer(pos);
        let cat = categorize(start);
        return (next) => {
            let nextCat = categorize(next);
            if (cat == CharCategory.Space)
                cat = nextCat;
            return cat == nextCat;
        };
    }
    function moveVertically(view, start, forward, distance) {
        let startPos = start.head, dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0))
            return EditorSelection.cursor(startPos, start.assoc);
        let goal = start.goalColumn, startY;
        let rect = view.contentDOM.getBoundingClientRect();
        let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;
        if (startCoords) {
            if (goal == null)
                goal = startCoords.left - rect.left;
            startY = dir < 0 ? startCoords.top : startCoords.bottom;
        }
        else {
            let line = view.viewState.lineBlockAt(startPos);
            if (goal == null)
                goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
            startY = (dir < 0 ? line.top : line.bottom) + docTop;
        }
        let resolvedGoal = rect.left + goal;
        let dist = distance !== null && distance !== void 0 ? distance : (view.defaultLineHeight >> 1);
        for (let extra = 0;; extra += 10) {
            let curY = startY + (dist + extra) * dir;
            let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
            if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))
                return EditorSelection.cursor(pos, start.assoc, undefined, goal);
        }
    }
    function skipAtoms(view, oldPos, pos) {
        let atoms = view.state.facet(atomicRanges).map(f => f(view));
        for (;;) {
            let moved = false;
            for (let set of atoms) {
                set.between(pos.from - 1, pos.from + 1, (from, to, value) => {
                    if (pos.from > from && pos.from < to) {
                        pos = oldPos.from > pos.from ? EditorSelection.cursor(from, 1) : EditorSelection.cursor(to, -1);
                        moved = true;
                    }
                });
            }
            if (!moved)
                return pos;
        }
    }

    // This will also be where dragging info and such goes
    class InputState {
        constructor(view) {
            this.lastKeyCode = 0;
            this.lastKeyTime = 0;
            this.chromeScrollHack = -1;
            // On iOS, some keys need to have their default behavior happen
            // (after which we retroactively handle them and reset the DOM) to
            // avoid messing up the virtual keyboard state.
            this.pendingIOSKey = undefined;
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.lastEscPress = 0;
            this.lastContextMenu = 0;
            this.scrollHandlers = [];
            this.registeredEvents = [];
            this.customHandlers = [];
            // -1 means not in a composition. Otherwise, this counts the number
            // of changes made during the composition. The count is used to
            // avoid treating the start state of the composition, before any
            // changes have been made, as part of the composition.
            this.composing = -1;
            // Tracks whether the next change should be marked as starting the
            // composition (null means no composition, true means next is the
            // first, false means first has already been marked for this
            // composition)
            this.compositionFirstChange = null;
            this.compositionEndedAt = 0;
            this.rapidCompositionStart = false;
            this.mouseSelection = null;
            for (let type in handlers) {
                let handler = handlers[type];
                view.contentDOM.addEventListener(type, (event) => {
                    if (!eventBelongsToEditor(view, event) || this.ignoreDuringComposition(event))
                        return;
                    if (type == "keydown" && this.keydown(view, event))
                        return;
                    if (this.mustFlushObserver(event))
                        view.observer.forceFlush();
                    if (this.runCustomHandlers(type, view, event))
                        event.preventDefault();
                    else
                        handler(view, event);
                });
                this.registeredEvents.push(type);
            }
            if (browser.chrome && browser.chrome_version >= 102) {
                // On Chrome 102, viewport updates somehow stop wheel-based
                // scrolling. Turning off pointer events during the scroll seems
                // to avoid the issue.
                view.scrollDOM.addEventListener("wheel", () => {
                    if (this.chromeScrollHack < 0)
                        view.contentDOM.style.pointerEvents = "none";
                    else
                        window.clearTimeout(this.chromeScrollHack);
                    this.chromeScrollHack = setTimeout(() => {
                        this.chromeScrollHack = -1;
                        view.contentDOM.style.pointerEvents = "";
                    }, 100);
                }, { passive: true });
            }
            this.notifiedFocused = view.hasFocus;
            // On Safari adding an input event handler somehow prevents an
            // issue where the composition vanishes when you press enter.
            if (browser.safari)
                view.contentDOM.addEventListener("input", () => null);
        }
        setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
        }
        ensureHandlers(view, plugins) {
            var _a;
            let handlers;
            this.customHandlers = [];
            for (let plugin of plugins)
                if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {
                    this.customHandlers.push({ plugin: plugin.value, handlers });
                    for (let type in handlers)
                        if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                            this.registeredEvents.push(type);
                            view.contentDOM.addEventListener(type, (event) => {
                                if (!eventBelongsToEditor(view, event))
                                    return;
                                if (this.runCustomHandlers(type, view, event))
                                    event.preventDefault();
                            });
                        }
                }
        }
        runCustomHandlers(type, view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers[type];
                if (handler) {
                    try {
                        if (handler.call(set.plugin, event, view) || event.defaultPrevented)
                            return true;
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                }
            }
            return false;
        }
        runScrollHandlers(view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers.scroll;
                if (handler) {
                    try {
                        handler.call(set.plugin, event, view);
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                }
            }
        }
        keydown(view, event) {
            // Must always run, even if a custom handler handled the event
            this.lastKeyCode = event.keyCode;
            this.lastKeyTime = Date.now();
            if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)
                return true;
            // Chrome for Android usually doesn't fire proper key events, but
            // occasionally does, usually surrounded by a bunch of complicated
            // composition changes. When an enter or backspace key event is
            // seen, hold off on handling DOM events for a bit, and then
            // dispatch it.
            if (browser.android && browser.chrome && !event.synthetic &&
                (event.keyCode == 13 || event.keyCode == 8)) {
                view.observer.delayAndroidKey(event.key, event.keyCode);
                return true;
            }
            // Prevent the default behavior of Enter on iOS makes the
            // virtual keyboard get stuck in the wrong (lowercase)
            // state. So we let it go through, and then, in
            // applyDOMChange, notify key handlers of it and reset to
            // the state they produce.
            let pending;
            if (browser.ios && (pending = PendingKeys.find(key => key.keyCode == event.keyCode)) &&
                !(event.ctrlKey || event.altKey || event.metaKey) && !event.synthetic) {
                this.pendingIOSKey = pending;
                setTimeout(() => this.flushIOSKey(view), 250);
                return true;
            }
            return false;
        }
        flushIOSKey(view) {
            let key = this.pendingIOSKey;
            if (!key)
                return false;
            this.pendingIOSKey = undefined;
            return dispatchKey(view.contentDOM, key.key, key.keyCode);
        }
        ignoreDuringComposition(event) {
            if (!/^key/.test(event.type))
                return false;
            if (this.composing > 0)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.
            if (browser.safari && Date.now() - this.compositionEndedAt < 100) {
                this.compositionEndedAt = 0;
                return true;
            }
            return false;
        }
        mustFlushObserver(event) {
            return (event.type == "keydown" && event.keyCode != 229) ||
                event.type == "compositionend" && !browser.ios;
        }
        startMouseSelection(mouseSelection) {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
            this.mouseSelection = mouseSelection;
        }
        update(update) {
            if (this.mouseSelection)
                this.mouseSelection.update(update);
            if (update.transactions.length)
                this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
        }
    }
    const PendingKeys = [
        { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
        { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
        { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
    ];
    // Key codes for modifier keys
    const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
    class MouseSelection {
        constructor(view, startEvent, style, mustSelect) {
            this.view = view;
            this.style = style;
            this.mustSelect = mustSelect;
            this.lastEvent = startEvent;
            let doc = view.contentDOM.ownerDocument;
            doc.addEventListener("mousemove", this.move = this.move.bind(this));
            doc.addEventListener("mouseup", this.up = this.up.bind(this));
            this.extend = startEvent.shiftKey;
            this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
            this.dragMove = dragMovesSelection(view, startEvent);
            this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
            // When clicking outside of the selection, immediately apply the
            // effect of starting the selection
            if (this.dragging === false) {
                startEvent.preventDefault();
                this.select(startEvent);
            }
        }
        move(event) {
            if (event.buttons == 0)
                return this.destroy();
            if (this.dragging !== false)
                return;
            this.select(this.lastEvent = event);
        }
        up(event) {
            if (this.dragging == null)
                this.select(this.lastEvent);
            if (!this.dragging)
                event.preventDefault();
            this.destroy();
        }
        destroy() {
            let doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.view.inputState.mouseSelection = null;
        }
        select(event) {
            let selection = this.style.get(event, this.extend, this.multiple);
            if (this.mustSelect || !selection.eq(this.view.state.selection) ||
                selection.main.assoc != this.view.state.selection.main.assoc)
                this.view.dispatch({
                    selection,
                    userEvent: "select.pointer",
                    scrollIntoView: true
                });
            this.mustSelect = false;
        }
        update(update) {
            if (update.docChanged && this.dragging)
                this.dragging = this.dragging.map(update.changes);
            if (this.style.update(update))
                setTimeout(() => this.select(this.lastEvent), 20);
        }
    }
    function addsSelectionRange(view, event) {
        let facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
    }
    function dragMovesSelection(view, event) {
        let facet = view.state.facet(dragMovesSelection$1);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
    }
    function isInPrimarySelection(view, event) {
        let { main } = view.state.selection;
        if (main.empty)
            return false;
        // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles
        let sel = getSelection(view.root);
        if (sel.rangeCount == 0)
            return true;
        let rects = sel.getRangeAt(0).getClientRects();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (rect.left <= event.clientX && rect.right >= event.clientX &&
                rect.top <= event.clientY && rect.bottom >= event.clientY)
                return true;
        }
        return false;
    }
    function eventBelongsToEditor(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
            if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
                return false;
        return true;
    }
    const handlers = /*@__PURE__*/Object.create(null);
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
        (browser.ios && browser.webkit_version < 604);
    function capturePaste(view) {
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            target.remove();
            doPaste(view, target.value);
        }, 50);
    }
    function doPaste(view, input) {
        let { state } = view, changes, i = 1, text = state.toText(input);
        let byLine = text.lines == state.selection.ranges.length;
        let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
        if (linewise) {
            let lastLine = -1;
            changes = state.changeByRange(range => {
                let line = state.doc.lineAt(range.from);
                if (line.from == lastLine)
                    return { range };
                lastLine = line.from;
                let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
                return { changes: { from: line.from, insert },
                    range: EditorSelection.cursor(range.from + insert.length) };
            });
        }
        else if (byLine) {
            changes = state.changeByRange(range => {
                let line = text.line(i++);
                return { changes: { from: range.from, to: range.to, insert: line.text },
                    range: EditorSelection.cursor(range.from + line.length) };
            });
        }
        else {
            changes = state.replaceSelection(text);
        }
        view.dispatch(changes, {
            userEvent: "input.paste",
            scrollIntoView: true
        });
    }
    handlers.keydown = (view, event) => {
        view.inputState.setSelectionOrigin("select");
        if (event.keyCode == 27)
            view.inputState.lastEscPress = Date.now();
        else if (modifierCodes.indexOf(event.keyCode) < 0)
            view.inputState.lastEscPress = 0;
    };
    let lastTouch = 0;
    handlers.touchstart = (view, e) => {
        lastTouch = Date.now();
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers.touchmove = view => {
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers.mousedown = (view, event) => {
        view.observer.flush();
        if (lastTouch > Date.now() - 2000 && getClickType(event) == 1)
            return; // Ignore touch interaction
        let style = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
            style = makeStyle(view, event);
            if (style)
                break;
        }
        if (!style && event.button == 0)
            style = basicMouseSelection(view, event);
        if (style) {
            let mustFocus = view.root.activeElement != view.contentDOM;
            if (mustFocus)
                view.observer.ignore(() => focusPreventScroll(view.contentDOM));
            view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
        }
    };
    function rangeForClick(view, pos, bias, type) {
        if (type == 1) { // Single click
            return EditorSelection.cursor(pos, bias);
        }
        else if (type == 2) { // Double click
            return groupAt(view.state, pos, bias);
        }
        else { // Triple click
            let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
            let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
            if (to < view.state.doc.length && to == line.to)
                to++;
            return EditorSelection.range(from, to);
        }
    }
    let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
    let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
    // Try to determine, for the given coordinates, associated with the
    // given position, whether they are related to the element before or
    // the element after the position.
    function findPositionSide(view, pos, x, y) {
        let line = LineView.find(view.docView, pos);
        if (!line)
            return 1;
        let off = pos - line.posAtStart;
        // Line boundaries point into the line
        if (off == 0)
            return 1;
        if (off == line.length)
            return -1;
        // Positions on top of an element point at that element
        let before = line.coordsAt(off, -1);
        if (before && inside(x, y, before))
            return -1;
        let after = line.coordsAt(off, 1);
        if (after && inside(x, y, after))
            return 1;
        // This is probably a line wrap point. Pick before if the point is
        // beside it.
        return before && insideY(y, before) ? -1 : 1;
    }
    function queryPos(view, event) {
        let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
    }
    const BadMouseDetail = browser.ie && browser.ie_version <= 11;
    let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
    function getClickType(event) {
        if (!BadMouseDetail)
            return event.detail;
        let last = lastMouseDown, lastTime = lastMouseDownTime;
        lastMouseDown = event;
        lastMouseDownTime = Date.now();
        return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
            Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
    }
    function basicMouseSelection(view, event) {
        let start = queryPos(view, event), type = getClickType(event);
        let startSel = view.state.selection;
        let last = start, lastEvent = event;
        return {
            update(update) {
                if (update.docChanged) {
                    if (start)
                        start.pos = update.changes.mapPos(start.pos);
                    startSel = startSel.map(update.changes);
                    lastEvent = null;
                }
            },
            get(event, extend, multiple) {
                let cur;
                if (lastEvent && event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY)
                    cur = last;
                else {
                    cur = last = queryPos(view, event);
                    lastEvent = event;
                }
                if (!cur || !start)
                    return startSel;
                let range = rangeForClick(view, cur.pos, cur.bias, type);
                if (start.pos != cur.pos && !extend) {
                    let startRange = rangeForClick(view, start.pos, start.bias, type);
                    let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                    range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
                }
                if (extend)
                    return startSel.replaceRange(startSel.main.extend(range.from, range.to));
                else if (multiple)
                    return startSel.addRange(range);
                else
                    return EditorSelection.create([range]);
            }
        };
    }
    handlers.dragstart = (view, event) => {
        let { selection: { main } } = view.state;
        let { mouseSelection } = view.inputState;
        if (mouseSelection)
            mouseSelection.dragging = main;
        if (event.dataTransfer) {
            event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
            event.dataTransfer.effectAllowed = "copyMove";
        }
    };
    function dropText(view, event, text, direct) {
        if (!text)
            return;
        let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        event.preventDefault();
        let { mouseSelection } = view.inputState;
        let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?
            { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
        let ins = { from: dropPos, insert: text };
        let changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
            changes,
            selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
            userEvent: del ? "move.drop" : "input.drop"
        });
    }
    handlers.drop = (view, event) => {
        if (!event.dataTransfer)
            return;
        if (view.state.readOnly)
            return event.preventDefault();
        let files = event.dataTransfer.files;
        if (files && files.length) { // For a file drop, read the file's text.
            event.preventDefault();
            let text = Array(files.length), read = 0;
            let finishFile = () => {
                if (++read == files.length)
                    dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
            };
            for (let i = 0; i < files.length; i++) {
                let reader = new FileReader;
                reader.onerror = finishFile;
                reader.onload = () => {
                    if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                        text[i] = reader.result;
                    finishFile();
                };
                reader.readAsText(files[i]);
            }
        }
        else {
            dropText(view, event, event.dataTransfer.getData("Text"), true);
        }
    };
    handlers.paste = (view, event) => {
        if (view.state.readOnly)
            return event.preventDefault();
        view.observer.flush();
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            doPaste(view, data.getData("text/plain"));
            event.preventDefault();
        }
        else {
            capturePaste(view);
        }
    };
    function captureCopy(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(() => {
            target.remove();
            view.focus();
        }, 50);
    }
    function copiedRange(state) {
        let content = [], ranges = [], linewise = false;
        for (let range of state.selection.ranges)
            if (!range.empty) {
                content.push(state.sliceDoc(range.from, range.to));
                ranges.push(range);
            }
        if (!content.length) {
            // Nothing selected, do a line-wise copy
            let upto = -1;
            for (let { from } of state.selection.ranges) {
                let line = state.doc.lineAt(from);
                if (line.number > upto) {
                    content.push(line.text);
                    ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
                }
                upto = line.number;
            }
            linewise = true;
        }
        return { text: content.join(state.lineBreak), ranges, linewise };
    }
    let lastLinewiseCopy = null;
    handlers.copy = handlers.cut = (view, event) => {
        let { text, ranges, linewise } = copiedRange(view.state);
        if (!text && !linewise)
            return;
        lastLinewiseCopy = linewise ? text : null;
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            event.preventDefault();
            data.clearData();
            data.setData("text/plain", text);
        }
        else {
            captureCopy(view, text);
        }
        if (event.type == "cut" && !view.state.readOnly)
            view.dispatch({
                changes: ranges,
                scrollIntoView: true,
                userEvent: "delete.cut"
            });
    };
    function updateForFocusChange(view) {
        setTimeout(() => {
            if (view.hasFocus != view.inputState.notifiedFocused)
                view.update([]);
        }, 10);
    }
    handlers.focus = updateForFocusChange;
    handlers.blur = view => {
        view.observer.clearSelectionRange();
        updateForFocusChange(view);
    };
    function forceClearComposition(view, rapid) {
        if (view.docView.compositionDeco.size) {
            view.inputState.rapidCompositionStart = rapid;
            try {
                view.update([]);
            }
            finally {
                view.inputState.rapidCompositionStart = false;
            }
        }
    }
    handlers.compositionstart = handlers.compositionupdate = view => {
        if (view.inputState.compositionFirstChange == null)
            view.inputState.compositionFirstChange = true;
        if (view.inputState.composing < 0) {
            // FIXME possibly set a timeout to clear it again on Android
            view.inputState.composing = 0;
            if (view.docView.compositionDeco.size) {
                view.observer.flush();
                forceClearComposition(view, true);
            }
        }
    };
    handlers.compositionend = view => {
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        view.inputState.compositionFirstChange = null;
        setTimeout(() => {
            if (view.inputState.composing < 0)
                forceClearComposition(view, false);
        }, 50);
    };
    handlers.contextmenu = view => {
        view.inputState.lastContextMenu = Date.now();
    };
    handlers.beforeinput = (view, event) => {
        var _a;
        // Because Chrome Android doesn't fire useful key events, use
        // beforeinput to detect backspace (and possibly enter and delete,
        // but those usually don't even seem to fire beforeinput events at
        // the moment) and fake a key event for it.
        //
        // (preventDefault on beforeinput, though supported in the spec,
        // seems to do nothing at all on Chrome).
        let pending;
        if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
            view.observer.delayAndroidKey(pending.key, pending.keyCode);
            if (pending.key == "Backspace" || pending.key == "Delete") {
                let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
                setTimeout(() => {
                    var _a;
                    // Backspacing near uneditable nodes on Chrome Android sometimes
                    // closes the virtual keyboard. This tries to crudely detect
                    // that and refocus to get it back.
                    if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                        view.contentDOM.blur();
                        view.focus();
                    }
                }, 100);
            }
        }
    };

    const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
    class HeightOracle {
        constructor() {
            this.doc = Text.empty;
            this.lineWrapping = false;
            this.heightSamples = {};
            this.lineHeight = 14;
            this.charWidth = 7;
            this.lineLength = 30;
            // Used to track, during updateHeight, if any actual heights changed
            this.heightChanged = false;
        }
        heightForGap(from, to) {
            let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping)
                lines += Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength);
            return this.lineHeight * lines;
        }
        heightForLine(length) {
            if (!this.lineWrapping)
                return this.lineHeight;
            let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
        }
        setDoc(doc) { this.doc = doc; return this; }
        mustRefreshForWrapping(whiteSpace) {
            return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
        }
        mustRefreshForHeights(lineHeights) {
            let newHeight = false;
            for (let i = 0; i < lineHeights.length; i++) {
                let h = lineHeights[i];
                if (h < 0) {
                    i++;
                }
                else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                    newHeight = true;
                    this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return newHeight;
        }
        refresh(whiteSpace, lineHeight, charWidth, lineLength, knownHeights) {
            let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
            let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
            this.lineWrapping = lineWrapping;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.lineLength = lineLength;
            if (changed) {
                this.heightSamples = {};
                for (let i = 0; i < knownHeights.length; i++) {
                    let h = knownHeights[i];
                    if (h < 0)
                        i++;
                    else
                        this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return changed;
        }
    }
    // This object is used by `updateHeight` to make DOM measurements
    // arrive at the right nides. The `heights` array is a sequence of
    // block heights, starting from position `from`.
    class MeasuredHeights {
        constructor(from, heights) {
            this.from = from;
            this.heights = heights;
            this.index = 0;
        }
        get more() { return this.index < this.heights.length; }
    }
    /**
    Record used to represent information about a block-level element
    in the editor view.
    */
    class BlockInfo {
        /**
        @internal
        */
        constructor(
        /**
        The start of the element in the document.
        */
        from, 
        /**
        The length of the element.
        */
        length, 
        /**
        The top position of the element (relative to the top of the
        document).
        */
        top, 
        /**
        Its height.
        */
        height, 
        /**
        The type of element this is. When querying lines, this may be
        an array of all the blocks that make up the line.
        */
        type) {
            this.from = from;
            this.length = length;
            this.top = top;
            this.height = height;
            this.type = type;
        }
        /**
        The end of the element as a document position.
        */
        get to() { return this.from + this.length; }
        /**
        The bottom position of the element.
        */
        get bottom() { return this.top + this.height; }
        /**
        @internal
        */
        join(other) {
            let detail = (Array.isArray(this.type) ? this.type : [this])
                .concat(Array.isArray(other.type) ? other.type : [other]);
            return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
        }
    }
    var QueryType$1 = /*@__PURE__*/(function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType})(QueryType$1 || (QueryType$1 = {}));
    const Epsilon = 1e-3;
    class HeightMap {
        constructor(length, // The number of characters covered
        height, // Height of this part of the document
        flags = 2 /* Outdated */) {
            this.length = length;
            this.height = height;
            this.flags = flags;
        }
        get outdated() { return (this.flags & 2 /* Outdated */) > 0; }
        set outdated(value) { this.flags = (value ? 2 /* Outdated */ : 0) | (this.flags & ~2 /* Outdated */); }
        setHeight(oracle, height) {
            if (this.height != height) {
                if (Math.abs(this.height - height) > Epsilon)
                    oracle.heightChanged = true;
                this.height = height;
            }
        }
        // Base case is to replace a leaf node, which simply builds a tree
        // from the new nodes and returns that (HeightMapBranch and
        // HeightMapGap override this to actually use from/to)
        replace(_from, _to, nodes) {
            return HeightMap.of(nodes);
        }
        // Again, these are base cases, and are overridden for branch and gap nodes.
        decomposeLeft(_to, result) { result.push(this); }
        decomposeRight(_from, result) { result.push(this); }
        applyChanges(decorations, oldDoc, oracle, changes) {
            let me = this;
            for (let i = changes.length - 1; i >= 0; i--) {
                let { fromA, toA, fromB, toB } = changes[i];
                let start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
                let end = start.to >= toA ? start : me.lineAt(toA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
                toB += end.to - toA;
                toA = end.to;
                while (i > 0 && start.from <= changes[i - 1].toA) {
                    fromA = changes[i - 1].fromA;
                    fromB = changes[i - 1].fromB;
                    i--;
                    if (fromA < start.from)
                        start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
                }
                fromB += start.from - fromA;
                fromA = start.from;
                let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
                me = me.replace(fromA, toA, nodes);
            }
            return me.updateHeight(oracle, 0);
        }
        static empty() { return new HeightMapText(0, 0); }
        // nodes uses null values to indicate the position of line breaks.
        // There are never line breaks at the start or end of the array, or
        // two line breaks next to each other, and the array isn't allowed
        // to be empty (same restrictions as return value from the builder).
        static of(nodes) {
            if (nodes.length == 1)
                return nodes[0];
            let i = 0, j = nodes.length, before = 0, after = 0;
            for (;;) {
                if (i == j) {
                    if (before > after * 2) {
                        let split = nodes[i - 1];
                        if (split.break)
                            nodes.splice(--i, 1, split.left, null, split.right);
                        else
                            nodes.splice(--i, 1, split.left, split.right);
                        j += 1 + split.break;
                        before -= split.size;
                    }
                    else if (after > before * 2) {
                        let split = nodes[j];
                        if (split.break)
                            nodes.splice(j, 1, split.left, null, split.right);
                        else
                            nodes.splice(j, 1, split.left, split.right);
                        j += 2 + split.break;
                        after -= split.size;
                    }
                    else {
                        break;
                    }
                }
                else if (before < after) {
                    let next = nodes[i++];
                    if (next)
                        before += next.size;
                }
                else {
                    let next = nodes[--j];
                    if (next)
                        after += next.size;
                }
            }
            let brk = 0;
            if (nodes[i - 1] == null) {
                brk = 1;
                i--;
            }
            else if (nodes[i] == null) {
                brk = 1;
                j++;
            }
            return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
        }
    }
    HeightMap.prototype.size = 1;
    class HeightMapBlock extends HeightMap {
        constructor(length, height, type) {
            super(length, height);
            this.type = type;
        }
        blockAt(_height, _doc, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.type);
        }
        lineAt(_value, _type, doc, top, offset) {
            return this.blockAt(0, doc, top, offset);
        }
        forEachLine(from, to, doc, top, offset, f) {
            if (from <= offset + this.length && to >= offset)
                f(this.blockAt(0, doc, top, offset));
        }
        updateHeight(oracle, offset = 0, _force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            this.outdated = false;
            return this;
        }
        toString() { return `block(${this.length})`; }
    }
    class HeightMapText extends HeightMapBlock {
        constructor(length, height) {
            super(length, height, BlockType.Text);
            this.collapsed = 0; // Amount of collapsed content in the line
            this.widgetHeight = 0; // Maximum inline widget height
        }
        replace(_from, _to, nodes) {
            let node = nodes[0];
            if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* SingleLine */)) &&
                Math.abs(this.length - node.length) < 10) {
                if (node instanceof HeightMapGap)
                    node = new HeightMapText(node.length, this.height);
                else
                    node.height = this.height;
                if (!this.outdated)
                    node.outdated = false;
                return node;
            }
            else {
                return HeightMap.of(nodes);
            }
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            else if (force || this.outdated)
                this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
            this.outdated = false;
            return this;
        }
        toString() {
            return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
    }
    class HeightMapGap extends HeightMap {
        constructor(length) { super(length, 0); }
        lines(doc, offset) {
            let firstLine = doc.lineAt(offset).number, lastLine = doc.lineAt(offset + this.length).number;
            return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };
        }
        blockAt(height, doc, top, offset) {
            let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);
            let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
            let { from, length } = doc.line(firstLine + line);
            return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
        }
        lineAt(value, type, doc, top, offset) {
            if (type == QueryType$1.ByHeight)
                return this.blockAt(value, doc, top, offset);
            if (type == QueryType$1.ByPosNoHeight) {
                let { from, to } = doc.lineAt(value);
                return new BlockInfo(from, to - from, 0, 0, BlockType.Text);
            }
            let { firstLine, lineHeight } = this.lines(doc, offset);
            let { from, length, number } = doc.lineAt(value);
            return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
        }
        forEachLine(from, to, doc, top, offset, f) {
            let { firstLine, lineHeight } = this.lines(doc, offset);
            for (let pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {
                let line = doc.lineAt(pos);
                if (pos == from)
                    top += lineHeight * (line.number - firstLine);
                f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));
                top += lineHeight;
                pos = line.to + 1;
            }
        }
        replace(from, to, nodes) {
            let after = this.length - to;
            if (after > 0) {
                let last = nodes[nodes.length - 1];
                if (last instanceof HeightMapGap)
                    nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
                else
                    nodes.push(null, new HeightMapGap(after - 1));
            }
            if (from > 0) {
                let first = nodes[0];
                if (first instanceof HeightMapGap)
                    nodes[0] = new HeightMapGap(from + first.length);
                else
                    nodes.unshift(new HeightMapGap(from - 1), null);
            }
            return HeightMap.of(nodes);
        }
        decomposeLeft(to, result) {
            result.push(new HeightMapGap(to - 1), null);
        }
        decomposeRight(from, result) {
            result.push(null, new HeightMapGap(this.length - from - 1));
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let end = offset + this.length;
            if (measured && measured.from <= offset + this.length && measured.more) {
                // Fill in part of this gap with measured lines. We know there
                // can't be widgets or collapsed ranges in those lines, because
                // they would already have been added to the heightmap (gaps
                // only contain plain text).
                let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
                let wasChanged = oracle.heightChanged;
                if (measured.from > offset)
                    nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
                while (pos <= end && measured.more) {
                    let len = oracle.doc.lineAt(pos).length;
                    if (nodes.length)
                        nodes.push(null);
                    let height = measured.heights[measured.index++];
                    if (singleHeight == -1)
                        singleHeight = height;
                    else if (Math.abs(height - singleHeight) >= Epsilon)
                        singleHeight = -2;
                    let line = new HeightMapText(len, height);
                    line.outdated = false;
                    nodes.push(line);
                    pos += len + 1;
                }
                if (pos <= end)
                    nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
                let result = HeightMap.of(nodes);
                oracle.heightChanged = wasChanged || singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
                    Math.abs(singleHeight - this.lines(oracle.doc, offset).lineHeight) >= Epsilon;
                return result;
            }
            else if (force || this.outdated) {
                this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
                this.outdated = false;
            }
            return this;
        }
        toString() { return `gap(${this.length})`; }
    }
    class HeightMapBranch extends HeightMap {
        constructor(left, brk, right) {
            super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */ : 0));
            this.left = left;
            this.right = right;
            this.size = left.size + right.size;
        }
        get break() { return this.flags & 1 /* Break */; }
        blockAt(height, doc, top, offset) {
            let mid = top + this.left.height;
            return height < mid ? this.left.blockAt(height, doc, top, offset)
                : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);
        }
        lineAt(value, type, doc, top, offset) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            let left = type == QueryType$1.ByHeight ? value < rightTop : value < rightOffset;
            let base = left ? this.left.lineAt(value, type, doc, top, offset)
                : this.right.lineAt(value, type, doc, rightTop, rightOffset);
            if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
                return base;
            let subQuery = type == QueryType$1.ByPosNoHeight ? QueryType$1.ByPosNoHeight : QueryType$1.ByPos;
            if (left)
                return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));
            else
                return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
        }
        forEachLine(from, to, doc, top, offset, f) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            if (this.break) {
                if (from < rightOffset)
                    this.left.forEachLine(from, to, doc, top, offset, f);
                if (to >= rightOffset)
                    this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
            }
            else {
                let mid = this.lineAt(rightOffset, QueryType$1.ByPos, doc, top, offset);
                if (from < mid.from)
                    this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
                if (mid.to >= from && mid.from <= to)
                    f(mid);
                if (to > mid.to)
                    this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
            }
        }
        replace(from, to, nodes) {
            let rightStart = this.left.length + this.break;
            if (to < rightStart)
                return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length)
                return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            let result = [];
            if (from > 0)
                this.decomposeLeft(from, result);
            let left = result.length;
            for (let node of nodes)
                result.push(node);
            if (from > 0)
                mergeGaps(result, left - 1);
            if (to < this.length) {
                let right = result.length;
                this.decomposeRight(to, result);
                mergeGaps(result, right);
            }
            return HeightMap.of(result);
        }
        decomposeLeft(to, result) {
            let left = this.left.length;
            if (to <= left)
                return this.left.decomposeLeft(to, result);
            result.push(this.left);
            if (this.break) {
                left++;
                if (to >= left)
                    result.push(null);
            }
            if (to > left)
                this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from, result) {
            let left = this.left.length, right = left + this.break;
            if (from >= right)
                return this.right.decomposeRight(from - right, result);
            if (from < left)
                this.left.decomposeRight(from, result);
            if (this.break && from < right)
                result.push(null);
            result.push(this.right);
        }
        balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size)
                return HeightMap.of(this.break ? [left, null, right] : [left, right]);
            this.left = left;
            this.right = right;
            this.height = left.height + right.height;
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this.break + right.length;
            return this;
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more)
                rebalance = left = left.updateHeight(oracle, offset, force, measured);
            else
                left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more)
                rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
            else
                right.updateHeight(oracle, rightStart, force);
            if (rebalance)
                return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
        }
        toString() { return this.left + (this.break ? " " : "-") + this.right; }
    }
    function mergeGaps(nodes, around) {
        let before, after;
        if (nodes[around] == null &&
            (before = nodes[around - 1]) instanceof HeightMapGap &&
            (after = nodes[around + 1]) instanceof HeightMapGap)
            nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
    }
    const relevantWidgetHeight = 5;
    class NodeBuilder {
        constructor(pos, oracle) {
            this.pos = pos;
            this.oracle = oracle;
            this.nodes = [];
            this.lineStart = -1;
            this.lineEnd = -1;
            this.covering = null;
            this.writtenTo = pos;
        }
        get isCovered() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
            if (this.lineStart > -1) {
                let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
                if (last instanceof HeightMapText)
                    last.length += end - this.pos;
                else if (end > this.pos || !this.isCovered)
                    this.nodes.push(new HeightMapText(end - this.pos, -1));
                this.writtenTo = end;
                if (to > end) {
                    this.nodes.push(null);
                    this.writtenTo++;
                    this.lineStart = -1;
                }
            }
            this.pos = to;
        }
        point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
                let height = deco.widget ? deco.widget.estimatedHeight : 0;
                if (height < 0)
                    height = this.oracle.lineHeight;
                let len = to - from;
                if (deco.block) {
                    this.addBlock(new HeightMapBlock(len, height, deco.type));
                }
                else if (len || height >= relevantWidgetHeight) {
                    this.addLineDeco(height, len);
                }
            }
            else if (to > from) {
                this.span(from, to);
            }
            if (this.lineEnd > -1 && this.lineEnd < this.pos)
                this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
            if (this.lineStart > -1)
                return;
            let { from, to } = this.oracle.doc.lineAt(this.pos);
            this.lineStart = from;
            this.lineEnd = to;
            if (this.writtenTo < from) {
                if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                    this.nodes.push(this.blankContent(this.writtenTo, from - 1));
                this.nodes.push(null);
            }
            if (this.pos > from)
                this.nodes.push(new HeightMapText(this.pos - from, -1));
            this.writtenTo = this.pos;
        }
        blankContent(from, to) {
            let gap = new HeightMapGap(to - from);
            if (this.oracle.doc.lineAt(from).to == to)
                gap.flags |= 4 /* SingleLine */;
            return gap;
        }
        ensureLine() {
            this.enterLine();
            let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText)
                return last;
            let line = new HeightMapText(0, -1);
            this.nodes.push(line);
            return line;
        }
        addBlock(block) {
            this.enterLine();
            if (block.type == BlockType.WidgetAfter && !this.isCovered)
                this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (block.type != BlockType.WidgetBefore)
                this.covering = block;
        }
        addLineDeco(height, length) {
            let line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            this.writtenTo = this.pos = this.pos + length;
        }
        finish(from) {
            let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
                this.nodes.push(new HeightMapText(0, -1));
            else if (this.writtenTo < this.pos || last == null)
                this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            let pos = from;
            for (let node of this.nodes) {
                if (node instanceof HeightMapText)
                    node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
            }
            return this.nodes;
        }
        // Always called with a region that on both sides either stretches
        // to a line break or the end of the document.
        // The returned array uses null to indicate line breaks, but never
        // starts or ends in a line break, or has multiple line breaks next
        // to each other.
        static build(oracle, decorations, from, to) {
            let builder = new NodeBuilder(from, oracle);
            RangeSet.spans(decorations, from, to, builder, 0);
            return builder.finish(from);
        }
    }
    function heightRelevantDecoChanges(a, b, diff) {
        let comp = new DecorationComparator;
        RangeSet.compare(a, b, diff, comp, 0);
        return comp.changes;
    }
    class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange() { }
        comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant)
                addRange(from, to, this.changes, 5);
        }
    }

    function visiblePixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        let left = Math.max(0, rect.left), right = Math.min(innerWidth, rect.right);
        let top = Math.max(0, rect.top), bottom = Math.min(innerHeight, rect.bottom);
        let body = dom.ownerDocument.body;
        for (let parent = dom.parentNode; parent && parent != body;) {
            if (parent.nodeType == 1) {
                let elt = parent;
                let style = window.getComputedStyle(elt);
                if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                    style.overflow != "visible") {
                    let parentRect = elt.getBoundingClientRect();
                    left = Math.max(left, parentRect.left);
                    right = Math.min(right, parentRect.right);
                    top = Math.max(top, parentRect.top);
                    bottom = Math.min(bottom, parentRect.bottom);
                }
                parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
            }
            else if (parent.nodeType == 11) { // Shadow root
                parent = parent.host;
            }
            else {
                break;
            }
        }
        return { left: left - rect.left, right: Math.max(left, right) - rect.left,
            top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
    }
    function fullPixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        return { left: 0, right: rect.right - rect.left,
            top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
    }
    // Line gaps are placeholder widgets used to hide pieces of overlong
    // lines within the viewport, as a kludge to keep the editor
    // responsive when a ridiculously long line is loaded into it.
    class LineGap {
        constructor(from, to, size) {
            this.from = from;
            this.to = to;
            this.size = size;
        }
        static same(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++) {
                let gA = a[i], gB = b[i];
                if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                    return false;
            }
            return true;
        }
        draw(wrapping) {
            return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
        }
    }
    class LineGapWidget extends WidgetType {
        constructor(size, vertical) {
            super();
            this.size = size;
            this.vertical = vertical;
        }
        eq(other) { return other.size == this.size && other.vertical == this.vertical; }
        toDOM() {
            let elt = document.createElement("div");
            if (this.vertical) {
                elt.style.height = this.size + "px";
            }
            else {
                elt.style.width = this.size + "px";
                elt.style.height = "2px";
                elt.style.display = "inline-block";
            }
            return elt;
        }
        get estimatedHeight() { return this.vertical ? this.size : -1; }
    }
    class ViewState {
        constructor(state) {
            this.state = state;
            // These are contentDOM-local coordinates
            this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
            this.inView = true;
            this.paddingTop = 0;
            this.paddingBottom = 0;
            this.contentDOMWidth = 0;
            this.contentDOMHeight = 0;
            this.editorHeight = 0;
            this.editorWidth = 0;
            this.heightOracle = new HeightOracle;
            // See VP.MaxDOMHeight
            this.scaler = IdScaler;
            this.scrollTarget = null;
            // Briefly set to true when printing, to disable viewport limiting
            this.printing = false;
            // Flag set when editor content was redrawn, so that the next
            // measure stage knows it must read DOM layout
            this.mustMeasureContent = true;
            this.defaultTextDirection = Direction.RTL;
            this.visibleRanges = [];
            // Cursor 'assoc' is only significant when the cursor is on a line
            // wrap point, where it must stick to the character that it is
            // associated with. Since browsers don't provide a reasonable
            // interface to set or query this, when a selection is set that
            // might cause this to be significant, this flag is set. The next
            // measure phase will check whether the cursor is on a line-wrapping
            // boundary and, if so, reset it to make sure it is positioned in
            // the right place.
            this.mustEnforceCursorAssoc = false;
            this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
            this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
            this.viewport = this.getViewport(0, null);
            this.updateViewportLines();
            this.updateForViewport();
            this.lineGaps = this.ensureLineGaps([]);
            this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
            this.computeVisibleRanges();
        }
        updateForViewport() {
            let viewports = [this.viewport], { main } = this.state.selection;
            for (let i = 0; i <= 1; i++) {
                let pos = i ? main.head : main.anchor;
                if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                    let { from, to } = this.lineBlockAt(pos);
                    viewports.push(new Viewport(from, to));
                }
            }
            this.viewports = viewports.sort((a, b) => a.from - b.from);
            this.scaler = this.heightMap.height <= 7000000 /* MaxDOMHeight */ ? IdScaler :
                new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
        }
        updateViewportLines() {
            this.viewportLines = [];
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, block => {
                this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
            });
        }
        update(update, scrollTarget = null) {
            this.state = update.state;
            let prevDeco = this.stateDeco;
            this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
            let contentChanges = update.changedRanges;
            let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
            let prevHeight = this.heightMap.height;
            this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight)
                update.flags |= 2 /* Height */;
            let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
            if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
                !this.viewportIsAppropriate(viewport))
                viewport = this.getViewport(0, scrollTarget);
            let updateLines = !update.changes.empty || (update.flags & 2 /* Height */) ||
                viewport.from != this.viewport.from || viewport.to != this.viewport.to;
            this.viewport = viewport;
            this.updateForViewport();
            if (updateLines)
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000 /* DoubleMargin */)
                this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
            update.flags |= this.computeVisibleRanges();
            if (scrollTarget)
                this.scrollTarget = scrollTarget;
            if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
                update.state.selection.main.empty && update.state.selection.main.assoc)
                this.mustEnforceCursorAssoc = true;
        }
        measure(view) {
            let dom = view.contentDOM, style = window.getComputedStyle(dom);
            let oracle = this.heightOracle;
            let whiteSpace = style.whiteSpace;
            this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
            let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
            let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != dom.clientHeight;
            this.contentDOMHeight = dom.clientHeight;
            this.mustMeasureContent = false;
            let result = 0, bias = 0;
            // Vertical padding
            let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;
            if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
                this.paddingTop = paddingTop;
                this.paddingBottom = paddingBottom;
                result |= 8 /* Geometry */ | 2 /* Height */;
            }
            if (this.editorWidth != view.scrollDOM.clientWidth) {
                if (oracle.lineWrapping)
                    measureContent = true;
                this.editorWidth = view.scrollDOM.clientWidth;
                result |= 8 /* Geometry */;
            }
            // Pixel viewport
            let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
            let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
            if (inView != this.inView) {
                this.inView = inView;
                if (inView)
                    measureContent = true;
            }
            if (!this.inView)
                return 0;
            let contentWidth = dom.clientWidth;
            if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
                this.contentDOMWidth = contentWidth;
                this.editorHeight = view.scrollDOM.clientHeight;
                result |= 8 /* Geometry */;
            }
            if (measureContent) {
                let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
                if (oracle.mustRefreshForHeights(lineHeights))
                    refresh = true;
                if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                    let { lineHeight, charWidth } = view.docView.measureTextSize();
                    refresh = oracle.refresh(whiteSpace, lineHeight, charWidth, contentWidth / charWidth, lineHeights);
                    if (refresh) {
                        view.docView.minWidth = 0;
                        result |= 8 /* Geometry */;
                    }
                }
                if (dTop > 0 && dBottom > 0)
                    bias = Math.max(dTop, dBottom);
                else if (dTop < 0 && dBottom < 0)
                    bias = Math.min(dTop, dBottom);
                oracle.heightChanged = false;
                for (let vp of this.viewports) {
                    let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                    this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
                }
                if (oracle.heightChanged)
                    result |= 2 /* Height */;
            }
            let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
                this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
            if (viewportChange)
                this.viewport = this.getViewport(bias, this.scrollTarget);
            this.updateForViewport();
            if ((result & 2 /* Height */) || viewportChange)
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000 /* DoubleMargin */)
                this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
            result |= this.computeVisibleRanges();
            if (this.mustEnforceCursorAssoc) {
                this.mustEnforceCursorAssoc = false;
                // This is done in the read stage, because moving the selection
                // to a line end is going to trigger a layout anyway, so it
                // can't be a pure write. It should be rare that it does any
                // writing.
                view.docView.enforceCursorAssoc();
            }
            return result;
        }
        get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
        get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
        getViewport(bias, scrollTarget) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */ / 2));
            let map = this.heightMap, doc = this.state.doc, { visibleTop, visibleBottom } = this;
            let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* Margin */, QueryType$1.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* Margin */, QueryType$1.ByHeight, doc, 0, 0).to);
            // If scrollTarget is given, make sure the viewport includes that position
            if (scrollTarget) {
                let { head } = scrollTarget.range;
                if (head < viewport.from || head > viewport.to) {
                    let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                    let block = map.lineAt(head, QueryType$1.ByPos, doc, 0, 0), topPos;
                    if (scrollTarget.y == "center")
                        topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                    else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                        topPos = block.top;
                    else
                        topPos = block.bottom - viewHeight;
                    viewport = new Viewport(map.lineAt(topPos - 1000 /* Margin */ / 2, QueryType$1.ByHeight, doc, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* Margin */ / 2, QueryType$1.ByHeight, doc, 0, 0).to);
                }
            }
            return viewport;
        }
        mapViewport(viewport, changes) {
            let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
            return new Viewport(this.heightMap.lineAt(from, QueryType$1.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType$1.ByPos, this.state.doc, 0, 0).to);
        }
        // Checks if a given viewport covers the visible part of the
        // document and not too much beyond that.
        viewportIsAppropriate({ from, to }, bias = 0) {
            if (!this.inView)
                return true;
            let { top } = this.heightMap.lineAt(from, QueryType$1.ByPos, this.state.doc, 0, 0);
            let { bottom } = this.heightMap.lineAt(to, QueryType$1.ByPos, this.state.doc, 0, 0);
            let { visibleTop, visibleBottom } = this;
            return (from == 0 || top <= visibleTop - Math.max(10 /* MinCoverMargin */, Math.min(-bias, 250 /* MaxCoverMargin */))) &&
                (to == this.state.doc.length ||
                    bottom >= visibleBottom + Math.max(10 /* MinCoverMargin */, Math.min(bias, 250 /* MaxCoverMargin */))) &&
                (top > visibleTop - 2 * 1000 /* Margin */ && bottom < visibleBottom + 2 * 1000 /* Margin */);
        }
        mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty)
                return gaps;
            let mapped = [];
            for (let gap of gaps)
                if (!changes.touchesRange(gap.from, gap.to))
                    mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
            return mapped;
        }
        // Computes positions in the viewport where the start or end of a
        // line should be hidden, trying to reuse existing line gaps when
        // appropriate to avoid unneccesary redraws.
        // Uses crude character-counting for the positioning and sizing,
        // since actual DOM coordinates aren't always available and
        // predictable. Relies on generous margins (see LG.Margin) to hide
        // the artifacts this might produce from the user.
        ensureLineGaps(current) {
            let gaps = [];
            // This won't work at all in predominantly right-to-left text.
            if (this.defaultTextDirection != Direction.LTR)
                return gaps;
            for (let line of this.viewportLines) {
                if (line.length < 4000 /* DoubleMargin */)
                    continue;
                let structure = lineStructure(line.from, line.to, this.stateDeco);
                if (structure.total < 4000 /* DoubleMargin */)
                    continue;
                let viewFrom, viewTo;
                if (this.heightOracle.lineWrapping) {
                    let marginHeight = (2000 /* Margin */ / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                    viewFrom = findPosition(structure, (this.visibleTop - line.top - marginHeight) / line.height);
                    viewTo = findPosition(structure, (this.visibleBottom - line.top + marginHeight) / line.height);
                }
                else {
                    let totalWidth = structure.total * this.heightOracle.charWidth;
                    let marginWidth = 2000 /* Margin */ * this.heightOracle.charWidth;
                    viewFrom = findPosition(structure, (this.pixelViewport.left - marginWidth) / totalWidth);
                    viewTo = findPosition(structure, (this.pixelViewport.right + marginWidth) / totalWidth);
                }
                let outside = [];
                if (viewFrom > line.from)
                    outside.push({ from: line.from, to: viewFrom });
                if (viewTo < line.to)
                    outside.push({ from: viewTo, to: line.to });
                let sel = this.state.selection.main;
                // Make sure the gaps don't cover a selection end
                if (sel.from >= line.from && sel.from <= line.to)
                    cutRange(outside, sel.from - 10 /* SelectionMargin */, sel.from + 10 /* SelectionMargin */);
                if (!sel.empty && sel.to >= line.from && sel.to <= line.to)
                    cutRange(outside, sel.to - 10 /* SelectionMargin */, sel.to + 10 /* SelectionMargin */);
                for (let { from, to } of outside)
                    if (to - from > 1000 /* HalfMargin */) {
                        gaps.push(find$2(current, gap => gap.from >= line.from && gap.to <= line.to &&
                            Math.abs(gap.from - from) < 1000 /* HalfMargin */ && Math.abs(gap.to - to) < 1000 /* HalfMargin */) ||
                            new LineGap(from, to, this.gapSize(line, from, to, structure)));
                    }
            }
            return gaps;
        }
        gapSize(line, from, to, structure) {
            let fraction = findFraction(structure, to) - findFraction(structure, from);
            if (this.heightOracle.lineWrapping) {
                return line.height * fraction;
            }
            else {
                return structure.total * this.heightOracle.charWidth * fraction;
            }
        }
        updateLineGaps(gaps) {
            if (!LineGap.same(gaps, this.lineGaps)) {
                this.lineGaps = gaps;
                this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
            }
        }
        computeVisibleRanges() {
            let deco = this.stateDeco;
            if (this.lineGaps.length)
                deco = deco.concat(this.lineGapDeco);
            let ranges = [];
            RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
                span(from, to) { ranges.push({ from, to }); },
                point() { }
            }, 20);
            let changed = ranges.length != this.visibleRanges.length ||
                this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
            this.visibleRanges = ranges;
            return changed ? 4 /* Viewport */ : 0;
        }
        lineBlockAt(pos) {
            return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
                scaleBlock(this.heightMap.lineAt(pos, QueryType$1.ByPos, this.state.doc, 0, 0), this.scaler);
        }
        lineBlockAtHeight(height) {
            return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType$1.ByHeight, this.state.doc, 0, 0), this.scaler);
        }
        elementAtHeight(height) {
            return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.state.doc, 0, 0), this.scaler);
        }
        get docHeight() {
            return this.scaler.toDOM(this.heightMap.height);
        }
        get contentHeight() {
            return this.docHeight + this.paddingTop + this.paddingBottom;
        }
    }
    class Viewport {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    }
    function lineStructure(from, to, stateDeco) {
        let ranges = [], pos = from, total = 0;
        RangeSet.spans(stateDeco, from, to, {
            span() { },
            point(from, to) {
                if (from > pos) {
                    ranges.push({ from: pos, to: from });
                    total += from - pos;
                }
                pos = to;
            }
        }, 20); // We're only interested in collapsed ranges of a significant size
        if (pos < to) {
            ranges.push({ from: pos, to });
            total += to - pos;
        }
        return { total, ranges };
    }
    function findPosition({ total, ranges }, ratio) {
        if (ratio <= 0)
            return ranges[0].from;
        if (ratio >= 1)
            return ranges[ranges.length - 1].to;
        let dist = Math.floor(total * ratio);
        for (let i = 0;; i++) {
            let { from, to } = ranges[i], size = to - from;
            if (dist <= size)
                return from + dist;
            dist -= size;
        }
    }
    function findFraction(structure, pos) {
        let counted = 0;
        for (let { from, to } of structure.ranges) {
            if (pos <= to) {
                counted += pos - from;
                break;
            }
            counted += to - from;
        }
        return counted / structure.total;
    }
    function cutRange(ranges, from, to) {
        for (let i = 0; i < ranges.length; i++) {
            let r = ranges[i];
            if (r.from < to && r.to > from) {
                let pieces = [];
                if (r.from < from)
                    pieces.push({ from: r.from, to: from });
                if (r.to > to)
                    pieces.push({ from: to, to: r.to });
                ranges.splice(i, 1, ...pieces);
                i += pieces.length - 1;
            }
        }
    }
    function find$2(array, f) {
        for (let val of array)
            if (f(val))
                return val;
        return undefined;
    }
    // Don't scale when the document height is within the range of what
    // the DOM can handle.
    const IdScaler = {
        toDOM(n) { return n; },
        fromDOM(n) { return n; },
        scale: 1
    };
    // When the height is too big (> VP.MaxDOMHeight), scale down the
    // regions outside the viewports so that the total height is
    // VP.MaxDOMHeight.
    class BigScaler {
        constructor(doc, heightMap, viewports) {
            let vpHeight = 0, base = 0, domBase = 0;
            this.viewports = viewports.map(({ from, to }) => {
                let top = heightMap.lineAt(from, QueryType$1.ByPos, doc, 0, 0).top;
                let bottom = heightMap.lineAt(to, QueryType$1.ByPos, doc, 0, 0).bottom;
                vpHeight += bottom - top;
                return { from, to, top, bottom, domTop: 0, domBottom: 0 };
            });
            this.scale = (7000000 /* MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
            for (let obj of this.viewports) {
                obj.domTop = domBase + (obj.top - base) * this.scale;
                domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
                base = obj.bottom;
            }
        }
        toDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.top)
                    return domBase + (n - base) * this.scale;
                if (n <= vp.bottom)
                    return vp.domTop + (n - vp.top);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
        fromDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.domTop)
                    return base + (n - domBase) / this.scale;
                if (n <= vp.domBottom)
                    return vp.top + (n - vp.domTop);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
    }
    function scaleBlock(block, scaler) {
        if (scaler.scale == 1)
            return block;
        let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
        return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(b => scaleBlock(b, scaler)) : block.type);
    }

    const theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
    const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
    const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
    const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
    function buildTheme(main, spec, scopes) {
        return new StyleModule(spec, {
            finish(sel) {
                return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                    if (m == "&")
                        return main;
                    if (!scopes || !scopes[m])
                        throw new RangeError(`Unsupported selector: ${m}`);
                    return scopes[m];
                }) : main + " " + sel;
            }
        });
    }
    const baseTheme$1$3 = /*@__PURE__*/buildTheme("." + baseThemeID, {
        "&.cm-editor": {
            position: "relative !important",
            boxSizing: "border-box",
            "&.cm-focused": {
                // Provide a simple default outline to make sure a focused
                // editor is visually distinct. Can't leave the default behavior
                // because that will apply to the content element, which is
                // inside the scrollable container and doesn't include the
                // gutters. We also can't use an 'auto' outline, since those
                // are, for some reason, drawn behind the element content, which
                // will cause things like the active line background to cover
                // the outline (#297).
                outline: "1px dotted #212121"
            },
            display: "flex !important",
            flexDirection: "column"
        },
        ".cm-scroller": {
            display: "flex !important",
            alignItems: "flex-start !important",
            fontFamily: "monospace",
            lineHeight: 1.4,
            height: "100%",
            overflowX: "auto",
            position: "relative",
            zIndex: 0
        },
        ".cm-content": {
            margin: 0,
            flexGrow: 2,
            minHeight: "100%",
            display: "block",
            whiteSpace: "pre",
            wordWrap: "normal",
            boxSizing: "border-box",
            padding: "4px 0",
            outline: "none",
            "&[contenteditable=true]": {
                WebkitUserModify: "read-write-plaintext-only",
            }
        },
        ".cm-lineWrapping": {
            whiteSpace_fallback: "pre-wrap",
            whiteSpace: "break-spaces",
            wordBreak: "break-word",
            overflowWrap: "anywhere"
        },
        "&light .cm-content": { caretColor: "black" },
        "&dark .cm-content": { caretColor: "white" },
        ".cm-line": {
            display: "block",
            padding: "0 2px 0 4px"
        },
        ".cm-selectionLayer": {
            zIndex: -1,
            contain: "size style"
        },
        ".cm-selectionBackground": {
            position: "absolute",
        },
        "&light .cm-selectionBackground": {
            background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
            background: "#222"
        },
        "&light.cm-focused .cm-selectionBackground": {
            background: "#d7d4f0"
        },
        "&dark.cm-focused .cm-selectionBackground": {
            background: "#233"
        },
        ".cm-cursorLayer": {
            zIndex: 100,
            contain: "size style",
            pointerEvents: "none"
        },
        "&.cm-focused .cm-cursorLayer": {
            animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
        ".cm-cursor, .cm-dropCursor": {
            position: "absolute",
            borderLeft: "1.2px solid black",
            marginLeft: "-0.6px",
            pointerEvents: "none",
        },
        ".cm-cursor": {
            display: "none"
        },
        "&dark .cm-cursor": {
            borderLeftColor: "#444"
        },
        "&.cm-focused .cm-cursor": {
            display: "block"
        },
        "&light .cm-activeLine": { backgroundColor: "#f3f9ff" },
        "&dark .cm-activeLine": { backgroundColor: "#223039" },
        "&light .cm-specialChar": { color: "red" },
        "&dark .cm-specialChar": { color: "#f78" },
        ".cm-gutters": {
            display: "flex",
            height: "100%",
            boxSizing: "border-box",
            left: 0,
            zIndex: 200
        },
        "&light .cm-gutters": {
            backgroundColor: "#f5f5f5",
            color: "#6c6c6c",
            borderRight: "1px solid #ddd"
        },
        "&dark .cm-gutters": {
            backgroundColor: "#333338",
            color: "#ccc"
        },
        ".cm-gutter": {
            display: "flex !important",
            flexDirection: "column",
            flexShrink: 0,
            boxSizing: "border-box",
            minHeight: "100%",
            overflow: "hidden"
        },
        ".cm-gutterElement": {
            boxSizing: "border-box"
        },
        ".cm-lineNumbers .cm-gutterElement": {
            padding: "0 3px 0 5px",
            minWidth: "20px",
            textAlign: "right",
            whiteSpace: "nowrap"
        },
        "&light .cm-activeLineGutter": {
            backgroundColor: "#e2f2ff"
        },
        "&dark .cm-activeLineGutter": {
            backgroundColor: "#222227"
        },
        ".cm-panels": {
            boxSizing: "border-box",
            position: "sticky",
            left: 0,
            right: 0
        },
        "&light .cm-panels": {
            backgroundColor: "#f5f5f5",
            color: "black"
        },
        "&light .cm-panels-top": {
            borderBottom: "1px solid #ddd"
        },
        "&light .cm-panels-bottom": {
            borderTop: "1px solid #ddd"
        },
        "&dark .cm-panels": {
            backgroundColor: "#333338",
            color: "white"
        },
        ".cm-tab": {
            display: "inline-block",
            overflow: "hidden",
            verticalAlign: "bottom"
        },
        ".cm-widgetBuffer": {
            verticalAlign: "text-top",
            height: "1em",
            display: "inline"
        },
        ".cm-placeholder": {
            color: "#888",
            display: "inline-block",
            verticalAlign: "top",
        },
        ".cm-button": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            padding: ".2em 1em",
            borderRadius: "1px"
        },
        "&light .cm-button": {
            backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
            }
        },
        "&dark .cm-button": {
            backgroundImage: "linear-gradient(#393939, #111)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#111, #333)"
            }
        },
        ".cm-textfield": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            border: "1px solid silver",
            padding: ".2em .5em"
        },
        "&light .cm-textfield": {
            backgroundColor: "white"
        },
        "&dark .cm-textfield": {
            border: "1px solid #555",
            backgroundColor: "inherit"
        }
    }, lightDarkIDs);

    const observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        attributes: true,
        characterDataOldValue: true
    };
    // IE11 has very broken mutation observers, so we also listen to
    // DOMCharacterDataModified there
    const useCharData = browser.ie && browser.ie_version <= 11;
    class DOMObserver {
        constructor(view, onChange, onScrollChanged) {
            this.view = view;
            this.onChange = onChange;
            this.onScrollChanged = onScrollChanged;
            this.active = false;
            // The known selection. Kept in our own object, as opposed to just
            // directly accessing the selection because:
            //  - Safari doesn't report the right selection in shadow DOM
            //  - Reading from the selection forces a DOM layout
            //  - This way, we can ignore selectionchange events if we have
            //    already seen the 'new' selection
            this.selectionRange = new DOMSelectionState;
            // Set when a selection change is detected, cleared on flush
            this.selectionChanged = false;
            this.delayedFlush = -1;
            this.resizeTimeout = -1;
            this.queue = [];
            this.delayedAndroidKey = null;
            this.scrollTargets = [];
            this.intersection = null;
            this.resize = null;
            this.intersecting = false;
            this.gapIntersection = null;
            this.gaps = [];
            // Timeout for scheduling check of the parents that need scroll handlers
            this.parentCheck = -1;
            this.dom = view.contentDOM;
            this.observer = new MutationObserver(mutations => {
                for (let mut of mutations)
                    this.queue.push(mut);
                // IE11 will sometimes (on typing over a selection or
                // backspacing out a single character text node) call the
                // observer callback before actually updating the DOM.
                //
                // Unrelatedly, iOS Safari will, when ending a composition,
                // sometimes first clear it, deliver the mutations, and then
                // reinsert the finished text. CodeMirror's handling of the
                // deletion will prevent the reinsertion from happening,
                // breaking composition.
                if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                    mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                    this.flushSoon();
                else
                    this.flush();
            });
            if (useCharData)
                this.onCharData = (event) => {
                    this.queue.push({ target: event.target,
                        type: "characterData",
                        oldValue: event.prevValue });
                    this.flushSoon();
                };
            this.onSelectionChange = this.onSelectionChange.bind(this);
            window.addEventListener("resize", this.onResize = this.onResize.bind(this));
            if (typeof ResizeObserver == "function") {
                this.resize = new ResizeObserver(() => {
                    if (this.view.docView.lastUpdate < Date.now() - 75)
                        this.onResize();
                });
                this.resize.observe(view.scrollDOM);
            }
            window.addEventListener("beforeprint", this.onPrint = this.onPrint.bind(this));
            this.start();
            window.addEventListener("scroll", this.onScroll = this.onScroll.bind(this));
            if (typeof IntersectionObserver == "function") {
                this.intersection = new IntersectionObserver(entries => {
                    if (this.parentCheck < 0)
                        this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                    if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                        this.intersecting = !this.intersecting;
                        if (this.intersecting != this.view.inView)
                            this.onScrollChanged(document.createEvent("Event"));
                    }
                }, {});
                this.intersection.observe(this.dom);
                this.gapIntersection = new IntersectionObserver(entries => {
                    if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                        this.onScrollChanged(document.createEvent("Event"));
                }, {});
            }
            this.listenForScroll();
            this.readSelectionRange();
            this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
        }
        onScroll(e) {
            if (this.intersecting)
                this.flush(false);
            this.onScrollChanged(e);
        }
        onResize() {
            if (this.resizeTimeout < 0)
                this.resizeTimeout = setTimeout(() => {
                    this.resizeTimeout = -1;
                    this.view.requestMeasure();
                }, 50);
        }
        onPrint() {
            this.view.viewState.printing = true;
            this.view.measure();
            setTimeout(() => {
                this.view.viewState.printing = false;
                this.view.requestMeasure();
            }, 500);
        }
        updateGaps(gaps) {
            if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
                this.gapIntersection.disconnect();
                for (let gap of gaps)
                    this.gapIntersection.observe(gap);
                this.gaps = gaps;
            }
        }
        onSelectionChange(event) {
            if (!this.readSelectionRange() || this.delayedAndroidKey)
                return;
            let { view } = this, sel = this.selectionRange;
            if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
                return;
            let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
            if (context && context.ignoreEvent(event))
                return;
            // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            // Chrome Android has a similar issue when backspacing out a
            // selection (#645).
            if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
                // (Selection.isCollapsed isn't reliable on IE)
                sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                this.flushSoon();
            else
                this.flush(false);
        }
        readSelectionRange() {
            let { root } = this.view, domSel = getSelection(root);
            // The Selection object is broken in shadow roots in Safari. See
            // https://github.com/codemirror/codemirror.next/issues/414
            let range = browser.safari && root.nodeType == 11 && deepActiveElement() == this.view.contentDOM &&
                safariSelectionRangeHack(this.view) || domSel;
            if (this.selectionRange.eq(range))
                return false;
            this.selectionRange.setRange(range);
            return this.selectionChanged = true;
        }
        setSelectionRange(anchor, head) {
            this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
            this.selectionChanged = false;
        }
        clearSelectionRange() {
            this.selectionRange.set(null, 0, null, 0);
        }
        listenForScroll() {
            this.parentCheck = -1;
            let i = 0, changed = null;
            for (let dom = this.dom; dom;) {
                if (dom.nodeType == 1) {
                    if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                        i++;
                    else if (!changed)
                        changed = this.scrollTargets.slice(0, i);
                    if (changed)
                        changed.push(dom);
                    dom = dom.assignedSlot || dom.parentNode;
                }
                else if (dom.nodeType == 11) { // Shadow root
                    dom = dom.host;
                }
                else {
                    break;
                }
            }
            if (i < this.scrollTargets.length && !changed)
                changed = this.scrollTargets.slice(0, i);
            if (changed) {
                for (let dom of this.scrollTargets)
                    dom.removeEventListener("scroll", this.onScroll);
                for (let dom of this.scrollTargets = changed)
                    dom.addEventListener("scroll", this.onScroll);
            }
        }
        ignore(f) {
            if (!this.active)
                return f();
            try {
                this.stop();
                return f();
            }
            finally {
                this.start();
                this.clear();
            }
        }
        start() {
            if (this.active)
                return;
            this.observer.observe(this.dom, observeOptions);
            if (useCharData)
                this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
        }
        stop() {
            if (!this.active)
                return;
            this.active = false;
            this.observer.disconnect();
            if (useCharData)
                this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        // Throw away any pending changes
        clear() {
            this.processRecords();
            this.queue.length = 0;
            this.selectionChanged = false;
        }
        // Chrome Android, especially in combination with GBoard, not only
        // doesn't reliably fire regular key events, but also often
        // surrounds the effect of enter or backspace with a bunch of
        // composition events that, when interrupted, cause text duplication
        // or other kinds of corruption. This hack makes the editor back off
        // from handling DOM changes for a moment when such a key is
        // detected (via beforeinput or keydown), and then tries to flush
        // them or, if that has no effect, dispatches the given key.
        delayAndroidKey(key, keyCode) {
            if (!this.delayedAndroidKey)
                requestAnimationFrame(() => {
                    let key = this.delayedAndroidKey;
                    this.delayedAndroidKey = null;
                    this.delayedFlush = -1;
                    if (!this.flush())
                        dispatchKey(this.view.contentDOM, key.key, key.keyCode);
                });
            // Since backspace beforeinput is sometimes signalled spuriously,
            // Enter always takes precedence.
            if (!this.delayedAndroidKey || key == "Enter")
                this.delayedAndroidKey = { key, keyCode };
        }
        flushSoon() {
            if (this.delayedFlush < 0)
                this.delayedFlush = window.setTimeout(() => { this.delayedFlush = -1; this.flush(); }, 20);
        }
        forceFlush() {
            if (this.delayedFlush >= 0) {
                window.clearTimeout(this.delayedFlush);
                this.delayedFlush = -1;
                this.flush();
            }
        }
        processRecords() {
            let records = this.queue;
            for (let mut of this.observer.takeRecords())
                records.push(mut);
            if (records.length)
                this.queue = [];
            let from = -1, to = -1, typeOver = false;
            for (let record of records) {
                let range = this.readMutation(record);
                if (!range)
                    continue;
                if (range.typeOver)
                    typeOver = true;
                if (from == -1) {
                    ({ from, to } = range);
                }
                else {
                    from = Math.min(range.from, from);
                    to = Math.max(range.to, to);
                }
            }
            return { from, to, typeOver };
        }
        // Apply pending changes, if any
        flush(readSelection = true) {
            // Completely hold off flushing when pending keys are set—the code
            // managing those will make sure processRecords is called and the
            // view is resynchronized after
            if (this.delayedFlush >= 0 || this.delayedAndroidKey)
                return;
            if (readSelection)
                this.readSelectionRange();
            let { from, to, typeOver } = this.processRecords();
            let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
            if (from < 0 && !newSel)
                return;
            this.selectionChanged = false;
            let startState = this.view.state;
            let handled = this.onChange(from, to, typeOver);
            // The view wasn't updated
            if (this.view.state == startState)
                this.view.update([]);
            return handled;
        }
        readMutation(rec) {
            let cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec))
                return null;
            cView.markDirty(rec.type == "attributes");
            if (rec.type == "attributes")
                cView.dirty |= 4 /* Attrs */;
            if (rec.type == "childList") {
                let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
                let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
                return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                    to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
            }
            else if (rec.type == "characterData") {
                return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
            }
            else {
                return null;
            }
        }
        destroy() {
            var _a, _b, _c;
            this.stop();
            (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
            (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
            (_c = this.resize) === null || _c === void 0 ? void 0 : _c.disconnect();
            for (let dom of this.scrollTargets)
                dom.removeEventListener("scroll", this.onScroll);
            window.removeEventListener("scroll", this.onScroll);
            window.removeEventListener("resize", this.onResize);
            window.removeEventListener("beforeprint", this.onPrint);
            this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
            clearTimeout(this.parentCheck);
            clearTimeout(this.resizeTimeout);
        }
    }
    function findChild(cView, dom, dir) {
        while (dom) {
            let curView = ContentView.get(dom);
            if (curView && curView.parent == cView)
                return curView;
            let parent = dom.parentNode;
            dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }
        return null;
    }
    // Used to work around a Safari Selection/shadow DOM bug (#414)
    function safariSelectionRangeHack(view) {
        let found = null;
        // Because Safari (at least in 2018-2021) doesn't provide regular
        // access to the selection inside a shadowroot, we have to perform a
        // ridiculous hack to get at it—using `execCommand` to trigger a
        // `beforeInput` event so that we can read the target range from the
        // event.
        function read(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            found = event.getTargetRanges()[0];
        }
        view.contentDOM.addEventListener("beforeinput", read, true);
        document.execCommand("indent");
        view.contentDOM.removeEventListener("beforeinput", read, true);
        if (!found)
            return null;
        let anchorNode = found.startContainer, anchorOffset = found.startOffset;
        let focusNode = found.endContainer, focusOffset = found.endOffset;
        let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
        // Since such a range doesn't distinguish between anchor and head,
        // use a heuristic that flips it around if its end matches the
        // current anchor.
        if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
            [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
        return { anchorNode, anchorOffset, focusNode, focusOffset };
    }

    function applyDOMChange(view, start, end, typeOver) {
        let change, newSel;
        let sel = view.state.selection.main;
        if (start > -1) {
            let bounds = view.docView.domBoundsAround(start, end, 0);
            if (!bounds || view.state.readOnly)
                return false;
            let { from, to } = bounds;
            let selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view);
            let reader = new DOMReader(selPoints, view.state);
            reader.readRange(bounds.startDOM, bounds.endDOM);
            let preferredPos = sel.from, preferredSide = null;
            // Prefer anchoring to end when Backspace is pressed (or, on
            // Android, when something was deleted)
            if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 ||
                browser.android && reader.text.length < to - from) {
                preferredPos = sel.to;
                preferredSide = "end";
            }
            let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), reader.text, preferredPos - from, preferredSide);
            if (diff) {
                // Chrome inserts two newlines when pressing shift-enter at the
                // end of a line. This drops one of those.
                if (browser.chrome && view.inputState.lastKeyCode == 13 &&
                    diff.toB == diff.from + 2 && reader.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                    diff.toB--;
                change = { from: from + diff.from, to: from + diff.toA,
                    insert: Text.of(reader.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
            }
            newSel = selectionFromPoints(selPoints, from);
        }
        else if (view.hasFocus || !view.state.facet(editable)) {
            let domSel = view.observer.selectionRange;
            let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
            let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                !contains(view.contentDOM, domSel.focusNode)
                ? view.state.selection.main.head
                : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
            let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                !contains(view.contentDOM, domSel.anchorNode)
                ? view.state.selection.main.anchor
                : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
            if (head != sel.head || anchor != sel.anchor)
                newSel = EditorSelection.single(anchor, head);
        }
        if (!change && !newSel)
            return false;
        // Heuristic to notice typing over a selected character
        if (!change && typeOver && !sel.empty && newSel && newSel.main.empty)
            change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
        // If the change is inside the selection and covers most of it,
        // assume it is a selection replace (with identical characters at
        // the start/end not included in the diff)
        else if (change && change.from >= sel.from && change.to <= sel.to &&
            (change.from != sel.from || change.to != sel.to) &&
            (sel.to - sel.from) - (change.to - change.from) <= 4)
            change = {
                from: sel.from, to: sel.to,
                insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
            };
        // Detect insert-period-on-double-space Mac behavior, and transform
        // it into a regular space insert.
        else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
            change.insert.toString() == ".")
            change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
        if (change) {
            let startState = view.state;
            if (browser.ios && view.inputState.flushIOSKey(view))
                return true;
            // Android browsers don't fire reasonable key events for enter,
            // backspace, or delete. So this detects changes that look like
            // they're caused by those keys, and reinterprets them as key
            // events. (Some of these keys are also handled by beforeinput
            // events and the pendingAndroidKey mechanism, but that's not
            // reliable in all situations.)
            if (browser.android &&
                ((change.from == sel.from && change.to == sel.to &&
                    change.insert.length == 1 && change.insert.lines == 2 &&
                    dispatchKey(view.contentDOM, "Enter", 13)) ||
                    (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&
                        dispatchKey(view.contentDOM, "Backspace", 8)) ||
                    (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                        dispatchKey(view.contentDOM, "Delete", 46))))
                return true;
            let text = change.insert.toString();
            if (view.state.facet(inputHandler$1).some(h => h(view, change.from, change.to, text)))
                return true;
            if (view.inputState.composing >= 0)
                view.inputState.composing++;
            let tr;
            if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
                (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
                view.inputState.composing < 0) {
                let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
                let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
                tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
            }
            else {
                let changes = startState.changes(change);
                let mainSel = newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength
                    ? newSel.main : undefined;
                // Try to apply a composition change to all cursors
                if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
                    change.to <= sel.to && change.to >= sel.to - 10) {
                    let replaced = view.state.sliceDoc(change.from, change.to);
                    let compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);
                    let offset = sel.to - change.to, size = sel.to - sel.from;
                    tr = startState.changeByRange(range => {
                        if (range.from == sel.from && range.to == sel.to)
                            return { changes, range: mainSel || range.map(changes) };
                        let to = range.to - offset, from = to - replaced.length;
                        if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                            // Unfortunately, there's no way to make multiple
                            // changes in the same node work without aborting
                            // composition, so cursors in the composition range are
                            // ignored.
                            compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to)
                            return { range };
                        let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                        return {
                            changes: rangeChanges,
                            range: !mainSel ? range.map(rangeChanges) :
                                EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                        };
                    });
                }
                else {
                    tr = {
                        changes,
                        selection: mainSel && startState.selection.replaceRange(mainSel)
                    };
                }
            }
            let userEvent = "input.type";
            if (view.composing) {
                userEvent += ".compose";
                if (view.inputState.compositionFirstChange) {
                    userEvent += ".start";
                    view.inputState.compositionFirstChange = false;
                }
            }
            view.dispatch(tr, { scrollIntoView: true, userEvent });
            return true;
        }
        else if (newSel && !newSel.main.eq(sel)) {
            let scrollIntoView = false, userEvent = "select";
            if (view.inputState.lastSelectionTime > Date.now() - 50) {
                if (view.inputState.lastSelectionOrigin == "select")
                    scrollIntoView = true;
                userEvent = view.inputState.lastSelectionOrigin;
            }
            view.dispatch({ selection: newSel, scrollIntoView, userEvent });
            return true;
        }
        else {
            return false;
        }
    }
    function findDiff(a, b, preferredPos, preferredSide) {
        let minLen = Math.min(a.length, b.length);
        let from = 0;
        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
            from++;
        if (from == minLen && a.length == b.length)
            return null;
        let toA = a.length, toB = b.length;
        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
            toA--;
            toB--;
        }
        if (preferredSide == "end") {
            let adjust = Math.max(0, from - Math.min(toA, toB));
            preferredPos -= toA + adjust - from;
        }
        if (toA < from && a.length < b.length) {
            let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
            from -= move;
            toB = from + (toB - toA);
            toA = from;
        }
        else if (toB < from) {
            let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
            from -= move;
            toA = from + (toA - toB);
            toB = from;
        }
        return { from, toA, toB };
    }
    function selectionPoints(view) {
        let result = [];
        if (view.root.activeElement != view.contentDOM)
            return result;
        let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
        if (anchorNode) {
            result.push(new DOMPoint(anchorNode, anchorOffset));
            if (focusNode != anchorNode || focusOffset != anchorOffset)
                result.push(new DOMPoint(focusNode, focusOffset));
        }
        return result;
    }
    function selectionFromPoints(points, base) {
        if (points.length == 0)
            return null;
        let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
    }

    // The editor's update state machine looks something like this:
    //
    //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
    //                                         ↑      ↓
    //                                         Updating (measure)
    //
    // The difference between 'Idle' and 'Idle (unchecked)' lies in
    // whether a layout check has been scheduled. A regular update through
    // the `update` method updates the DOM in a write-only fashion, and
    // relies on a check (scheduled with `requestAnimationFrame`) to make
    // sure everything is where it should be and the viewport covers the
    // visible code. That check continues to measure and then optionally
    // update until it reaches a coherent state.
    /**
    An editor view represents the editor's user interface. It holds
    the editable DOM surface, and possibly other elements such as the
    line number gutter. It handles events and dispatches state
    transactions for editing actions.
    */
    class EditorView {
        /**
        Construct a new view. You'll want to either provide a `parent`
        option, or put `view.dom` into your document after creating a
        view, so that the user can see the editor.
        */
        constructor(config = {}) {
            this.plugins = [];
            this.pluginMap = new Map;
            this.editorAttrs = {};
            this.contentAttrs = {};
            this.bidiCache = [];
            this.destroyed = false;
            /**
            @internal
            */
            this.updateState = 2 /* Updating */;
            /**
            @internal
            */
            this.measureScheduled = -1;
            /**
            @internal
            */
            this.measureRequests = [];
            this.contentDOM = document.createElement("div");
            this.scrollDOM = document.createElement("div");
            this.scrollDOM.tabIndex = -1;
            this.scrollDOM.className = "cm-scroller";
            this.scrollDOM.appendChild(this.contentDOM);
            this.announceDOM = document.createElement("div");
            this.announceDOM.style.cssText = "position: absolute; top: -10000px";
            this.announceDOM.setAttribute("aria-live", "polite");
            this.dom = document.createElement("div");
            this.dom.appendChild(this.announceDOM);
            this.dom.appendChild(this.scrollDOM);
            this._dispatch = config.dispatch || ((tr) => this.update([tr]));
            this.dispatch = this.dispatch.bind(this);
            this.root = (config.root || getRoot(config.parent) || document);
            this.viewState = new ViewState(config.state || EditorState.create(config));
            this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
            for (let plugin of this.plugins)
                plugin.update(this);
            this.observer = new DOMObserver(this, (from, to, typeOver) => {
                return applyDOMChange(this, from, to, typeOver);
            }, event => {
                this.inputState.runScrollHandlers(this, event);
                if (this.observer.intersecting)
                    this.measure();
            });
            this.inputState = new InputState(this);
            this.inputState.ensureHandlers(this, this.plugins);
            this.docView = new DocView(this);
            this.mountStyles();
            this.updateAttrs();
            this.updateState = 0 /* Idle */;
            this.requestMeasure();
            if (config.parent)
                config.parent.appendChild(this.dom);
        }
        /**
        The current editor state.
        */
        get state() { return this.viewState.state; }
        /**
        To be able to display large documents without consuming too much
        memory or overloading the browser, CodeMirror only draws the
        code that is visible (plus a margin around it) to the DOM. This
        property tells you the extent of the current drawn viewport, in
        document positions.
        */
        get viewport() { return this.viewState.viewport; }
        /**
        When there are, for example, large collapsed ranges in the
        viewport, its size can be a lot bigger than the actual visible
        content. Thus, if you are doing something like styling the
        content in the viewport, it is preferable to only do so for
        these ranges, which are the subset of the viewport that is
        actually drawn.
        */
        get visibleRanges() { return this.viewState.visibleRanges; }
        /**
        Returns false when the editor is entirely scrolled out of view
        or otherwise hidden.
        */
        get inView() { return this.viewState.inView; }
        /**
        Indicates whether the user is currently composing text via
        [IME](https://en.wikipedia.org/wiki/Input_method), and at least
        one change has been made in the current composition.
        */
        get composing() { return this.inputState.composing > 0; }
        /**
        Indicates whether the user is currently in composing state. Note
        that on some platforms, like Android, this will be the case a
        lot, since just putting the cursor on a word starts a
        composition there.
        */
        get compositionStarted() { return this.inputState.composing >= 0; }
        dispatch(...input) {
            this._dispatch(input.length == 1 && input[0] instanceof Transaction ? input[0]
                : this.state.update(...input));
        }
        /**
        Update the view for the given array of transactions. This will
        update the visible document and selection to match the state
        produced by the transactions, and notify view plugins of the
        change. You should usually call
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
        as a primitive.
        */
        update(transactions) {
            if (this.updateState != 0 /* Idle */)
                throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            let redrawn = false, attrsChanged = false, update;
            let state = this.state;
            for (let tr of transactions) {
                if (tr.startState != state)
                    throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                state = tr.state;
            }
            if (this.destroyed) {
                this.viewState.state = state;
                return;
            }
            this.observer.clear();
            // When the phrases change, redraw the editor
            if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
                return this.setState(state);
            update = ViewUpdate.create(this, state, transactions);
            let scrollTarget = this.viewState.scrollTarget;
            try {
                this.updateState = 2 /* Updating */;
                for (let tr of transactions) {
                    if (scrollTarget)
                        scrollTarget = scrollTarget.map(tr.changes);
                    if (tr.scrollIntoView) {
                        let { main } = tr.state.selection;
                        scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                    }
                    for (let e of tr.effects)
                        if (e.is(scrollIntoView$1))
                            scrollTarget = e.value;
                }
                this.viewState.update(update, scrollTarget);
                this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
                if (!update.empty) {
                    this.updatePlugins(update);
                    this.inputState.update(update);
                }
                redrawn = this.docView.update(update);
                if (this.state.facet(styleModule) != this.styleModules)
                    this.mountStyles();
                attrsChanged = this.updateAttrs();
                this.showAnnouncements(transactions);
                this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            if (update.startState.facet(theme) != update.state.facet(theme))
                this.viewState.mustMeasureContent = true;
            if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
                this.requestMeasure();
            if (!update.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(update);
        }
        /**
        Reset the view to the given state. (This will cause the entire
        document to be redrawn and all view plugins to be reinitialized,
        so you should probably only use it when the new state isn't
        derived from the old state. Otherwise, use
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
        */
        setState(newState) {
            if (this.updateState != 0 /* Idle */)
                throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
            if (this.destroyed) {
                this.viewState.state = newState;
                return;
            }
            this.updateState = 2 /* Updating */;
            let hadFocus = this.hasFocus;
            try {
                for (let plugin of this.plugins)
                    plugin.destroy(this);
                this.viewState = new ViewState(newState);
                this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
                this.pluginMap.clear();
                for (let plugin of this.plugins)
                    plugin.update(this);
                this.docView = new DocView(this);
                this.inputState.ensureHandlers(this, this.plugins);
                this.mountStyles();
                this.updateAttrs();
                this.bidiCache = [];
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            if (hadFocus)
                this.focus();
            this.requestMeasure();
        }
        updatePlugins(update) {
            let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
            if (prevSpecs != specs) {
                let newPlugins = [];
                for (let spec of specs) {
                    let found = prevSpecs.indexOf(spec);
                    if (found < 0) {
                        newPlugins.push(new PluginInstance(spec));
                    }
                    else {
                        let plugin = this.plugins[found];
                        plugin.mustUpdate = update;
                        newPlugins.push(plugin);
                    }
                }
                for (let plugin of this.plugins)
                    if (plugin.mustUpdate != update)
                        plugin.destroy(this);
                this.plugins = newPlugins;
                this.pluginMap.clear();
                this.inputState.ensureHandlers(this, this.plugins);
            }
            else {
                for (let p of this.plugins)
                    p.mustUpdate = update;
            }
            for (let i = 0; i < this.plugins.length; i++)
                this.plugins[i].update(this);
        }
        /**
        @internal
        */
        measure(flush = true) {
            if (this.destroyed)
                return;
            if (this.measureScheduled > -1)
                cancelAnimationFrame(this.measureScheduled);
            this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
            if (flush)
                this.observer.flush();
            let updated = null;
            try {
                for (let i = 0;; i++) {
                    this.updateState = 1 /* Measuring */;
                    let oldViewport = this.viewport;
                    let changed = this.viewState.measure(this);
                    if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                        break;
                    if (i > 5) {
                        console.warn(this.measureRequests.length
                            ? "Measure loop restarted more than 5 times"
                            : "Viewport failed to stabilize");
                        break;
                    }
                    let measuring = [];
                    // Only run measure requests in this cycle when the viewport didn't change
                    if (!(changed & 4 /* Viewport */))
                        [this.measureRequests, measuring] = [measuring, this.measureRequests];
                    let measured = measuring.map(m => {
                        try {
                            return m.read(this);
                        }
                        catch (e) {
                            logException(this.state, e);
                            return BadMeasure;
                        }
                    });
                    let update = ViewUpdate.create(this, this.state, []), redrawn = false, scrolled = false;
                    update.flags |= changed;
                    if (!updated)
                        updated = update;
                    else
                        updated.flags |= changed;
                    this.updateState = 2 /* Updating */;
                    if (!update.empty) {
                        this.updatePlugins(update);
                        this.inputState.update(update);
                        this.updateAttrs();
                        redrawn = this.docView.update(update);
                    }
                    for (let i = 0; i < measuring.length; i++)
                        if (measured[i] != BadMeasure) {
                            try {
                                let m = measuring[i];
                                if (m.write)
                                    m.write(measured[i], this);
                            }
                            catch (e) {
                                logException(this.state, e);
                            }
                        }
                    if (this.viewState.scrollTarget) {
                        this.docView.scrollIntoView(this.viewState.scrollTarget);
                        this.viewState.scrollTarget = null;
                        scrolled = true;
                    }
                    if (redrawn)
                        this.docView.updateSelection(true);
                    if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to &&
                        !scrolled && this.measureRequests.length == 0)
                        break;
                }
            }
            finally {
                this.updateState = 0 /* Idle */;
                this.measureScheduled = -1;
            }
            if (updated && !updated.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(updated);
        }
        /**
        Get the CSS classes for the currently active editor themes.
        */
        get themeClasses() {
            return baseThemeID + " " +
                (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
                this.state.facet(theme);
        }
        updateAttrs() {
            let editorAttrs = attrsFromFacet(this, editorAttributes, {
                class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });
            let contentAttrs = {
                spellcheck: "false",
                autocorrect: "off",
                autocapitalize: "off",
                translate: "no",
                contenteditable: !this.state.facet(editable) ? "false" : "true",
                class: "cm-content",
                style: `${browser.tabSize}: ${this.state.tabSize}`,
                role: "textbox",
                "aria-multiline": "true"
            };
            if (this.state.readOnly)
                contentAttrs["aria-readonly"] = "true";
            attrsFromFacet(this, contentAttributes, contentAttrs);
            let changed = this.observer.ignore(() => {
                let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
                let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
                return changedContent || changedEditor;
            });
            this.editorAttrs = editorAttrs;
            this.contentAttrs = contentAttrs;
            return changed;
        }
        showAnnouncements(trs) {
            let first = true;
            for (let tr of trs)
                for (let effect of tr.effects)
                    if (effect.is(EditorView.announce)) {
                        if (first)
                            this.announceDOM.textContent = "";
                        first = false;
                        let div = this.announceDOM.appendChild(document.createElement("div"));
                        div.textContent = effect.value;
                    }
        }
        mountStyles() {
            this.styleModules = this.state.facet(styleModule);
            StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$3).reverse());
        }
        readMeasured() {
            if (this.updateState == 2 /* Updating */)
                throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == 0 /* Idle */ && this.measureScheduled > -1)
                this.measure(false);
        }
        /**
        Schedule a layout measurement, optionally providing callbacks to
        do custom DOM measuring followed by a DOM write phase. Using
        this is preferable reading DOM layout directly from, for
        example, an event handler, because it'll make sure measuring and
        drawing done by other components is synchronized, avoiding
        unnecessary DOM layout computations.
        */
        requestMeasure(request) {
            if (this.measureScheduled < 0)
                this.measureScheduled = requestAnimationFrame(() => this.measure());
            if (request) {
                if (request.key != null)
                    for (let i = 0; i < this.measureRequests.length; i++) {
                        if (this.measureRequests[i].key === request.key) {
                            this.measureRequests[i] = request;
                            return;
                        }
                    }
                this.measureRequests.push(request);
            }
        }
        /**
        Get the value of a specific plugin, if present. Note that
        plugins that crash can be dropped from a view, so even when you
        know you registered a given plugin, it is recommended to check
        the return value of this method.
        */
        plugin(plugin) {
            let known = this.pluginMap.get(plugin);
            if (known === undefined || known && known.spec != plugin)
                this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
            return known && known.update(this).value;
        }
        /**
        The top position of the document, in screen coordinates. This
        may be negative when the editor is scrolled down. Points
        directly to the top of the first line, not above the padding.
        */
        get documentTop() {
            return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
        }
        /**
        Reports the padding above and below the document.
        */
        get documentPadding() {
            return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
        }
        /**
        Find the text line or block widget at the given vertical
        position (which is interpreted as relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)
        */
        elementAtHeight(height) {
            this.readMeasured();
            return this.viewState.elementAtHeight(height);
        }
        /**
        Find the line block (see
        [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
        height.
        */
        lineBlockAtHeight(height) {
            this.readMeasured();
            return this.viewState.lineBlockAtHeight(height);
        }
        /**
        Get the extent and vertical position of all [line
        blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
        are relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
        */
        get viewportLineBlocks() {
            return this.viewState.viewportLines;
        }
        /**
        Find the line block around the given document position. A line
        block is a range delimited on both sides by either a
        non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
        start/end of the document. It will usually just hold a line of
        text, but may be broken into multiple textblocks by block
        widgets.
        */
        lineBlockAt(pos) {
            return this.viewState.lineBlockAt(pos);
        }
        /**
        The editor's total content height.
        */
        get contentHeight() {
            return this.viewState.contentHeight;
        }
        /**
        Move a cursor position by [grapheme
        cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
        the motion is away from the line start, or towards it. In
        bidirectional text, the line is traversed in visual order, using
        the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
        When the start position was the last one on the line, the
        returned position will be across the line break. If there is no
        further line, the original position is returned.
        
        By default, this method moves over a single cluster. The
        optional `by` argument can be used to move across more. It will
        be called with the first cluster as argument, and should return
        a predicate that determines, for each subsequent cluster,
        whether it should also be moved over.
        */
        moveByChar(start, forward, by) {
            return skipAtoms(this, start, moveByChar(this, start, forward, by));
        }
        /**
        Move a cursor position across the next group of either
        [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
        non-whitespace characters.
        */
        moveByGroup(start, forward) {
            return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
        }
        /**
        Move to the next line boundary in the given direction. If
        `includeWrap` is true, line wrapping is on, and there is a
        further wrap point on the current line, the wrap point will be
        returned. Otherwise this function will return the start or end
        of the line.
        */
        moveToLineBoundary(start, forward, includeWrap = true) {
            return moveToLineBoundary(this, start, forward, includeWrap);
        }
        /**
        Move a cursor position vertically. When `distance` isn't given,
        it defaults to moving to the next line (including wrapped
        lines). Otherwise, `distance` should provide a positive distance
        in pixels.
        
        When `start` has a
        [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
        motion will use that as a target horizontal position. Otherwise,
        the cursor's own horizontal position is used. The returned
        cursor will have its goal column set to whichever column was
        used.
        */
        moveVertically(start, forward, distance) {
            return skipAtoms(this, start, moveVertically(this, start, forward, distance));
        }
        /**
        Find the DOM parent node and offset (child offset if `node` is
        an element, character offset when it is a text node) at the
        given document position.
        
        Note that for positions that aren't currently in
        `visibleRanges`, the resulting DOM position isn't necessarily
        meaningful (it may just point before or after a placeholder
        element).
        */
        domAtPos(pos) {
            return this.docView.domAtPos(pos);
        }
        /**
        Find the document position at the given DOM node. Can be useful
        for associating positions with DOM events. Will raise an error
        when `node` isn't part of the editor content.
        */
        posAtDOM(node, offset = 0) {
            return this.docView.posFromDOM(node, offset);
        }
        posAtCoords(coords, precise = true) {
            this.readMeasured();
            return posAtCoords(this, coords, precise);
        }
        /**
        Get the screen coordinates at the given document position.
        `side` determines whether the coordinates are based on the
        element before (-1) or after (1) the position (if no element is
        available on the given side, the method will transparently use
        another strategy to get reasonable coordinates).
        */
        coordsAtPos(pos, side = 1) {
            this.readMeasured();
            let rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right)
                return rect;
            let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
            let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
            return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
        }
        /**
        The default width of a character in the editor. May not
        accurately reflect the width of all characters (given variable
        width fonts or styling of invididual ranges).
        */
        get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
        /**
        The default height of a line in the editor. May not be accurate
        for all lines.
        */
        get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
        /**
        The text direction
        ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
        CSS property) of the editor's content element.
        */
        get textDirection() { return this.viewState.defaultTextDirection; }
        /**
        Find the text direction of the block at the given position, as
        assigned by CSS. If
        [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
        isn't enabled, or the given position is outside of the viewport,
        this will always return the same as
        [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
        this may trigger a DOM layout.
        */
        textDirectionAt(pos) {
            let perLine = this.state.facet(perLineTextDirection);
            if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
                return this.textDirection;
            this.readMeasured();
            return this.docView.textDirectionAt(pos);
        }
        /**
        Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
        (as determined by the
        [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
        CSS property of its content element).
        */
        get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
        /**
        Returns the bidirectional text structure of the given line
        (which should be in the current document) as an array of span
        objects. The order of these spans matches the [text
        direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
        left-to-right, the leftmost spans come first, otherwise the
        rightmost spans come first.
        */
        bidiSpans(line) {
            if (line.length > MaxBidiLine)
                return trivialOrder(line.length);
            let dir = this.textDirectionAt(line.from);
            for (let entry of this.bidiCache)
                if (entry.from == line.from && entry.dir == dir)
                    return entry.order;
            let order = computeOrder(line.text, dir);
            this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
            return order;
        }
        /**
        Check whether the editor has focus.
        */
        get hasFocus() {
            var _a;
            // Safari return false for hasFocus when the context menu is open
            // or closing, which leads us to ignore selection changes from the
            // context menu because it looks like the editor isn't focused.
            // This kludges around that.
            return (document.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
                this.root.activeElement == this.contentDOM;
        }
        /**
        Put focus on the editor.
        */
        focus() {
            this.observer.ignore(() => {
                focusPreventScroll(this.contentDOM);
                this.docView.updateSelection();
            });
        }
        /**
        Clean up this editor view, removing its element from the
        document, unregistering event handlers, and notifying
        plugins. The view instance can no longer be used after
        calling this.
        */
        destroy() {
            for (let plugin of this.plugins)
                plugin.destroy(this);
            this.plugins = [];
            this.inputState.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1)
                cancelAnimationFrame(this.measureScheduled);
            this.destroyed = true;
        }
        /**
        Returns an effect that can be
        [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
        cause it to scroll the given position or range into view.
        */
        static scrollIntoView(pos, options = {}) {
            return scrollIntoView$1.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
        }
        /**
        Returns an extension that can be used to add DOM event handlers.
        The value should be an object mapping event names to handler
        functions. For any given event, such functions are ordered by
        extension precedence, and the first handler to return true will
        be assumed to have handled that event, and no other handlers or
        built-in behavior will be activated for it. These are registered
        on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
        for `scroll` handlers, which will be called any time the
        editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
        its parent nodes is scrolled.
        */
        static domEventHandlers(handlers) {
            return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
        }
        /**
        Create a theme extension. The first argument can be a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)
        style spec providing the styles for the theme. These will be
        prefixed with a generated class for the style.
        
        Because the selectors will be prefixed with a scope class, rule
        that directly match the editor's [wrapper
        element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
        added—need to be explicitly differentiated by adding an `&` to
        the selector for that element—for example
        `&.cm-focused`.
        
        When `dark` is set to true, the theme will be marked as dark,
        which will cause the `&dark` rules from [base
        themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
        `&light` when a light theme is active).
        */
        static theme(spec, options) {
            let prefix = StyleModule.newName();
            let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
            if (options && options.dark)
                result.push(darkTheme.of(true));
            return result;
        }
        /**
        Create an extension that adds styles to the base theme. Like
        with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
        place of the editor wrapper element when directly targeting
        that. You can also use `&dark` or `&light` instead to only
        target editors with a dark or light theme.
        */
        static baseTheme(spec) {
            return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
        }
        /**
        Retrieve an editor view instance from the view's DOM
        representation.
        */
        static findFromDOM(dom) {
            var _a;
            let content = dom.querySelector(".cm-content");
            let cView = content && ContentView.get(content) || ContentView.get(dom);
            return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
        }
    }
    /**
    Facet to add a [style
    module](https://github.com/marijnh/style-mod#documentation) to
    an editor view. The view will ensure that the module is
    mounted in its [document
    root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
    */
    EditorView.styleModule = styleModule;
    /**
    An input handler can override the way changes to the editable
    DOM content are handled. Handlers are passed the document
    positions between which the change was found, and the new
    content. When one returns true, no further input handlers are
    called and the default behavior is prevented.
    */
    EditorView.inputHandler = inputHandler$1;
    /**
    By default, the editor assumes all its content has the same
    [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
    value to make it read the text direction of every (rendered)
    line separately.
    */
    EditorView.perLineTextDirection = perLineTextDirection;
    /**
    Allows you to provide a function that should be called when the
    library catches an exception from an extension (mostly from view
    plugins, but may be used by other extensions to route exceptions
    from user-code-provided callbacks). This is mostly useful for
    debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
    */
    EditorView.exceptionSink = exceptionSink;
    /**
    A facet that can be used to register a function to be called
    every time the view updates.
    */
    EditorView.updateListener = updateListener;
    /**
    Facet that controls whether the editor content DOM is editable.
    When its highest-precedence value is `false`, the element will
    not have its `contenteditable` attribute set. (Note that this
    doesn't affect API calls that change the editor content, even
    when those are bound to keys or buttons. See the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
    */
    EditorView.editable = editable;
    /**
    Allows you to influence the way mouse selection happens. The
    functions in this facet will be called for a `mousedown` event
    on the editor, and can return an object that overrides the way a
    selection is computed from that mouse click or drag.
    */
    EditorView.mouseSelectionStyle = mouseSelectionStyle;
    /**
    Facet used to configure whether a given selection drag event
    should move or copy the selection. The given predicate will be
    called with the `mousedown` event, and can return `true` when
    the drag should move the content.
    */
    EditorView.dragMovesSelection = dragMovesSelection$1;
    /**
    Facet used to configure whether a given selecting click adds a
    new range to the existing selection or replaces it entirely. The
    default behavior is to check `event.metaKey` on macOS, and
    `event.ctrlKey` elsewhere.
    */
    EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
    /**
    A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
    are shown in the view. Decorations can be provided in two
    ways—directly, or via a function that takes an editor view.

    Only decoration sets provided directly are allowed to influence
    the editor's vertical layout structure. The ones provided as
    functions are called _after_ the new viewport has been computed,
    and thus **must not** introduce block widgets or replacing
    decorations that cover line breaks.
    */
    EditorView.decorations = decorations;
    /**
    Used to provide ranges that should be treated as atoms as far as
    cursor motion is concerned. This causes methods like
    [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
    [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
    commands built on top of them) to skip across such regions when
    a selection endpoint would enter them. This does _not_ prevent
    direct programmatic [selection
    updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
    regions.
    */
    EditorView.atomicRanges = atomicRanges;
    /**
    Facet that allows extensions to provide additional scroll
    margins (space around the sides of the scrolling element that
    should be considered invisible). This can be useful when the
    plugin introduces elements that cover part of that element (for
    example a horizontally fixed gutter).
    */
    EditorView.scrollMargins = scrollMargins;
    /**
    This facet records whether a dark theme is active. The extension
    returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
    includes an instance of this when the `dark` option is set to
    true.
    */
    EditorView.darkTheme = darkTheme;
    /**
    Facet that provides additional DOM attributes for the editor's
    editable DOM element.
    */
    EditorView.contentAttributes = contentAttributes;
    /**
    Facet that provides DOM attributes for the editor's outer
    element.
    */
    EditorView.editorAttributes = editorAttributes;
    /**
    An extension that enables line wrapping in the editor (by
    setting CSS `white-space` to `pre-wrap` in the content).
    */
    EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
    /**
    State effect used to include screen reader announcements in a
    transaction. These will be added to the DOM in a visually hidden
    element with `aria-live="polite"` set, and should be used to
    describe effects that are visually obvious but may not be
    noticed by screen reader users (such as moving to the next
    search match).
    */
    EditorView.announce = /*@__PURE__*/StateEffect.define();
    // Maximum line length for which we compute accurate bidi info
    const MaxBidiLine = 4096;
    const BadMeasure = {};
    class CachedOrder {
        constructor(from, to, dir, order) {
            this.from = from;
            this.to = to;
            this.dir = dir;
            this.order = order;
        }
        static update(cache, changes) {
            if (changes.empty)
                return cache;
            let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
            for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
                let entry = cache[i];
                if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                    result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
            }
            return result;
        }
    }
    function attrsFromFacet(view, facet, base) {
        for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
            let source = sources[i], value = typeof source == "function" ? source(view) : source;
            if (value)
                combineAttrs(value, base);
        }
        return base;
    }

    const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
    function normalizeKeyName(name, platform) {
        const parts = name.split(/-(?!$)/);
        let result = parts[parts.length - 1];
        if (result == "Space")
            result = " ";
        let alt, ctrl, shift, meta;
        for (let i = 0; i < parts.length - 1; ++i) {
            const mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod))
                meta = true;
            else if (/^a(lt)?$/i.test(mod))
                alt = true;
            else if (/^(c|ctrl|control)$/i.test(mod))
                ctrl = true;
            else if (/^s(hift)?$/i.test(mod))
                shift = true;
            else if (/^mod$/i.test(mod)) {
                if (platform == "mac")
                    meta = true;
                else
                    ctrl = true;
            }
            else
                throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
            result = "Alt-" + result;
        if (ctrl)
            result = "Ctrl-" + result;
        if (meta)
            result = "Meta-" + result;
        if (shift)
            result = "Shift-" + result;
        return result;
    }
    function modifiers(name, event, shift) {
        if (event.altKey)
            name = "Alt-" + name;
        if (event.ctrlKey)
            name = "Ctrl-" + name;
        if (event.metaKey)
            name = "Meta-" + name;
        if (shift !== false && event.shiftKey)
            name = "Shift-" + name;
        return name;
    }
    const handleKeyEvents = /*@__PURE__*/EditorView.domEventHandlers({
        keydown(event, view) {
            return runHandlers(getKeymap(view.state), event, view, "editor");
        }
    });
    /**
    Facet used for registering keymaps.

    You can add multiple keymaps to an editor. Their priorities
    determine their precedence (the ones specified early or with high
    priority get checked first). When a handler has returned `true`
    for a given key, no further handlers are called.
    */
    const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
    const Keymaps = /*@__PURE__*/new WeakMap();
    // This is hidden behind an indirection, rather than directly computed
    // by the facet, to keep internal types out of the facet's type.
    function getKeymap(state) {
        let bindings = state.facet(keymap);
        let map = Keymaps.get(bindings);
        if (!map)
            Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
        return map;
    }
    /**
    Run the key handlers registered for a given scope. The event
    object should be a `"keydown"` event. Returns true if any of the
    handlers handled it.
    */
    function runScopeHandlers(view, event, scope) {
        return runHandlers(getKeymap(view.state), event, view, scope);
    }
    let storedPrefix = null;
    const PrefixTimeout = 4000;
    function buildKeymap(bindings, platform = currentPlatform) {
        let bound = Object.create(null);
        let isPrefix = Object.create(null);
        let checkPrefix = (name, is) => {
            let current = isPrefix[name];
            if (current == null)
                isPrefix[name] = is;
            else if (current != is)
                throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
        };
        let add = (scope, key, command, preventDefault) => {
            let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
            let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
            for (let i = 1; i < parts.length; i++) {
                let prefix = parts.slice(0, i).join(" ");
                checkPrefix(prefix, true);
                if (!scopeObj[prefix])
                    scopeObj[prefix] = {
                        preventDefault: true,
                        commands: [(view) => {
                                let ourObj = storedPrefix = { view, prefix, scope };
                                setTimeout(() => { if (storedPrefix == ourObj)
                                    storedPrefix = null; }, PrefixTimeout);
                                return true;
                            }]
                    };
            }
            let full = parts.join(" ");
            checkPrefix(full, false);
            let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, commands: [] });
            binding.commands.push(command);
            if (preventDefault)
                binding.preventDefault = true;
        };
        for (let b of bindings) {
            let name = b[platform] || b.key;
            if (!name)
                continue;
            for (let scope of b.scope ? b.scope.split(" ") : ["editor"]) {
                add(scope, name, b.run, b.preventDefault);
                if (b.shift)
                    add(scope, "Shift-" + name, b.shift, b.preventDefault);
            }
        }
        return bound;
    }
    function runHandlers(map, event, view, scope) {
        let name = keyName(event), isChar = name.length == 1 && name != " ";
        let prefix = "", fallthrough = false;
        if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
            prefix = storedPrefix.prefix + " ";
            if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0)
                storedPrefix = null;
        }
        let runFor = (binding) => {
            if (binding) {
                for (let cmd of binding.commands)
                    if (cmd(view))
                        return true;
                if (binding.preventDefault)
                    fallthrough = true;
            }
            return false;
        };
        let scopeObj = map[scope], baseName;
        if (scopeObj) {
            if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))
                return true;
            if (isChar && (event.shiftKey || event.altKey || event.metaKey) &&
                (baseName = base[event.keyCode]) && baseName != name) {
                if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))
                    return true;
            }
            else if (isChar && event.shiftKey) {
                if (runFor(scopeObj[prefix + modifiers(name, event, true)]))
                    return true;
            }
        }
        return fallthrough;
    }

    const CanHidePrimary = !browser.ios; // FIXME test IE
    const selectionConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                cursorBlinkRate: 1200,
                drawRangeCursor: true
            }, {
                cursorBlinkRate: (a, b) => Math.min(a, b),
                drawRangeCursor: (a, b) => a || b
            });
        }
    });
    /**
    Returns an extension that hides the browser's native selection and
    cursor, replacing the selection with a background behind the text
    (with the `cm-selectionBackground` class), and the
    cursors with elements overlaid over the code (using
    `cm-cursor-primary` and `cm-cursor-secondary`).

    This allows the editor to display secondary selection ranges, and
    tends to produce a type of selection more in line with that users
    expect in a text editor (the native selection styling will often
    leave gaps between lines and won't fill the horizontal space after
    a line when the selection continues past it).

    It does have a performance cost, in that it requires an extra DOM
    layout cycle for many updates (the selection is drawn based on DOM
    layout information that's only available after laying out the
    content).
    */
    function drawSelection(config = {}) {
        return [
            selectionConfig.of(config),
            drawSelectionPlugin,
            hideNativeSelection
        ];
    }
    class Piece {
        constructor(left, top, width, height, className) {
            this.left = left;
            this.top = top;
            this.width = width;
            this.height = height;
            this.className = className;
        }
        draw() {
            let elt = document.createElement("div");
            elt.className = this.className;
            this.adjust(elt);
            return elt;
        }
        adjust(elt) {
            elt.style.left = this.left + "px";
            elt.style.top = this.top + "px";
            if (this.width >= 0)
                elt.style.width = this.width + "px";
            elt.style.height = this.height + "px";
        }
        eq(p) {
            return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
                this.className == p.className;
        }
    }
    const drawSelectionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.rangePieces = [];
            this.cursors = [];
            this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };
            this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
            this.selectionLayer.className = "cm-selectionLayer";
            this.selectionLayer.setAttribute("aria-hidden", "true");
            this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
            this.cursorLayer.className = "cm-cursorLayer";
            this.cursorLayer.setAttribute("aria-hidden", "true");
            view.requestMeasure(this.measureReq);
            this.setBlinkRate();
        }
        setBlinkRate() {
            this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + "ms";
        }
        update(update) {
            let confChanged = update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
            if (confChanged || update.selectionSet || update.geometryChanged || update.viewportChanged)
                this.view.requestMeasure(this.measureReq);
            if (update.transactions.some(tr => tr.scrollIntoView))
                this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
            if (confChanged)
                this.setBlinkRate();
        }
        readPos() {
            let { state } = this.view, conf = state.facet(selectionConfig);
            let rangePieces = state.selection.ranges.map(r => r.empty ? [] : measureRange(this.view, r)).reduce((a, b) => a.concat(b));
            let cursors = [];
            for (let r of state.selection.ranges) {
                let prim = r == state.selection.main;
                if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
                    let piece = measureCursor(this.view, r, prim);
                    if (piece)
                        cursors.push(piece);
                }
            }
            return { rangePieces, cursors };
        }
        drawSel({ rangePieces, cursors }) {
            if (rangePieces.length != this.rangePieces.length || rangePieces.some((p, i) => !p.eq(this.rangePieces[i]))) {
                this.selectionLayer.textContent = "";
                for (let p of rangePieces)
                    this.selectionLayer.appendChild(p.draw());
                this.rangePieces = rangePieces;
            }
            if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {
                let oldCursors = this.cursorLayer.children;
                if (oldCursors.length !== cursors.length) {
                    this.cursorLayer.textContent = "";
                    for (const c of cursors)
                        this.cursorLayer.appendChild(c.draw());
                }
                else {
                    cursors.forEach((c, idx) => c.adjust(oldCursors[idx]));
                }
                this.cursors = cursors;
            }
        }
        destroy() {
            this.selectionLayer.remove();
            this.cursorLayer.remove();
        }
    });
    const themeSpec = {
        ".cm-line": {
            "& ::selection": { backgroundColor: "transparent !important" },
            "&::selection": { backgroundColor: "transparent !important" }
        }
    };
    if (CanHidePrimary)
        themeSpec[".cm-line"].caretColor = "transparent !important";
    const hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme(themeSpec));
    function getBase(view) {
        let rect = view.scrollDOM.getBoundingClientRect();
        let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
        return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };
    }
    function wrappedLine(view, pos, inside) {
        let range = EditorSelection.cursor(pos);
        return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
            to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
            type: BlockType.Text };
    }
    function blockAt(view, pos) {
        let line = view.lineBlockAt(pos);
        if (Array.isArray(line.type))
            for (let l of line.type) {
                if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
                    return l;
            }
        return line;
    }
    function measureRange(view, range) {
        if (range.to <= view.viewport.from || range.from >= view.viewport.to)
            return [];
        let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
        let ltr = view.textDirection == Direction.LTR;
        let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
        let lineStyle = window.getComputedStyle(content.firstChild);
        let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent));
        let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
        let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
        let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
        let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
        if (view.lineWrapping) {
            if (visualStart)
                visualStart = wrappedLine(view, from, visualStart);
            if (visualEnd)
                visualEnd = wrappedLine(view, to, visualEnd);
        }
        if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
            return pieces(drawForLine(range.from, range.to, visualStart));
        }
        else {
            let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
            let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
            let between = [];
            if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1)
                between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
            else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text)
                top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
            return pieces(top).concat(between).concat(pieces(bottom));
        }
        function piece(left, top, right, bottom) {
            return new Piece(left - base.left, top - base.top - 0.01 /* Epsilon */, right - left, bottom - top + 0.01 /* Epsilon */, "cm-selectionBackground");
        }
        function pieces({ top, bottom, horizontal }) {
            let pieces = [];
            for (let i = 0; i < horizontal.length; i += 2)
                pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
            return pieces;
        }
        // Gets passed from/to in line-local positions
        function drawForLine(from, to, line) {
            let top = 1e9, bottom = -1e9, horizontal = [];
            function addSpan(from, fromOpen, to, toOpen, dir) {
                // Passing 2/-2 is a kludge to force the view to return
                // coordinates on the proper side of block widgets, since
                // normalizing the side there, though appropriate for most
                // coordsAtPos queries, would break selection drawing.
                let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));
                let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));
                top = Math.min(fromCoords.top, toCoords.top, top);
                bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
                if (dir == Direction.LTR)
                    horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
                else
                    horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
            }
            let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
            // Split the range by visible range and document line
            for (let r of view.visibleRanges)
                if (r.to > start && r.from < end) {
                    for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
                        let docLine = view.state.doc.lineAt(pos);
                        for (let span of view.bidiSpans(docLine)) {
                            let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                            if (spanFrom >= endPos)
                                break;
                            if (spanTo > pos)
                                addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                        }
                        pos = docLine.to + 1;
                        if (pos >= endPos)
                            break;
                    }
                }
            if (horizontal.length == 0)
                addSpan(start, from == null, end, to == null, view.textDirection);
            return { top, bottom, horizontal };
        }
        function drawForWidget(block, top) {
            let y = contentRect.top + (top ? block.top : block.bottom);
            return { top: y, bottom: y, horizontal: [] };
        }
    }
    function measureCursor(view, cursor, primary) {
        let pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
        if (!pos)
            return null;
        let base = getBase(view);
        return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary");
    }

    const setDropCursorPos = /*@__PURE__*/StateEffect.define({
        map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }
    });
    const dropCursorPos = /*@__PURE__*/StateField.define({
        create() { return null; },
        update(pos, tr) {
            if (pos != null)
                pos = tr.changes.mapPos(pos);
            return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);
        }
    });
    const drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.cursor = null;
            this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
        }
        update(update) {
            var _a;
            let cursorPos = update.state.field(dropCursorPos);
            if (cursorPos == null) {
                if (this.cursor != null) {
                    (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
                    this.cursor = null;
                }
            }
            else {
                if (!this.cursor) {
                    this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
                    this.cursor.className = "cm-dropCursor";
                }
                if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
                    this.view.requestMeasure(this.measureReq);
            }
        }
        readPos() {
            let pos = this.view.state.field(dropCursorPos);
            let rect = pos != null && this.view.coordsAtPos(pos);
            if (!rect)
                return null;
            let outer = this.view.scrollDOM.getBoundingClientRect();
            return {
                left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,
                top: rect.top - outer.top + this.view.scrollDOM.scrollTop,
                height: rect.bottom - rect.top
            };
        }
        drawCursor(pos) {
            if (this.cursor) {
                if (pos) {
                    this.cursor.style.left = pos.left + "px";
                    this.cursor.style.top = pos.top + "px";
                    this.cursor.style.height = pos.height + "px";
                }
                else {
                    this.cursor.style.left = "-100000px";
                }
            }
        }
        destroy() {
            if (this.cursor)
                this.cursor.remove();
        }
        setDropPos(pos) {
            if (this.view.state.field(dropCursorPos) != pos)
                this.view.dispatch({ effects: setDropCursorPos.of(pos) });
        }
    }, {
        eventHandlers: {
            dragover(event) {
                this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
            },
            dragleave(event) {
                if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
                    this.setDropPos(null);
            },
            dragend() {
                this.setDropPos(null);
            },
            drop() {
                this.setDropPos(null);
            }
        }
    });
    /**
    Draws a cursor at the current drop position when something is
    dragged over the editor.
    */
    function dropCursor() {
        return [dropCursorPos, drawDropCursor];
    }

    function iterMatches(doc, re, from, to, f) {
        re.lastIndex = 0;
        for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
            if (!cursor.lineBreak)
                while (m = re.exec(cursor.value))
                    f(pos + m.index, pos + m.index + m[0].length, m);
        }
    }
    function matchRanges(view, maxLength) {
        let visible = view.visibleRanges;
        if (visible.length == 1 && visible[0].from == view.viewport.from &&
            visible[0].to == view.viewport.to)
            return visible;
        let result = [];
        for (let { from, to } of visible) {
            from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
            to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
            if (result.length && result[result.length - 1].to >= from)
                result[result.length - 1].to = to;
            else
                result.push({ from, to });
        }
        return result;
    }
    /**
    Helper class used to make it easier to maintain decorations on
    visible code that matches a given regular expression. To be used
    in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
    represent a matching configuration.
    */
    class MatchDecorator {
        /**
        Create a decorator.
        */
        constructor(config) {
            let { regexp, decoration, boundary, maxLength = 1000 } = config;
            if (!regexp.global)
                throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
            this.regexp = regexp;
            this.getDeco = typeof decoration == "function" ? decoration : () => decoration;
            this.boundary = boundary;
            this.maxLength = maxLength;
        }
        /**
        Compute the full set of decorations for matches in the given
        view's viewport. You'll want to call this when initializing your
        plugin.
        */
        createDeco(view) {
            let build = new RangeSetBuilder();
            for (let { from, to } of matchRanges(view, this.maxLength))
                iterMatches(view.state.doc, this.regexp, from, to, (a, b, m) => build.add(a, b, this.getDeco(m, view, a)));
            return build.finish();
        }
        /**
        Update a set of decorations for a view update. `deco` _must_ be
        the set of decorations produced by _this_ `MatchDecorator` for
        the view state before the update.
        */
        updateDeco(update, deco) {
            let changeFrom = 1e9, changeTo = -1;
            if (update.docChanged)
                update.changes.iterChanges((_f, _t, from, to) => {
                    if (to > update.view.viewport.from && from < update.view.viewport.to) {
                        changeFrom = Math.min(from, changeFrom);
                        changeTo = Math.max(to, changeTo);
                    }
                });
            if (update.viewportChanged || changeTo - changeFrom > 1000)
                return this.createDeco(update.view);
            if (changeTo > -1)
                return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
            return deco;
        }
        updateRange(view, deco, updateFrom, updateTo) {
            for (let r of view.visibleRanges) {
                let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
                if (to > from) {
                    let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
                    let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
                    if (this.boundary) {
                        for (; from > fromLine.from; from--)
                            if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                                start = from;
                                break;
                            }
                        for (; to < toLine.to; to++)
                            if (this.boundary.test(toLine.text[to - toLine.from])) {
                                end = to;
                                break;
                            }
                    }
                    let ranges = [], m;
                    if (fromLine == toLine) {
                        this.regexp.lastIndex = start - fromLine.from;
                        while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) {
                            let pos = m.index + fromLine.from;
                            ranges.push(this.getDeco(m, view, pos).range(pos, pos + m[0].length));
                        }
                    }
                    else {
                        iterMatches(view.state.doc, this.regexp, start, end, (from, to, m) => ranges.push(this.getDeco(m, view, from).range(from, to)));
                    }
                    deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });
                }
            }
            return deco;
        }
    }

    const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
    const Specials = /*@__PURE__*/new RegExp("[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\u202d\u202e\ufeff\ufff9-\ufffc]", UnicodeRegexpSupport);
    const Names = {
        0: "null",
        7: "bell",
        8: "backspace",
        10: "newline",
        11: "vertical tab",
        13: "carriage return",
        27: "escape",
        8203: "zero width space",
        8204: "zero width non-joiner",
        8205: "zero width joiner",
        8206: "left-to-right mark",
        8207: "right-to-left mark",
        8232: "line separator",
        8237: "left-to-right override",
        8238: "right-to-left override",
        8233: "paragraph separator",
        65279: "zero width no-break space",
        65532: "object replacement"
    };
    let _supportsTabSize = null;
    function supportsTabSize() {
        var _a;
        if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
            let styles = document.body.style;
            _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
        }
        return _supportsTabSize || false;
    }
    const specialCharConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            let config = combineConfig(configs, {
                render: null,
                specialChars: Specials,
                addSpecialChars: null
            });
            if (config.replaceTabs = !supportsTabSize())
                config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
            if (config.addSpecialChars)
                config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
            return config;
        }
    });
    /**
    Returns an extension that installs highlighting of special
    characters.
    */
    function highlightSpecialChars(
    /**
    Configuration options.
    */
    config = {}) {
        return [specialCharConfig.of(config), specialCharPlugin()];
    }
    let _plugin = null;
    function specialCharPlugin() {
        return _plugin || (_plugin = ViewPlugin.fromClass(class {
            constructor(view) {
                this.view = view;
                this.decorations = Decoration.none;
                this.decorationCache = Object.create(null);
                this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
                this.decorations = this.decorator.createDeco(view);
            }
            makeDecorator(conf) {
                return new MatchDecorator({
                    regexp: conf.specialChars,
                    decoration: (m, view, pos) => {
                        let { doc } = view.state;
                        let code = codePointAt(m[0], 0);
                        if (code == 9) {
                            let line = doc.lineAt(pos);
                            let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
                            return Decoration.replace({ widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth) });
                        }
                        return this.decorationCache[code] ||
                            (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
                    },
                    boundary: conf.replaceTabs ? undefined : /[^]/
                });
            }
            update(update) {
                let conf = update.state.facet(specialCharConfig);
                if (update.startState.facet(specialCharConfig) != conf) {
                    this.decorator = this.makeDecorator(conf);
                    this.decorations = this.decorator.createDeco(update.view);
                }
                else {
                    this.decorations = this.decorator.updateDeco(update, this.decorations);
                }
            }
        }, {
            decorations: v => v.decorations
        }));
    }
    const DefaultPlaceholder = "\u2022";
    // Assigns placeholder characters from the Control Pictures block to
    // ASCII control characters
    function placeholder$1(code) {
        if (code >= 32)
            return DefaultPlaceholder;
        if (code == 10)
            return "\u2424";
        return String.fromCharCode(9216 + code);
    }
    class SpecialCharWidget extends WidgetType {
        constructor(options, code) {
            super();
            this.options = options;
            this.code = code;
        }
        eq(other) { return other.code == this.code; }
        toDOM(view) {
            let ph = placeholder$1(this.code);
            let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
            let custom = this.options.render && this.options.render(this.code, desc, ph);
            if (custom)
                return custom;
            let span = document.createElement("span");
            span.textContent = ph;
            span.title = desc;
            span.setAttribute("aria-label", desc);
            span.className = "cm-specialChar";
            return span;
        }
        ignoreEvent() { return false; }
    }
    class TabWidget extends WidgetType {
        constructor(width) {
            super();
            this.width = width;
        }
        eq(other) { return other.width == this.width; }
        toDOM() {
            let span = document.createElement("span");
            span.textContent = "\t";
            span.className = "cm-tab";
            span.style.width = this.width + "px";
            return span;
        }
        ignoreEvent() { return false; }
    }

    /**
    Mark lines that have a cursor on them with the `"cm-activeLine"`
    DOM class.
    */
    function highlightActiveLine() {
        return activeLineHighlighter;
    }
    const lineDeco = /*@__PURE__*/Decoration.line({ class: "cm-activeLine" });
    const activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.docChanged || update.selectionSet)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let lastLineStart = -1, deco = [];
            for (let r of view.state.selection.ranges) {
                if (!r.empty)
                    return Decoration.none;
                let line = view.lineBlockAt(r.head);
                if (line.from > lastLineStart) {
                    deco.push(lineDeco.range(line.from));
                    lastLineStart = line.from;
                }
            }
            return Decoration.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });

    // Don't compute precise column positions for line offsets above this
    // (since it could get expensive). Assume offset==column for them.
    const MaxOff = 2000;
    function rectangleFor(state, a, b) {
        let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
        let ranges = [];
        if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
            let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
            for (let i = startLine; i <= endLine; i++) {
                let line = state.doc.line(i);
                if (line.length <= endOff)
                    ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
            }
        }
        else {
            let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
            for (let i = startLine; i <= endLine; i++) {
                let line = state.doc.line(i);
                let start = findColumn(line.text, startCol, state.tabSize, true);
                if (start > -1) {
                    let end = findColumn(line.text, endCol, state.tabSize);
                    ranges.push(EditorSelection.range(line.from + start, line.from + end));
                }
            }
        }
        return ranges;
    }
    function absoluteColumn(view, x) {
        let ref = view.coordsAtPos(view.viewport.from);
        return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
    }
    function getPos(view, event) {
        let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        let line = view.state.doc.lineAt(offset), off = offset - line.from;
        let col = off > MaxOff ? -1
            : off == line.length ? absoluteColumn(view, event.clientX)
                : countColumn(line.text, view.state.tabSize, offset - line.from);
        return { line: line.number, col, off };
    }
    function rectangleSelectionStyle(view, event) {
        let start = getPos(view, event), startSel = view.state.selection;
        if (!start)
            return null;
        return {
            update(update) {
                if (update.docChanged) {
                    let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
                    let newLine = update.state.doc.lineAt(newStart);
                    start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, _extend, multiple) {
                let cur = getPos(view, event);
                if (!cur)
                    return startSel;
                let ranges = rectangleFor(view.state, start, cur);
                if (!ranges.length)
                    return startSel;
                if (multiple)
                    return EditorSelection.create(ranges.concat(startSel.ranges));
                else
                    return EditorSelection.create(ranges);
            }
        };
    }
    /**
    Create an extension that enables rectangular selections. By
    default, it will react to left mouse drag with the Alt key held
    down. When such a selection occurs, the text within the rectangle
    that was dragged over will be selected, as one selection
    [range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
    */
    function rectangularSelection(options) {
        let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);
        return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
    }
    const keys = {
        Alt: [18, e => e.altKey],
        Control: [17, e => e.ctrlKey],
        Shift: [16, e => e.shiftKey],
        Meta: [91, e => e.metaKey]
    };
    const showCrosshair = { style: "cursor: crosshair" };
    /**
    Returns an extension that turns the pointer cursor into a
    crosshair when a given modifier key, defaulting to Alt, is held
    down. Can serve as a visual hint that rectangular selection is
    going to happen when paired with
    [`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
    */
    function crosshairCursor(options = {}) {
        let [code, getter] = keys[options.key || "Alt"];
        let plugin = ViewPlugin.fromClass(class {
            constructor(view) {
                this.view = view;
                this.isDown = false;
            }
            set(isDown) {
                if (this.isDown != isDown) {
                    this.isDown = isDown;
                    this.view.update([]);
                }
            }
        }, {
            eventHandlers: {
                keydown(e) {
                    this.set(e.keyCode == code || getter(e));
                },
                keyup(e) {
                    if (e.keyCode == code || !getter(e))
                        this.set(false);
                }
            }
        });
        return [
            plugin,
            EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })
        ];
    }

    const Outside = "-10000px";
    class TooltipViewManager {
        constructor(view, facet, createTooltipView) {
            this.facet = facet;
            this.createTooltipView = createTooltipView;
            this.input = view.state.facet(facet);
            this.tooltips = this.input.filter(t => t);
            this.tooltipViews = this.tooltips.map(createTooltipView);
        }
        update(update) {
            let input = update.state.facet(this.facet);
            let tooltips = input.filter(x => x);
            if (input === this.input) {
                for (let t of this.tooltipViews)
                    if (t.update)
                        t.update(update);
                return false;
            }
            let tooltipViews = [];
            for (let i = 0; i < tooltips.length; i++) {
                let tip = tooltips[i], known = -1;
                if (!tip)
                    continue;
                for (let i = 0; i < this.tooltips.length; i++) {
                    let other = this.tooltips[i];
                    if (other && other.create == tip.create)
                        known = i;
                }
                if (known < 0) {
                    tooltipViews[i] = this.createTooltipView(tip);
                }
                else {
                    let tooltipView = tooltipViews[i] = this.tooltipViews[known];
                    if (tooltipView.update)
                        tooltipView.update(update);
                }
            }
            for (let t of this.tooltipViews)
                if (tooltipViews.indexOf(t) < 0)
                    t.dom.remove();
            this.input = input;
            this.tooltips = tooltips;
            this.tooltipViews = tooltipViews;
            return true;
        }
    }
    function windowSpace() {
        return { top: 0, left: 0, bottom: innerHeight, right: innerWidth };
    }
    const tooltipConfig = /*@__PURE__*/Facet.define({
        combine: values => {
            var _a, _b, _c;
            return ({
                position: browser.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
                parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
                tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,
            });
        }
    });
    const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            var _a;
            this.view = view;
            this.inView = true;
            this.lastTransaction = 0;
            this.measureTimeout = -1;
            let config = view.state.facet(tooltipConfig);
            this.position = config.position;
            this.parent = config.parent;
            this.classes = view.themeClasses;
            this.createContainer();
            this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
            this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));
            this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
                if (Date.now() > this.lastTransaction - 50 &&
                    entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
                    this.measureSoon();
            }, { threshold: [1] }) : null;
            this.observeIntersection();
            (_a = view.dom.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
            this.maybeMeasure();
        }
        createContainer() {
            if (this.parent) {
                this.container = document.createElement("div");
                this.container.style.position = "relative";
                this.container.className = this.view.themeClasses;
                this.parent.appendChild(this.container);
            }
            else {
                this.container = this.view.dom;
            }
        }
        observeIntersection() {
            if (this.intersectionObserver) {
                this.intersectionObserver.disconnect();
                for (let tooltip of this.manager.tooltipViews)
                    this.intersectionObserver.observe(tooltip.dom);
            }
        }
        measureSoon() {
            if (this.measureTimeout < 0)
                this.measureTimeout = setTimeout(() => {
                    this.measureTimeout = -1;
                    this.maybeMeasure();
                }, 50);
        }
        update(update) {
            if (update.transactions.length)
                this.lastTransaction = Date.now();
            let updated = this.manager.update(update);
            if (updated)
                this.observeIntersection();
            let shouldMeasure = updated || update.geometryChanged;
            let newConfig = update.state.facet(tooltipConfig);
            if (newConfig.position != this.position) {
                this.position = newConfig.position;
                for (let t of this.manager.tooltipViews)
                    t.dom.style.position = this.position;
                shouldMeasure = true;
            }
            if (newConfig.parent != this.parent) {
                if (this.parent)
                    this.container.remove();
                this.parent = newConfig.parent;
                this.createContainer();
                for (let t of this.manager.tooltipViews)
                    this.container.appendChild(t.dom);
                shouldMeasure = true;
            }
            else if (this.parent && this.view.themeClasses != this.classes) {
                this.classes = this.container.className = this.view.themeClasses;
            }
            if (shouldMeasure)
                this.maybeMeasure();
        }
        createTooltip(tooltip) {
            let tooltipView = tooltip.create(this.view);
            tooltipView.dom.classList.add("cm-tooltip");
            if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
                let arrow = document.createElement("div");
                arrow.className = "cm-tooltip-arrow";
                tooltipView.dom.appendChild(arrow);
            }
            tooltipView.dom.style.position = this.position;
            tooltipView.dom.style.top = Outside;
            this.container.appendChild(tooltipView.dom);
            if (tooltipView.mount)
                tooltipView.mount(this.view);
            return tooltipView;
        }
        destroy() {
            var _a, _b;
            (_a = this.view.dom.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.removeEventListener("resize", this.measureSoon);
            for (let { dom } of this.manager.tooltipViews)
                dom.remove();
            (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
            clearTimeout(this.measureTimeout);
        }
        readMeasure() {
            let editor = this.view.dom.getBoundingClientRect();
            return {
                editor,
                parent: this.parent ? this.container.getBoundingClientRect() : editor,
                pos: this.manager.tooltips.map((t, i) => {
                    let tv = this.manager.tooltipViews[i];
                    return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
                }),
                size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
                space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
            };
        }
        writeMeasure(measured) {
            let { editor, space } = measured;
            let others = [];
            for (let i = 0; i < this.manager.tooltips.length; i++) {
                let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
                let pos = measured.pos[i], size = measured.size[i];
                // Hide tooltips that are outside of the editor.
                if (!pos || pos.bottom <= Math.max(editor.top, space.top) ||
                    pos.top >= Math.min(editor.bottom, space.bottom) ||
                    pos.right < Math.max(editor.left, space.left) - .1 ||
                    pos.left > Math.min(editor.right, space.right) + .1) {
                    dom.style.top = Outside;
                    continue;
                }
                let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
                let arrowHeight = arrow ? 7 /* Size */ : 0;
                let width = size.right - size.left, height = size.bottom - size.top;
                let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
                let left = size.width > space.right - space.left ? (ltr ? space.left : space.right - size.width)
                    : ltr ? Math.min(pos.left - (arrow ? 14 /* Offset */ : 0) + offset.x, space.right - width)
                        : Math.max(space.left, pos.left - width + (arrow ? 14 /* Offset */ : 0) - offset.x);
                let above = !!tooltip.above;
                if (!tooltip.strictSide && (above
                    ? pos.top - (size.bottom - size.top) - offset.y < space.top
                    : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) &&
                    above == (space.bottom - pos.bottom > pos.top - space.top))
                    above = !above;
                let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
                let right = left + width;
                if (tView.overlap !== true)
                    for (let r of others)
                        if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
                            top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
                if (this.position == "absolute") {
                    dom.style.top = (top - measured.parent.top) + "px";
                    dom.style.left = (left - measured.parent.left) + "px";
                }
                else {
                    dom.style.top = top + "px";
                    dom.style.left = left + "px";
                }
                if (arrow)
                    arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Offset */ - 7 /* Size */)}px`;
                if (tView.overlap !== true)
                    others.push({ left, top, right, bottom: top + height });
                dom.classList.toggle("cm-tooltip-above", above);
                dom.classList.toggle("cm-tooltip-below", !above);
                if (tView.positioned)
                    tView.positioned();
            }
        }
        maybeMeasure() {
            if (this.manager.tooltips.length) {
                if (this.view.inView)
                    this.view.requestMeasure(this.measureReq);
                if (this.inView != this.view.inView) {
                    this.inView = this.view.inView;
                    if (!this.inView)
                        for (let tv of this.manager.tooltipViews)
                            tv.dom.style.top = Outside;
                }
            }
        }
    }, {
        eventHandlers: {
            scroll() { this.maybeMeasure(); }
        }
    });
    const baseTheme$4 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-tooltip": {
            zIndex: 100
        },
        "&light .cm-tooltip": {
            border: "1px solid #bbb",
            backgroundColor: "#f5f5f5"
        },
        "&light .cm-tooltip-section:not(:first-child)": {
            borderTop: "1px solid #bbb",
        },
        "&dark .cm-tooltip": {
            backgroundColor: "#333338",
            color: "white"
        },
        ".cm-tooltip-arrow": {
            height: `${7 /* Size */}px`,
            width: `${7 /* Size */ * 2}px`,
            position: "absolute",
            zIndex: -1,
            overflow: "hidden",
            "&:before, &:after": {
                content: "''",
                position: "absolute",
                width: 0,
                height: 0,
                borderLeft: `${7 /* Size */}px solid transparent`,
                borderRight: `${7 /* Size */}px solid transparent`,
            },
            ".cm-tooltip-above &": {
                bottom: `-${7 /* Size */}px`,
                "&:before": {
                    borderTop: `${7 /* Size */}px solid #bbb`,
                },
                "&:after": {
                    borderTop: `${7 /* Size */}px solid #f5f5f5`,
                    bottom: "1px"
                }
            },
            ".cm-tooltip-below &": {
                top: `-${7 /* Size */}px`,
                "&:before": {
                    borderBottom: `${7 /* Size */}px solid #bbb`,
                },
                "&:after": {
                    borderBottom: `${7 /* Size */}px solid #f5f5f5`,
                    top: "1px"
                }
            },
        },
        "&dark .cm-tooltip .cm-tooltip-arrow": {
            "&:before": {
                borderTopColor: "#333338",
                borderBottomColor: "#333338"
            },
            "&:after": {
                borderTopColor: "transparent",
                borderBottomColor: "transparent"
            }
        }
    });
    const noOffset = { x: 0, y: 0 };
    /**
    Facet to which an extension can add a value to show a tooltip.
    */
    const showTooltip = /*@__PURE__*/Facet.define({
        enables: [tooltipPlugin, baseTheme$4]
    });
    const showHoverTooltip = /*@__PURE__*/Facet.define();
    class HoverTooltipHost {
        constructor(view) {
            this.view = view;
            this.mounted = false;
            this.dom = document.createElement("div");
            this.dom.classList.add("cm-tooltip-hover");
            this.manager = new TooltipViewManager(view, showHoverTooltip, t => this.createHostedView(t));
        }
        // Needs to be static so that host tooltip instances always match
        static create(view) {
            return new HoverTooltipHost(view);
        }
        createHostedView(tooltip) {
            let hostedView = tooltip.create(this.view);
            hostedView.dom.classList.add("cm-tooltip-section");
            this.dom.appendChild(hostedView.dom);
            if (this.mounted && hostedView.mount)
                hostedView.mount(this.view);
            return hostedView;
        }
        mount(view) {
            for (let hostedView of this.manager.tooltipViews) {
                if (hostedView.mount)
                    hostedView.mount(view);
            }
            this.mounted = true;
        }
        positioned() {
            for (let hostedView of this.manager.tooltipViews) {
                if (hostedView.positioned)
                    hostedView.positioned();
            }
        }
        update(update) {
            this.manager.update(update);
        }
    }
    const showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {
        let tooltips = state.facet(showHoverTooltip).filter(t => t);
        if (tooltips.length === 0)
            return null;
        return {
            pos: Math.min(...tooltips.map(t => t.pos)),
            end: Math.max(...tooltips.filter(t => t.end != null).map(t => t.end)),
            create: HoverTooltipHost.create,
            above: tooltips[0].above,
            arrow: tooltips.some(t => t.arrow),
        };
    });
    class HoverPlugin {
        constructor(view, source, field, setHover, hoverTime) {
            this.view = view;
            this.source = source;
            this.field = field;
            this.setHover = setHover;
            this.hoverTime = hoverTime;
            this.hoverTimeout = -1;
            this.restartTimeout = -1;
            this.pending = null;
            this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
            this.checkHover = this.checkHover.bind(this);
            view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
            view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
        }
        update() {
            if (this.pending) {
                this.pending = null;
                clearTimeout(this.restartTimeout);
                this.restartTimeout = setTimeout(() => this.startHover(), 20);
            }
        }
        get active() {
            return this.view.state.field(this.field);
        }
        checkHover() {
            this.hoverTimeout = -1;
            if (this.active)
                return;
            let hovered = Date.now() - this.lastMove.time;
            if (hovered < this.hoverTime)
                this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
            else
                this.startHover();
        }
        startHover() {
            clearTimeout(this.restartTimeout);
            let { lastMove } = this;
            let pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;
            if (pos == null)
                return;
            let posCoords = this.view.coordsAtPos(pos);
            if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom ||
                lastMove.x < posCoords.left - this.view.defaultCharacterWidth ||
                lastMove.x > posCoords.right + this.view.defaultCharacterWidth)
                return;
            let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);
            let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
            let open = this.source(this.view, pos, (lastMove.x < posCoords.left ? -rtl : rtl));
            if (open === null || open === void 0 ? void 0 : open.then) {
                let pending = this.pending = { pos };
                open.then(result => {
                    if (this.pending == pending) {
                        this.pending = null;
                        if (result)
                            this.view.dispatch({ effects: this.setHover.of(result) });
                    }
                }, e => logException(this.view.state, e, "hover tooltip"));
            }
            else if (open) {
                this.view.dispatch({ effects: this.setHover.of(open) });
            }
        }
        mousemove(event) {
            var _a;
            this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
            if (this.hoverTimeout < 0)
                this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
            let tooltip = this.active;
            if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {
                let { pos } = tooltip || this.pending, end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;
                if ((pos == end ? this.view.posAtCoords(this.lastMove) != pos
                    : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6 /* MaxDist */))) {
                    this.view.dispatch({ effects: this.setHover.of(null) });
                    this.pending = null;
                }
            }
        }
        mouseleave() {
            clearTimeout(this.hoverTimeout);
            this.hoverTimeout = -1;
            if (this.active)
                this.view.dispatch({ effects: this.setHover.of(null) });
        }
        destroy() {
            clearTimeout(this.hoverTimeout);
            this.view.dom.removeEventListener("mouseleave", this.mouseleave);
            this.view.dom.removeEventListener("mousemove", this.mousemove);
        }
    }
    function isInTooltip(elt) {
        for (let cur = elt; cur; cur = cur.parentNode)
            if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip"))
                return true;
        return false;
    }
    function isOverRange(view, from, to, x, y, margin) {
        let range = document.createRange();
        let fromDOM = view.domAtPos(from), toDOM = view.domAtPos(to);
        range.setEnd(toDOM.node, toDOM.offset);
        range.setStart(fromDOM.node, fromDOM.offset);
        let rects = range.getClientRects();
        range.detach();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
            if (dist <= margin)
                return true;
        }
        return false;
    }
    /**
    Set up a hover tooltip, which shows up when the pointer hovers
    over ranges of text. The callback is called when the mouse hovers
    over the document text. It should, if there is a tooltip
    associated with position `pos`, return the tooltip description
    (either directly or in a promise). The `side` argument indicates
    on which side of the position the pointer is—it will be -1 if the
    pointer is before the position, 1 if after the position.

    Note that all hover tooltips are hosted within a single tooltip
    container element. This allows multiple tooltips over the same
    range to be "merged" together without overlapping.
    */
    function hoverTooltip(source, options = {}) {
        let setHover = StateEffect.define();
        let hoverState = StateField.define({
            create() { return null; },
            update(value, tr) {
                if (value && (options.hideOnChange && (tr.docChanged || tr.selection) ||
                    options.hideOn && options.hideOn(tr, value)))
                    return null;
                if (value && tr.docChanged) {
                    let newPos = tr.changes.mapPos(value.pos, -1, MapMode.TrackDel);
                    if (newPos == null)
                        return null;
                    let copy = Object.assign(Object.create(null), value);
                    copy.pos = newPos;
                    if (value.end != null)
                        copy.end = tr.changes.mapPos(value.end);
                    value = copy;
                }
                for (let effect of tr.effects) {
                    if (effect.is(setHover))
                        value = effect.value;
                    if (effect.is(closeHoverTooltipEffect))
                        value = null;
                }
                return value;
            },
            provide: f => showHoverTooltip.from(f)
        });
        return [
            hoverState,
            ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Time */)),
            showHoverTooltipHost
        ];
    }
    /**
    Get the active tooltip view for a given tooltip, if available.
    */
    function getTooltip(view, tooltip) {
        let plugin = view.plugin(tooltipPlugin);
        if (!plugin)
            return null;
        let found = plugin.manager.tooltips.indexOf(tooltip);
        return found < 0 ? null : plugin.manager.tooltipViews[found];
    }
    const closeHoverTooltipEffect = /*@__PURE__*/StateEffect.define();

    const panelConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            let topContainer, bottomContainer;
            for (let c of configs) {
                topContainer = topContainer || c.topContainer;
                bottomContainer = bottomContainer || c.bottomContainer;
            }
            return { topContainer, bottomContainer };
        }
    });
    /**
    Get the active panel created by the given constructor, if any.
    This can be useful when you need access to your panels' DOM
    structure.
    */
    function getPanel(view, panel) {
        let plugin = view.plugin(panelPlugin);
        let index = plugin ? plugin.specs.indexOf(panel) : -1;
        return index > -1 ? plugin.panels[index] : null;
    }
    const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.input = view.state.facet(showPanel);
            this.specs = this.input.filter(s => s);
            this.panels = this.specs.map(spec => spec(view));
            let conf = view.state.facet(panelConfig);
            this.top = new PanelGroup(view, true, conf.topContainer);
            this.bottom = new PanelGroup(view, false, conf.bottomContainer);
            this.top.sync(this.panels.filter(p => p.top));
            this.bottom.sync(this.panels.filter(p => !p.top));
            for (let p of this.panels) {
                p.dom.classList.add("cm-panel");
                if (p.mount)
                    p.mount();
            }
        }
        update(update) {
            let conf = update.state.facet(panelConfig);
            if (this.top.container != conf.topContainer) {
                this.top.sync([]);
                this.top = new PanelGroup(update.view, true, conf.topContainer);
            }
            if (this.bottom.container != conf.bottomContainer) {
                this.bottom.sync([]);
                this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
            }
            this.top.syncClasses();
            this.bottom.syncClasses();
            let input = update.state.facet(showPanel);
            if (input != this.input) {
                let specs = input.filter(x => x);
                let panels = [], top = [], bottom = [], mount = [];
                for (let spec of specs) {
                    let known = this.specs.indexOf(spec), panel;
                    if (known < 0) {
                        panel = spec(update.view);
                        mount.push(panel);
                    }
                    else {
                        panel = this.panels[known];
                        if (panel.update)
                            panel.update(update);
                    }
                    panels.push(panel);
                    (panel.top ? top : bottom).push(panel);
                }
                this.specs = specs;
                this.panels = panels;
                this.top.sync(top);
                this.bottom.sync(bottom);
                for (let p of mount) {
                    p.dom.classList.add("cm-panel");
                    if (p.mount)
                        p.mount();
                }
            }
            else {
                for (let p of this.panels)
                    if (p.update)
                        p.update(update);
            }
        }
        destroy() {
            this.top.sync([]);
            this.bottom.sync([]);
        }
    }, {
        provide: plugin => EditorView.scrollMargins.of(view => {
            let value = view.plugin(plugin);
            return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
        })
    });
    class PanelGroup {
        constructor(view, top, container) {
            this.view = view;
            this.top = top;
            this.container = container;
            this.dom = undefined;
            this.classes = "";
            this.panels = [];
            this.syncClasses();
        }
        sync(panels) {
            for (let p of this.panels)
                if (p.destroy && panels.indexOf(p) < 0)
                    p.destroy();
            this.panels = panels;
            this.syncDOM();
        }
        syncDOM() {
            if (this.panels.length == 0) {
                if (this.dom) {
                    this.dom.remove();
                    this.dom = undefined;
                }
                return;
            }
            if (!this.dom) {
                this.dom = document.createElement("div");
                this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
                this.dom.style[this.top ? "top" : "bottom"] = "0";
                let parent = this.container || this.view.dom;
                parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
            }
            let curDOM = this.dom.firstChild;
            for (let panel of this.panels) {
                if (panel.dom.parentNode == this.dom) {
                    while (curDOM != panel.dom)
                        curDOM = rm(curDOM);
                    curDOM = curDOM.nextSibling;
                }
                else {
                    this.dom.insertBefore(panel.dom, curDOM);
                }
            }
            while (curDOM)
                curDOM = rm(curDOM);
        }
        scrollMargin() {
            return !this.dom || this.container ? 0
                : Math.max(0, this.top ?
                    this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :
                    Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
        }
        syncClasses() {
            if (!this.container || this.classes == this.view.themeClasses)
                return;
            for (let cls of this.classes.split(" "))
                if (cls)
                    this.container.classList.remove(cls);
            for (let cls of (this.classes = this.view.themeClasses).split(" "))
                if (cls)
                    this.container.classList.add(cls);
        }
    }
    function rm(node) {
        let next = node.nextSibling;
        node.remove();
        return next;
    }
    /**
    Opening a panel is done by providing a constructor function for
    the panel through this facet. (The panel is closed again when its
    constructor is no longer provided.) Values of `null` are ignored.
    */
    const showPanel = /*@__PURE__*/Facet.define({
        enables: panelPlugin
    });

    /**
    A gutter marker represents a bit of information attached to a line
    in a specific gutter. Your own custom markers have to extend this
    class.
    */
    class GutterMarker extends RangeValue {
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        Compare this marker to another marker of the same type.
        */
        eq(other) { return false; }
        /**
        Called if the marker has a `toDOM` method and its representation
        was removed from a gutter.
        */
        destroy(dom) { }
    }
    GutterMarker.prototype.elementClass = "";
    GutterMarker.prototype.toDOM = undefined;
    GutterMarker.prototype.mapMode = MapMode.TrackBefore;
    GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
    GutterMarker.prototype.point = true;
    /**
    Facet used to add a class to all gutter elements for a given line.
    Markers given to this facet should _only_ define an
    [`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
    [`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
    in all gutters for the line).
    */
    const gutterLineClass = /*@__PURE__*/Facet.define();
    const defaults$1 = {
        class: "",
        renderEmptyElements: false,
        elementStyle: "",
        markers: () => RangeSet.empty,
        lineMarker: () => null,
        lineMarkerChange: null,
        initialSpacer: null,
        updateSpacer: null,
        domEventHandlers: {}
    };
    const activeGutters = /*@__PURE__*/Facet.define();
    /**
    Define an editor gutter. The order in which the gutters appear is
    determined by their extension priority.
    */
    function gutter(config) {
        return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults$1), config))];
    }
    const unfixGutters = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    /**
    The gutter-drawing plugin is automatically enabled when you add a
    gutter, but you can use this function to explicitly configure it.

    Unless `fixed` is explicitly set to `false`, the gutters are
    fixed, meaning they don't scroll along with the content
    horizontally (except on Internet Explorer, which doesn't support
    CSS [`position:
    sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
    */
    function gutters(config) {
        let result = [
            gutterView,
        ];
        if (config && config.fixed === false)
            result.push(unfixGutters.of(true));
        return result;
    }
    const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.prevViewport = view.viewport;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutters";
            this.dom.setAttribute("aria-hidden", "true");
            this.dom.style.minHeight = this.view.contentHeight + "px";
            this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
            for (let gutter of this.gutters)
                this.dom.appendChild(gutter.dom);
            this.fixed = !view.state.facet(unfixGutters);
            if (this.fixed) {
                // FIXME IE11 fallback, which doesn't support position: sticky,
                // by using position: relative + event handlers that realign the
                // gutter (or just force fixed=false on IE11?)
                this.dom.style.position = "sticky";
            }
            this.syncGutters(false);
            view.scrollDOM.insertBefore(this.dom, view.contentDOM);
        }
        update(update) {
            if (this.updateGutters(update)) {
                // Detach during sync when the viewport changed significantly
                // (such as during scrolling), since for large updates that is
                // faster.
                let vpA = this.prevViewport, vpB = update.view.viewport;
                let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
                this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
            }
            if (update.geometryChanged)
                this.dom.style.minHeight = this.view.contentHeight + "px";
            if (this.view.state.facet(unfixGutters) != !this.fixed) {
                this.fixed = !this.fixed;
                this.dom.style.position = this.fixed ? "sticky" : "";
            }
            this.prevViewport = update.view.viewport;
        }
        syncGutters(detach) {
            let after = this.dom.nextSibling;
            if (detach)
                this.dom.remove();
            let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
            let classSet = [];
            let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));
            for (let line of this.view.viewportLineBlocks) {
                let text;
                if (Array.isArray(line.type)) {
                    for (let b of line.type)
                        if (b.type == BlockType.Text) {
                            text = b;
                            break;
                        }
                }
                else {
                    text = line.type == BlockType.Text ? line : undefined;
                }
                if (!text)
                    continue;
                if (classSet.length)
                    classSet = [];
                advanceCursor(lineClasses, classSet, line.from);
                for (let cx of contexts)
                    cx.line(this.view, text, classSet);
            }
            for (let cx of contexts)
                cx.finish();
            if (detach)
                this.view.scrollDOM.insertBefore(this.dom, after);
        }
        updateGutters(update) {
            let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
            let change = update.docChanged || update.heightChanged || update.viewportChanged ||
                !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
            if (prev == cur) {
                for (let gutter of this.gutters)
                    if (gutter.update(update))
                        change = true;
            }
            else {
                change = true;
                let gutters = [];
                for (let conf of cur) {
                    let known = prev.indexOf(conf);
                    if (known < 0) {
                        gutters.push(new SingleGutterView(this.view, conf));
                    }
                    else {
                        this.gutters[known].update(update);
                        gutters.push(this.gutters[known]);
                    }
                }
                for (let g of this.gutters) {
                    g.dom.remove();
                    if (gutters.indexOf(g) < 0)
                        g.destroy();
                }
                for (let g of gutters)
                    this.dom.appendChild(g.dom);
                this.gutters = gutters;
            }
            return change;
        }
        destroy() {
            for (let view of this.gutters)
                view.destroy();
            this.dom.remove();
        }
    }, {
        provide: plugin => EditorView.scrollMargins.of(view => {
            let value = view.plugin(plugin);
            if (!value || value.gutters.length == 0 || !value.fixed)
                return null;
            return view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };
        })
    });
    function asArray(val) { return (Array.isArray(val) ? val : [val]); }
    function advanceCursor(cursor, collect, pos) {
        while (cursor.value && cursor.from <= pos) {
            if (cursor.from == pos)
                collect.push(cursor.value);
            cursor.next();
        }
    }
    class UpdateContext {
        constructor(gutter, viewport, height) {
            this.gutter = gutter;
            this.height = height;
            this.localMarkers = [];
            this.i = 0;
            this.cursor = RangeSet.iter(gutter.markers, viewport.from);
        }
        line(view, line, extraMarkers) {
            if (this.localMarkers.length)
                this.localMarkers = [];
            advanceCursor(this.cursor, this.localMarkers, line.from);
            let localMarkers = extraMarkers.length ? this.localMarkers.concat(extraMarkers) : this.localMarkers;
            let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
            if (forLine)
                localMarkers.unshift(forLine);
            let gutter = this.gutter;
            if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
                return;
            let above = line.top - this.height;
            if (this.i == gutter.elements.length) {
                let newElt = new GutterElement(view, line.height, above, localMarkers);
                gutter.elements.push(newElt);
                gutter.dom.appendChild(newElt.dom);
            }
            else {
                gutter.elements[this.i].update(view, line.height, above, localMarkers);
            }
            this.height = line.bottom;
            this.i++;
        }
        finish() {
            let gutter = this.gutter;
            while (gutter.elements.length > this.i) {
                let last = gutter.elements.pop();
                gutter.dom.removeChild(last.dom);
                last.destroy();
            }
        }
    }
    class SingleGutterView {
        constructor(view, config) {
            this.view = view;
            this.config = config;
            this.elements = [];
            this.spacer = null;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
            for (let prop in config.domEventHandlers) {
                this.dom.addEventListener(prop, (event) => {
                    let line = view.lineBlockAtHeight(event.clientY - view.documentTop);
                    if (config.domEventHandlers[prop](view, line, event))
                        event.preventDefault();
                });
            }
            this.markers = asArray(config.markers(view));
            if (config.initialSpacer) {
                this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
                this.dom.appendChild(this.spacer.dom);
                this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
            }
        }
        update(update) {
            let prevMarkers = this.markers;
            this.markers = asArray(this.config.markers(update.view));
            if (this.spacer && this.config.updateSpacer) {
                let updated = this.config.updateSpacer(this.spacer.markers[0], update);
                if (updated != this.spacer.markers[0])
                    this.spacer.update(update.view, 0, 0, [updated]);
            }
            let vp = update.view.viewport;
            return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||
                (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
        }
        destroy() {
            for (let elt of this.elements)
                elt.destroy();
        }
    }
    class GutterElement {
        constructor(view, height, above, markers) {
            this.height = -1;
            this.above = 0;
            this.markers = [];
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutterElement";
            this.update(view, height, above, markers);
        }
        update(view, height, above, markers) {
            if (this.height != height)
                this.dom.style.height = (this.height = height) + "px";
            if (this.above != above)
                this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
            if (!sameMarkers(this.markers, markers))
                this.setMarkers(view, markers);
        }
        setMarkers(view, markers) {
            let cls = "cm-gutterElement", domPos = this.dom.firstChild;
            for (let iNew = 0, iOld = 0;;) {
                let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
                if (marker) {
                    let c = marker.elementClass;
                    if (c)
                        cls += " " + c;
                    for (let i = iOld; i < this.markers.length; i++)
                        if (this.markers[i].compare(marker)) {
                            skipTo = i;
                            matched = true;
                            break;
                        }
                }
                else {
                    skipTo = this.markers.length;
                }
                while (iOld < skipTo) {
                    let next = this.markers[iOld++];
                    if (next.toDOM) {
                        next.destroy(domPos);
                        let after = domPos.nextSibling;
                        domPos.remove();
                        domPos = after;
                    }
                }
                if (!marker)
                    break;
                if (marker.toDOM) {
                    if (matched)
                        domPos = domPos.nextSibling;
                    else
                        this.dom.insertBefore(marker.toDOM(view), domPos);
                }
                if (matched)
                    iOld++;
            }
            this.dom.className = cls;
            this.markers = markers;
        }
        destroy() {
            this.setMarkers(null, []); // First argument not used unless creating markers
        }
    }
    function sameMarkers(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].compare(b[i]))
                return false;
        return true;
    }
    /**
    Facet used to provide markers to the line number gutter.
    */
    const lineNumberMarkers = /*@__PURE__*/Facet.define();
    const lineNumberConfig = /*@__PURE__*/Facet.define({
        combine(values) {
            return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
                domEventHandlers(a, b) {
                    let result = Object.assign({}, a);
                    for (let event in b) {
                        let exists = result[event], add = b[event];
                        result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                    }
                    return result;
                }
            });
        }
    });
    class NumberMarker extends GutterMarker {
        constructor(number) {
            super();
            this.number = number;
        }
        eq(other) { return this.number == other.number; }
        toDOM() { return document.createTextNode(this.number); }
    }
    function formatNumber(view, number) {
        return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
    }
    const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
        class: "cm-lineNumbers",
        renderEmptyElements: false,
        markers(view) { return view.state.facet(lineNumberMarkers); },
        lineMarker(view, line, others) {
            if (others.some(m => m.toDOM))
                return null;
            return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
        },
        lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
        initialSpacer(view) {
            return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
        },
        updateSpacer(spacer, update) {
            let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
            return max == spacer.number ? spacer : new NumberMarker(max);
        },
        domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
    }));
    /**
    Create a line number gutter extension.
    */
    function lineNumbers(config = {}) {
        return [
            lineNumberConfig.of(config),
            gutters(),
            lineNumberGutter
        ];
    }
    function maxLineNumber(lines) {
        let last = 9;
        while (last < lines)
            last = last * 10 + 9;
        return last;
    }
    const activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {
        constructor() {
            super(...arguments);
            this.elementClass = "cm-activeLineGutter";
        }
    };
    const activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], state => {
        let marks = [], last = -1;
        for (let range of state.selection.ranges)
            if (range.empty) {
                let linePos = state.doc.lineAt(range.head).from;
                if (linePos > last) {
                    last = linePos;
                    marks.push(activeLineGutterMarker.range(linePos));
                }
            }
        return RangeSet.of(marks);
    });
    /**
    Returns an extension that adds a `cm-activeLineGutter` class to
    all gutter elements on the [active
    line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
    */
    function highlightActiveLineGutter() {
        return activeLineGutterHighlighter;
    }

    // FIXME profile adding a per-Tree TreeNode cache, validating it by
    // parent pointer
    /// The default maximum length of a `TreeBuffer` node.
    const DefaultBufferLength = 1024;
    let nextPropID = 0;
    class Range {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    }
    /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
    /// can have metadata associated with it in props. Instances of this
    /// class represent prop names.
    class NodeProp {
        /// Create a new node prop type.
        constructor(config = {}) {
            this.id = nextPropID++;
            this.perNode = !!config.perNode;
            this.deserialize = config.deserialize || (() => {
                throw new Error("This node type doesn't define a deserialize function");
            });
        }
        /// This is meant to be used with
        /// [`NodeSet.extend`](#common.NodeSet.extend) or
        /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
        /// prop values for each node type in the set. Takes a [match
        /// object](#common.NodeType^match) or function that returns undefined
        /// if the node type doesn't get this prop, and the prop's value if
        /// it does.
        add(match) {
            if (this.perNode)
                throw new RangeError("Can't add per-node props to node types");
            if (typeof match != "function")
                match = NodeType.match(match);
            return (type) => {
                let result = match(type);
                return result === undefined ? null : [this, result];
            };
        }
    }
    /// Prop that is used to describe matching delimiters. For opening
    /// delimiters, this holds an array of node names (written as a
    /// space-separated string when declaring this prop in a grammar)
    /// for the node types of closing delimiters that match it.
    NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
    /// attached to closing delimiters, holding an array of node names
    /// of types of matching opening delimiters.
    NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /// Used to assign node types to groups (for example, all node
    /// types that represent an expression could be tagged with an
    /// `"Expression"` group).
    NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
    /// The hash of the [context](#lr.ContextTracker.constructor)
    /// that the node was parsed in, if any. Used to limit reuse of
    /// contextual nodes.
    NodeProp.contextHash = new NodeProp({ perNode: true });
    /// The distance beyond the end of the node that the tokenizer
    /// looked ahead for any of the tokens inside the node. (The LR
    /// parser only stores this when it is larger than 25, for
    /// efficiency reasons.)
    NodeProp.lookAhead = new NodeProp({ perNode: true });
    /// This per-node prop is used to replace a given node, or part of a
    /// node, with another tree. This is useful to include trees from
    /// different languages in mixed-language parsers.
    NodeProp.mounted = new NodeProp({ perNode: true });
    const noProps = Object.create(null);
    /// Each node in a syntax tree has a node type associated with it.
    class NodeType {
        /// @internal
        constructor(
        /// The name of the node type. Not necessarily unique, but if the
        /// grammar was written properly, different node types with the
        /// same name within a node set should play the same semantic
        /// role.
        name, 
        /// @internal
        props, 
        /// The id of this node in its set. Corresponds to the term ids
        /// used in the parser.
        id, 
        /// @internal
        flags = 0) {
            this.name = name;
            this.props = props;
            this.id = id;
            this.flags = flags;
        }
        /// Define a node type.
        static define(spec) {
            let props = spec.props && spec.props.length ? Object.create(null) : noProps;
            let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |
                (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);
            let type = new NodeType(spec.name || "", props, spec.id, flags);
            if (spec.props)
                for (let src of spec.props) {
                    if (!Array.isArray(src))
                        src = src(type);
                    if (src) {
                        if (src[0].perNode)
                            throw new RangeError("Can't store a per-node prop on a node type");
                        props[src[0].id] = src[1];
                    }
                }
            return type;
        }
        /// Retrieves a node prop for this type. Will return `undefined` if
        /// the prop isn't present on this node.
        prop(prop) { return this.props[prop.id]; }
        /// True when this is the top node of a grammar.
        get isTop() { return (this.flags & 1 /* Top */) > 0; }
        /// True when this node is produced by a skip rule.
        get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }
        /// Indicates whether this is an error node.
        get isError() { return (this.flags & 4 /* Error */) > 0; }
        /// When true, this node type doesn't correspond to a user-declared
        /// named node, for example because it is used to cache repetition.
        get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }
        /// Returns true when this node's name or one of its
        /// [groups](#common.NodeProp^group) matches the given string.
        is(name) {
            if (typeof name == 'string') {
                if (this.name == name)
                    return true;
                let group = this.prop(NodeProp.group);
                return group ? group.indexOf(name) > -1 : false;
            }
            return this.id == name;
        }
        /// Create a function from node types to arbitrary values by
        /// specifying an object whose property names are node or
        /// [group](#common.NodeProp^group) names. Often useful with
        /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
        /// names, separated by spaces, in a single property name to map
        /// multiple node names to a single value.
        static match(map) {
            let direct = Object.create(null);
            for (let prop in map)
                for (let name of prop.split(" "))
                    direct[name] = map[prop];
            return (node) => {
                for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                    let found = direct[i < 0 ? node.name : groups[i]];
                    if (found)
                        return found;
                }
            };
        }
    }
    /// An empty dummy node type to use when no actual type is available.
    NodeType.none = new NodeType("", Object.create(null), 0, 8 /* Anonymous */);
    /// A node set holds a collection of node types. It is used to
    /// compactly represent trees by storing their type ids, rather than a
    /// full pointer to the type object, in a numeric array. Each parser
    /// [has](#lr.LRParser.nodeSet) a node set, and [tree
    /// buffers](#common.TreeBuffer) can only store collections of nodes
    /// from the same set. A set can have a maximum of 2**16 (65536) node
    /// types in it, so that the ids fit into 16-bit typed array slots.
    class NodeSet {
        /// Create a set with the given types. The `id` property of each
        /// type should correspond to its position within the array.
        constructor(
        /// The node types in this set, by id.
        types) {
            this.types = types;
            for (let i = 0; i < types.length; i++)
                if (types[i].id != i)
                    throw new RangeError("Node type ids should correspond to array positions when creating a node set");
        }
        /// Create a copy of this set with some node properties added. The
        /// arguments to this method can be created with
        /// [`NodeProp.add`](#common.NodeProp.add).
        extend(...props) {
            let newTypes = [];
            for (let type of this.types) {
                let newProps = null;
                for (let source of props) {
                    let add = source(type);
                    if (add) {
                        if (!newProps)
                            newProps = Object.assign({}, type.props);
                        newProps[add[0].id] = add[1];
                    }
                }
                newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
            }
            return new NodeSet(newTypes);
        }
    }
    const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
    /// Options that control iteration. Can be combined with the `|`
    /// operator to enable multiple ones.
    var IterMode;
    (function (IterMode) {
        /// When enabled, iteration will only visit [`Tree`](#common.Tree)
        /// objects, not nodes packed into
        /// [`TreeBuffer`](#common.TreeBuffer)s.
        IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
        /// Enable this to make iteration include anonymous nodes (such as
        /// the nodes that wrap repeated grammar constructs into a balanced
        /// tree).
        IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
        /// By default, regular [mounted](#common.NodeProp^mounted) nodes
        /// replace their base node in iteration. Enable this to ignore them
        /// instead.
        IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
        /// This option only applies in
        /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
        /// library to not enter mounted overlays if one covers the given
        /// position.
        IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
    })(IterMode || (IterMode = {}));
    /// A piece of syntax tree. There are two ways to approach these
    /// trees: the way they are actually stored in memory, and the
    /// convenient way.
    ///
    /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
    /// objects. By packing detail information into `TreeBuffer` leaf
    /// nodes, the representation is made a lot more memory-efficient.
    ///
    /// However, when you want to actually work with tree nodes, this
    /// representation is very awkward, so most client code will want to
    /// use the [`TreeCursor`](#common.TreeCursor) or
    /// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
    /// a view on some part of this data structure, and can be used to
    /// move around to adjacent nodes.
    class Tree {
        /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
        constructor(
        /// The type of the top node.
        type, 
        /// This node's child nodes.
        children, 
        /// The positions (offsets relative to the start of this tree) of
        /// the children.
        positions, 
        /// The total length of this tree
        length, 
        /// Per-node [node props](#common.NodeProp) to associate with this node.
        props) {
            this.type = type;
            this.children = children;
            this.positions = positions;
            this.length = length;
            /// @internal
            this.props = null;
            if (props && props.length) {
                this.props = Object.create(null);
                for (let [prop, value] of props)
                    this.props[typeof prop == "number" ? prop : prop.id] = value;
            }
        }
        /// @internal
        toString() {
            let mounted = this.prop(NodeProp.mounted);
            if (mounted && !mounted.overlay)
                return mounted.tree.toString();
            let children = "";
            for (let ch of this.children) {
                let str = ch.toString();
                if (str) {
                    if (children)
                        children += ",";
                    children += str;
                }
            }
            return !this.type.name ? children :
                (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                    (children.length ? "(" + children + ")" : "");
        }
        /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
        /// the tree. Mode can be used to [control](#common.IterMode) which
        /// nodes the cursor visits.
        cursor(mode = 0) {
            return new TreeCursor(this.topNode, mode);
        }
        /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
        /// at the given position and side (see
        /// [`moveTo`](#common.TreeCursor.moveTo).
        cursorAt(pos, side = 0, mode = 0) {
            let scope = CachedNode.get(this) || this.topNode;
            let cursor = new TreeCursor(scope);
            cursor.moveTo(pos, side);
            CachedNode.set(this, cursor._tree);
            return cursor;
        }
        /// Get a [syntax node](#common.SyntaxNode) object for the top of the
        /// tree.
        get topNode() {
            return new TreeNode(this, 0, 0, null);
        }
        /// Get the [syntax node](#common.SyntaxNode) at the given position.
        /// If `side` is -1, this will move into nodes that end at the
        /// position. If 1, it'll move into nodes that start at the
        /// position. With 0, it'll only enter nodes that cover the position
        /// from both sides.
        resolve(pos, side = 0) {
            let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
            CachedNode.set(this, node);
            return node;
        }
        /// Like [`resolve`](#common.Tree.resolve), but will enter
        /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
        /// pointing into the innermost overlaid tree at the given position
        /// (with parent links going through all parent structure, including
        /// the host trees).
        resolveInner(pos, side = 0) {
            let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
            CachedInnerNode.set(this, node);
            return node;
        }
        /// Iterate over the tree and its children, calling `enter` for any
        /// node that touches the `from`/`to` region (if given) before
        /// running over such a node's children, and `leave` (if given) when
        /// leaving the node. When `enter` returns `false`, that node will
        /// not have its children iterated over (or `leave` called).
        iterate(spec) {
            let { enter, leave, from = 0, to = this.length } = spec;
            for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {
                let entered = false;
                if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {
                    if (c.firstChild())
                        continue;
                    entered = true;
                }
                for (;;) {
                    if (entered && leave && !c.type.isAnonymous)
                        leave(c);
                    if (c.nextSibling())
                        break;
                    if (!c.parent())
                        return;
                    entered = true;
                }
            }
        }
        /// Get the value of the given [node prop](#common.NodeProp) for this
        /// node. Works with both per-node and per-type props.
        prop(prop) {
            return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
        }
        /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
        /// format that can be passed to the [`Tree`](#common.Tree)
        /// constructor.
        get propValues() {
            let result = [];
            if (this.props)
                for (let id in this.props)
                    result.push([+id, this.props[id]]);
            return result;
        }
        /// Balance the direct children of this tree, producing a copy of
        /// which may have children grouped into subtrees with type
        /// [`NodeType.none`](#common.NodeType^none).
        balance(config = {}) {
            return this.children.length <= 8 /* BranchFactor */ ? this :
                balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
        }
        /// Build a tree from a postfix-ordered buffer of node information,
        /// or a cursor over such a buffer.
        static build(data) { return buildTree(data); }
    }
    /// The empty tree
    Tree.empty = new Tree(NodeType.none, [], [], 0);
    class FlatBufferCursor {
        constructor(buffer, index) {
            this.buffer = buffer;
            this.index = index;
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        get pos() { return this.index; }
        next() { this.index -= 4; }
        fork() { return new FlatBufferCursor(this.buffer, this.index); }
    }
    /// Tree buffers contain (type, start, end, endIndex) quads for each
    /// node. In such a buffer, nodes are stored in prefix order (parents
    /// before children, with the endIndex of the parent indicating which
    /// children belong to it).
    class TreeBuffer {
        /// Create a tree buffer.
        constructor(
        /// The buffer's content.
        buffer, 
        /// The total length of the group of nodes in the buffer.
        length, 
        /// The node set used in this buffer.
        set) {
            this.buffer = buffer;
            this.length = length;
            this.set = set;
        }
        /// @internal
        get type() { return NodeType.none; }
        /// @internal
        toString() {
            let result = [];
            for (let index = 0; index < this.buffer.length;) {
                result.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result.join(",");
        }
        /// @internal
        childString(index) {
            let id = this.buffer[index], endIndex = this.buffer[index + 3];
            let type = this.set.types[id], result = type.name;
            if (/\W/.test(result) && !type.isError)
                result = JSON.stringify(result);
            index += 4;
            if (endIndex == index)
                return result;
            let children = [];
            while (index < endIndex) {
                children.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result + "(" + children.join(",") + ")";
        }
        /// @internal
        findChild(startIndex, endIndex, dir, pos, side) {
            let { buffer } = this, pick = -1;
            for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
                if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                    pick = i;
                    if (dir > 0)
                        break;
                }
            }
            return pick;
        }
        /// @internal
        slice(startI, endI, from, to) {
            let b = this.buffer;
            let copy = new Uint16Array(endI - startI);
            for (let i = startI, j = 0; i < endI;) {
                copy[j++] = b[i++];
                copy[j++] = b[i++] - from;
                copy[j++] = b[i++] - from;
                copy[j++] = b[i++] - startI;
            }
            return new TreeBuffer(copy, to - from, this.set);
        }
    }
    function checkSide(side, pos, from, to) {
        switch (side) {
            case -2 /* Before */: return from < pos;
            case -1 /* AtOrBefore */: return to >= pos && from < pos;
            case 0 /* Around */: return from < pos && to > pos;
            case 1 /* AtOrAfter */: return from <= pos && to > pos;
            case 2 /* After */: return to > pos;
            case 4 /* DontCare */: return true;
        }
    }
    function enterUnfinishedNodesBefore(node, pos) {
        let scan = node.childBefore(pos);
        while (scan) {
            let last = scan.lastChild;
            if (!last || last.to != scan.to)
                break;
            if (last.type.isError && last.from == last.to) {
                node = scan;
                scan = last.prevSibling;
            }
            else {
                scan = last;
            }
        }
        return node;
    }
    function resolveNode(node, pos, side, overlays) {
        var _a;
        // Move up to a node that actually holds the position, if possible
        while (node.from == node.to ||
            (side < 1 ? node.from >= pos : node.from > pos) ||
            (side > -1 ? node.to <= pos : node.to < pos)) {
            let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
            if (!parent)
                return node;
            node = parent;
        }
        let mode = overlays ? 0 : IterMode.IgnoreOverlays;
        // Must go up out of overlays when those do not overlap with pos
        if (overlays)
            for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
                if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                    node = parent;
            }
        for (;;) {
            let inner = node.enter(pos, side, mode);
            if (!inner)
                return node;
            node = inner;
        }
    }
    class TreeNode {
        constructor(_tree, from, 
        // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
        index, _parent) {
            this._tree = _tree;
            this.from = from;
            this.index = index;
            this._parent = _parent;
        }
        get type() { return this._tree.type; }
        get name() { return this._tree.type.name; }
        get to() { return this.from + this._tree.length; }
        nextChild(i, dir, pos, side, mode = 0) {
            for (let parent = this;;) {
                for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                    let next = children[i], start = positions[i] + parent.from;
                    if (!checkSide(side, pos, start, start + next.length))
                        continue;
                    if (next instanceof TreeBuffer) {
                        if (mode & IterMode.ExcludeBuffers)
                            continue;
                        let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                        if (index > -1)
                            return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                    }
                    else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                        let mounted;
                        if (!(mode & IterMode.IgnoreMounts) &&
                            next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)
                            return new TreeNode(mounted.tree, start, i, parent);
                        let inner = new TreeNode(next, start, i, parent);
                        return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                            : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                    }
                }
                if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                    return null;
                if (parent.index >= 0)
                    i = parent.index + dir;
                else
                    i = dir < 0 ? -1 : parent._parent._tree.children.length;
                parent = parent._parent;
                if (!parent)
                    return null;
            }
        }
        get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }
        get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* DontCare */); }
        childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }
        childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Before */); }
        enter(pos, side, mode = 0) {
            let mounted;
            if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
                let rPos = pos - this.from;
                for (let { from, to } of mounted.overlay) {
                    if ((side > 0 ? from <= rPos : from < rPos) &&
                        (side < 0 ? to >= rPos : to > rPos))
                        return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
                }
            }
            return this.nextChild(0, 1, pos, side, mode);
        }
        nextSignificantParent() {
            let val = this;
            while (val.type.isAnonymous && val._parent)
                val = val._parent;
            return val;
        }
        get parent() {
            return this._parent ? this._parent.nextSignificantParent() : null;
        }
        get nextSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;
        }
        get prevSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;
        }
        cursor(mode = 0) { return new TreeCursor(this, mode); }
        get tree() { return this._tree; }
        toTree() { return this._tree; }
        resolve(pos, side = 0) {
            return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
            return resolveNode(this, pos, side, true);
        }
        enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
        getChild(type, before = null, after = null) {
            let r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren(this, type, before, after);
        }
        /// @internal
        toString() { return this._tree.toString(); }
        get node() { return this; }
        matchContext(context) { return matchNodeContext(this, context); }
    }
    function getChildren(node, type, before, after) {
        let cur = node.cursor(), result = [];
        if (!cur.firstChild())
            return result;
        if (before != null)
            while (!cur.type.is(before))
                if (!cur.nextSibling())
                    return result;
        for (;;) {
            if (after != null && cur.type.is(after))
                return result;
            if (cur.type.is(type))
                result.push(cur.node);
            if (!cur.nextSibling())
                return after == null ? result : [];
        }
    }
    function matchNodeContext(node, context, i = context.length - 1) {
        for (let p = node.parent; i >= 0; p = p.parent) {
            if (!p)
                return false;
            if (!p.type.isAnonymous) {
                if (context[i] && context[i] != p.name)
                    return false;
                i--;
            }
        }
        return true;
    }
    class BufferContext {
        constructor(parent, buffer, index, start) {
            this.parent = parent;
            this.buffer = buffer;
            this.index = index;
            this.start = start;
        }
    }
    class BufferNode {
        constructor(context, _parent, index) {
            this.context = context;
            this._parent = _parent;
            this.index = index;
            this.type = context.buffer.set.types[context.buffer.buffer[index]];
        }
        get name() { return this.type.name; }
        get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
        get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
        child(dir, pos, side) {
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get firstChild() { return this.child(1, 0, 4 /* DontCare */); }
        get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }
        childAfter(pos) { return this.child(1, pos, 2 /* After */); }
        childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }
        enter(pos, side, mode = 0) {
            if (mode & IterMode.ExcludeBuffers)
                return null;
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get parent() {
            return this._parent || this.context.parent.nextSignificantParent();
        }
        externalSibling(dir) {
            return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);
        }
        get nextSibling() {
            let { buffer } = this.context;
            let after = buffer.buffer[this.index + 3];
            if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
                return new BufferNode(this.context, this._parent, after);
            return this.externalSibling(1);
        }
        get prevSibling() {
            let { buffer } = this.context;
            let parentStart = this._parent ? this._parent.index + 4 : 0;
            if (this.index == parentStart)
                return this.externalSibling(-1);
            return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));
        }
        cursor(mode = 0) { return new TreeCursor(this, mode); }
        get tree() { return null; }
        toTree() {
            let children = [], positions = [];
            let { buffer } = this.context;
            let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
            if (endI > startI) {
                let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];
                children.push(buffer.slice(startI, endI, from, to));
                positions.push(0);
            }
            return new Tree(this.type, children, positions, this.to - this.from);
        }
        resolve(pos, side = 0) {
            return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
            return resolveNode(this, pos, side, true);
        }
        enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
        /// @internal
        toString() { return this.context.buffer.childString(this.index); }
        getChild(type, before = null, after = null) {
            let r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren(this, type, before, after);
        }
        get node() { return this; }
        matchContext(context) { return matchNodeContext(this, context); }
    }
    /// A tree cursor object focuses on a given node in a syntax tree, and
    /// allows you to move to adjacent nodes.
    class TreeCursor {
        /// @internal
        constructor(node, 
        /// @internal
        mode = 0) {
            this.mode = mode;
            /// @internal
            this.buffer = null;
            this.stack = [];
            /// @internal
            this.index = 0;
            this.bufferNode = null;
            if (node instanceof TreeNode) {
                this.yieldNode(node);
            }
            else {
                this._tree = node.context.parent;
                this.buffer = node.context;
                for (let n = node._parent; n; n = n._parent)
                    this.stack.unshift(n.index);
                this.bufferNode = node;
                this.yieldBuf(node.index);
            }
        }
        /// Shorthand for `.type.name`.
        get name() { return this.type.name; }
        yieldNode(node) {
            if (!node)
                return false;
            this._tree = node;
            this.type = node.type;
            this.from = node.from;
            this.to = node.to;
            return true;
        }
        yieldBuf(index, type) {
            this.index = index;
            let { start, buffer } = this.buffer;
            this.type = type || buffer.set.types[buffer.buffer[index]];
            this.from = start + buffer.buffer[index + 1];
            this.to = start + buffer.buffer[index + 2];
            return true;
        }
        yield(node) {
            if (!node)
                return false;
            if (node instanceof TreeNode) {
                this.buffer = null;
                return this.yieldNode(node);
            }
            this.buffer = node.context;
            return this.yieldBuf(node.index, node.type);
        }
        /// @internal
        toString() {
            return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
        }
        /// @internal
        enterChild(dir, pos, side) {
            if (!this.buffer)
                return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
            let { buffer } = this.buffer;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
            if (index < 0)
                return false;
            this.stack.push(this.index);
            return this.yieldBuf(index);
        }
        /// Move the cursor to this node's first child. When this returns
        /// false, the node has no child, and the cursor has not been moved.
        firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }
        /// Move the cursor to this node's last child.
        lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }
        /// Move the cursor to the first child that ends after `pos`.
        childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }
        /// Move to the last child that starts before `pos`.
        childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }
        /// Move the cursor to the child around `pos`. If side is -1 the
        /// child may end at that position, when 1 it may start there. This
        /// will also enter [overlaid](#common.MountedTree.overlay)
        /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
        /// set to false.
        enter(pos, side, mode = this.mode) {
            if (!this.buffer)
                return this.yield(this._tree.enter(pos, side, mode));
            return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
        }
        /// Move to the node's parent node, if this isn't the top node.
        parent() {
            if (!this.buffer)
                return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
            if (this.stack.length)
                return this.yieldBuf(this.stack.pop());
            let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
            this.buffer = null;
            return this.yieldNode(parent);
        }
        /// @internal
        sibling(dir) {
            if (!this.buffer)
                return !this._tree._parent ? false
                    : this.yield(this._tree.index < 0 ? null
                        : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));
            let { buffer } = this.buffer, d = this.stack.length - 1;
            if (dir < 0) {
                let parentStart = d < 0 ? 0 : this.stack[d] + 4;
                if (this.index != parentStart)
                    return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));
            }
            else {
                let after = buffer.buffer[this.index + 3];
                if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                    return this.yieldBuf(after);
            }
            return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;
        }
        /// Move to this node's next sibling, if any.
        nextSibling() { return this.sibling(1); }
        /// Move to this node's previous sibling, if any.
        prevSibling() { return this.sibling(-1); }
        atLastNode(dir) {
            let index, parent, { buffer } = this;
            if (buffer) {
                if (dir > 0) {
                    if (this.index < buffer.buffer.buffer.length)
                        return false;
                }
                else {
                    for (let i = 0; i < this.index; i++)
                        if (buffer.buffer.buffer[i + 3] < this.index)
                            return false;
                }
                ({ index, parent } = buffer);
            }
            else {
                ({ index, _parent: parent } = this._tree);
            }
            for (; parent; { index, _parent: parent } = parent) {
                if (index > -1)
                    for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                        let child = parent._tree.children[i];
                        if ((this.mode & IterMode.IncludeAnonymous) ||
                            child instanceof TreeBuffer ||
                            !child.type.isAnonymous ||
                            hasChild(child))
                            return false;
                    }
            }
            return true;
        }
        move(dir, enter) {
            if (enter && this.enterChild(dir, 0, 4 /* DontCare */))
                return true;
            for (;;) {
                if (this.sibling(dir))
                    return true;
                if (this.atLastNode(dir) || !this.parent())
                    return false;
            }
        }
        /// Move to the next node in a
        /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
        /// traversal, going from a node to its first child or, if the
        /// current node is empty or `enter` is false, its next sibling or
        /// the next sibling of the first parent node that has one.
        next(enter = true) { return this.move(1, enter); }
        /// Move to the next node in a last-to-first pre-order traveral. A
        /// node is followed by its last child or, if it has none, its
        /// previous sibling or the previous sibling of the first parent
        /// node that has one.
        prev(enter = true) { return this.move(-1, enter); }
        /// Move the cursor to the innermost node that covers `pos`. If
        /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
        /// it will enter nodes that start at `pos`.
        moveTo(pos, side = 0) {
            // Move up to a node that actually holds the position, if possible
            while (this.from == this.to ||
                (side < 1 ? this.from >= pos : this.from > pos) ||
                (side > -1 ? this.to <= pos : this.to < pos))
                if (!this.parent())
                    break;
            // Then scan down into child nodes as far as possible
            while (this.enterChild(1, pos, side)) { }
            return this;
        }
        /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
        /// position.
        get node() {
            if (!this.buffer)
                return this._tree;
            let cache = this.bufferNode, result = null, depth = 0;
            if (cache && cache.context == this.buffer) {
                scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                    for (let c = cache; c; c = c._parent)
                        if (c.index == index) {
                            if (index == this.index)
                                return c;
                            result = c;
                            depth = d + 1;
                            break scan;
                        }
                    index = this.stack[--d];
                }
            }
            for (let i = depth; i < this.stack.length; i++)
                result = new BufferNode(this.buffer, result, this.stack[i]);
            return this.bufferNode = new BufferNode(this.buffer, result, this.index);
        }
        /// Get the [tree](#common.Tree) that represents the current node, if
        /// any. Will return null when the node is in a [tree
        /// buffer](#common.TreeBuffer).
        get tree() {
            return this.buffer ? null : this._tree._tree;
        }
        /// Iterate over the current node and all its descendants, calling
        /// `enter` when entering a node and `leave`, if given, when leaving
        /// one. When `enter` returns `false`, any children of that node are
        /// skipped, and `leave` isn't called for it.
        iterate(enter, leave) {
            for (let depth = 0;;) {
                let mustLeave = false;
                if (this.type.isAnonymous || enter(this) !== false) {
                    if (this.firstChild()) {
                        depth++;
                        continue;
                    }
                    if (!this.type.isAnonymous)
                        mustLeave = true;
                }
                for (;;) {
                    if (mustLeave && leave)
                        leave(this);
                    mustLeave = this.type.isAnonymous;
                    if (this.nextSibling())
                        break;
                    if (!depth)
                        return;
                    this.parent();
                    depth--;
                    mustLeave = true;
                }
            }
        }
        /// Test whether the current node matches a given context—a sequence
        /// of direct parent node names. Empty strings in the context array
        /// are treated as wildcards.
        matchContext(context) {
            if (!this.buffer)
                return matchNodeContext(this.node, context);
            let { buffer } = this.buffer, { types } = buffer.set;
            for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
                if (d < 0)
                    return matchNodeContext(this.node, context, i);
                let type = types[buffer.buffer[this.stack[d]]];
                if (!type.isAnonymous) {
                    if (context[i] && context[i] != type.name)
                        return false;
                    i--;
                }
            }
            return true;
        }
    }
    function hasChild(tree) {
        return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
    }
    function buildTree(data) {
        var _a;
        let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
        let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
        let types = nodeSet.types;
        let contextHash = 0, lookAhead = 0;
        function takeNode(parentStart, minPos, children, positions, inRepeat) {
            let { id, start, end, size } = cursor;
            let lookAheadAtStart = lookAhead;
            while (size < 0) {
                cursor.next();
                if (size == -1 /* Reuse */) {
                    let node = reused[id];
                    children.push(node);
                    positions.push(start - parentStart);
                    return;
                }
                else if (size == -3 /* ContextChange */) { // Context change
                    contextHash = id;
                    return;
                }
                else if (size == -4 /* LookAhead */) {
                    lookAhead = id;
                    return;
                }
                else {
                    throw new RangeError(`Unrecognized record size: ${size}`);
                }
            }
            let type = types[id], node, buffer;
            let startPos = start - parentStart;
            if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
                // Small enough for a buffer, and no reused nodes inside
                let data = new Uint16Array(buffer.size - buffer.skip);
                let endPos = cursor.pos - buffer.size, index = data.length;
                while (cursor.pos > endPos)
                    index = copyToBuffer(buffer.start, data, index);
                node = new TreeBuffer(data, end - buffer.start, nodeSet);
                startPos = buffer.start - parentStart;
            }
            else { // Make it a node
                let endPos = cursor.pos - size;
                cursor.next();
                let localChildren = [], localPositions = [];
                let localInRepeat = id >= minRepeatType ? id : -1;
                let lastGroup = 0, lastEnd = end;
                while (cursor.pos > endPos) {
                    if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                        if (cursor.end <= lastEnd - maxBufferLength) {
                            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
                            lastGroup = localChildren.length;
                            lastEnd = cursor.end;
                        }
                        cursor.next();
                    }
                    else {
                        takeNode(start, endPos, localChildren, localPositions, localInRepeat);
                    }
                }
                if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                    makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
                localChildren.reverse();
                localPositions.reverse();
                if (localInRepeat > -1 && lastGroup > 0) {
                    let make = makeBalanced(type);
                    node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
                }
                else {
                    node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
                }
            }
            children.push(node);
            positions.push(startPos);
        }
        function makeBalanced(type) {
            return (children, positions, length) => {
                let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
                if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                    if (!lastI && last.type == type && last.length == length)
                        return last;
                    if (lookAheadProp = last.prop(NodeProp.lookAhead))
                        lookAhead = positions[lastI] + last.length + lookAheadProp;
                }
                return makeTree(type, children, positions, length, lookAhead);
            };
        }
        function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
            let localChildren = [], localPositions = [];
            while (children.length > i) {
                localChildren.push(children.pop());
                localPositions.push(positions.pop() + base - from);
            }
            children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
            positions.push(from - base);
        }
        function makeTree(type, children, positions, length, lookAhead = 0, props) {
            if (contextHash) {
                let pair = [NodeProp.contextHash, contextHash];
                props = props ? [pair].concat(props) : [pair];
            }
            if (lookAhead > 25) {
                let pair = [NodeProp.lookAhead, lookAhead];
                props = props ? [pair].concat(props) : [pair];
            }
            return new Tree(type, children, positions, length, props);
        }
        function findBufferSize(maxSize, inRepeat) {
            // Scan through the buffer to find previous siblings that fit
            // together in a TreeBuffer, and don't contain any reused nodes
            // (which can't be stored in a buffer).
            // If `inRepeat` is > -1, ignore node boundaries of that type for
            // nesting, but make sure the end falls either at the start
            // (`maxSize`) or before such a node.
            let fork = cursor.fork();
            let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
            let result = { size: 0, start: 0, skip: 0 };
            scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
                let nodeSize = fork.size;
                // Pretend nested repeat nodes of the same type don't exist
                if (fork.id == inRepeat && nodeSize >= 0) {
                    // Except that we store the current state as a valid return
                    // value.
                    result.size = size;
                    result.start = start;
                    result.skip = skip;
                    skip += 4;
                    size += 4;
                    fork.next();
                    continue;
                }
                let startPos = fork.pos - nodeSize;
                if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                    break;
                let localSkipped = fork.id >= minRepeatType ? 4 : 0;
                let nodeStart = fork.start;
                fork.next();
                while (fork.pos > startPos) {
                    if (fork.size < 0) {
                        if (fork.size == -3 /* ContextChange */)
                            localSkipped += 4;
                        else
                            break scan;
                    }
                    else if (fork.id >= minRepeatType) {
                        localSkipped += 4;
                    }
                    fork.next();
                }
                start = nodeStart;
                size += nodeSize;
                skip += localSkipped;
            }
            if (inRepeat < 0 || size == maxSize) {
                result.size = size;
                result.start = start;
                result.skip = skip;
            }
            return result.size > 4 ? result : undefined;
        }
        function copyToBuffer(bufferStart, buffer, index) {
            let { id, start, end, size } = cursor;
            cursor.next();
            if (size >= 0 && id < minRepeatType) {
                let startIndex = index;
                if (size > 4) {
                    let endPos = cursor.pos - (size - 4);
                    while (cursor.pos > endPos)
                        index = copyToBuffer(bufferStart, buffer, index);
                }
                buffer[--index] = startIndex;
                buffer[--index] = end - bufferStart;
                buffer[--index] = start - bufferStart;
                buffer[--index] = id;
            }
            else if (size == -3 /* ContextChange */) {
                contextHash = id;
            }
            else if (size == -4 /* LookAhead */) {
                lookAhead = id;
            }
            return index;
        }
        let children = [], positions = [];
        while (cursor.pos > 0)
            takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
        let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
        return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
    }
    const nodeSizeCache = new WeakMap;
    function nodeSize(balanceType, node) {
        if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
            return 1;
        let size = nodeSizeCache.get(node);
        if (size == null) {
            size = 1;
            for (let child of node.children) {
                if (child.type != balanceType || !(child instanceof Tree)) {
                    size = 1;
                    break;
                }
                size += nodeSize(balanceType, child);
            }
            nodeSizeCache.set(node, size);
        }
        return size;
    }
    function balanceRange(
    // The type the balanced tree's inner nodes.
    balanceType, 
    // The direct children and their positions
    children, positions, 
    // The index range in children/positions to use
    from, to, 
    // The start position of the nodes, relative to their parent.
    start, 
    // Length of the outer node
    length, 
    // Function to build the top node of the balanced tree
    mkTop, 
    // Function to build internal nodes for the balanced tree
    mkTree) {
        let total = 0;
        for (let i = from; i < to; i++)
            total += nodeSize(balanceType, children[i]);
        let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);
        let localChildren = [], localPositions = [];
        function divide(children, positions, from, to, offset) {
            for (let i = from; i < to;) {
                let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
                i++;
                for (; i < to; i++) {
                    let nextSize = nodeSize(balanceType, children[i]);
                    if (groupSize + nextSize >= maxChild)
                        break;
                    groupSize += nextSize;
                }
                if (i == groupFrom + 1) {
                    if (groupSize > maxChild) {
                        let only = children[groupFrom]; // Only trees can have a size > 1
                        divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                        continue;
                    }
                    localChildren.push(children[groupFrom]);
                }
                else {
                    let length = positions[i - 1] + children[i - 1].length - groupStart;
                    localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
                }
                localPositions.push(groupStart + offset - start);
            }
        }
        divide(children, positions, from, to, 0);
        return (mkTop || mkTree)(localChildren, localPositions, length);
    }

    /// Tree fragments are used during [incremental
    /// parsing](#common.Parser.startParse) to track parts of old trees
    /// that can be reused in a new parse. An array of fragments is used
    /// to track regions of an old tree whose nodes might be reused in new
    /// parses. Use the static
    /// [`applyChanges`](#common.TreeFragment^applyChanges) method to
    /// update fragments for document changes.
    class TreeFragment {
        /// Construct a tree fragment. You'll usually want to use
        /// [`addTree`](#common.TreeFragment^addTree) and
        /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
        /// calling this directly.
        constructor(
        /// The start of the unchanged range pointed to by this fragment.
        /// This refers to an offset in the _updated_ document (as opposed
        /// to the original tree).
        from, 
        /// The end of the unchanged range.
        to, 
        /// The tree that this fragment is based on.
        tree, 
        /// The offset between the fragment's tree and the document that
        /// this fragment can be used against. Add this when going from
        /// document to tree positions, subtract it to go from tree to
        /// document positions.
        offset, openStart = false, openEnd = false) {
            this.from = from;
            this.to = to;
            this.tree = tree;
            this.offset = offset;
            this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);
        }
        /// Whether the start of the fragment represents the start of a
        /// parse, or the end of a change. (In the second case, it may not
        /// be safe to reuse some nodes at the start, depending on the
        /// parsing algorithm.)
        get openStart() { return (this.open & 1 /* Start */) > 0; }
        /// Whether the end of the fragment represents the end of a
        /// full-document parse, or the start of a change.
        get openEnd() { return (this.open & 2 /* End */) > 0; }
        /// Create a set of fragments from a freshly parsed tree, or update
        /// an existing set of fragments by replacing the ones that overlap
        /// with a tree with content from the new tree. When `partial` is
        /// true, the parse is treated as incomplete, and the resulting
        /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
        /// true.
        static addTree(tree, fragments = [], partial = false) {
            let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
            for (let f of fragments)
                if (f.to > tree.length)
                    result.push(f);
            return result;
        }
        /// Apply a set of edits to an array of fragments, removing or
        /// splitting fragments as necessary to remove edited ranges, and
        /// adjusting offsets for fragments that moved.
        static applyChanges(fragments, changes, minGap = 128) {
            if (!changes.length)
                return fragments;
            let result = [];
            let fI = 1, nextF = fragments.length ? fragments[0] : null;
            for (let cI = 0, pos = 0, off = 0;; cI++) {
                let nextC = cI < changes.length ? changes[cI] : null;
                let nextPos = nextC ? nextC.fromA : 1e9;
                if (nextPos - pos >= minGap)
                    while (nextF && nextF.from < nextPos) {
                        let cut = nextF;
                        if (pos >= cut.from || nextPos <= cut.to || off) {
                            let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                        }
                        if (cut)
                            result.push(cut);
                        if (nextF.to > nextPos)
                            break;
                        nextF = fI < fragments.length ? fragments[fI++] : null;
                    }
                if (!nextC)
                    break;
                pos = nextC.toA;
                off = nextC.toA - nextC.toB;
            }
            return result;
        }
    }
    /// A superclass that parsers should extend.
    class Parser {
        /// Start a parse, returning a [partial parse](#common.PartialParse)
        /// object. [`fragments`](#common.TreeFragment) can be passed in to
        /// make the parse incremental.
        ///
        /// By default, the entire input is parsed. You can pass `ranges`,
        /// which should be a sorted array of non-empty, non-overlapping
        /// ranges, to parse only those ranges. The tree returned in that
        /// case will start at `ranges[0].from`.
        startParse(input, fragments, ranges) {
            if (typeof input == "string")
                input = new StringInput(input);
            ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
            return this.createParse(input, fragments || [], ranges);
        }
        /// Run a full parse, returning the resulting tree.
        parse(input, fragments, ranges) {
            let parse = this.startParse(input, fragments, ranges);
            for (;;) {
                let done = parse.advance();
                if (done)
                    return done;
            }
        }
    }
    class StringInput {
        constructor(string) {
            this.string = string;
        }
        get length() { return this.string.length; }
        chunk(from) { return this.string.slice(from); }
        get lineChunks() { return false; }
        read(from, to) { return this.string.slice(from, to); }
    }
    new NodeProp({ perNode: true });

    let nextTagID = 0;
    /// Highlighting tags are markers that denote a highlighting category.
    /// They are [associated](#highlight.styleTags) with parts of a syntax
    /// tree by a language mode, and then mapped to an actual CSS style by
    /// a [highlighter](#highlight.Highlighter).
    ///
    /// Because syntax tree node types and highlight styles have to be
    /// able to talk the same language, CodeMirror uses a mostly _closed_
    /// [vocabulary](#highlight.tags) of syntax tags (as opposed to
    /// traditional open string-based systems, which make it hard for
    /// highlighting themes to cover all the tokens produced by the
    /// various languages).
    ///
    /// It _is_ possible to [define](#highlight.Tag^define) your own
    /// highlighting tags for system-internal use (where you control both
    /// the language package and the highlighter), but such tags will not
    /// be picked up by regular highlighters (though you can derive them
    /// from standard tags to allow highlighters to fall back to those).
    class Tag {
        /// @internal
        constructor(
        /// The set of this tag and all its parent tags, starting with
        /// this one itself and sorted in order of decreasing specificity.
        set, 
        /// The base unmodified tag that this one is based on, if it's
        /// modified @internal
        base, 
        /// The modifiers applied to this.base @internal
        modified) {
            this.set = set;
            this.base = base;
            this.modified = modified;
            /// @internal
            this.id = nextTagID++;
        }
        /// Define a new tag. If `parent` is given, the tag is treated as a
        /// sub-tag of that parent, and
        /// [highlighters](#highlight.tagHighlighter) that don't mention
        /// this tag will try to fall back to the parent tag (or grandparent
        /// tag, etc).
        static define(parent) {
            if (parent === null || parent === void 0 ? void 0 : parent.base)
                throw new Error("Can not derive from a modified tag");
            let tag = new Tag([], null, []);
            tag.set.push(tag);
            if (parent)
                for (let t of parent.set)
                    tag.set.push(t);
            return tag;
        }
        /// Define a tag _modifier_, which is a function that, given a tag,
        /// will return a tag that is a subtag of the original. Applying the
        /// same modifier to a twice tag will return the same value (`m1(t1)
        /// == m1(t1)`) and applying multiple modifiers will, regardless or
        /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
        ///
        /// When multiple modifiers are applied to a given base tag, each
        /// smaller set of modifiers is registered as a parent, so that for
        /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
        /// `m1(m3(t1)`, and so on.
        static defineModifier() {
            let mod = new Modifier;
            return (tag) => {
                if (tag.modified.indexOf(mod) > -1)
                    return tag;
                return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
            };
        }
    }
    let nextModifierID = 0;
    class Modifier {
        constructor() {
            this.instances = [];
            this.id = nextModifierID++;
        }
        static get(base, mods) {
            if (!mods.length)
                return base;
            let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
            if (exists)
                return exists;
            let set = [], tag = new Tag(set, base, mods);
            for (let m of mods)
                m.instances.push(tag);
            let configs = permute(mods);
            for (let parent of base.set)
                for (let config of configs)
                    set.push(Modifier.get(parent, config));
            return tag;
        }
    }
    function sameArray(a, b) {
        return a.length == b.length && a.every((x, i) => x == b[i]);
    }
    function permute(array) {
        let result = [array];
        for (let i = 0; i < array.length; i++) {
            for (let a of permute(array.slice(0, i).concat(array.slice(i + 1))))
                result.push(a);
        }
        return result;
    }
    /// This function is used to add a set of tags to a language syntax
    /// via [`NodeSet.extend`](#common.NodeSet.extend) or
    /// [`LRParser.configure`](#lr.LRParser.configure).
    ///
    /// The argument object maps node selectors to [highlighting
    /// tags](#highlight.Tag) or arrays of tags.
    ///
    /// Node selectors may hold one or more (space-separated) node paths.
    /// Such a path can be a [node name](#common.NodeType.name), or
    /// multiple node names (or `*` wildcards) separated by slash
    /// characters, as in `"Block/Declaration/VariableName"`. Such a path
    /// matches the final node but only if its direct parent nodes are the
    /// other nodes mentioned. A `*` in such a path matches any parent,
    /// but only a single level—wildcards that match multiple parents
    /// aren't supported, both for efficiency reasons and because Lezer
    /// trees make it rather hard to reason about what they would match.)
    ///
    /// A path can be ended with `/...` to indicate that the tag assigned
    /// to the node should also apply to all child nodes, even if they
    /// match their own style (by default, only the innermost style is
    /// used).
    ///
    /// When a path ends in `!`, as in `Attribute!`, no further matching
    /// happens for the node's child nodes, and the entire node gets the
    /// given style.
    ///
    /// In this notation, node names that contain `/`, `!`, `*`, or `...`
    /// must be quoted as JSON strings.
    ///
    /// For example:
    ///
    /// ```javascript
    /// parser.withProps(
    ///   styleTags({
    ///     // Style Number and BigNumber nodes
    ///     "Number BigNumber": tags.number,
    ///     // Style Escape nodes whose parent is String
    ///     "String/Escape": tags.escape,
    ///     // Style anything inside Attributes nodes
    ///     "Attributes!": tags.meta,
    ///     // Add a style to all content inside Italic nodes
    ///     "Italic/...": tags.emphasis,
    ///     // Style InvalidString nodes as both `string` and `invalid`
    ///     "InvalidString": [tags.string, tags.invalid],
    ///     // Style the node named "/" as punctuation
    ///     '"/"': tags.punctuation
    ///   })
    /// )
    /// ```
    function styleTags(spec) {
        let byName = Object.create(null);
        for (let prop in spec) {
            let tags = spec[prop];
            if (!Array.isArray(tags))
                tags = [tags];
            for (let part of prop.split(" "))
                if (part) {
                    let pieces = [], mode = 2 /* Normal */, rest = part;
                    for (let pos = 0;;) {
                        if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                            mode = 1 /* Inherit */;
                            break;
                        }
                        let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                        if (!m)
                            throw new RangeError("Invalid path: " + part);
                        pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                        pos += m[0].length;
                        if (pos == part.length)
                            break;
                        let next = part[pos++];
                        if (pos == part.length && next == "!") {
                            mode = 0 /* Opaque */;
                            break;
                        }
                        if (next != "/")
                            throw new RangeError("Invalid path: " + part);
                        rest = part.slice(pos);
                    }
                    let last = pieces.length - 1, inner = pieces[last];
                    if (!inner)
                        throw new RangeError("Invalid path: " + part);
                    let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                    byName[inner] = rule.sort(byName[inner]);
                }
        }
        return ruleNodeProp.add(byName);
    }
    const ruleNodeProp = new NodeProp();
    class Rule {
        constructor(tags, mode, context, next) {
            this.tags = tags;
            this.mode = mode;
            this.context = context;
            this.next = next;
        }
        sort(other) {
            if (!other || other.depth < this.depth) {
                this.next = other;
                return this;
            }
            other.next = this.sort(other.next);
            return other;
        }
        get depth() { return this.context ? this.context.length : 0; }
    }
    /// Define a [highlighter](#highlight.Highlighter) from an array of
    /// tag/class pairs. Classes associated with more specific tags will
    /// take precedence.
    function tagHighlighter(tags, options) {
        let map = Object.create(null);
        for (let style of tags) {
            if (!Array.isArray(style.tag))
                map[style.tag.id] = style.class;
            else
                for (let tag of style.tag)
                    map[tag.id] = style.class;
        }
        let { scope, all = null } = options || {};
        return {
            style: (tags) => {
                let cls = all;
                for (let tag of tags) {
                    for (let sub of tag.set) {
                        let tagClass = map[sub.id];
                        if (tagClass) {
                            cls = cls ? cls + " " + tagClass : tagClass;
                            break;
                        }
                    }
                }
                return cls;
            },
            scope: scope
        };
    }
    function highlightTags(highlighters, tags) {
        let result = null;
        for (let highlighter of highlighters) {
            let value = highlighter.style(tags);
            if (value)
                result = result ? result + " " + value : value;
        }
        return result;
    }
    /// Highlight the given [tree](#common.Tree) with the given
    /// [highlighter](#highlight.Highlighter).
    function highlightTree(tree, highlighter, 
    /// Assign styling to a region of the text. Will be called, in order
    /// of position, for any ranges where more than zero classes apply.
    /// `classes` is a space separated string of CSS classes.
    putStyle, 
    /// The start of the range to highlight.
    from = 0, 
    /// The end of the range.
    to = tree.length) {
        let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
        builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
        builder.flush(to);
    }
    class HighlightBuilder {
        constructor(at, highlighters, span) {
            this.at = at;
            this.highlighters = highlighters;
            this.span = span;
            this.class = "";
        }
        startSpan(at, cls) {
            if (cls != this.class) {
                this.flush(at);
                if (at > this.at)
                    this.at = at;
                this.class = cls;
            }
        }
        flush(to) {
            if (to > this.at && this.class)
                this.span(this.at, to, this.class);
        }
        highlightRange(cursor, from, to, inheritedClass, highlighters) {
            let { type, from: start, to: end } = cursor;
            if (start >= to || end <= from)
                return;
            if (type.isTop)
                highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
            let cls = inheritedClass;
            let rule = type.prop(ruleNodeProp), opaque = false;
            while (rule) {
                if (!rule.context || cursor.matchContext(rule.context)) {
                    let tagCls = highlightTags(highlighters, rule.tags);
                    if (tagCls) {
                        if (cls)
                            cls += " ";
                        cls += tagCls;
                        if (rule.mode == 1 /* Inherit */)
                            inheritedClass += (inheritedClass ? " " : "") + tagCls;
                        else if (rule.mode == 0 /* Opaque */)
                            opaque = true;
                    }
                    break;
                }
                rule = rule.next;
            }
            this.startSpan(cursor.from, cls);
            if (opaque)
                return;
            let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
            if (mounted && mounted.overlay) {
                let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
                let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
                let hasChild = cursor.firstChild();
                for (let i = 0, pos = start;; i++) {
                    let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
                    let nextPos = next ? next.from + start : end;
                    let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
                    if (rangeFrom < rangeTo && hasChild) {
                        while (cursor.from < rangeTo) {
                            this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
                            this.startSpan(Math.min(to, cursor.to), cls);
                            if (cursor.to >= nextPos || !cursor.nextSibling())
                                break;
                        }
                    }
                    if (!next || nextPos > to)
                        break;
                    pos = next.to + start;
                    if (pos > from) {
                        this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, innerHighlighters);
                        this.startSpan(pos, cls);
                    }
                }
                if (hasChild)
                    cursor.parent();
            }
            else if (cursor.firstChild()) {
                do {
                    if (cursor.to <= from)
                        continue;
                    if (cursor.from >= to)
                        break;
                    this.highlightRange(cursor, from, to, inheritedClass, highlighters);
                    this.startSpan(Math.min(to, cursor.to), cls);
                } while (cursor.nextSibling());
                cursor.parent();
            }
        }
    }
    const t = Tag.define;
    const comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
    /// The default set of highlighting [tags](#highlight.Tag).
    ///
    /// This collection is heavily biased towards programming languages,
    /// and necessarily incomplete. A full ontology of syntactic
    /// constructs would fill a stack of books, and be impractical to
    /// write themes for. So try to make do with this set. If all else
    /// fails, [open an
    /// issue](https://github.com/codemirror/codemirror.next) to propose a
    /// new tag, or [define](#highlight.Tag^define) a local custom tag for
    /// your use case.
    ///
    /// Note that it is not obligatory to always attach the most specific
    /// tag possible to an element—if your grammar can't easily
    /// distinguish a certain type of element (such as a local variable),
    /// it is okay to style it as its more general variant (a variable).
    /// 
    /// For tags that extend some parent tag, the documentation links to
    /// the parent.
    const tags = {
        /// A comment.
        comment,
        /// A line [comment](#highlight.tags.comment).
        lineComment: t(comment),
        /// A block [comment](#highlight.tags.comment).
        blockComment: t(comment),
        /// A documentation [comment](#highlight.tags.comment).
        docComment: t(comment),
        /// Any kind of identifier.
        name,
        /// The [name](#highlight.tags.name) of a variable.
        variableName: t(name),
        /// A type [name](#highlight.tags.name).
        typeName: typeName,
        /// A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
        tagName: t(typeName),
        /// A property or field [name](#highlight.tags.name).
        propertyName: propertyName,
        /// An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
        attributeName: t(propertyName),
        /// The [name](#highlight.tags.name) of a class.
        className: t(name),
        /// A label [name](#highlight.tags.name).
        labelName: t(name),
        /// A namespace [name](#highlight.tags.name).
        namespace: t(name),
        /// The [name](#highlight.tags.name) of a macro.
        macroName: t(name),
        /// A literal value.
        literal,
        /// A string [literal](#highlight.tags.literal).
        string,
        /// A documentation [string](#highlight.tags.string).
        docString: t(string),
        /// A character literal (subtag of [string](#highlight.tags.string)).
        character: t(string),
        /// An attribute value (subtag of [string](#highlight.tags.string)).
        attributeValue: t(string),
        /// A number [literal](#highlight.tags.literal).
        number,
        /// An integer [number](#highlight.tags.number) literal.
        integer: t(number),
        /// A floating-point [number](#highlight.tags.number) literal.
        float: t(number),
        /// A boolean [literal](#highlight.tags.literal).
        bool: t(literal),
        /// Regular expression [literal](#highlight.tags.literal).
        regexp: t(literal),
        /// An escape [literal](#highlight.tags.literal), for example a
        /// backslash escape in a string.
        escape: t(literal),
        /// A color [literal](#highlight.tags.literal).
        color: t(literal),
        /// A URL [literal](#highlight.tags.literal).
        url: t(literal),
        /// A language keyword.
        keyword,
        /// The [keyword](#highlight.tags.keyword) for the self or this
        /// object.
        self: t(keyword),
        /// The [keyword](#highlight.tags.keyword) for null.
        null: t(keyword),
        /// A [keyword](#highlight.tags.keyword) denoting some atomic value.
        atom: t(keyword),
        /// A [keyword](#highlight.tags.keyword) that represents a unit.
        unit: t(keyword),
        /// A modifier [keyword](#highlight.tags.keyword).
        modifier: t(keyword),
        /// A [keyword](#highlight.tags.keyword) that acts as an operator.
        operatorKeyword: t(keyword),
        /// A control-flow related [keyword](#highlight.tags.keyword).
        controlKeyword: t(keyword),
        /// A [keyword](#highlight.tags.keyword) that defines something.
        definitionKeyword: t(keyword),
        /// A [keyword](#highlight.tags.keyword) related to defining or
        /// interfacing with modules.
        moduleKeyword: t(keyword),
        /// An operator.
        operator,
        /// An [operator](#highlight.tags.operator) that defines something.
        derefOperator: t(operator),
        /// Arithmetic-related [operator](#highlight.tags.operator).
        arithmeticOperator: t(operator),
        /// Logical [operator](#highlight.tags.operator).
        logicOperator: t(operator),
        /// Bit [operator](#highlight.tags.operator).
        bitwiseOperator: t(operator),
        /// Comparison [operator](#highlight.tags.operator).
        compareOperator: t(operator),
        /// [Operator](#highlight.tags.operator) that updates its operand.
        updateOperator: t(operator),
        /// [Operator](#highlight.tags.operator) that defines something.
        definitionOperator: t(operator),
        /// Type-related [operator](#highlight.tags.operator).
        typeOperator: t(operator),
        /// Control-flow [operator](#highlight.tags.operator).
        controlOperator: t(operator),
        /// Program or markup punctuation.
        punctuation,
        /// [Punctuation](#highlight.tags.punctuation) that separates
        /// things.
        separator: t(punctuation),
        /// Bracket-style [punctuation](#highlight.tags.punctuation).
        bracket,
        /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
        /// tokens).
        angleBracket: t(bracket),
        /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
        /// tokens).
        squareBracket: t(bracket),
        /// Parentheses (usually `(` and `)` tokens). Subtag of
        /// [bracket](#highlight.tags.bracket).
        paren: t(bracket),
        /// Braces (usually `{` and `}` tokens). Subtag of
        /// [bracket](#highlight.tags.bracket).
        brace: t(bracket),
        /// Content, for example plain text in XML or markup documents.
        content,
        /// [Content](#highlight.tags.content) that represents a heading.
        heading,
        /// A level 1 [heading](#highlight.tags.heading).
        heading1: t(heading),
        /// A level 2 [heading](#highlight.tags.heading).
        heading2: t(heading),
        /// A level 3 [heading](#highlight.tags.heading).
        heading3: t(heading),
        /// A level 4 [heading](#highlight.tags.heading).
        heading4: t(heading),
        /// A level 5 [heading](#highlight.tags.heading).
        heading5: t(heading),
        /// A level 6 [heading](#highlight.tags.heading).
        heading6: t(heading),
        /// A prose separator (such as a horizontal rule).
        contentSeparator: t(content),
        /// [Content](#highlight.tags.content) that represents a list.
        list: t(content),
        /// [Content](#highlight.tags.content) that represents a quote.
        quote: t(content),
        /// [Content](#highlight.tags.content) that is emphasized.
        emphasis: t(content),
        /// [Content](#highlight.tags.content) that is styled strong.
        strong: t(content),
        /// [Content](#highlight.tags.content) that is part of a link.
        link: t(content),
        /// [Content](#highlight.tags.content) that is styled as code or
        /// monospace.
        monospace: t(content),
        /// [Content](#highlight.tags.content) that has a strike-through
        /// style.
        strikethrough: t(content),
        /// Inserted text in a change-tracking format.
        inserted: t(),
        /// Deleted text.
        deleted: t(),
        /// Changed text.
        changed: t(),
        /// An invalid or unsyntactic element.
        invalid: t(),
        /// Metadata or meta-instruction.
        meta,
        /// [Metadata](#highlight.tags.meta) that applies to the entire
        /// document.
        documentMeta: t(meta),
        /// [Metadata](#highlight.tags.meta) that annotates or adds
        /// attributes to a given syntactic element.
        annotation: t(meta),
        /// Processing instruction or preprocessor directive. Subtag of
        /// [meta](#highlight.tags.meta).
        processingInstruction: t(meta),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates that a
        /// given element is being defined. Expected to be used with the
        /// various [name](#highlight.tags.name) tags.
        definition: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates that
        /// something is constant. Mostly expected to be used with
        /// [variable names](#highlight.tags.variableName).
        constant: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) used to indicate that
        /// a [variable](#highlight.tags.variableName) or [property
        /// name](#highlight.tags.propertyName) is being called or defined
        /// as a function.
        function: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that can be applied to
        /// [names](#highlight.tags.name) to indicate that they belong to
        /// the language's standard environment.
        standard: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates a given
        /// [names](#highlight.tags.name) is local to some scope.
        local: Tag.defineModifier(),
        /// A generic variant [modifier](#highlight.Tag^defineModifier) that
        /// can be used to tag language-specific alternative variants of
        /// some common tag. It is recommended for themes to define special
        /// forms of at least the [string](#highlight.tags.string) and
        /// [variable name](#highlight.tags.variableName) tags, since those
        /// come up a lot.
        special: Tag.defineModifier()
    };
    /// This is a highlighter that adds stable, predictable classes to
    /// tokens, for styling with external CSS.
    ///
    /// The following tags are mapped to their name prefixed with `"tok-"`
    /// (for example `"tok-comment"`):
    ///
    /// * [`link`](#highlight.tags.link)
    /// * [`heading`](#highlight.tags.heading)
    /// * [`emphasis`](#highlight.tags.emphasis)
    /// * [`strong`](#highlight.tags.strong)
    /// * [`keyword`](#highlight.tags.keyword)
    /// * [`atom`](#highlight.tags.atom)
    /// * [`bool`](#highlight.tags.bool)
    /// * [`url`](#highlight.tags.url)
    /// * [`labelName`](#highlight.tags.labelName)
    /// * [`inserted`](#highlight.tags.inserted)
    /// * [`deleted`](#highlight.tags.deleted)
    /// * [`literal`](#highlight.tags.literal)
    /// * [`string`](#highlight.tags.string)
    /// * [`number`](#highlight.tags.number)
    /// * [`variableName`](#highlight.tags.variableName)
    /// * [`typeName`](#highlight.tags.typeName)
    /// * [`namespace`](#highlight.tags.namespace)
    /// * [`className`](#highlight.tags.className)
    /// * [`macroName`](#highlight.tags.macroName)
    /// * [`propertyName`](#highlight.tags.propertyName)
    /// * [`operator`](#highlight.tags.operator)
    /// * [`comment`](#highlight.tags.comment)
    /// * [`meta`](#highlight.tags.meta)
    /// * [`punctuation`](#highlight.tags.punctuation)
    /// * [`invalid`](#highlight.tags.invalid)
    ///
    /// In addition, these mappings are provided:
    ///
    /// * [`regexp`](#highlight.tags.regexp),
    ///   [`escape`](#highlight.tags.escape), and
    ///   [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
    ///   are mapped to `"tok-string2"`
    /// * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
    ///   to `"tok-variableName2"`
    /// * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
    ///   to `"tok-variableName tok-local"`
    /// * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
    ///   to `"tok-variableName tok-definition"`
    /// * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
    ///   to `"tok-propertyName tok-definition"`
    tagHighlighter([
        { tag: tags.link, class: "tok-link" },
        { tag: tags.heading, class: "tok-heading" },
        { tag: tags.emphasis, class: "tok-emphasis" },
        { tag: tags.strong, class: "tok-strong" },
        { tag: tags.keyword, class: "tok-keyword" },
        { tag: tags.atom, class: "tok-atom" },
        { tag: tags.bool, class: "tok-bool" },
        { tag: tags.url, class: "tok-url" },
        { tag: tags.labelName, class: "tok-labelName" },
        { tag: tags.inserted, class: "tok-inserted" },
        { tag: tags.deleted, class: "tok-deleted" },
        { tag: tags.literal, class: "tok-literal" },
        { tag: tags.string, class: "tok-string" },
        { tag: tags.number, class: "tok-number" },
        { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
        { tag: tags.variableName, class: "tok-variableName" },
        { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
        { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
        { tag: tags.special(tags.variableName), class: "tok-variableName2" },
        { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
        { tag: tags.typeName, class: "tok-typeName" },
        { tag: tags.namespace, class: "tok-namespace" },
        { tag: tags.className, class: "tok-className" },
        { tag: tags.macroName, class: "tok-macroName" },
        { tag: tags.propertyName, class: "tok-propertyName" },
        { tag: tags.operator, class: "tok-operator" },
        { tag: tags.comment, class: "tok-comment" },
        { tag: tags.meta, class: "tok-meta" },
        { tag: tags.invalid, class: "tok-invalid" },
        { tag: tags.punctuation, class: "tok-punctuation" }
    ]);

    var _a;
    /**
    Node prop stored in a parser's top syntax node to provide the
    facet that stores language-specific data for that language.
    */
    const languageDataProp = /*@__PURE__*/new NodeProp();
    /**
    Helper function to define a facet (to be added to the top syntax
    node(s) for a language via
    [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
    used to associate language data with the language. You
    probably only need this when subclassing
    [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
    */
    function defineLanguageFacet(baseData) {
        return Facet.define({
            combine: baseData ? values => values.concat(baseData) : undefined
        });
    }
    /**
    A language object manages parsing and per-language
    [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
    managed as a [Lezer](https://lezer.codemirror.net) tree. The class
    can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
    subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
    via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
    for stream parsers.
    */
    class Language {
        /**
        Construct a language object. If you need to invoke this
        directly, first define a data facet with
        [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
        configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
        to the language's outer syntax node.
        */
        constructor(
        /**
        The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
        used for this language.
        */
        data, parser, extraExtensions = []) {
            this.data = data;
            // Kludge to define EditorState.tree as a debugging helper,
            // without the EditorState package actually knowing about
            // languages and lezer trees.
            if (!EditorState.prototype.hasOwnProperty("tree"))
                Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
            this.parser = parser;
            this.extension = [
                language.of(this),
                EditorState.languageData.of((state, pos, side) => state.facet(languageDataFacetAt(state, pos, side)))
            ].concat(extraExtensions);
        }
        /**
        Query whether this language is active at the given position.
        */
        isActiveAt(state, pos, side = -1) {
            return languageDataFacetAt(state, pos, side) == this.data;
        }
        /**
        Find the document regions that were parsed using this language.
        The returned regions will _include_ any nested languages rooted
        in this language, when those exist.
        */
        findRegions(state) {
            let lang = state.facet(language);
            if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
                return [{ from: 0, to: state.doc.length }];
            if (!lang || !lang.allowsNesting)
                return [];
            let result = [];
            let explore = (tree, from) => {
                if (tree.prop(languageDataProp) == this.data) {
                    result.push({ from, to: from + tree.length });
                    return;
                }
                let mount = tree.prop(NodeProp.mounted);
                if (mount) {
                    if (mount.tree.prop(languageDataProp) == this.data) {
                        if (mount.overlay)
                            for (let r of mount.overlay)
                                result.push({ from: r.from + from, to: r.to + from });
                        else
                            result.push({ from: from, to: from + tree.length });
                        return;
                    }
                    else if (mount.overlay) {
                        let size = result.length;
                        explore(mount.tree, mount.overlay[0].from + from);
                        if (result.length > size)
                            return;
                    }
                }
                for (let i = 0; i < tree.children.length; i++) {
                    let ch = tree.children[i];
                    if (ch instanceof Tree)
                        explore(ch, tree.positions[i] + from);
                }
            };
            explore(syntaxTree(state), 0);
            return result;
        }
        /**
        Indicates whether this language allows nested languages. The
        default implementation returns true.
        */
        get allowsNesting() { return true; }
    }
    /**
    @internal
    */
    Language.setState = /*@__PURE__*/StateEffect.define();
    function languageDataFacetAt(state, pos, side) {
        let topLang = state.facet(language);
        if (!topLang)
            return null;
        let facet = topLang.data;
        if (topLang.allowsNesting) {
            for (let node = syntaxTree(state).topNode; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
                facet = node.type.prop(languageDataProp) || facet;
        }
        return facet;
    }
    /**
    A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
    [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
    parsers.
    */
    class LRLanguage extends Language {
        constructor(data, parser) {
            super(data, parser);
            this.parser = parser;
        }
        /**
        Define a language from a parser.
        */
        static define(spec) {
            let data = defineLanguageFacet(spec.languageData);
            return new LRLanguage(data, spec.parser.configure({
                props: [languageDataProp.add(type => type.isTop ? data : undefined)]
            }));
        }
        /**
        Create a new instance of this language with a reconfigured
        version of its parser.
        */
        configure(options) {
            return new LRLanguage(this.data, this.parser.configure(options));
        }
        get allowsNesting() { return this.parser.hasWrappers(); }
    }
    /**
    Get the syntax tree for a state, which is the current (possibly
    incomplete) parse tree of the active
    [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
    language available.
    */
    function syntaxTree(state) {
        let field = state.field(Language.state, false);
        return field ? field.tree : Tree.empty;
    }
    // Lezer-style Input object for a Text document.
    class DocInput {
        constructor(doc, length = doc.length) {
            this.doc = doc;
            this.length = length;
            this.cursorPos = 0;
            this.string = "";
            this.cursor = doc.iter();
        }
        syncTo(pos) {
            this.string = this.cursor.next(pos - this.cursorPos).value;
            this.cursorPos = pos + this.string.length;
            return this.cursorPos - this.string.length;
        }
        chunk(pos) {
            this.syncTo(pos);
            return this.string;
        }
        get lineChunks() { return true; }
        read(from, to) {
            let stringStart = this.cursorPos - this.string.length;
            if (from < stringStart || to >= this.cursorPos)
                return this.doc.sliceString(from, to);
            else
                return this.string.slice(from - stringStart, to - stringStart);
        }
    }
    let currentContext = null;
    /**
    A parse context provided to parsers working on the editor content.
    */
    class ParseContext {
        constructor(parser, 
        /**
        The current editor state.
        */
        state, 
        /**
        Tree fragments that can be reused by incremental re-parses.
        */
        fragments = [], 
        /**
        @internal
        */
        tree, 
        /**
        @internal
        */
        treeLen, 
        /**
        The current editor viewport (or some overapproximation
        thereof). Intended to be used for opportunistically avoiding
        work (in which case
        [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
        should be called to make sure the parser is restarted when the
        skipped region becomes visible).
        */
        viewport, 
        /**
        @internal
        */
        skipped, 
        /**
        This is where skipping parsers can register a promise that,
        when resolved, will schedule a new parse. It is cleared when
        the parse worker picks up the promise. @internal
        */
        scheduleOn) {
            this.parser = parser;
            this.state = state;
            this.fragments = fragments;
            this.tree = tree;
            this.treeLen = treeLen;
            this.viewport = viewport;
            this.skipped = skipped;
            this.scheduleOn = scheduleOn;
            this.parse = null;
            /**
            @internal
            */
            this.tempSkipped = [];
        }
        /**
        @internal
        */
        static create(parser, state, viewport) {
            return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
        }
        startParse() {
            return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
        }
        /**
        @internal
        */
        work(until, upto) {
            if (upto != null && upto >= this.state.doc.length)
                upto = undefined;
            if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
                this.takeTree();
                return true;
            }
            return this.withContext(() => {
                var _a;
                if (typeof until == "number") {
                    let endTime = Date.now() + until;
                    until = () => Date.now() > endTime;
                }
                if (!this.parse)
                    this.parse = this.startParse();
                if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                    upto < this.state.doc.length)
                    this.parse.stopAt(upto);
                for (;;) {
                    let done = this.parse.advance();
                    if (done) {
                        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                        this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                        this.tree = done;
                        this.parse = null;
                        if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                            this.parse = this.startParse();
                        else
                            return true;
                    }
                    if (until())
                        return false;
                }
            });
        }
        /**
        @internal
        */
        takeTree() {
            let pos, tree;
            if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
                if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                    this.parse.stopAt(pos);
                this.withContext(() => { while (!(tree = this.parse.advance())) { } });
                this.treeLen = pos;
                this.tree = tree;
                this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
                this.parse = null;
            }
        }
        withContext(f) {
            let prev = currentContext;
            currentContext = this;
            try {
                return f();
            }
            finally {
                currentContext = prev;
            }
        }
        withoutTempSkipped(fragments) {
            for (let r; r = this.tempSkipped.pop();)
                fragments = cutFragments(fragments, r.from, r.to);
            return fragments;
        }
        /**
        @internal
        */
        changes(changes, newState) {
            let { fragments, tree, treeLen, viewport, skipped } = this;
            this.takeTree();
            if (!changes.empty) {
                let ranges = [];
                changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
                fragments = TreeFragment.applyChanges(fragments, ranges);
                tree = Tree.empty;
                treeLen = 0;
                viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
                if (this.skipped.length) {
                    skipped = [];
                    for (let r of this.skipped) {
                        let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                        if (from < to)
                            skipped.push({ from, to });
                    }
                }
            }
            return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
        }
        /**
        @internal
        */
        updateViewport(viewport) {
            if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
                return false;
            this.viewport = viewport;
            let startLen = this.skipped.length;
            for (let i = 0; i < this.skipped.length; i++) {
                let { from, to } = this.skipped[i];
                if (from < viewport.to && to > viewport.from) {
                    this.fragments = cutFragments(this.fragments, from, to);
                    this.skipped.splice(i--, 1);
                }
            }
            if (this.skipped.length >= startLen)
                return false;
            this.reset();
            return true;
        }
        /**
        @internal
        */
        reset() {
            if (this.parse) {
                this.takeTree();
                this.parse = null;
            }
        }
        /**
        Notify the parse scheduler that the given region was skipped
        because it wasn't in view, and the parse should be restarted
        when it comes into view.
        */
        skipUntilInView(from, to) {
            this.skipped.push({ from, to });
        }
        /**
        Returns a parser intended to be used as placeholder when
        asynchronously loading a nested parser. It'll skip its input and
        mark it as not-really-parsed, so that the next update will parse
        it again.
        
        When `until` is given, a reparse will be scheduled when that
        promise resolves.
        */
        static getSkippingParser(until) {
            return new class extends Parser {
                createParse(input, fragments, ranges) {
                    let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                    let parser = {
                        parsedPos: from,
                        advance() {
                            let cx = currentContext;
                            if (cx) {
                                for (let r of ranges)
                                    cx.tempSkipped.push(r);
                                if (until)
                                    cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                            }
                            this.parsedPos = to;
                            return new Tree(NodeType.none, [], [], to - from);
                        },
                        stoppedAt: null,
                        stopAt() { }
                    };
                    return parser;
                }
            };
        }
        /**
        @internal
        */
        isDone(upto) {
            upto = Math.min(upto, this.state.doc.length);
            let frags = this.fragments;
            return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
        }
        /**
        Get the context for the current parse, or `null` if no editor
        parse is in progress.
        */
        static get() { return currentContext; }
    }
    function cutFragments(fragments, from, to) {
        return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
    }
    class LanguageState {
        constructor(
        // A mutable parse state that is used to preserve work done during
        // the lifetime of a state when moving to the next state.
        context) {
            this.context = context;
            this.tree = context.tree;
        }
        apply(tr) {
            if (!tr.docChanged && this.tree == this.context.tree)
                return this;
            let newCx = this.context.changes(tr.changes, tr.state);
            // If the previous parse wasn't done, go forward only up to its
            // end position or the end of the viewport, to avoid slowing down
            // state updates with parse work beyond the viewport.
            let upto = this.context.treeLen == tr.startState.doc.length ? undefined
                : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
            if (!newCx.work(20 /* Apply */, upto))
                newCx.takeTree();
            return new LanguageState(newCx);
        }
        static init(state) {
            let vpTo = Math.min(3000 /* InitViewport */, state.doc.length);
            let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
            if (!parseState.work(20 /* Apply */, vpTo))
                parseState.takeTree();
            return new LanguageState(parseState);
        }
    }
    Language.state = /*@__PURE__*/StateField.define({
        create: LanguageState.init,
        update(value, tr) {
            for (let e of tr.effects)
                if (e.is(Language.setState))
                    return e.value;
            if (tr.startState.facet(language) != tr.state.facet(language))
                return LanguageState.init(tr.state);
            return value.apply(tr);
        }
    });
    let requestIdle = (callback) => {
        let timeout = setTimeout(() => callback(), 500 /* MaxPause */);
        return () => clearTimeout(timeout);
    };
    if (typeof requestIdleCallback != "undefined")
        requestIdle = (callback) => {
            let idle = -1, timeout = setTimeout(() => {
                idle = requestIdleCallback(callback, { timeout: 500 /* MaxPause */ - 100 /* MinPause */ });
            }, 100 /* MinPause */);
            return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
        };
    const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)
        ? () => navigator.scheduling.isInputPending() : null;
    const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
        constructor(view) {
            this.view = view;
            this.working = null;
            this.workScheduled = 0;
            // End of the current time chunk
            this.chunkEnd = -1;
            // Milliseconds of budget left for this chunk
            this.chunkBudget = -1;
            this.work = this.work.bind(this);
            this.scheduleWork();
        }
        update(update) {
            let cx = this.view.state.field(Language.state).context;
            if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
                this.scheduleWork();
            if (update.docChanged) {
                if (this.view.hasFocus)
                    this.chunkBudget += 50 /* ChangeBonus */;
                this.scheduleWork();
            }
            this.checkAsyncSchedule(cx);
        }
        scheduleWork() {
            if (this.working)
                return;
            let { state } = this.view, field = state.field(Language.state);
            if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
                this.working = requestIdle(this.work);
        }
        work(deadline) {
            this.working = null;
            let now = Date.now();
            if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
                this.chunkEnd = now + 30000 /* ChunkTime */;
                this.chunkBudget = 3000 /* ChunkBudget */;
            }
            if (this.chunkBudget <= 0)
                return; // No more budget
            let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
            if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* MaxParseAhead */))
                return;
            let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Slice */, deadline && !isInputPending ? Math.max(25 /* MinSlice */, deadline.timeRemaining() - 5) : 1e9);
            let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
            let done = field.context.work(() => {
                return isInputPending && isInputPending() || Date.now() > endTime;
            }, vpTo + (viewportFirst ? 0 : 100000 /* MaxParseAhead */));
            this.chunkBudget -= Date.now() - now;
            if (done || this.chunkBudget <= 0) {
                field.context.takeTree();
                this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
            }
            if (this.chunkBudget > 0 && !(done && !viewportFirst))
                this.scheduleWork();
            this.checkAsyncSchedule(field.context);
        }
        checkAsyncSchedule(cx) {
            if (cx.scheduleOn) {
                this.workScheduled++;
                cx.scheduleOn
                    .then(() => this.scheduleWork())
                    .catch(err => logException(this.view.state, err))
                    .then(() => this.workScheduled--);
                cx.scheduleOn = null;
            }
        }
        destroy() {
            if (this.working)
                this.working();
        }
        isWorking() {
            return !!(this.working || this.workScheduled > 0);
        }
    }, {
        eventHandlers: { focus() { this.scheduleWork(); } }
    });
    /**
    The facet used to associate a language with an editor state.
    */
    const language = /*@__PURE__*/Facet.define({
        combine(languages) { return languages.length ? languages[0] : null; },
        enables: [Language.state, parseWorker]
    });
    /**
    This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
    optional set of supporting extensions. Language packages are
    encouraged to export a function that optionally takes a
    configuration object and returns a `LanguageSupport` instance, as
    the main way for client code to use the package.
    */
    class LanguageSupport {
        /**
        Create a language support object.
        */
        constructor(
        /**
        The language object.
        */
        language, 
        /**
        An optional set of supporting extensions. When nesting a
        language in another language, the outer language is encouraged
        to include the supporting extensions for its inner languages
        in its own set of support extensions.
        */
        support = []) {
            this.language = language;
            this.support = support;
            this.extension = [language, support];
        }
    }

    /**
    Facet that defines a way to provide a function that computes the
    appropriate indentation depth at the start of a given line, or
    `null` to indicate no appropriate indentation could be determined.
    */
    const indentService = /*@__PURE__*/Facet.define();
    /**
    Facet for overriding the unit by which indentation happens.
    Should be a string consisting either entirely of spaces or
    entirely of tabs. When not set, this defaults to 2 spaces.
    */
    const indentUnit = /*@__PURE__*/Facet.define({
        combine: values => {
            if (!values.length)
                return "  ";
            if (!/^(?: +|\t+)$/.test(values[0]))
                throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
            return values[0];
        }
    });
    /**
    Return the _column width_ of an indent unit in the state.
    Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
    facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
    contains tabs.
    */
    function getIndentUnit(state) {
        let unit = state.facet(indentUnit);
        return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
    }
    /**
    Create an indentation string that covers columns 0 to `cols`.
    Will use tabs for as much of the columns as possible when the
    [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
    tabs.
    */
    function indentString(state, cols) {
        let result = "", ts = state.tabSize;
        if (state.facet(indentUnit).charCodeAt(0) == 9)
            while (cols >= ts) {
                result += "\t";
                cols -= ts;
            }
        for (let i = 0; i < cols; i++)
            result += " ";
        return result;
    }
    /**
    Get the indentation at the given position. Will first consult any
    [indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,
    and if none of those return an indentation, this will check the
    syntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)
    and use that if found. Returns a number when an indentation could
    be determined, and null otherwise.
    */
    function getIndentation(context, pos) {
        if (context instanceof EditorState)
            context = new IndentContext(context);
        for (let service of context.state.facet(indentService)) {
            let result = service(context, pos);
            if (result != null)
                return result;
        }
        let tree = syntaxTree(context.state);
        return tree ? syntaxIndentation(context, tree, pos) : null;
    }
    /**
    Indentation contexts are used when calling [indentation
    services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
    useful in indentation logic, and can selectively override the
    indentation reported for some lines.
    */
    class IndentContext {
        /**
        Create an indent context.
        */
        constructor(
        /**
        The editor state.
        */
        state, 
        /**
        @internal
        */
        options = {}) {
            this.state = state;
            this.options = options;
            this.unit = getIndentUnit(state);
        }
        /**
        Get a description of the line at the given position, taking
        [simulated line
        breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        into account. If there is such a break at `pos`, the `bias`
        argument determines whether the part of the line line before or
        after the break is used.
        */
        lineAt(pos, bias = 1) {
            let line = this.state.doc.lineAt(pos);
            let { simulateBreak, simulateDoubleBreak } = this.options;
            if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
                if (simulateDoubleBreak && simulateBreak == pos)
                    return { text: "", from: pos };
                else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
                    return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
                else
                    return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
            }
            return line;
        }
        /**
        Get the text directly after `pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        textAfterPos(pos, bias = 1) {
            if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
                return "";
            let { text, from } = this.lineAt(pos, bias);
            return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
        }
        /**
        Find the column for the given position.
        */
        column(pos, bias = 1) {
            let { text, from } = this.lineAt(pos, bias);
            let result = this.countColumn(text, pos - from);
            let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
            if (override > -1)
                result += override - this.countColumn(text, text.search(/\S|$/));
            return result;
        }
        /**
        Find the column position (taking tabs into account) of the given
        position in the given string.
        */
        countColumn(line, pos = line.length) {
            return countColumn(line, this.state.tabSize, pos);
        }
        /**
        Find the indentation column of the line at the given point.
        */
        lineIndent(pos, bias = 1) {
            let { text, from } = this.lineAt(pos, bias);
            let override = this.options.overrideIndentation;
            if (override) {
                let overriden = override(from);
                if (overriden > -1)
                    return overriden;
            }
            return this.countColumn(text, text.search(/\S|$/));
        }
        /**
        Returns the [simulated line
        break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        for this context, if any.
        */
        get simulatedBreak() {
            return this.options.simulateBreak || null;
        }
    }
    /**
    A syntax tree node prop used to associate indentation strategies
    with node types. Such a strategy is a function from an indentation
    context to a column number or null, where null indicates that no
    definitive indentation can be determined.
    */
    const indentNodeProp = /*@__PURE__*/new NodeProp();
    // Compute the indentation for a given position from the syntax tree.
    function syntaxIndentation(cx, ast, pos) {
        return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
    }
    function ignoreClosed(cx) {
        return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
    }
    function indentStrategy(tree) {
        let strategy = tree.type.prop(indentNodeProp);
        if (strategy)
            return strategy;
        let first = tree.firstChild, close;
        if (first && (close = first.type.prop(NodeProp.closedBy))) {
            let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
            return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
        }
        return tree.parent == null ? topIndent : null;
    }
    function indentFrom(node, pos, base) {
        for (; node; node = node.parent) {
            let strategy = indentStrategy(node);
            if (strategy)
                return strategy(TreeIndentContext.create(base, pos, node));
        }
        return null;
    }
    function topIndent() { return 0; }
    /**
    Objects of this type provide context information and helper
    methods to indentation functions registered on syntax nodes.
    */
    class TreeIndentContext extends IndentContext {
        constructor(base, 
        /**
        The position at which indentation is being computed.
        */
        pos, 
        /**
        The syntax tree node to which the indentation strategy
        applies.
        */
        node) {
            super(base.state, base.options);
            this.base = base;
            this.pos = pos;
            this.node = node;
        }
        /**
        @internal
        */
        static create(base, pos, node) {
            return new TreeIndentContext(base, pos, node);
        }
        /**
        Get the text directly after `this.pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        get textAfter() {
            return this.textAfterPos(this.pos);
        }
        /**
        Get the indentation at the reference line for `this.node`, which
        is the line on which it starts, unless there is a node that is
        _not_ a parent of this node covering the start of that line. If
        so, the line at the start of that node is tried, again skipping
        on if it is covered by another such node.
        */
        get baseIndent() {
            let line = this.state.doc.lineAt(this.node.from);
            // Skip line starts that are covered by a sibling (or cousin, etc)
            for (;;) {
                let atBreak = this.node.resolve(line.from);
                while (atBreak.parent && atBreak.parent.from == atBreak.from)
                    atBreak = atBreak.parent;
                if (isParent(atBreak, this.node))
                    break;
                line = this.state.doc.lineAt(atBreak.from);
            }
            return this.lineIndent(line.from);
        }
        /**
        Continue looking for indentations in the node's parent nodes,
        and return the result of that.
        */
        continue() {
            let parent = this.node.parent;
            return parent ? indentFrom(parent, this.pos, this.base) : 0;
        }
    }
    function isParent(parent, of) {
        for (let cur = of; cur; cur = cur.parent)
            if (parent == cur)
                return true;
        return false;
    }
    // Check whether a delimited node is aligned (meaning there are
    // non-skipped nodes on the same line as the opening delimiter). And
    // if so, return the opening token.
    function bracketedAligned(context) {
        let tree = context.node;
        let openToken = tree.childAfter(tree.from), last = tree.lastChild;
        if (!openToken)
            return null;
        let sim = context.options.simulateBreak;
        let openLine = context.state.doc.lineAt(openToken.from);
        let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
        for (let pos = openToken.to;;) {
            let next = tree.childAfter(pos);
            if (!next || next == last)
                return null;
            if (!next.type.isSkipped)
                return next.from < lineEnd ? openToken : null;
            pos = next.to;
        }
    }
    function delimitedStrategy(context, align, units, closing, closedAt) {
        let after = context.textAfter, space = after.match(/^\s*/)[0].length;
        let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
        let aligned = align ? bracketedAligned(context) : null;
        if (aligned)
            return closed ? context.column(aligned.from) : context.column(aligned.to);
        return context.baseIndent + (closed ? 0 : context.unit * units);
    }
    /**
    Creates an indentation strategy that, by default, indents
    continued lines one unit more than the node's base indentation.
    You can provide `except` to prevent indentation of lines that
    match a pattern (for example `/^else\b/` in `if`/`else`
    constructs), and you can change the amount of units used with the
    `units` option.
    */
    function continuedIndent({ except, units = 1 } = {}) {
        return (context) => {
            let matchExcept = except && except.test(context.textAfter);
            return context.baseIndent + (matchExcept ? 0 : units * context.unit);
        };
    }
    const DontIndentBeyond = 200;
    /**
    Enables reindentation on input. When a language defines an
    `indentOnInput` field in its [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
    expression, the line at the cursor will be reindented whenever new
    text is typed and the input from the start of the line up to the
    cursor matches that regexp.

    To avoid unneccesary reindents, it is recommended to start the
    regexp with `^` (usually followed by `\s*`), and end it with `$`.
    For example, `/^\s*\}$/` will reindent when a closing brace is
    added at the start of a line.
    */
    function indentOnInput() {
        return EditorState.transactionFilter.of(tr => {
            if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
                return tr;
            let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
            if (!rules.length)
                return tr;
            let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
            if (head > line.from + DontIndentBeyond)
                return tr;
            let lineStart = doc.sliceString(line.from, head);
            if (!rules.some(r => r.test(lineStart)))
                return tr;
            let { state } = tr, last = -1, changes = [];
            for (let { head } of state.selection.ranges) {
                let line = state.doc.lineAt(head);
                if (line.from == last)
                    continue;
                last = line.from;
                let indent = getIndentation(state, line.from);
                if (indent == null)
                    continue;
                let cur = /^\s*/.exec(line.text)[0];
                let norm = indentString(state, indent);
                if (cur != norm)
                    changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
            return changes.length ? [tr, { changes, sequential: true }] : tr;
        });
    }

    /**
    A facet that registers a code folding service. When called with
    the extent of a line, such a function should return a foldable
    range that starts on that line (but continues beyond it), if one
    can be found.
    */
    const foldService = /*@__PURE__*/Facet.define();
    /**
    This node prop is used to associate folding information with
    syntax node types. Given a syntax node, it should check whether
    that tree is foldable and return the range that can be collapsed
    when it is.
    */
    const foldNodeProp = /*@__PURE__*/new NodeProp();
    /**
    [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
    the first and the last child of a syntax node. Useful for nodes
    that start and end with delimiters.
    */
    function foldInside(node) {
        let first = node.firstChild, last = node.lastChild;
        return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
    }
    function syntaxFolding(state, start, end) {
        let tree = syntaxTree(state);
        if (tree.length < end)
            return null;
        let inner = tree.resolveInner(end);
        let found = null;
        for (let cur = inner; cur; cur = cur.parent) {
            if (cur.to <= end || cur.from > end)
                continue;
            if (found && cur.from < start)
                break;
            let prop = cur.type.prop(foldNodeProp);
            if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
                let value = prop(cur, state);
                if (value && value.from <= end && value.from >= start && value.to > end)
                    found = value;
            }
        }
        return found;
    }
    function isUnfinished(node) {
        let ch = node.lastChild;
        return ch && ch.to == node.to && ch.type.isError;
    }
    /**
    Check whether the given line is foldable. First asks any fold
    services registered through
    [`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
    a result, tries to query the [fold node
    prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
    of the line.
    */
    function foldable(state, lineStart, lineEnd) {
        for (let service of state.facet(foldService)) {
            let result = service(state, lineStart, lineEnd);
            if (result)
                return result;
        }
        return syntaxFolding(state, lineStart, lineEnd);
    }
    function mapRange(range, mapping) {
        let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
        return from >= to ? undefined : { from, to };
    }
    /**
    State effect that can be attached to a transaction to fold the
    given range. (You probably only need this in exceptional
    circumstances—usually you'll just want to let
    [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
    gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
    */
    const foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
    /**
    State effect that unfolds the given range (if it was folded).
    */
    const unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
    function selectedLines(view) {
        let lines = [];
        for (let { head } of view.state.selection.ranges) {
            if (lines.some(l => l.from <= head && l.to >= head))
                continue;
            lines.push(view.lineBlockAt(head));
        }
        return lines;
    }
    const foldState = /*@__PURE__*/StateField.define({
        create() {
            return Decoration.none;
        },
        update(folded, tr) {
            folded = folded.map(tr.changes);
            for (let e of tr.effects) {
                if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to))
                    folded = folded.update({ add: [foldWidget.range(e.value.from, e.value.to)] });
                else if (e.is(unfoldEffect))
                    folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
                        filterFrom: e.value.from, filterTo: e.value.to });
            }
            // Clear folded ranges that cover the selection head
            if (tr.selection) {
                let onSelection = false, { head } = tr.selection.main;
                folded.between(head, head, (a, b) => { if (a < head && b > head)
                    onSelection = true; });
                if (onSelection)
                    folded = folded.update({
                        filterFrom: head,
                        filterTo: head,
                        filter: (a, b) => b <= head || a >= head
                    });
            }
            return folded;
        },
        provide: f => EditorView.decorations.from(f)
    });
    function findFold(state, from, to) {
        var _a;
        let found = null;
        (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
            if (!found || found.from > from)
                found = { from, to };
        });
        return found;
    }
    function foldExists(folded, from, to) {
        let found = false;
        folded.between(from, from, (a, b) => { if (a == from && b == to)
            found = true; });
        return found;
    }
    function maybeEnable(state, other) {
        return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
    }
    /**
    Fold the lines that are selected, if possible.
    */
    const foldCode = view => {
        for (let line of selectedLines(view)) {
            let range = foldable(view.state, line.from, line.to);
            if (range) {
                view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
                return true;
            }
        }
        return false;
    };
    /**
    Unfold folded ranges on selected lines.
    */
    const unfoldCode = view => {
        if (!view.state.field(foldState, false))
            return false;
        let effects = [];
        for (let line of selectedLines(view)) {
            let folded = findFold(view.state, line.from, line.to);
            if (folded)
                effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
        }
        if (effects.length)
            view.dispatch({ effects });
        return effects.length > 0;
    };
    function announceFold(view, range, fold = true) {
        let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
        return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
    }
    /**
    Fold all top-level foldable ranges. Note that, in most cases,
    folding information will depend on the [syntax
    tree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work
    reliably when the document hasn't been fully parsed (either
    because the editor state was only just initialized, or because the
    document is so big that the parser decided not to parse it
    entirely).
    */
    const foldAll = view => {
        let { state } = view, effects = [];
        for (let pos = 0; pos < state.doc.length;) {
            let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);
            if (range)
                effects.push(foldEffect.of(range));
            pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
        }
        if (effects.length)
            view.dispatch({ effects: maybeEnable(view.state, effects) });
        return !!effects.length;
    };
    /**
    Unfold all folded code.
    */
    const unfoldAll = view => {
        let field = view.state.field(foldState, false);
        if (!field || !field.size)
            return false;
        let effects = [];
        field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });
        view.dispatch({ effects });
        return true;
    };
    /**
    Default fold-related key bindings.

     - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).
     - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).
     - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).
     - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).
    */
    const foldKeymap = [
        { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
        { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
        { key: "Ctrl-Alt-[", run: foldAll },
        { key: "Ctrl-Alt-]", run: unfoldAll }
    ];
    const defaultConfig = {
        placeholderDOM: null,
        placeholderText: "…"
    };
    const foldConfig = /*@__PURE__*/Facet.define({
        combine(values) { return combineConfig(values, defaultConfig); }
    });
    /**
    Create an extension that configures code folding.
    */
    function codeFolding(config) {
        let result = [foldState, baseTheme$1$2];
        if (config)
            result.push(foldConfig.of(config));
        return result;
    }
    const foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {
            toDOM(view) {
                let { state } = view, conf = state.facet(foldConfig);
                let onclick = (event) => {
                    let line = view.lineBlockAt(view.posAtDOM(event.target));
                    let folded = findFold(view.state, line.from, line.to);
                    if (folded)
                        view.dispatch({ effects: unfoldEffect.of(folded) });
                    event.preventDefault();
                };
                if (conf.placeholderDOM)
                    return conf.placeholderDOM(view, onclick);
                let element = document.createElement("span");
                element.textContent = conf.placeholderText;
                element.setAttribute("aria-label", state.phrase("folded code"));
                element.title = state.phrase("unfold");
                element.className = "cm-foldPlaceholder";
                element.onclick = onclick;
                return element;
            }
        } });
    const foldGutterDefaults = {
        openText: "⌄",
        closedText: "›",
        markerDOM: null,
        domEventHandlers: {},
        foldingChanged: () => false
    };
    class FoldMarker extends GutterMarker {
        constructor(config, open) {
            super();
            this.config = config;
            this.open = open;
        }
        eq(other) { return this.config == other.config && this.open == other.open; }
        toDOM(view) {
            if (this.config.markerDOM)
                return this.config.markerDOM(this.open);
            let span = document.createElement("span");
            span.textContent = this.open ? this.config.openText : this.config.closedText;
            span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
            return span;
        }
    }
    /**
    Create an extension that registers a fold gutter, which shows a
    fold status indicator before foldable lines (which can be clicked
    to fold or unfold the line).
    */
    function foldGutter(config = {}) {
        let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
        let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
        let markers = ViewPlugin.fromClass(class {
            constructor(view) {
                this.from = view.viewport.from;
                this.markers = this.buildMarkers(view);
            }
            update(update) {
                if (update.docChanged || update.viewportChanged ||
                    update.startState.facet(language) != update.state.facet(language) ||
                    update.startState.field(foldState, false) != update.state.field(foldState, false) ||
                    syntaxTree(update.startState) != syntaxTree(update.state) ||
                    fullConfig.foldingChanged(update))
                    this.markers = this.buildMarkers(update.view);
            }
            buildMarkers(view) {
                let builder = new RangeSetBuilder();
                for (let line of view.viewportLineBlocks) {
                    let mark = findFold(view.state, line.from, line.to) ? canUnfold
                        : foldable(view.state, line.from, line.to) ? canFold : null;
                    if (mark)
                        builder.add(line.from, line.from, mark);
                }
                return builder.finish();
            }
        });
        let { domEventHandlers } = fullConfig;
        return [
            markers,
            gutter({
                class: "cm-foldGutter",
                markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },
                initialSpacer() {
                    return new FoldMarker(fullConfig, false);
                },
                domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {
                        if (domEventHandlers.click && domEventHandlers.click(view, line, event))
                            return true;
                        let folded = findFold(view.state, line.from, line.to);
                        if (folded) {
                            view.dispatch({ effects: unfoldEffect.of(folded) });
                            return true;
                        }
                        let range = foldable(view.state, line.from, line.to);
                        if (range) {
                            view.dispatch({ effects: foldEffect.of(range) });
                            return true;
                        }
                        return false;
                    } })
            }),
            codeFolding()
        ];
    }
    const baseTheme$1$2 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-foldPlaceholder": {
            backgroundColor: "#eee",
            border: "1px solid #ddd",
            color: "#888",
            borderRadius: ".2em",
            margin: "0 1px",
            padding: "0 1px",
            cursor: "pointer"
        },
        ".cm-foldGutter span": {
            padding: "0 1px",
            cursor: "pointer"
        }
    });

    /**
    A highlight style associates CSS styles with higlighting
    [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
    */
    class HighlightStyle {
        constructor(spec, options) {
            let modSpec;
            function def(spec) {
                let cls = StyleModule.newName();
                (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
                return cls;
            }
            const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
            const scopeOpt = options.scope;
            this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
                : scopeOpt ? (type) => type == scopeOpt : undefined;
            this.style = tagHighlighter(spec.map(style => ({
                tag: style.tag,
                class: style.class || def(Object.assign({}, style, { tag: null }))
            })), {
                all,
            }).style;
            this.module = modSpec ? new StyleModule(modSpec) : null;
            this.themeType = options.themeType;
        }
        /**
        Create a highlighter style that associates the given styles to
        the given tags. The specs must be objects that hold a style tag
        or array of tags in their `tag` property, and either a single
        `class` property providing a static CSS class (for highlighter
        that rely on external styling), or a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
        set of CSS properties (which define the styling for those tags).
        
        The CSS rules created for a highlighter will be emitted in the
        order of the spec's properties. That means that for elements that
        have multiple tags associated with them, styles defined further
        down in the list will have a higher CSS precedence than styles
        defined earlier.
        */
        static define(specs, options) {
            return new HighlightStyle(specs, options || {});
        }
    }
    const highlighterFacet = /*@__PURE__*/Facet.define();
    const fallbackHighlighter = /*@__PURE__*/Facet.define({
        combine(values) { return values.length ? [values[0]] : null; }
    });
    function getHighlighters(state) {
        let main = state.facet(highlighterFacet);
        return main.length ? main : state.facet(fallbackHighlighter);
    }
    /**
    Wrap a highlighter in an editor extension that uses it to apply
    syntax highlighting to the editor content.

    When multiple (non-fallback) styles are provided, the styling
    applied is the union of the classes they emit.
    */
    function syntaxHighlighting(highlighter, options) {
        let ext = [treeHighlighter], themeType;
        if (highlighter instanceof HighlightStyle) {
            if (highlighter.module)
                ext.push(EditorView.styleModule.of(highlighter.module));
            themeType = highlighter.themeType;
        }
        if (options === null || options === void 0 ? void 0 : options.fallback)
            ext.push(fallbackHighlighter.of(highlighter));
        else if (themeType)
            ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {
                return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
            }));
        else
            ext.push(highlighterFacet.of(highlighter));
        return ext;
    }
    class TreeHighlighter {
        constructor(view) {
            this.markCache = Object.create(null);
            this.tree = syntaxTree(view.state);
            this.decorations = this.buildDeco(view, getHighlighters(view.state));
        }
        update(update) {
            let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
            let styleChange = highlighters != getHighlighters(update.startState);
            if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
                this.decorations = this.decorations.map(update.changes);
            }
            else if (tree != this.tree || update.viewportChanged || styleChange) {
                this.tree = tree;
                this.decorations = this.buildDeco(update.view, highlighters);
            }
        }
        buildDeco(view, highlighters) {
            if (!highlighters || !this.tree.length)
                return Decoration.none;
            let builder = new RangeSetBuilder();
            for (let { from, to } of view.visibleRanges) {
                highlightTree(this.tree, highlighters, (from, to, style) => {
                    builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
                }, from, to);
            }
            return builder.finish();
        }
    }
    const treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
        decorations: v => v.decorations
    }));
    /**
    A default highlight style (works well with light themes).
    */
    const defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([
        { tag: tags.meta,
            color: "#7a757a" },
        { tag: tags.link,
            textDecoration: "underline" },
        { tag: tags.heading,
            textDecoration: "underline",
            fontWeight: "bold" },
        { tag: tags.emphasis,
            fontStyle: "italic" },
        { tag: tags.strong,
            fontWeight: "bold" },
        { tag: tags.strikethrough,
            textDecoration: "line-through" },
        { tag: tags.keyword,
            color: "#708" },
        { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
            color: "#219" },
        { tag: [tags.literal, tags.inserted],
            color: "#164" },
        { tag: [tags.string, tags.deleted],
            color: "#a11" },
        { tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],
            color: "#e40" },
        { tag: /*@__PURE__*/tags.definition(tags.variableName),
            color: "#00f" },
        { tag: /*@__PURE__*/tags.local(tags.variableName),
            color: "#30a" },
        { tag: [tags.typeName, tags.namespace],
            color: "#085" },
        { tag: tags.className,
            color: "#167" },
        { tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],
            color: "#256" },
        { tag: /*@__PURE__*/tags.definition(tags.propertyName),
            color: "#00c" },
        { tag: tags.comment,
            color: "#940" },
        { tag: tags.invalid,
            color: "#f00" }
    ]);

    const baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
        "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
        "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
    });
    const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
    const bracketMatchingConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                afterCursor: true,
                brackets: DefaultBrackets,
                maxScanDistance: DefaultScanDist,
                renderMatch: defaultRenderMatch
            });
        }
    });
    const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
    function defaultRenderMatch(match) {
        let decorations = [];
        let mark = match.matched ? matchingMark : nonmatchingMark;
        decorations.push(mark.range(match.start.from, match.start.to));
        if (match.end)
            decorations.push(mark.range(match.end.from, match.end.to));
        return decorations;
    }
    const bracketMatchingState = /*@__PURE__*/StateField.define({
        create() { return Decoration.none; },
        update(deco, tr) {
            if (!tr.docChanged && !tr.selection)
                return deco;
            let decorations = [];
            let config = tr.state.facet(bracketMatchingConfig);
            for (let range of tr.state.selection.ranges) {
                if (!range.empty)
                    continue;
                let match = matchBrackets(tr.state, range.head, -1, config)
                    || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                    || (config.afterCursor &&
                        (matchBrackets(tr.state, range.head, 1, config) ||
                            (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
                if (match)
                    decorations = decorations.concat(config.renderMatch(match, tr.state));
            }
            return Decoration.set(decorations, true);
        },
        provide: f => EditorView.decorations.from(f)
    });
    const bracketMatchingUnique = [
        bracketMatchingState,
        baseTheme$3
    ];
    /**
    Create an extension that enables bracket matching. Whenever the
    cursor is next to a bracket, that bracket and the one it matches
    are highlighted. Or, when no matching bracket is found, another
    highlighting style is used to indicate this.
    */
    function bracketMatching(config = {}) {
        return [bracketMatchingConfig.of(config), bracketMatchingUnique];
    }
    function matchingNodes(node, dir, brackets) {
        let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
        if (byProp)
            return byProp;
        if (node.name.length == 1) {
            let index = brackets.indexOf(node.name);
            if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
                return [brackets[index + dir]];
        }
        return null;
    }
    /**
    Find the matching bracket for the token at `pos`, scanning
    direction `dir`. Only the `brackets` and `maxScanDistance`
    properties are used from `config`, if given. Returns null if no
    bracket was found at `pos`, or a match result otherwise.
    */
    function matchBrackets(state, pos, dir, config = {}) {
        let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
        let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
        for (let cur = node; cur; cur = cur.parent) {
            let matches = matchingNodes(cur.type, dir, brackets);
            if (matches && cur.from < cur.to)
                return matchMarkedBrackets(state, pos, dir, cur, matches, brackets);
        }
        return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
    }
    function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
        let parent = token.parent, firstToken = { from: token.from, to: token.to };
        let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
        if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
            do {
                if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                    if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
                        return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: true };
                    }
                    else if (matchingNodes(cursor.type, dir, brackets)) {
                        depth++;
                    }
                    else if (matchingNodes(cursor.type, -dir, brackets)) {
                        depth--;
                        if (depth == 0)
                            return {
                                start: firstToken,
                                end: cursor.from == cursor.to ? undefined : { from: cursor.from, to: cursor.to },
                                matched: false
                            };
                    }
                }
            } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
        return { start: firstToken, matched: false };
    }
    function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
        let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
        let bracket = brackets.indexOf(startCh);
        if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
            return null;
        let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
        let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
        for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
            let text = iter.value;
            if (dir < 0)
                distance += text.length;
            let basePos = pos + distance * dir;
            for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
                let found = brackets.indexOf(text[pos]);
                if (found < 0 || tree.resolve(basePos + pos, 1).type != tokenType)
                    continue;
                if ((found % 2 == 0) == (dir > 0)) {
                    depth++;
                }
                else if (depth == 1) { // Closing
                    return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
                }
                else {
                    depth--;
                }
            }
            if (dir > 0)
                distance += text.length;
        }
        return iter.done ? { start: startToken, matched: false } : null;
    }
    const noTokens = /*@__PURE__*/Object.create(null);
    const typeArray = [NodeType.none];
    const warned = [];
    const defaultTable = /*@__PURE__*/Object.create(null);
    for (let [legacyName, name] of [
        ["variable", "variableName"],
        ["variable-2", "variableName.special"],
        ["string-2", "string.special"],
        ["def", "variableName.definition"],
        ["tag", "typeName"],
        ["attribute", "propertyName"],
        ["type", "typeName"],
        ["builtin", "variableName.standard"],
        ["qualifier", "modifier"],
        ["error", "invalid"],
        ["header", "heading"],
        ["property", "propertyName"]
    ])
        defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
    function warnForPart(part, msg) {
        if (warned.indexOf(part) > -1)
            return;
        warned.push(part);
        console.warn(msg);
    }
    function createTokenType(extra, tagStr) {
        let tag = null;
        for (let part of tagStr.split(".")) {
            let value = (extra[part] || tags[part]);
            if (!value) {
                warnForPart(part, `Unknown highlighting tag ${part}`);
            }
            else if (typeof value == "function") {
                if (!tag)
                    warnForPart(part, `Modifier ${part} used at start of tag`);
                else
                    tag = value(tag);
            }
            else {
                if (tag)
                    warnForPart(part, `Tag ${part} used as modifier`);
                else
                    tag = value;
            }
        }
        if (!tag)
            return 0;
        let name = tagStr.replace(/ /g, "_"), type = NodeType.define({
            id: typeArray.length,
            name,
            props: [styleTags({ [name]: tag })]
        });
        typeArray.push(type);
        return type.id;
    }

    /**
    Comment or uncomment the current selection. Will use line comments
    if available, otherwise falling back to block comments.
    */
    const toggleComment = target => {
        let config = getConfig(target.state);
        return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
    };
    function command(f, option) {
        return ({ state, dispatch }) => {
            if (state.readOnly)
                return false;
            let tr = f(option, state);
            if (!tr)
                return false;
            dispatch(state.update(tr));
            return true;
        };
    }
    /**
    Comment or uncomment the current selection using line comments.
    The line comment syntax is taken from the
    [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
    */
    const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* Toggle */);
    /**
    Comment or uncomment the current selection using block comments.
    The block comment syntax is taken from the
    [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
    */
    const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* Toggle */);
    /**
    Comment or uncomment the lines around the current selection using
    block comments.
    */
    const toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* Toggle */);
    function getConfig(state, pos = state.selection.main.head) {
        let data = state.languageDataAt("commentTokens", pos);
        return data.length ? data[0] : {};
    }
    const SearchMargin = 50;
    /**
    Determines if the given range is block-commented in the given
    state.
    */
    function findBlockComment(state, { open, close }, from, to) {
        let textBefore = state.sliceDoc(from - SearchMargin, from);
        let textAfter = state.sliceDoc(to, to + SearchMargin);
        let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
        let beforeOff = textBefore.length - spaceBefore;
        if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
            textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
            return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
                close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
        }
        let startText, endText;
        if (to - from <= 2 * SearchMargin) {
            startText = endText = state.sliceDoc(from, to);
        }
        else {
            startText = state.sliceDoc(from, from + SearchMargin);
            endText = state.sliceDoc(to - SearchMargin, to);
        }
        let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
        let endOff = endText.length - endSpace - close.length;
        if (startText.slice(startSpace, startSpace + open.length) == open &&
            endText.slice(endOff, endOff + close.length) == close) {
            return { open: { pos: from + startSpace + open.length,
                    margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
                close: { pos: to - endSpace - close.length,
                    margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
        }
        return null;
    }
    function selectedLineRanges(state) {
        let ranges = [];
        for (let r of state.selection.ranges) {
            let fromLine = state.doc.lineAt(r.from);
            let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
            let last = ranges.length - 1;
            if (last >= 0 && ranges[last].to > fromLine.from)
                ranges[last].to = toLine.to;
            else
                ranges.push({ from: fromLine.from, to: toLine.to });
        }
        return ranges;
    }
    // Performs toggle, comment and uncomment of block comments in
    // languages that support them.
    function changeBlockComment(option, state, ranges = state.selection.ranges) {
        let tokens = ranges.map(r => getConfig(state, r.from).block);
        if (!tokens.every(c => c))
            return null;
        let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
        if (option != 2 /* Uncomment */ && !comments.every(c => c)) {
            return { changes: state.changes(ranges.map((range, i) => {
                    if (comments[i])
                        return [];
                    return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
                })) };
        }
        else if (option != 1 /* Comment */ && comments.some(c => c)) {
            let changes = [];
            for (let i = 0, comment; i < comments.length; i++)
                if (comment = comments[i]) {
                    let token = tokens[i], { open, close } = comment;
                    changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
                }
            return { changes };
        }
        return null;
    }
    // Performs toggle, comment and uncomment of line comments.
    function changeLineComment(option, state, ranges = state.selection.ranges) {
        let lines = [];
        let prevLine = -1;
        for (let { from, to } of ranges) {
            let startI = lines.length, minIndent = 1e9;
            for (let pos = from; pos <= to;) {
                let line = state.doc.lineAt(pos);
                if (line.from > prevLine && (from == to || to > line.from)) {
                    prevLine = line.from;
                    let token = getConfig(state, pos).line;
                    if (!token)
                        continue;
                    let indent = /^\s*/.exec(line.text)[0].length;
                    let empty = indent == line.length;
                    let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
                    if (indent < line.text.length && indent < minIndent)
                        minIndent = indent;
                    lines.push({ line, comment, token, indent, empty, single: false });
                }
                pos = line.to + 1;
            }
            if (minIndent < 1e9)
                for (let i = startI; i < lines.length; i++)
                    if (lines[i].indent < lines[i].line.text.length)
                        lines[i].indent = minIndent;
            if (lines.length == startI + 1)
                lines[startI].single = true;
        }
        if (option != 2 /* Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
            let changes = [];
            for (let { line, token, indent, empty, single } of lines)
                if (single || !empty)
                    changes.push({ from: line.from + indent, insert: token + " " });
            let changeSet = state.changes(changes);
            return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
        }
        else if (option != 1 /* Comment */ && lines.some(l => l.comment >= 0)) {
            let changes = [];
            for (let { line, comment, token } of lines)
                if (comment >= 0) {
                    let from = line.from + comment, to = from + token.length;
                    if (line.text[to - line.from] == " ")
                        to++;
                    changes.push({ from, to });
                }
            return { changes };
        }
        return null;
    }

    const fromHistory = /*@__PURE__*/Annotation.define();
    /**
    Transaction annotation that will prevent that transaction from
    being combined with other transactions in the undo history. Given
    `"before"`, it'll prevent merging with previous transactions. With
    `"after"`, subsequent transactions won't be combined with this
    one. With `"full"`, the transaction is isolated on both sides.
    */
    const isolateHistory = /*@__PURE__*/Annotation.define();
    /**
    This facet provides a way to register functions that, given a
    transaction, provide a set of effects that the history should
    store when inverting the transaction. This can be used to
    integrate some kinds of effects in the history, so that they can
    be undone (and redone again).
    */
    const invertedEffects = /*@__PURE__*/Facet.define();
    const historyConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                minDepth: 100,
                newGroupDelay: 500
            }, { minDepth: Math.max, newGroupDelay: Math.min });
        }
    });
    function changeEnd(changes) {
        let end = 0;
        changes.iterChangedRanges((_, to) => end = to);
        return end;
    }
    const historyField_ = /*@__PURE__*/StateField.define({
        create() {
            return HistoryState.empty;
        },
        update(state, tr) {
            let config = tr.state.facet(historyConfig);
            let fromHist = tr.annotation(fromHistory);
            if (fromHist) {
                let selection = tr.docChanged ? EditorSelection.single(changeEnd(tr.changes)) : undefined;
                let item = HistEvent.fromTransaction(tr, selection), from = fromHist.side;
                let other = from == 0 /* Done */ ? state.undone : state.done;
                if (item)
                    other = updateBranch(other, other.length, config.minDepth, item);
                else
                    other = addSelection(other, tr.startState.selection);
                return new HistoryState(from == 0 /* Done */ ? fromHist.rest : other, from == 0 /* Done */ ? other : fromHist.rest);
            }
            let isolate = tr.annotation(isolateHistory);
            if (isolate == "full" || isolate == "before")
                state = state.isolate();
            if (tr.annotation(Transaction.addToHistory) === false)
                return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
            let event = HistEvent.fromTransaction(tr);
            let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
            if (event)
                state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);
            else if (tr.selection)
                state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
            if (isolate == "full" || isolate == "after")
                state = state.isolate();
            return state;
        },
        toJSON(value) {
            return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
        },
        fromJSON(json) {
            return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
        }
    });
    /**
    Create a history extension with the given configuration.
    */
    function history(config = {}) {
        return [
            historyField_,
            historyConfig.of(config),
            EditorView.domEventHandlers({
                beforeinput(e, view) {
                    let command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
                    if (!command)
                        return false;
                    e.preventDefault();
                    return command(view);
                }
            })
        ];
    }
    function cmd(side, selection) {
        return function ({ state, dispatch }) {
            if (!selection && state.readOnly)
                return false;
            let historyState = state.field(historyField_, false);
            if (!historyState)
                return false;
            let tr = historyState.pop(side, state, selection);
            if (!tr)
                return false;
            dispatch(tr);
            return true;
        };
    }
    /**
    Undo a single group of history events. Returns false if no group
    was available.
    */
    const undo = /*@__PURE__*/cmd(0 /* Done */, false);
    /**
    Redo a group of history events. Returns false if no group was
    available.
    */
    const redo = /*@__PURE__*/cmd(1 /* Undone */, false);
    /**
    Undo a change or selection change.
    */
    const undoSelection = /*@__PURE__*/cmd(0 /* Done */, true);
    /**
    Redo a change or selection change.
    */
    const redoSelection = /*@__PURE__*/cmd(1 /* Undone */, true);
    function depth(side) {
        return function (state) {
            let histState = state.field(historyField_, false);
            if (!histState)
                return 0;
            let branch = side == 0 /* Done */ ? histState.done : histState.undone;
            return branch.length - (branch.length && !branch[0].changes ? 1 : 0);
        };
    }
    /**
    The amount of undoable change events available in a given state.
    */
    const undoDepth = /*@__PURE__*/depth(0 /* Done */);
    /**
    The amount of redoable change events available in a given state.
    */
    const redoDepth = /*@__PURE__*/depth(1 /* Undone */);
    // History events store groups of changes or effects that need to be
    // undone/redone together.
    class HistEvent {
        constructor(
        // The changes in this event. Normal events hold at least one
        // change or effect. But it may be necessary to store selection
        // events before the first change, in which case a special type of
        // instance is created which doesn't hold any changes, with
        // changes == startSelection == undefined
        changes, 
        // The effects associated with this event
        effects, mapped, 
        // The selection before this event
        startSelection, 
        // Stores selection changes after this event, to be used for
        // selection undo/redo.
        selectionsAfter) {
            this.changes = changes;
            this.effects = effects;
            this.mapped = mapped;
            this.startSelection = startSelection;
            this.selectionsAfter = selectionsAfter;
        }
        setSelAfter(after) {
            return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
        }
        toJSON() {
            var _a, _b, _c;
            return {
                changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
                mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
                startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
                selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
            };
        }
        static fromJSON(json) {
            return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
        }
        // This does not check `addToHistory` and such, it assumes the
        // transaction needs to be converted to an item. Returns null when
        // there are no changes or effects in the transaction.
        static fromTransaction(tr, selection) {
            let effects = none$3;
            for (let invert of tr.startState.facet(invertedEffects)) {
                let result = invert(tr);
                if (result.length)
                    effects = effects.concat(result);
            }
            if (!effects.length && tr.changes.empty)
                return null;
            return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none$3);
        }
        static selection(selections) {
            return new HistEvent(undefined, none$3, undefined, undefined, selections);
        }
    }
    function updateBranch(branch, to, maxLen, newEvent) {
        let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
        let newBranch = branch.slice(start, to);
        newBranch.push(newEvent);
        return newBranch;
    }
    function isAdjacent(a, b) {
        let ranges = [], isAdjacent = false;
        a.iterChangedRanges((f, t) => ranges.push(f, t));
        b.iterChangedRanges((_f, _t, f, t) => {
            for (let i = 0; i < ranges.length;) {
                let from = ranges[i++], to = ranges[i++];
                if (t >= from && f <= to)
                    isAdjacent = true;
            }
        });
        return isAdjacent;
    }
    function eqSelectionShape(a, b) {
        return a.ranges.length == b.ranges.length &&
            a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
    }
    function conc(a, b) {
        return !a.length ? b : !b.length ? a : a.concat(b);
    }
    const none$3 = [];
    const MaxSelectionsPerEvent = 200;
    function addSelection(branch, selection) {
        if (!branch.length) {
            return [HistEvent.selection([selection])];
        }
        else {
            let lastEvent = branch[branch.length - 1];
            let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
            if (sels.length && sels[sels.length - 1].eq(selection))
                return branch;
            sels.push(selection);
            return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
        }
    }
    // Assumes the top item has one or more selectionAfter values
    function popSelection(branch) {
        let last = branch[branch.length - 1];
        let newBranch = branch.slice();
        newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
        return newBranch;
    }
    // Add a mapping to the top event in the given branch. If this maps
    // away all the changes and effects in that item, drop it and
    // propagate the mapping to the next item.
    function addMappingToBranch(branch, mapping) {
        if (!branch.length)
            return branch;
        let length = branch.length, selections = none$3;
        while (length) {
            let event = mapEvent(branch[length - 1], mapping, selections);
            if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
                let result = branch.slice(0, length);
                result[length - 1] = event;
                return result;
            }
            else { // Drop this event, since there's no changes or effects left
                mapping = event.mapped;
                length--;
                selections = event.selectionsAfter;
            }
        }
        return selections.length ? [HistEvent.selection(selections)] : none$3;
    }
    function mapEvent(event, mapping, extraSelections) {
        let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none$3, extraSelections);
        // Change-less events don't store mappings (they are always the last event in a branch)
        if (!event.changes)
            return HistEvent.selection(selections);
        let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
        let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
        return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
    }
    const joinableUserEvent = /^(input\.type|delete)($|\.)/;
    class HistoryState {
        constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
            this.done = done;
            this.undone = undone;
            this.prevTime = prevTime;
            this.prevUserEvent = prevUserEvent;
        }
        isolate() {
            return this.prevTime ? new HistoryState(this.done, this.undone) : this;
        }
        addChanges(event, time, userEvent, newGroupDelay, maxLen) {
            let done = this.done, lastEvent = done[done.length - 1];
            if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
                (!userEvent || joinableUserEvent.test(userEvent)) &&
                ((!lastEvent.selectionsAfter.length &&
                    time - this.prevTime < newGroupDelay &&
                    isAdjacent(lastEvent.changes, event.changes)) ||
                    // For compose (but not compose.start) events, always join with previous event
                    userEvent == "input.type.compose")) {
                done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none$3));
            }
            else {
                done = updateBranch(done, done.length, maxLen, event);
            }
            return new HistoryState(done, none$3, time, userEvent);
        }
        addSelection(selection, time, userEvent, newGroupDelay) {
            let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none$3;
            if (last.length > 0 &&
                time - this.prevTime < newGroupDelay &&
                userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
                eqSelectionShape(last[last.length - 1], selection))
                return this;
            return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
        }
        addMapping(mapping) {
            return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
        }
        pop(side, state, selection) {
            let branch = side == 0 /* Done */ ? this.done : this.undone;
            if (branch.length == 0)
                return null;
            let event = branch[branch.length - 1];
            if (selection && event.selectionsAfter.length) {
                return state.update({
                    selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                    annotations: fromHistory.of({ side, rest: popSelection(branch) }),
                    userEvent: side == 0 /* Done */ ? "select.undo" : "select.redo",
                    scrollIntoView: true
                });
            }
            else if (!event.changes) {
                return null;
            }
            else {
                let rest = branch.length == 1 ? none$3 : branch.slice(0, branch.length - 1);
                if (event.mapped)
                    rest = addMappingToBranch(rest, event.mapped);
                return state.update({
                    changes: event.changes,
                    selection: event.startSelection,
                    effects: event.effects,
                    annotations: fromHistory.of({ side, rest }),
                    filter: false,
                    userEvent: side == 0 /* Done */ ? "undo" : "redo",
                    scrollIntoView: true
                });
            }
        }
    }
    HistoryState.empty = /*@__PURE__*/new HistoryState(none$3, none$3);
    /**
    Default key bindings for the undo history.

    - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
    - Mod-y (Mod-Shift-z on macOS): [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
    - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
    - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
    */
    const historyKeymap = [
        { key: "Mod-z", run: undo, preventDefault: true },
        { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
        { key: "Mod-u", run: undoSelection, preventDefault: true },
        { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
    ];

    function updateSel(sel, by) {
        return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
    }
    function setSel(state, selection) {
        return state.update({ selection, scrollIntoView: true, userEvent: "select" });
    }
    function moveSel({ state, dispatch }, how) {
        let selection = updateSel(state.selection, how);
        if (selection.eq(state.selection))
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    function rangeEnd(range, forward) {
        return EditorSelection.cursor(forward ? range.to : range.from);
    }
    function cursorByChar(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
    }
    function ltrAtCursor(view) {
        return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
    }
    /**
    Move the selection one character to the left (which is backward in
    left-to-right text, forward in right-to-left text).
    */
    const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
    /**
    Move the selection one character to the right.
    */
    const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
    function cursorByGroup(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
    }
    /**
    Move the selection to the left across one group of word or
    non-word (but also non-space) characters.
    */
    const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
    /**
    Move the selection one group to the right.
    */
    const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
    function interestingNode(state, node, bracketProp) {
        if (node.type.prop(bracketProp))
            return true;
        let len = node.to - node.from;
        return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
    }
    function moveBySyntax(state, start, forward) {
        let pos = syntaxTree(state).resolveInner(start.head);
        let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
        // Scan forward through child nodes to see if there's an interesting
        // node ahead.
        for (let at = start.head;;) {
            let next = forward ? pos.childAfter(at) : pos.childBefore(at);
            if (!next)
                break;
            if (interestingNode(state, next, bracketProp))
                pos = next;
            else
                at = forward ? next.to : next.from;
        }
        let bracket = pos.type.prop(bracketProp), match, newPos;
        if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
            newPos = forward ? match.end.to : match.end.from;
        else
            newPos = forward ? pos.to : pos.from;
        return EditorSelection.cursor(newPos, forward ? -1 : 1);
    }
    /**
    Move the cursor over the next syntactic element to the left.
    */
    const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
    /**
    Move the cursor over the next syntactic element to the right.
    */
    const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
    function cursorByLine(view, forward) {
        return moveSel(view, range => {
            if (!range.empty)
                return rangeEnd(range, forward);
            let moved = view.moveVertically(range, forward);
            return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
        });
    }
    /**
    Move the selection one line up.
    */
    const cursorLineUp = view => cursorByLine(view, false);
    /**
    Move the selection one line down.
    */
    const cursorLineDown = view => cursorByLine(view, true);
    function pageHeight(view) {
        return Math.max(view.defaultLineHeight, Math.min(view.dom.clientHeight, innerHeight) - 5);
    }
    function cursorByPage(view, forward) {
        let { state } = view, selection = updateSel(state.selection, range => {
            return range.empty ? view.moveVertically(range, forward, pageHeight(view)) : rangeEnd(range, forward);
        });
        if (selection.eq(state.selection))
            return false;
        let startPos = view.coordsAtPos(state.selection.main.head);
        let scrollRect = view.scrollDOM.getBoundingClientRect();
        let effect;
        if (startPos && startPos.top > scrollRect.top && startPos.bottom < scrollRect.bottom &&
            startPos.top - scrollRect.top <= view.scrollDOM.scrollHeight - view.scrollDOM.scrollTop - view.scrollDOM.clientHeight)
            effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollRect.top });
        view.dispatch(setSel(state, selection), { effects: effect });
        return true;
    }
    /**
    Move the selection one page up.
    */
    const cursorPageUp = view => cursorByPage(view, false);
    /**
    Move the selection one page down.
    */
    const cursorPageDown = view => cursorByPage(view, true);
    function moveByLineBoundary(view, start, forward) {
        let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
        if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
            moved = view.moveToLineBoundary(start, forward, false);
        if (!forward && moved.head == line.from && line.length) {
            let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
            if (space && start.head != line.from + space)
                moved = EditorSelection.cursor(line.from + space);
        }
        return moved;
    }
    /**
    Move the selection to the next line wrap point, or to the end of
    the line if there isn't one left on this line.
    */
    const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
    /**
    Move the selection to previous line wrap point, or failing that to
    the start of the line. If the line is indented, and the cursor
    isn't already at the end of the indentation, this will move to the
    end of the indentation instead of the start of the line.
    */
    const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
    /**
    Move the selection to the start of the line.
    */
    const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
    /**
    Move the selection to the end of the line.
    */
    const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
    function toMatchingBracket(state, dispatch, extend) {
        let found = false, selection = updateSel(state.selection, range => {
            let matching = matchBrackets(state, range.head, -1)
                || matchBrackets(state, range.head, 1)
                || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
                || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
            if (!matching || !matching.end)
                return range;
            found = true;
            let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
            return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
        });
        if (!found)
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    /**
    Move the selection to the bracket matching the one it is currently
    on, if any.
    */
    const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
    function extendSel(view, how) {
        let selection = updateSel(view.state.selection, range => {
            let head = how(range);
            return EditorSelection.range(range.anchor, head.head, head.goalColumn);
        });
        if (selection.eq(view.state.selection))
            return false;
        view.dispatch(setSel(view.state, selection));
        return true;
    }
    function selectByChar(view, forward) {
        return extendSel(view, range => view.moveByChar(range, forward));
    }
    /**
    Move the selection head one character to the left, while leaving
    the anchor in place.
    */
    const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
    /**
    Move the selection head one character to the right.
    */
    const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
    function selectByGroup(view, forward) {
        return extendSel(view, range => view.moveByGroup(range, forward));
    }
    /**
    Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
    the left.
    */
    const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
    /**
    Move the selection head one group to the right.
    */
    const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
    /**
    Move the selection head over the next syntactic element to the left.
    */
    const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
    /**
    Move the selection head over the next syntactic element to the right.
    */
    const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
    function selectByLine(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward));
    }
    /**
    Move the selection head one line up.
    */
    const selectLineUp = view => selectByLine(view, false);
    /**
    Move the selection head one line down.
    */
    const selectLineDown = view => selectByLine(view, true);
    function selectByPage(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward, pageHeight(view)));
    }
    /**
    Move the selection head one page up.
    */
    const selectPageUp = view => selectByPage(view, false);
    /**
    Move the selection head one page down.
    */
    const selectPageDown = view => selectByPage(view, true);
    /**
    Move the selection head to the next line boundary.
    */
    const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
    /**
    Move the selection head to the previous line boundary.
    */
    const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
    /**
    Move the selection head to the start of the line.
    */
    const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
    /**
    Move the selection head to the end of the line.
    */
    const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
    /**
    Move the selection to the start of the document.
    */
    const cursorDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: 0 }));
        return true;
    };
    /**
    Move the selection to the end of the document.
    */
    const cursorDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.doc.length }));
        return true;
    };
    /**
    Move the selection head to the start of the document.
    */
    const selectDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
        return true;
    };
    /**
    Move the selection head to the end of the document.
    */
    const selectDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
        return true;
    };
    /**
    Select the entire document.
    */
    const selectAll = ({ state, dispatch }) => {
        dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
        return true;
    };
    /**
    Expand the selection to cover entire lines.
    */
    const selectLine = ({ state, dispatch }) => {
        let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
        dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
        return true;
    };
    /**
    Select the next syntactic construct that is larger than the
    selection. Note that this will only work insofar as the language
    [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
    syntax tree.
    */
    const selectParentSyntax = ({ state, dispatch }) => {
        let selection = updateSel(state.selection, range => {
            var _a;
            let context = syntaxTree(state).resolveInner(range.head, 1);
            while (!((context.from < range.from && context.to >= range.to) ||
                (context.to > range.to && context.from <= range.from) ||
                !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))
                context = context.parent;
            return EditorSelection.range(context.to, context.from);
        });
        dispatch(setSel(state, selection));
        return true;
    };
    /**
    Simplify the current selection. When multiple ranges are selected,
    reduce it to its main range. Otherwise, if the selection is
    non-empty, convert it to a cursor selection.
    */
    const simplifySelection = ({ state, dispatch }) => {
        let cur = state.selection, selection = null;
        if (cur.ranges.length > 1)
            selection = EditorSelection.create([cur.main]);
        else if (!cur.main.empty)
            selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
        if (!selection)
            return false;
        dispatch(setSel(state, selection));
        return true;
    };
    function deleteBy({ state, dispatch }, by) {
        if (state.readOnly)
            return false;
        let event = "delete.selection";
        let changes = state.changeByRange(range => {
            let { from, to } = range;
            if (from == to) {
                let towards = by(from);
                if (towards < from)
                    event = "delete.backward";
                else if (towards > from)
                    event = "delete.forward";
                from = Math.min(from, towards);
                to = Math.max(to, towards);
            }
            return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };
        });
        if (changes.changes.empty)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: event }));
        return true;
    }
    function skipAtomic(target, pos, forward) {
        if (target instanceof EditorView)
            for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))
                ranges.between(pos, pos, (from, to) => {
                    if (from < pos && to > pos)
                        pos = forward ? to : from;
                });
        return pos;
    }
    const deleteByChar = (target, forward) => deleteBy(target, pos => {
        let { state } = target, line = state.doc.lineAt(pos), before, targetPos;
        if (!forward && pos > line.from && pos < line.from + 200 &&
            !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
            if (before[before.length - 1] == "\t")
                return pos - 1;
            let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
            for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
                pos--;
            targetPos = pos;
        }
        else {
            targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
            if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
                targetPos += forward ? 1 : -1;
        }
        return skipAtomic(target, targetPos, forward);
    });
    /**
    Delete the selection, or, for cursor selections, the character
    before the cursor.
    */
    const deleteCharBackward = view => deleteByChar(view, false);
    /**
    Delete the selection or the character after the cursor.
    */
    const deleteCharForward = view => deleteByChar(view, true);
    const deleteByGroup = (target, forward) => deleteBy(target, start => {
        let pos = start, { state } = target, line = state.doc.lineAt(pos);
        let categorize = state.charCategorizer(pos);
        for (let cat = null;;) {
            if (pos == (forward ? line.to : line.from)) {
                if (pos == start && line.number != (forward ? state.doc.lines : 1))
                    pos += forward ? 1 : -1;
                break;
            }
            let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
            let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
            let nextCat = categorize(nextChar);
            if (cat != null && nextCat != cat)
                break;
            if (nextChar != " " || pos != start)
                cat = nextCat;
            pos = next;
        }
        return skipAtomic(target, pos, forward);
    });
    /**
    Delete the selection or backward until the end of the next
    [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
    whitespace when they consist of a single space.
    */
    const deleteGroupBackward = target => deleteByGroup(target, false);
    /**
    Delete the selection or forward until the end of the next group.
    */
    const deleteGroupForward = target => deleteByGroup(target, true);
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the end of the line. If the cursor is directly at the end of the
    line, delete the line break after it.
    */
    const deleteToLineEnd = view => deleteBy(view, pos => {
        let lineEnd = view.lineBlockAt(pos).to;
        return skipAtomic(view, pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1), true);
    });
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the start of the line. If the cursor is directly at the start of the
    line, delete the line break before it.
    */
    const deleteToLineStart = view => deleteBy(view, pos => {
        let lineStart = view.lineBlockAt(pos).from;
        return skipAtomic(view, pos > lineStart ? lineStart : Math.max(0, pos - 1), false);
    });
    /**
    Replace each selection range with a line break, leaving the cursor
    on the line before the break.
    */
    const splitLine = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(range => {
            return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
                range: EditorSelection.cursor(range.from) };
        });
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
    };
    /**
    Flip the characters before and after the cursor(s).
    */
    const transposeChars = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(range => {
            if (!range.empty || range.from == 0 || range.from == state.doc.length)
                return { range };
            let pos = range.from, line = state.doc.lineAt(pos);
            let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
            let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
            return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
                range: EditorSelection.cursor(to) };
        });
        if (changes.changes.empty)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
        return true;
    };
    function selectedLineBlocks(state) {
        let blocks = [], upto = -1;
        for (let range of state.selection.ranges) {
            let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
            if (!range.empty && range.to == endLine.from)
                endLine = state.doc.lineAt(range.to - 1);
            if (upto >= startLine.number) {
                let prev = blocks[blocks.length - 1];
                prev.to = endLine.to;
                prev.ranges.push(range);
            }
            else {
                blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
            }
            upto = endLine.number + 1;
        }
        return blocks;
    }
    function moveLine(state, dispatch, forward) {
        if (state.readOnly)
            return false;
        let changes = [], ranges = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward ? block.to == state.doc.length : block.from == 0)
                continue;
            let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
            let size = nextLine.length + 1;
            if (forward) {
                changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
                for (let r of block.ranges)
                    ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
            }
            else {
                changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
                for (let r of block.ranges)
                    ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
            }
        }
        if (!changes.length)
            return false;
        dispatch(state.update({
            changes,
            scrollIntoView: true,
            selection: EditorSelection.create(ranges, state.selection.mainIndex),
            userEvent: "move.line"
        }));
        return true;
    }
    /**
    Move the selected lines up one line.
    */
    const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
    /**
    Move the selected lines down one line.
    */
    const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
    function copyLine(state, dispatch, forward) {
        if (state.readOnly)
            return false;
        let changes = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward)
                changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
            else
                changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
        }
        dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
        return true;
    }
    /**
    Create a copy of the selected lines. Keep the selection in the top copy.
    */
    const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
    /**
    Create a copy of the selected lines. Keep the selection in the bottom copy.
    */
    const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
    /**
    Delete selected lines.
    */
    const deleteLine = view => {
        if (view.state.readOnly)
            return false;
        let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
            if (from > 0)
                from--;
            else if (to < state.doc.length)
                to++;
            return { from, to };
        }));
        let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
        view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
        return true;
    };
    function isBetweenBrackets(state, pos) {
        if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
            return { from: pos, to: pos };
        let context = syntaxTree(state).resolveInner(pos);
        let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
        if (before && after && before.to <= pos && after.from >= pos &&
            (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
            state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)
            return { from: before.to, to: after.from };
        return null;
    }
    /**
    Replace the selection with a newline and indent the newly created
    line(s). If the current line consists only of whitespace, this
    will also delete that whitespace. When the cursor is between
    matching brackets, an additional newline will be inserted after
    the cursor.
    */
    const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
    /**
    Create a blank, indented line below the current line.
    */
    const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
    function newlineAndIndent(atEof) {
        return ({ state, dispatch }) => {
            if (state.readOnly)
                return false;
            let changes = state.changeByRange(range => {
                let { from, to } = range, line = state.doc.lineAt(from);
                let explode = !atEof && from == to && isBetweenBrackets(state, from);
                if (atEof)
                    from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
                let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
                let indent = getIndentation(cx, from);
                if (indent == null)
                    indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
                while (to < line.to && /\s/.test(line.text[to - line.from]))
                    to++;
                if (explode)
                    ({ from, to } = explode);
                else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                    from = line.from;
                let insert = ["", indentString(state, indent)];
                if (explode)
                    insert.push(indentString(state, cx.lineIndent(line.from, -1)));
                return { changes: { from, to, insert: Text.of(insert) },
                    range: EditorSelection.cursor(from + 1 + insert[1].length) };
            });
            dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
            return true;
        };
    }
    function changeBySelectedLine(state, f) {
        let atLine = -1;
        return state.changeByRange(range => {
            let changes = [];
            for (let pos = range.from; pos <= range.to;) {
                let line = state.doc.lineAt(pos);
                if (line.number > atLine && (range.empty || range.to > line.from)) {
                    f(line, changes, range);
                    atLine = line.number;
                }
                pos = line.to + 1;
            }
            let changeSet = state.changes(changes);
            return { changes,
                range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
        });
    }
    /**
    Auto-indent the selected lines. This uses the [indentation service
    facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
    information.
    */
    const indentSelection = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let updated = Object.create(null);
        let context = new IndentContext(state, { overrideIndentation: start => {
                let found = updated[start];
                return found == null ? -1 : found;
            } });
        let changes = changeBySelectedLine(state, (line, changes, range) => {
            let indent = getIndentation(context, line.from);
            if (indent == null)
                return;
            if (!/\S/.test(line.text))
                indent = 0;
            let cur = /^\s*/.exec(line.text)[0];
            let norm = indentString(state, indent);
            if (cur != norm || range.from < line.from + cur.length) {
                updated[line.from] = indent;
                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
        });
        if (!changes.changes.empty)
            dispatch(state.update(changes, { userEvent: "indent" }));
        return true;
    };
    /**
    Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
    lines.
    */
    const indentMore = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            changes.push({ from: line.from, insert: state.facet(indentUnit) });
        }), { userEvent: "input.indent" }));
        return true;
    };
    /**
    Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
    selected lines.
    */
    const indentLess = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            let space = /^\s*/.exec(line.text)[0];
            if (!space)
                return;
            let col = countColumn(space, state.tabSize), keep = 0;
            let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
            while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
                keep++;
            changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
        }), { userEvent: "delete.dedent" }));
        return true;
    };
    /**
    Array of key bindings containing the Emacs-style bindings that are
    available on macOS by default.

     - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
     - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
     - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
     - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
     - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
     - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
     - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
     - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
     - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
     - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
     - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
     - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
     - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
     - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
    */
    const emacsStyleKeymap = [
        { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
        { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
        { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
        { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
        { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
        { key: "Ctrl-d", run: deleteCharForward },
        { key: "Ctrl-h", run: deleteCharBackward },
        { key: "Ctrl-k", run: deleteToLineEnd },
        { key: "Ctrl-Alt-h", run: deleteGroupBackward },
        { key: "Ctrl-o", run: splitLine },
        { key: "Ctrl-t", run: transposeChars },
        { key: "Ctrl-v", run: cursorPageDown },
    ];
    /**
    An array of key bindings closely sticking to platform-standard or
    widely used bindings. (This includes the bindings from
    [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
    property changed to `mac`.)

     - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
     - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
     - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
     - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
     - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
     - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
     - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
     - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
     - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
     - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
     - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
     - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
     - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
     - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
     - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
     - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
     - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
     - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
     - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
     - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
     - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
     - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
     - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
     - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
     - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
     - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
    */
    const standardKeymap = /*@__PURE__*/[
        { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft },
        { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
        { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
        { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight },
        { mac: "Cmd-ArrowRight", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
        { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
        { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
        { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
        { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
        { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
        { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
        { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
        { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
        { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
        { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
        { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
        { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
        { key: "Enter", run: insertNewlineAndIndent },
        { key: "Mod-a", run: selectAll },
        { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
        { key: "Delete", run: deleteCharForward },
        { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
        { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
        { mac: "Mod-Backspace", run: deleteToLineStart },
        { mac: "Mod-Delete", run: deleteToLineEnd }
    ].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
    /**
    The default keymap. Includes all bindings from
    [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

    - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
    - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
    - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
    - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
    - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
    - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
    - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
    - Ctrl-Enter (Comd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
    - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
    - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
    - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
    - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
    - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
    - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
    - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
    - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
    - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
    */
    const defaultKeymap = /*@__PURE__*/[
        { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
        { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
        { key: "Alt-ArrowUp", run: moveLineUp },
        { key: "Shift-Alt-ArrowUp", run: copyLineUp },
        { key: "Alt-ArrowDown", run: moveLineDown },
        { key: "Shift-Alt-ArrowDown", run: copyLineDown },
        { key: "Escape", run: simplifySelection },
        { key: "Mod-Enter", run: insertBlankLine },
        { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
        { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
        { key: "Mod-[", run: indentLess },
        { key: "Mod-]", run: indentMore },
        { key: "Mod-Alt-\\", run: indentSelection },
        { key: "Shift-Mod-k", run: deleteLine },
        { key: "Shift-Mod-\\", run: cursorMatchingBracket },
        { key: "Mod-/", run: toggleComment },
        { key: "Alt-A", run: toggleBlockComment }
    ].concat(standardKeymap);
    /**
    A binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and
    Shift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).
    Please see the [Tab example](../../examples/tab/) before using
    this.
    */
    const indentWithTab = { key: "Tab", run: indentMore, shift: indentLess };

    function crelt() {
      var elt = arguments[0];
      if (typeof elt == "string") elt = document.createElement(elt);
      var i = 1, next = arguments[1];
      if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
        for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
          var value = next[name];
          if (typeof value == "string") elt.setAttribute(name, value);
          else if (value != null) elt[name] = value;
        }
        i++;
      }
      for (; i < arguments.length; i++) add(elt, arguments[i]);
      return elt
    }

    function add(elt, child) {
      if (typeof child == "string") {
        elt.appendChild(document.createTextNode(child));
      } else if (child == null) ; else if (child.nodeType != null) {
        elt.appendChild(child);
      } else if (Array.isArray(child)) {
        for (var i = 0; i < child.length; i++) add(elt, child[i]);
      } else {
        throw new RangeError("Unsupported child node: " + child)
      }
    }

    const basicNormalize = typeof String.prototype.normalize == "function"
        ? x => x.normalize("NFKD") : x => x;
    /**
    A search cursor provides an iterator over text matches in a
    document.
    */
    class SearchCursor {
        /**
        Create a text cursor. The query is the search string, `from` to
        `to` provides the region to search.
        
        When `normalize` is given, it will be called, on both the query
        string and the content it is matched against, before comparing.
        You can, for example, create a case-insensitive search by
        passing `s => s.toLowerCase()`.
        
        Text is always normalized with
        [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
        (when supported).
        */
        constructor(text, query, from = 0, to = text.length, normalize) {
            /**
            The current match (only holds a meaningful value after
            [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
            `done` is false).
            */
            this.value = { from: 0, to: 0 };
            /**
            Whether the end of the iterated region has been reached.
            */
            this.done = false;
            this.matches = [];
            this.buffer = "";
            this.bufferPos = 0;
            this.iter = text.iterRange(from, to);
            this.bufferStart = from;
            this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
            this.query = this.normalize(query);
        }
        peek() {
            if (this.bufferPos == this.buffer.length) {
                this.bufferStart += this.buffer.length;
                this.iter.next();
                if (this.iter.done)
                    return -1;
                this.bufferPos = 0;
                this.buffer = this.iter.value;
            }
            return codePointAt(this.buffer, this.bufferPos);
        }
        /**
        Look for the next match. Updates the iterator's
        [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
        [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
        at least once before using the cursor.
        */
        next() {
            while (this.matches.length)
                this.matches.pop();
            return this.nextOverlapping();
        }
        /**
        The `next` method will ignore matches that partially overlap a
        previous match. This method behaves like `next`, but includes
        such matches.
        */
        nextOverlapping() {
            for (;;) {
                let next = this.peek();
                if (next < 0) {
                    this.done = true;
                    return this;
                }
                let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
                this.bufferPos += codePointSize(next);
                let norm = this.normalize(str);
                for (let i = 0, pos = start;; i++) {
                    let code = norm.charCodeAt(i);
                    let match = this.match(code, pos);
                    if (match) {
                        this.value = match;
                        return this;
                    }
                    if (i == norm.length - 1)
                        break;
                    if (pos == start && i < str.length && str.charCodeAt(i) == code)
                        pos++;
                }
            }
        }
        match(code, pos) {
            let match = null;
            for (let i = 0; i < this.matches.length; i += 2) {
                let index = this.matches[i], keep = false;
                if (this.query.charCodeAt(index) == code) {
                    if (index == this.query.length - 1) {
                        match = { from: this.matches[i + 1], to: pos + 1 };
                    }
                    else {
                        this.matches[i]++;
                        keep = true;
                    }
                }
                if (!keep) {
                    this.matches.splice(i, 2);
                    i -= 2;
                }
            }
            if (this.query.charCodeAt(0) == code) {
                if (this.query.length == 1)
                    match = { from: pos, to: pos + 1 };
                else
                    this.matches.push(1, pos);
            }
            return match;
        }
    }
    if (typeof Symbol != "undefined")
        SearchCursor.prototype[Symbol.iterator] = function () { return this; };

    const empty$2 = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec("") };
    const baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
    /**
    This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
    but searches for a regular expression pattern instead of a plain
    string.
    */
    class RegExpCursor {
        /**
        Create a cursor that will search the given range in the given
        document. `query` should be the raw pattern (as you'd pass it to
        `new RegExp`).
        */
        constructor(text, query, options, from = 0, to = text.length) {
            this.to = to;
            this.curLine = "";
            /**
            Set to `true` when the cursor has reached the end of the search
            range.
            */
            this.done = false;
            /**
            Will contain an object with the extent of the match and the
            match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
            sucessfully finds a match.
            */
            this.value = empty$2;
            if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
                return new MultilineRegExpCursor(text, query, options, from, to);
            this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
            this.iter = text.iter();
            let startLine = text.lineAt(from);
            this.curLineStart = startLine.from;
            this.matchPos = from;
            this.getLine(this.curLineStart);
        }
        getLine(skip) {
            this.iter.next(skip);
            if (this.iter.lineBreak) {
                this.curLine = "";
            }
            else {
                this.curLine = this.iter.value;
                if (this.curLineStart + this.curLine.length > this.to)
                    this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
                this.iter.next();
            }
        }
        nextLine() {
            this.curLineStart = this.curLineStart + this.curLine.length + 1;
            if (this.curLineStart > this.to)
                this.curLine = "";
            else
                this.getLine(0);
        }
        /**
        Move to the next match, if there is one.
        */
        next() {
            for (let off = this.matchPos - this.curLineStart;;) {
                this.re.lastIndex = off;
                let match = this.matchPos <= this.to && this.re.exec(this.curLine);
                if (match) {
                    let from = this.curLineStart + match.index, to = from + match[0].length;
                    this.matchPos = to + (from == to ? 1 : 0);
                    if (from == this.curLine.length)
                        this.nextLine();
                    if (from < to || from > this.value.to) {
                        this.value = { from, to, match };
                        return this;
                    }
                    off = this.matchPos - this.curLineStart;
                }
                else if (this.curLineStart + this.curLine.length < this.to) {
                    this.nextLine();
                    off = 0;
                }
                else {
                    this.done = true;
                    return this;
                }
            }
        }
    }
    const flattened = /*@__PURE__*/new WeakMap();
    // Reusable (partially) flattened document strings
    class FlattenedDoc {
        constructor(from, text) {
            this.from = from;
            this.text = text;
        }
        get to() { return this.from + this.text.length; }
        static get(doc, from, to) {
            let cached = flattened.get(doc);
            if (!cached || cached.from >= to || cached.to <= from) {
                let flat = new FlattenedDoc(from, doc.sliceString(from, to));
                flattened.set(doc, flat);
                return flat;
            }
            if (cached.from == from && cached.to == to)
                return cached;
            let { text, from: cachedFrom } = cached;
            if (cachedFrom > from) {
                text = doc.sliceString(from, cachedFrom) + text;
                cachedFrom = from;
            }
            if (cached.to < to)
                text += doc.sliceString(cached.to, to);
            flattened.set(doc, new FlattenedDoc(cachedFrom, text));
            return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
        }
    }
    class MultilineRegExpCursor {
        constructor(text, query, options, from, to) {
            this.text = text;
            this.to = to;
            this.done = false;
            this.value = empty$2;
            this.matchPos = from;
            this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
            this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Base */));
        }
        chunkEnd(pos) {
            return pos >= this.to ? this.to : this.text.lineAt(pos).to;
        }
        next() {
            for (;;) {
                let off = this.re.lastIndex = this.matchPos - this.flat.from;
                let match = this.re.exec(this.flat.text);
                // Skip empty matches directly after the last match
                if (match && !match[0] && match.index == off) {
                    this.re.lastIndex = off + 1;
                    match = this.re.exec(this.flat.text);
                }
                // If a match goes almost to the end of a noncomplete chunk, try
                // again, since it'll likely be able to match more
                if (match && this.flat.to < this.to && match.index + match[0].length > this.flat.text.length - 10)
                    match = null;
                if (match) {
                    let from = this.flat.from + match.index, to = from + match[0].length;
                    this.value = { from, to, match };
                    this.matchPos = to + (from == to ? 1 : 0);
                    return this;
                }
                else {
                    if (this.flat.to == this.to) {
                        this.done = true;
                        return this;
                    }
                    // Grow the flattened doc
                    this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
                }
            }
        }
    }
    if (typeof Symbol != "undefined") {
        RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =
            function () { return this; };
    }
    function validRegExp(source) {
        try {
            new RegExp(source, baseFlags);
            return true;
        }
        catch (_a) {
            return false;
        }
    }

    function createLineDialog(view) {
        let input = crelt("input", { class: "cm-textfield", name: "line" });
        let dom = crelt("form", {
            class: "cm-gotoLine",
            onkeydown: (event) => {
                if (event.keyCode == 27) { // Escape
                    event.preventDefault();
                    view.dispatch({ effects: dialogEffect.of(false) });
                    view.focus();
                }
                else if (event.keyCode == 13) { // Enter
                    event.preventDefault();
                    go();
                }
            },
            onsubmit: (event) => {
                event.preventDefault();
                go();
            }
        }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")));
        function go() {
            let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
            if (!match)
                return;
            let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
            let [, sign, ln, cl, percent] = match;
            let col = cl ? +cl.slice(1) : 0;
            let line = ln ? +ln : startLine.number;
            if (ln && percent) {
                let pc = line / 100;
                if (sign)
                    pc = pc * (sign == "-" ? -1 : 1) + (startLine.number / state.doc.lines);
                line = Math.round(state.doc.lines * pc);
            }
            else if (ln && sign) {
                line = line * (sign == "-" ? -1 : 1) + startLine.number;
            }
            let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
            view.dispatch({
                effects: dialogEffect.of(false),
                selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),
                scrollIntoView: true
            });
            view.focus();
        }
        return { dom };
    }
    const dialogEffect = /*@__PURE__*/StateEffect.define();
    const dialogField = /*@__PURE__*/StateField.define({
        create() { return true; },
        update(value, tr) {
            for (let e of tr.effects)
                if (e.is(dialogEffect))
                    value = e.value;
            return value;
        },
        provide: f => showPanel.from(f, val => val ? createLineDialog : null)
    });
    /**
    Command that shows a dialog asking the user for a line number, and
    when a valid position is provided, moves the cursor to that line.

    Supports line numbers, relative line offsets prefixed with `+` or
    `-`, document percentages suffixed with `%`, and an optional
    column position by adding `:` and a second number after the line
    number.

    The dialog can be styled with the `panel.gotoLine` theme
    selector.
    */
    const gotoLine = view => {
        let panel = getPanel(view, createLineDialog);
        if (!panel) {
            let effects = [dialogEffect.of(true)];
            if (view.state.field(dialogField, false) == null)
                effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1$1]));
            view.dispatch({ effects });
            panel = getPanel(view, createLineDialog);
        }
        if (panel)
            panel.dom.querySelector("input").focus();
        return true;
    };
    const baseTheme$1$1 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-panel.cm-gotoLine": {
            padding: "2px 6px 4px",
            "& label": { fontSize: "80%" }
        }
    });

    const defaultHighlightOptions = {
        highlightWordAroundCursor: false,
        minSelectionLength: 1,
        maxMatches: 100,
        wholeWords: false
    };
    const highlightConfig = /*@__PURE__*/Facet.define({
        combine(options) {
            return combineConfig(options, defaultHighlightOptions, {
                highlightWordAroundCursor: (a, b) => a || b,
                minSelectionLength: Math.min,
                maxMatches: Math.min
            });
        }
    });
    /**
    This extension highlights text that matches the selection. It uses
    the `"cm-selectionMatch"` class for the highlighting. When
    `highlightWordAroundCursor` is enabled, the word at the cursor
    itself will be highlighted with `"cm-selectionMatch-main"`.
    */
    function highlightSelectionMatches(options) {
        let ext = [defaultTheme, matchHighlighter];
        if (options)
            ext.push(highlightConfig.of(options));
        return ext;
    }
    const matchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch" });
    const mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
    // Whether the characters directly outside the given positions are non-word characters
    function insideWordBoundaries(check, state, from, to) {
        return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
            (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
    }
    // Whether the characters directly at the given positions are word characters
    function insideWord(check, state, from, to) {
        return check(state.sliceDoc(from, from + 1)) == CharCategory.Word
            && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
    }
    const matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.selectionSet || update.docChanged || update.viewportChanged)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let conf = view.state.facet(highlightConfig);
            let { state } = view, sel = state.selection;
            if (sel.ranges.length > 1)
                return Decoration.none;
            let range = sel.main, query, check = null;
            if (range.empty) {
                if (!conf.highlightWordAroundCursor)
                    return Decoration.none;
                let word = state.wordAt(range.head);
                if (!word)
                    return Decoration.none;
                check = state.charCategorizer(range.head);
                query = state.sliceDoc(word.from, word.to);
            }
            else {
                let len = range.to - range.from;
                if (len < conf.minSelectionLength || len > 200)
                    return Decoration.none;
                if (conf.wholeWords) {
                    query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?
                    check = state.charCategorizer(range.head);
                    if (!(insideWordBoundaries(check, state, range.from, range.to)
                        && insideWord(check, state, range.from, range.to)))
                        return Decoration.none;
                }
                else {
                    query = state.sliceDoc(range.from, range.to).trim();
                    if (!query)
                        return Decoration.none;
                }
            }
            let deco = [];
            for (let part of view.visibleRanges) {
                let cursor = new SearchCursor(state.doc, query, part.from, part.to);
                while (!cursor.next().done) {
                    let { from, to } = cursor.value;
                    if (!check || insideWordBoundaries(check, state, from, to)) {
                        if (range.empty && from <= range.from && to >= range.to)
                            deco.push(mainMatchDeco.range(from, to));
                        else if (from >= range.to || to <= range.from)
                            deco.push(matchDeco.range(from, to));
                        if (deco.length > conf.maxMatches)
                            return Decoration.none;
                    }
                }
            }
            return Decoration.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });
    const defaultTheme = /*@__PURE__*/EditorView.baseTheme({
        ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
        ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
    });
    // Select the words around the cursors.
    const selectWord = ({ state, dispatch }) => {
        let { selection } = state;
        let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
        if (newSel.eq(selection))
            return false;
        dispatch(state.update({ selection: newSel }));
        return true;
    };
    // Find next occurrence of query relative to last cursor. Wrap around
    // the document if there are no more matches.
    function findNextOccurrence(state, query) {
        let { main, ranges } = state.selection;
        let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
        for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
            cursor.next();
            if (cursor.done) {
                if (cycled)
                    return null;
                cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
                cycled = true;
            }
            else {
                if (cycled && ranges.some(r => r.from == cursor.value.from))
                    continue;
                if (fullWord) {
                    let word = state.wordAt(cursor.value.from);
                    if (!word || word.from != cursor.value.from || word.to != cursor.value.to)
                        continue;
                }
                return cursor.value;
            }
        }
    }
    /**
    Select next occurrence of the current selection. Expand selection
    to the surrounding word when the selection is empty.
    */
    const selectNextOccurrence = ({ state, dispatch }) => {
        let { ranges } = state.selection;
        if (ranges.some(sel => sel.from === sel.to))
            return selectWord({ state, dispatch });
        let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
        if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))
            return false;
        let range = findNextOccurrence(state, searchedText);
        if (!range)
            return false;
        dispatch(state.update({
            selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
            effects: EditorView.scrollIntoView(range.to)
        }));
        return true;
    };

    const searchConfigFacet = /*@__PURE__*/Facet.define({
        combine(configs) {
            var _a;
            return {
                top: configs.reduce((val, conf) => val !== null && val !== void 0 ? val : conf.top, undefined) || false,
                caseSensitive: configs.reduce((val, conf) => val !== null && val !== void 0 ? val : conf.caseSensitive, undefined) || false,
                createPanel: ((_a = configs.find(c => c.createPanel)) === null || _a === void 0 ? void 0 : _a.createPanel) || (view => new SearchPanel(view))
            };
        }
    });
    /**
    Add search state to the editor configuration, and optionally
    configure the search extension.
    ([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically
    enable this if it isn't already on).
    */
    function search$1(config) {
        return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;
    }
    /**
    A search query. Part of the editor's search state.
    */
    class SearchQuery {
        /**
        Create a query object.
        */
        constructor(config) {
            this.search = config.search;
            this.caseSensitive = !!config.caseSensitive;
            this.regexp = !!config.regexp;
            this.replace = config.replace || "";
            this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
            this.unquoted = config.literal ? this.search : this.search.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\");
        }
        /**
        Compare this query to another query.
        */
        eq(other) {
            return this.search == other.search && this.replace == other.replace &&
                this.caseSensitive == other.caseSensitive && this.regexp == other.regexp;
        }
        /**
        @internal
        */
        create() {
            return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
        }
        /**
        Get a search cursor for this query, searching through the given
        range in the given document.
        */
        getCursor(doc, from = 0, to = doc.length) {
            return this.regexp ? regexpCursor(this, doc, from, to) : stringCursor(this, doc, from, to);
        }
    }
    class QueryType {
        constructor(spec) {
            this.spec = spec;
        }
    }
    function stringCursor(spec, doc, from, to) {
        return new SearchCursor(doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase());
    }
    class StringQuery extends QueryType {
        constructor(spec) {
            super(spec);
        }
        nextMatch(doc, curFrom, curTo) {
            let cursor = stringCursor(this.spec, doc, curTo, doc.length).nextOverlapping();
            if (cursor.done)
                cursor = stringCursor(this.spec, doc, 0, curFrom).nextOverlapping();
            return cursor.done ? null : cursor.value;
        }
        // Searching in reverse is, rather than implementing inverted search
        // cursor, done by scanning chunk after chunk forward.
        prevMatchInRange(doc, from, to) {
            for (let pos = to;;) {
                let start = Math.max(from, pos - 10000 /* ChunkSize */ - this.spec.unquoted.length);
                let cursor = stringCursor(this.spec, doc, start, pos), range = null;
                while (!cursor.nextOverlapping().done)
                    range = cursor.value;
                if (range)
                    return range;
                if (start == from)
                    return null;
                pos -= 10000 /* ChunkSize */;
            }
        }
        prevMatch(doc, curFrom, curTo) {
            return this.prevMatchInRange(doc, 0, curFrom) ||
                this.prevMatchInRange(doc, curTo, doc.length);
        }
        getReplacement(_result) { return this.spec.replace; }
        matchAll(doc, limit) {
            let cursor = stringCursor(this.spec, doc, 0, doc.length), ranges = [];
            while (!cursor.next().done) {
                if (ranges.length >= limit)
                    return null;
                ranges.push(cursor.value);
            }
            return ranges;
        }
        highlight(doc, from, to, add) {
            let cursor = stringCursor(this.spec, doc, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, doc.length));
            while (!cursor.next().done)
                add(cursor.value.from, cursor.value.to);
        }
    }
    function regexpCursor(spec, doc, from, to) {
        return new RegExpCursor(doc, spec.search, spec.caseSensitive ? undefined : { ignoreCase: true }, from, to);
    }
    class RegExpQuery extends QueryType {
        nextMatch(doc, curFrom, curTo) {
            let cursor = regexpCursor(this.spec, doc, curTo, doc.length).next();
            if (cursor.done)
                cursor = regexpCursor(this.spec, doc, 0, curFrom).next();
            return cursor.done ? null : cursor.value;
        }
        prevMatchInRange(doc, from, to) {
            for (let size = 1;; size++) {
                let start = Math.max(from, to - size * 10000 /* ChunkSize */);
                let cursor = regexpCursor(this.spec, doc, start, to), range = null;
                while (!cursor.next().done)
                    range = cursor.value;
                if (range && (start == from || range.from > start + 10))
                    return range;
                if (start == from)
                    return null;
            }
        }
        prevMatch(doc, curFrom, curTo) {
            return this.prevMatchInRange(doc, 0, curFrom) ||
                this.prevMatchInRange(doc, curTo, doc.length);
        }
        getReplacement(result) {
            return this.spec.replace.replace(/\$([$&\d+])/g, (m, i) => i == "$" ? "$"
                : i == "&" ? result.match[0]
                    : i != "0" && +i < result.match.length ? result.match[i]
                        : m);
        }
        matchAll(doc, limit) {
            let cursor = regexpCursor(this.spec, doc, 0, doc.length), ranges = [];
            while (!cursor.next().done) {
                if (ranges.length >= limit)
                    return null;
                ranges.push(cursor.value);
            }
            return ranges;
        }
        highlight(doc, from, to, add) {
            let cursor = regexpCursor(this.spec, doc, Math.max(0, from - 250 /* HighlightMargin */), Math.min(to + 250 /* HighlightMargin */, doc.length));
            while (!cursor.next().done)
                add(cursor.value.from, cursor.value.to);
        }
    }
    /**
    A state effect that updates the current search query. Note that
    this only has an effect if the search state has been initialized
    (by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or
    by running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least
    once).
    */
    const setSearchQuery = /*@__PURE__*/StateEffect.define();
    const togglePanel$1 = /*@__PURE__*/StateEffect.define();
    const searchState = /*@__PURE__*/StateField.define({
        create(state) {
            return new SearchState(defaultQuery(state).create(), null);
        },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setSearchQuery))
                    value = new SearchState(effect.value.create(), value.panel);
                else if (effect.is(togglePanel$1))
                    value = new SearchState(value.query, effect.value ? createSearchPanel : null);
            }
            return value;
        },
        provide: f => showPanel.from(f, val => val.panel)
    });
    class SearchState {
        constructor(query, panel) {
            this.query = query;
            this.panel = panel;
        }
    }
    const matchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
    const searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.decorations = this.highlight(view.state.field(searchState));
        }
        update(update) {
            let state = update.state.field(searchState);
            if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
                this.decorations = this.highlight(state);
        }
        highlight({ query, panel }) {
            if (!panel || !query.spec.valid)
                return Decoration.none;
            let { view } = this;
            let builder = new RangeSetBuilder();
            for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
                let { from, to } = ranges[i];
                while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* HighlightMargin */)
                    to = ranges[++i].to;
                query.highlight(view.state.doc, from, to, (from, to) => {
                    let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);
                    builder.add(from, to, selected ? selectedMatchMark : matchMark);
                });
            }
            return builder.finish();
        }
    }, {
        decorations: v => v.decorations
    });
    function searchCommand(f) {
        return view => {
            let state = view.state.field(searchState, false);
            return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
        };
    }
    /**
    Open the search panel if it isn't already open, and move the
    selection to the first match after the current main selection.
    Will wrap around to the start of the document when it reaches the
    end.
    */
    const findNext = /*@__PURE__*/searchCommand((view, { query }) => {
        let { from, to } = view.state.selection.main;
        let next = query.nextMatch(view.state.doc, from, to);
        if (!next || next.from == from && next.to == to)
            return false;
        view.dispatch({
            selection: { anchor: next.from, head: next.to },
            scrollIntoView: true,
            effects: announceMatch(view, next),
            userEvent: "select.search"
        });
        return true;
    });
    /**
    Move the selection to the previous instance of the search query,
    before the current main selection. Will wrap past the start
    of the document to start searching at the end again.
    */
    const findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {
        let { state } = view, { from, to } = state.selection.main;
        let range = query.prevMatch(state.doc, from, to);
        if (!range)
            return false;
        view.dispatch({
            selection: { anchor: range.from, head: range.to },
            scrollIntoView: true,
            effects: announceMatch(view, range),
            userEvent: "select.search"
        });
        return true;
    });
    /**
    Select all instances of the search query.
    */
    const selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {
        let ranges = query.matchAll(view.state.doc, 1000);
        if (!ranges || !ranges.length)
            return false;
        view.dispatch({
            selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),
            userEvent: "select.search.matches"
        });
        return true;
    });
    /**
    Select all instances of the currently selected text.
    */
    const selectSelectionMatches = ({ state, dispatch }) => {
        let sel = state.selection;
        if (sel.ranges.length > 1 || sel.main.empty)
            return false;
        let { from, to } = sel.main;
        let ranges = [], main = 0;
        for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
            if (ranges.length > 1000)
                return false;
            if (cur.value.from == from)
                main = ranges.length;
            ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
        }
        dispatch(state.update({
            selection: EditorSelection.create(ranges, main),
            userEvent: "select.search.matches"
        }));
        return true;
    };
    /**
    Replace the current match of the search query.
    */
    const replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {
        let { state } = view, { from, to } = state.selection.main;
        if (state.readOnly)
            return false;
        let next = query.nextMatch(state.doc, from, from);
        if (!next)
            return false;
        let changes = [], selection, replacement;
        let announce = [];
        if (next.from == from && next.to == to) {
            replacement = state.toText(query.getReplacement(next));
            changes.push({ from: next.from, to: next.to, insert: replacement });
            next = query.nextMatch(state.doc, next.from, next.to);
            announce.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
        }
        if (next) {
            let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
            selection = { anchor: next.from - off, head: next.to - off };
            announce.push(announceMatch(view, next));
        }
        view.dispatch({
            changes, selection,
            scrollIntoView: !!selection,
            effects: announce,
            userEvent: "input.replace"
        });
        return true;
    });
    /**
    Replace all instances of the search query with the given
    replacement.
    */
    const replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {
        if (view.state.readOnly)
            return false;
        let changes = query.matchAll(view.state.doc, 1e9).map(match => {
            let { from, to } = match;
            return { from, to, insert: query.getReplacement(match) };
        });
        if (!changes.length)
            return false;
        let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
        view.dispatch({
            changes,
            effects: EditorView.announce.of(announceText),
            userEvent: "input.replace.all"
        });
        return true;
    });
    function createSearchPanel(view) {
        return view.state.facet(searchConfigFacet).createPanel(view);
    }
    function defaultQuery(state, fallback) {
        var _a;
        let sel = state.selection.main;
        let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
        let caseSensitive = (_a = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _a !== void 0 ? _a : state.facet(searchConfigFacet).caseSensitive;
        return fallback && !selText ? fallback : new SearchQuery({ search: selText.replace(/\n/g, "\\n"), caseSensitive });
    }
    /**
    Make sure the search panel is open and focused.
    */
    const openSearchPanel = view => {
        let state = view.state.field(searchState, false);
        if (state && state.panel) {
            let panel = getPanel(view, createSearchPanel);
            if (!panel)
                return false;
            let searchInput = panel.dom.querySelector("[main-field]");
            if (searchInput && searchInput != view.root.activeElement) {
                let query = defaultQuery(view.state, state.query.spec);
                if (query.valid)
                    view.dispatch({ effects: setSearchQuery.of(query) });
                searchInput.focus();
                searchInput.select();
            }
        }
        else {
            view.dispatch({ effects: [
                    togglePanel$1.of(true),
                    state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
                ] });
        }
        return true;
    };
    /**
    Close the search panel.
    */
    const closeSearchPanel = view => {
        let state = view.state.field(searchState, false);
        if (!state || !state.panel)
            return false;
        let panel = getPanel(view, createSearchPanel);
        if (panel && panel.dom.contains(view.root.activeElement))
            view.focus();
        view.dispatch({ effects: togglePanel$1.of(false) });
        return true;
    };
    /**
    Default search-related key bindings.

     - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
     - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
     - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
     - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
     - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
    */
    const searchKeymap = [
        { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
        { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
        { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
        { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
        { key: "Mod-Shift-l", run: selectSelectionMatches },
        { key: "Alt-g", run: gotoLine },
        { key: "Mod-d", run: selectNextOccurrence, preventDefault: true },
    ];
    class SearchPanel {
        constructor(view) {
            this.view = view;
            let query = this.query = view.state.field(searchState).query.spec;
            this.commit = this.commit.bind(this);
            this.searchField = crelt("input", {
                value: query.search,
                placeholder: phrase(view, "Find"),
                "aria-label": phrase(view, "Find"),
                class: "cm-textfield",
                name: "search",
                "main-field": "true",
                onchange: this.commit,
                onkeyup: this.commit
            });
            this.replaceField = crelt("input", {
                value: query.replace,
                placeholder: phrase(view, "Replace"),
                "aria-label": phrase(view, "Replace"),
                class: "cm-textfield",
                name: "replace",
                onchange: this.commit,
                onkeyup: this.commit
            });
            this.caseField = crelt("input", {
                type: "checkbox",
                name: "case",
                checked: query.caseSensitive,
                onchange: this.commit
            });
            this.reField = crelt("input", {
                type: "checkbox",
                name: "re",
                checked: query.regexp,
                onchange: this.commit
            });
            function button(name, onclick, content) {
                return crelt("button", { class: "cm-button", name, onclick, type: "button" }, content);
            }
            this.dom = crelt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
                this.searchField,
                button("next", () => findNext(view), [phrase(view, "next")]),
                button("prev", () => findPrevious(view), [phrase(view, "previous")]),
                button("select", () => selectMatches(view), [phrase(view, "all")]),
                crelt("label", null, [this.caseField, phrase(view, "match case")]),
                crelt("label", null, [this.reField, phrase(view, "regexp")]),
                ...view.state.readOnly ? [] : [
                    crelt("br"),
                    this.replaceField,
                    button("replace", () => replaceNext(view), [phrase(view, "replace")]),
                    button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")]),
                    crelt("button", {
                        name: "close",
                        onclick: () => closeSearchPanel(view),
                        "aria-label": phrase(view, "close"),
                        type: "button"
                    }, ["×"])
                ]
            ]);
        }
        commit() {
            let query = new SearchQuery({
                search: this.searchField.value,
                caseSensitive: this.caseField.checked,
                regexp: this.reField.checked,
                replace: this.replaceField.value
            });
            if (!query.eq(this.query)) {
                this.query = query;
                this.view.dispatch({ effects: setSearchQuery.of(query) });
            }
        }
        keydown(e) {
            if (runScopeHandlers(this.view, e, "search-panel")) {
                e.preventDefault();
            }
            else if (e.keyCode == 13 && e.target == this.searchField) {
                e.preventDefault();
                (e.shiftKey ? findPrevious : findNext)(this.view);
            }
            else if (e.keyCode == 13 && e.target == this.replaceField) {
                e.preventDefault();
                replaceNext(this.view);
            }
        }
        update(update) {
            for (let tr of update.transactions)
                for (let effect of tr.effects) {
                    if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
                        this.setQuery(effect.value);
                }
        }
        setQuery(query) {
            this.query = query;
            this.searchField.value = query.search;
            this.replaceField.value = query.replace;
            this.caseField.checked = query.caseSensitive;
            this.reField.checked = query.regexp;
        }
        mount() {
            this.searchField.select();
        }
        get pos() { return 80; }
        get top() { return this.view.state.facet(searchConfigFacet).top; }
    }
    function phrase(view, phrase) { return view.state.phrase(phrase); }
    const AnnounceMargin = 30;
    const Break = /[\s\.,:;?!]/;
    function announceMatch(view, { from, to }) {
        let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;
        let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
        let text = view.state.sliceDoc(start, end);
        if (start != line.from) {
            for (let i = 0; i < AnnounceMargin; i++)
                if (!Break.test(text[i + 1]) && Break.test(text[i])) {
                    text = text.slice(i);
                    break;
                }
        }
        if (end != lineEnd) {
            for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
                if (!Break.test(text[i - 1]) && Break.test(text[i])) {
                    text = text.slice(0, i);
                    break;
                }
        }
        return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line.number}.`);
    }
    const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-panel.cm-search": {
            padding: "2px 6px 4px",
            position: "relative",
            "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "4px",
                backgroundColor: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0
            },
            "& input, & button, & label": {
                margin: ".2em .6em .2em 0"
            },
            "& input[type=checkbox]": {
                marginRight: ".2em"
            },
            "& label": {
                fontSize: "80%",
                whiteSpace: "pre"
            }
        },
        "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
        "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
        "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
        "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
    });
    const searchExtensions = [
        searchState,
        /*@__PURE__*/Prec.lowest(searchHighlighter),
        baseTheme$2
    ];

    /**
    An instance of this is passed to completion source functions.
    */
    class CompletionContext {
        /**
        Create a new completion context. (Mostly useful for testing
        completion sources—in the editor, the extension will create
        these for you.)
        */
        constructor(
        /**
        The editor state that the completion happens in.
        */
        state, 
        /**
        The position at which the completion is happening.
        */
        pos, 
        /**
        Indicates whether completion was activated explicitly, or
        implicitly by typing. The usual way to respond to this is to
        only return completions when either there is part of a
        completable entity before the cursor, or `explicit` is true.
        */
        explicit) {
            this.state = state;
            this.pos = pos;
            this.explicit = explicit;
            /**
            @internal
            */
            this.abortListeners = [];
        }
        /**
        Get the extent, content, and (if there is a token) type of the
        token before `this.pos`.
        */
        tokenBefore(types) {
            let token = syntaxTree(this.state).resolveInner(this.pos, -1);
            while (token && types.indexOf(token.name) < 0)
                token = token.parent;
            return token ? { from: token.from, to: this.pos,
                text: this.state.sliceDoc(token.from, this.pos),
                type: token.type } : null;
        }
        /**
        Get the match of the given expression directly before the
        cursor.
        */
        matchBefore(expr) {
            let line = this.state.doc.lineAt(this.pos);
            let start = Math.max(line.from, this.pos - 250);
            let str = line.text.slice(start - line.from, this.pos - line.from);
            let found = str.search(ensureAnchor(expr, false));
            return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
        }
        /**
        Yields true when the query has been aborted. Can be useful in
        asynchronous queries to avoid doing work that will be ignored.
        */
        get aborted() { return this.abortListeners == null; }
        /**
        Allows you to register abort handlers, which will be called when
        the query is
        [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
        */
        addEventListener(type, listener) {
            if (type == "abort" && this.abortListeners)
                this.abortListeners.push(listener);
        }
    }
    function toSet(chars) {
        let flat = Object.keys(chars).join("");
        let words = /\w/.test(flat);
        if (words)
            flat = flat.replace(/\w/g, "");
        return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
    }
    function prefixMatch(options) {
        let first = Object.create(null), rest = Object.create(null);
        for (let { label } of options) {
            first[label[0]] = true;
            for (let i = 1; i < label.length; i++)
                rest[label[i]] = true;
        }
        let source = toSet(first) + toSet(rest) + "*$";
        return [new RegExp("^" + source), new RegExp(source)];
    }
    /**
    Given a a fixed array of options, return an autocompleter that
    completes them.
    */
    function completeFromList(list) {
        let options = list.map(o => typeof o == "string" ? { label: o } : o);
        let [validFor, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
        return (context) => {
            let token = context.matchBefore(match);
            return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
        };
    }
    class Option {
        constructor(completion, source, match) {
            this.completion = completion;
            this.source = source;
            this.match = match;
        }
    }
    function cur(state) { return state.selection.main.head; }
    // Make sure the given regexp has a $ at its end and, if `start` is
    // true, a ^ at its start.
    function ensureAnchor(expr, start) {
        var _a;
        let { source } = expr;
        let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
        if (!addStart && !addEnd)
            return expr;
        return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
    }
    /**
    Helper function that returns a transaction spec which inserts a
    completion's text in the main selection range, and any other
    selection range that has the same text in front of it.
    */
    function insertCompletionText(state, text, from, to) {
        return Object.assign(Object.assign({}, state.changeByRange(range => {
            if (range == state.selection.main)
                return {
                    changes: { from: from, to: to, insert: text },
                    range: EditorSelection.cursor(from + text.length)
                };
            let len = to - from;
            if (!range.empty ||
                len && state.sliceDoc(range.from - len, range.from) != state.sliceDoc(from, to))
                return { range };
            return {
                changes: { from: range.from - len, to: range.from, insert: text },
                range: EditorSelection.cursor(range.from - len + text.length)
            };
        })), { userEvent: "input.complete" });
    }
    function applyCompletion(view, option) {
        const apply = option.completion.apply || option.completion.label;
        let result = option.source;
        if (typeof apply == "string")
            view.dispatch(insertCompletionText(view.state, apply, result.from, result.to));
        else
            apply(view, option.completion, result.from, result.to);
    }
    const SourceCache = /*@__PURE__*/new WeakMap();
    function asSource(source) {
        if (!Array.isArray(source))
            return source;
        let known = SourceCache.get(source);
        if (!known)
            SourceCache.set(source, known = completeFromList(source));
        return known;
    }

    // A pattern matcher for fuzzy completion matching. Create an instance
    // once for a pattern, and then use that to match any number of
    // completions.
    class FuzzyMatcher {
        constructor(pattern) {
            this.pattern = pattern;
            this.chars = [];
            this.folded = [];
            // Buffers reused by calls to `match` to track matched character
            // positions.
            this.any = [];
            this.precise = [];
            this.byWord = [];
            for (let p = 0; p < pattern.length;) {
                let char = codePointAt(pattern, p), size = codePointSize(char);
                this.chars.push(char);
                let part = pattern.slice(p, p + size), upper = part.toUpperCase();
                this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
                p += size;
            }
            this.astral = pattern.length != this.chars.length;
        }
        // Matches a given word (completion) against the pattern (input).
        // Will return null for no match, and otherwise an array that starts
        // with the match score, followed by any number of `from, to` pairs
        // indicating the matched parts of `word`.
        //
        // The score is a number that is more negative the worse the match
        // is. See `Penalty` above.
        match(word) {
            if (this.pattern.length == 0)
                return [0];
            if (word.length < this.pattern.length)
                return null;
            let { chars, folded, any, precise, byWord } = this;
            // For single-character queries, only match when they occur right
            // at the start
            if (chars.length == 1) {
                let first = codePointAt(word, 0);
                return first == chars[0] ? [0, 0, codePointSize(first)]
                    : first == folded[0] ? [-200 /* CaseFold */, 0, codePointSize(first)] : null;
            }
            let direct = word.indexOf(this.pattern);
            if (direct == 0)
                return [0, 0, this.pattern.length];
            let len = chars.length, anyTo = 0;
            if (direct < 0) {
                for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                    let next = codePointAt(word, i);
                    if (next == chars[anyTo] || next == folded[anyTo])
                        any[anyTo++] = i;
                    i += codePointSize(next);
                }
                // No match, exit immediately
                if (anyTo < len)
                    return null;
            }
            // This tracks the extent of the precise (non-folded, not
            // necessarily adjacent) match
            let preciseTo = 0;
            // Tracks whether there is a match that hits only characters that
            // appear to be starting words. `byWordFolded` is set to true when
            // a case folded character is encountered in such a match
            let byWordTo = 0, byWordFolded = false;
            // If we've found a partial adjacent match, these track its state
            let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
            let hasLower = /[a-z]/.test(word), wordAdjacent = true;
            // Go over the option's text, scanning for the various kinds of matches
            for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* NonWord */; i < e && byWordTo < len;) {
                let next = codePointAt(word, i);
                if (direct < 0) {
                    if (preciseTo < len && next == chars[preciseTo])
                        precise[preciseTo++] = i;
                    if (adjacentTo < len) {
                        if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                            if (adjacentTo == 0)
                                adjacentStart = i;
                            adjacentEnd = i + 1;
                            adjacentTo++;
                        }
                        else {
                            adjacentTo = 0;
                        }
                    }
                }
                let ch, type = next < 0xff
                    ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Lower */ : next >= 65 && next <= 90 ? 1 /* Upper */ : 0 /* NonWord */)
                    : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Upper */ : ch != ch.toUpperCase() ? 2 /* Lower */ : 0 /* NonWord */);
                if (!i || type == 1 /* Upper */ && hasLower || prevType == 0 /* NonWord */ && type != 0 /* NonWord */) {
                    if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))
                        byWord[byWordTo++] = i;
                    else if (byWord.length)
                        wordAdjacent = false;
                }
                prevType = type;
                i += codePointSize(next);
            }
            if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
                return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0), byWord, word);
            if (adjacentTo == len && adjacentStart == 0)
                return [-200 /* CaseFold */ - word.length, 0, adjacentEnd];
            if (direct > -1)
                return [-700 /* NotStart */ - word.length, direct, direct + this.pattern.length];
            if (adjacentTo == len)
                return [-200 /* CaseFold */ + -700 /* NotStart */ - word.length, adjacentStart, adjacentEnd];
            if (byWordTo == len)
                return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0) + -700 /* NotStart */ +
                    (wordAdjacent ? 0 : -1100 /* Gap */), byWord, word);
            return chars.length == 2 ? null : this.result((any[0] ? -700 /* NotStart */ : 0) + -200 /* CaseFold */ + -1100 /* Gap */, any, word);
        }
        result(score, positions, word) {
            let result = [score - word.length], i = 1;
            for (let pos of positions) {
                let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
                if (i > 1 && result[i - 1] == pos)
                    result[i - 1] = to;
                else {
                    result[i++] = pos;
                    result[i++] = to;
                }
            }
            return result;
        }
    }

    const completionConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                activateOnTyping: true,
                override: null,
                closeOnBlur: true,
                maxRenderedOptions: 100,
                defaultKeymap: true,
                optionClass: () => "",
                aboveCursor: false,
                icons: true,
                addToOptions: []
            }, {
                defaultKeymap: (a, b) => a && b,
                closeOnBlur: (a, b) => a && b,
                icons: (a, b) => a && b,
                optionClass: (a, b) => c => joinClass(a(c), b(c)),
                addToOptions: (a, b) => a.concat(b)
            });
        }
    });
    function joinClass(a, b) {
        return a ? b ? a + " " + b : a : b;
    }

    function optionContent(config) {
        let content = config.addToOptions.slice();
        if (config.icons)
            content.push({
                render(completion) {
                    let icon = document.createElement("div");
                    icon.classList.add("cm-completionIcon");
                    if (completion.type)
                        icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
                    icon.setAttribute("aria-hidden", "true");
                    return icon;
                },
                position: 20
            });
        content.push({
            render(completion, _s, match) {
                let labelElt = document.createElement("span");
                labelElt.className = "cm-completionLabel";
                let { label } = completion, off = 0;
                for (let j = 1; j < match.length;) {
                    let from = match[j++], to = match[j++];
                    if (from > off)
                        labelElt.appendChild(document.createTextNode(label.slice(off, from)));
                    let span = labelElt.appendChild(document.createElement("span"));
                    span.appendChild(document.createTextNode(label.slice(from, to)));
                    span.className = "cm-completionMatchedText";
                    off = to;
                }
                if (off < label.length)
                    labelElt.appendChild(document.createTextNode(label.slice(off)));
                return labelElt;
            },
            position: 50
        }, {
            render(completion) {
                if (!completion.detail)
                    return null;
                let detailElt = document.createElement("span");
                detailElt.className = "cm-completionDetail";
                detailElt.textContent = completion.detail;
                return detailElt;
            },
            position: 80
        });
        return content.sort((a, b) => a.position - b.position).map(a => a.render);
    }
    function rangeAroundSelected(total, selected, max) {
        if (total <= max)
            return { from: 0, to: total };
        if (selected <= (total >> 1)) {
            let off = Math.floor(selected / max);
            return { from: off * max, to: (off + 1) * max };
        }
        let off = Math.floor((total - selected) / max);
        return { from: total - (off + 1) * max, to: total - off * max };
    }
    class CompletionTooltip {
        constructor(view, stateField) {
            this.view = view;
            this.stateField = stateField;
            this.info = null;
            this.placeInfo = {
                read: () => this.measureInfo(),
                write: (pos) => this.positionInfo(pos),
                key: this
            };
            let cState = view.state.field(stateField);
            let { options, selected } = cState.open;
            let config = view.state.facet(completionConfig);
            this.optionContent = optionContent(config);
            this.optionClass = config.optionClass;
            this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
            this.dom = document.createElement("div");
            this.dom.className = "cm-tooltip-autocomplete";
            this.dom.addEventListener("mousedown", (e) => {
                for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
                    if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                        applyCompletion(view, options[+match[1]]);
                        e.preventDefault();
                        return;
                    }
                }
            });
            this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));
            this.list.addEventListener("scroll", () => {
                if (this.info)
                    this.view.requestMeasure(this.placeInfo);
            });
        }
        mount() { this.updateSel(); }
        update(update) {
            if (update.state.field(this.stateField) != update.startState.field(this.stateField))
                this.updateSel();
        }
        positioned() {
            if (this.info)
                this.view.requestMeasure(this.placeInfo);
        }
        updateSel() {
            let cState = this.view.state.field(this.stateField), open = cState.open;
            if (open.selected < this.range.from || open.selected >= this.range.to) {
                this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
                this.list.remove();
                this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));
                this.list.addEventListener("scroll", () => {
                    if (this.info)
                        this.view.requestMeasure(this.placeInfo);
                });
            }
            if (this.updateSelectedOption(open.selected)) {
                if (this.info) {
                    this.info.remove();
                    this.info = null;
                }
                let { completion } = open.options[open.selected];
                let { info } = completion;
                if (!info)
                    return;
                let infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);
                if (!infoResult)
                    return;
                if ('then' in infoResult) {
                    infoResult.then(node => {
                        if (node && this.view.state.field(this.stateField, false) == cState)
                            this.addInfoPane(node);
                    }).catch(e => logException(this.view.state, e, "completion info"));
                }
                else {
                    this.addInfoPane(infoResult);
                }
            }
        }
        addInfoPane(content) {
            let dom = this.info = document.createElement("div");
            dom.className = "cm-tooltip cm-completionInfo";
            dom.appendChild(content);
            this.dom.appendChild(dom);
            this.view.requestMeasure(this.placeInfo);
        }
        updateSelectedOption(selected) {
            let set = null;
            for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
                if (i == selected) {
                    if (!opt.hasAttribute("aria-selected")) {
                        opt.setAttribute("aria-selected", "true");
                        set = opt;
                    }
                }
                else {
                    if (opt.hasAttribute("aria-selected"))
                        opt.removeAttribute("aria-selected");
                }
            }
            if (set)
                scrollIntoView(this.list, set);
            return set;
        }
        measureInfo() {
            let sel = this.dom.querySelector("[aria-selected]");
            if (!sel || !this.info)
                return null;
            let listRect = this.dom.getBoundingClientRect();
            let infoRect = this.info.getBoundingClientRect();
            let selRect = sel.getBoundingClientRect();
            if (selRect.top > Math.min(innerHeight, listRect.bottom) - 10 || selRect.bottom < Math.max(0, listRect.top) + 10)
                return null;
            let top = Math.max(0, Math.min(selRect.top, innerHeight - infoRect.height)) - listRect.top;
            let left = this.view.textDirection == Direction.RTL;
            let spaceLeft = listRect.left, spaceRight = innerWidth - listRect.right;
            if (left && spaceLeft < Math.min(infoRect.width, spaceRight))
                left = false;
            else if (!left && spaceRight < Math.min(infoRect.width, spaceLeft))
                left = true;
            return { top, left };
        }
        positionInfo(pos) {
            if (this.info) {
                this.info.style.top = (pos ? pos.top : -1e6) + "px";
                if (pos) {
                    this.info.classList.toggle("cm-completionInfo-left", pos.left);
                    this.info.classList.toggle("cm-completionInfo-right", !pos.left);
                }
            }
        }
        createListBox(options, id, range) {
            const ul = document.createElement("ul");
            ul.id = id;
            ul.setAttribute("role", "listbox");
            ul.setAttribute("aria-expanded", "true");
            ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
            for (let i = range.from; i < range.to; i++) {
                let { completion, match } = options[i];
                const li = ul.appendChild(document.createElement("li"));
                li.id = id + "-" + i;
                li.setAttribute("role", "option");
                let cls = this.optionClass(completion);
                if (cls)
                    li.className = cls;
                for (let source of this.optionContent) {
                    let node = source(completion, this.view.state, match);
                    if (node)
                        li.appendChild(node);
                }
            }
            if (range.from)
                ul.classList.add("cm-completionListIncompleteTop");
            if (range.to < options.length)
                ul.classList.add("cm-completionListIncompleteBottom");
            return ul;
        }
    }
    // We allocate a new function instance every time the completion
    // changes to force redrawing/repositioning of the tooltip
    function completionTooltip(stateField) {
        return (view) => new CompletionTooltip(view, stateField);
    }
    function scrollIntoView(container, element) {
        let parent = container.getBoundingClientRect();
        let self = element.getBoundingClientRect();
        if (self.top < parent.top)
            container.scrollTop -= parent.top - self.top;
        else if (self.bottom > parent.bottom)
            container.scrollTop += self.bottom - parent.bottom;
    }

    // Used to pick a preferred option when two options with the same
    // label occur in the result.
    function score(option) {
        return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +
            (option.type ? 1 : 0);
    }
    function sortOptions(active, state) {
        let options = [], i = 0;
        for (let a of active)
            if (a.hasResult()) {
                if (a.result.filter === false) {
                    let getMatch = a.result.getMatch;
                    for (let option of a.result.options) {
                        let match = [1e9 - i++];
                        if (getMatch)
                            for (let n of getMatch(option))
                                match.push(n);
                        options.push(new Option(option, a, match));
                    }
                }
                else {
                    let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)), match;
                    for (let option of a.result.options)
                        if (match = matcher.match(option.label)) {
                            if (option.boost != null)
                                match[0] += option.boost;
                            options.push(new Option(option, a, match));
                        }
                }
            }
        let result = [], prev = null;
        for (let opt of options.sort(cmpOption)) {
            if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail ||
                (prev.type != null && opt.completion.type != null && prev.type != opt.completion.type) ||
                prev.apply != opt.completion.apply)
                result.push(opt);
            else if (score(opt.completion) > score(prev))
                result[result.length - 1] = opt;
            prev = opt.completion;
        }
        return result;
    }
    class CompletionDialog {
        constructor(options, attrs, tooltip, timestamp, selected) {
            this.options = options;
            this.attrs = attrs;
            this.tooltip = tooltip;
            this.timestamp = timestamp;
            this.selected = selected;
        }
        setSelected(selected, id) {
            return selected == this.selected || selected >= this.options.length ? this
                : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);
        }
        static build(active, state, id, prev, conf) {
            let options = sortOptions(active, state);
            if (!options.length)
                return null;
            let selected = 0;
            if (prev && prev.selected) {
                let selectedValue = prev.options[prev.selected].completion;
                for (let i = 0; i < options.length; i++)
                    if (options[i].completion == selectedValue) {
                        selected = i;
                        break;
                    }
            }
            return new CompletionDialog(options, makeAttrs(id, selected), {
                pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
                create: completionTooltip(completionState),
                above: conf.aboveCursor,
            }, prev ? prev.timestamp : Date.now(), selected);
        }
        map(changes) {
            return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected);
        }
    }
    class CompletionState {
        constructor(active, id, open) {
            this.active = active;
            this.id = id;
            this.open = open;
        }
        static start() {
            return new CompletionState(none$2, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
        }
        update(tr) {
            let { state } = tr, conf = state.facet(completionConfig);
            let sources = conf.override ||
                state.languageDataAt("autocomplete", cur(state)).map(asSource);
            let active = sources.map(source => {
                let value = this.active.find(s => s.source == source) ||
                    new ActiveSource(source, this.active.some(a => a.state != 0 /* Inactive */) ? 1 /* Pending */ : 0 /* Inactive */);
                return value.update(tr, conf);
            });
            if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
                active = this.active;
            let open = tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
                !sameResults(active, this.active) ? CompletionDialog.build(active, state, this.id, this.open, conf)
                : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;
            if (!open && active.every(a => a.state != 1 /* Pending */) && active.some(a => a.hasResult()))
                active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* Inactive */) : a);
            for (let effect of tr.effects)
                if (effect.is(setSelectedEffect))
                    open = open && open.setSelected(effect.value, this.id);
            return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
        }
        get tooltip() { return this.open ? this.open.tooltip : null; }
        get attrs() { return this.open ? this.open.attrs : baseAttrs; }
    }
    function sameResults(a, b) {
        if (a == b)
            return true;
        for (let iA = 0, iB = 0;;) {
            while (iA < a.length && !a[iA].hasResult)
                iA++;
            while (iB < b.length && !b[iB].hasResult)
                iB++;
            let endA = iA == a.length, endB = iB == b.length;
            if (endA || endB)
                return endA == endB;
            if (a[iA++].result != b[iB++].result)
                return false;
        }
    }
    const baseAttrs = {
        "aria-autocomplete": "list"
    };
    function makeAttrs(id, selected) {
        return {
            "aria-autocomplete": "list",
            "aria-haspopup": "listbox",
            "aria-activedescendant": id + "-" + selected,
            "aria-controls": id
        };
    }
    const none$2 = [];
    function cmpOption(a, b) {
        let dScore = b.match[0] - a.match[0];
        if (dScore)
            return dScore;
        return a.completion.label.localeCompare(b.completion.label);
    }
    function getUserEvent(tr) {
        return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
    }
    class ActiveSource {
        constructor(source, state, explicitPos = -1) {
            this.source = source;
            this.state = state;
            this.explicitPos = explicitPos;
        }
        hasResult() { return false; }
        update(tr, conf) {
            let event = getUserEvent(tr), value = this;
            if (event)
                value = value.handleUserEvent(tr, event, conf);
            else if (tr.docChanged)
                value = value.handleChange(tr);
            else if (tr.selection && value.state != 0 /* Inactive */)
                value = new ActiveSource(value.source, 0 /* Inactive */);
            for (let effect of tr.effects) {
                if (effect.is(startCompletionEffect))
                    value = new ActiveSource(value.source, 1 /* Pending */, effect.value ? cur(tr.state) : -1);
                else if (effect.is(closeCompletionEffect))
                    value = new ActiveSource(value.source, 0 /* Inactive */);
                else if (effect.is(setActiveEffect))
                    for (let active of effect.value)
                        if (active.source == value.source)
                            value = active;
            }
            return value;
        }
        handleUserEvent(tr, type, conf) {
            return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* Pending */);
        }
        handleChange(tr) {
            return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);
        }
        map(changes) {
            return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
        }
    }
    class ActiveResult extends ActiveSource {
        constructor(source, explicitPos, result, from, to) {
            super(source, 2 /* Result */, explicitPos);
            this.result = result;
            this.from = from;
            this.to = to;
        }
        hasResult() { return true; }
        handleUserEvent(tr, type, conf) {
            var _a;
            let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
            let pos = cur(tr.state);
            if ((this.explicitPos < 0 ? pos <= from : pos < this.from) ||
                pos > to ||
                type == "delete" && cur(tr.startState) == this.from)
                return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 /* Pending */ : 0 /* Inactive */);
            let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos), updated;
            if (checkValid(this.result.validFor, tr.state, from, to))
                return new ActiveResult(this.source, explicitPos, this.result, from, to);
            if (this.result.update &&
                (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))
                return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));
            return new ActiveSource(this.source, 1 /* Pending */, explicitPos);
        }
        handleChange(tr) {
            return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);
        }
        map(mapping) {
            return mapping.empty ? this :
                new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
        }
    }
    function checkValid(validFor, state, from, to) {
        if (!validFor)
            return false;
        let text = state.sliceDoc(from, to);
        return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
    }
    const startCompletionEffect = /*@__PURE__*/StateEffect.define();
    const closeCompletionEffect = /*@__PURE__*/StateEffect.define();
    const setActiveEffect = /*@__PURE__*/StateEffect.define({
        map(sources, mapping) { return sources.map(s => s.map(mapping)); }
    });
    const setSelectedEffect = /*@__PURE__*/StateEffect.define();
    const completionState = /*@__PURE__*/StateField.define({
        create() { return CompletionState.start(); },
        update(value, tr) { return value.update(tr); },
        provide: f => [
            showTooltip.from(f, val => val.tooltip),
            EditorView.contentAttributes.from(f, state => state.attrs)
        ]
    });

    const CompletionInteractMargin = 75;
    /**
    Returns a command that moves the completion selection forward or
    backward by the given amount.
    */
    function moveCompletionSelection(forward, by = "option") {
        return (view) => {
            let cState = view.state.field(completionState, false);
            if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
                return false;
            let step = 1, tooltip;
            if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
                step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /
                    tooltip.dom.querySelector("li").offsetHeight) - 1);
            let selected = cState.open.selected + step * (forward ? 1 : -1), { length } = cState.open.options;
            if (selected < 0)
                selected = by == "page" ? 0 : length - 1;
            else if (selected >= length)
                selected = by == "page" ? length - 1 : 0;
            view.dispatch({ effects: setSelectedEffect.of(selected) });
            return true;
        };
    }
    /**
    Accept the current completion.
    */
    const acceptCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (view.state.readOnly || !cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
            return false;
        applyCompletion(view, cState.open.options[cState.open.selected]);
        return true;
    };
    /**
    Explicitly start autocompletion.
    */
    const startCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState)
            return false;
        view.dispatch({ effects: startCompletionEffect.of(true) });
        return true;
    };
    /**
    Close the currently active completion.
    */
    const closeCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState || !cState.active.some(a => a.state != 0 /* Inactive */))
            return false;
        view.dispatch({ effects: closeCompletionEffect.of(null) });
        return true;
    };
    class RunningQuery {
        constructor(active, context) {
            this.active = active;
            this.context = context;
            this.time = Date.now();
            this.updates = [];
            // Note that 'undefined' means 'not done yet', whereas 'null' means
            // 'query returned null'.
            this.done = undefined;
        }
    }
    const DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;
    const completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.debounceUpdate = -1;
            this.running = [];
            this.debounceAccept = -1;
            this.composing = 0 /* None */;
            for (let active of view.state.field(completionState).active)
                if (active.state == 1 /* Pending */)
                    this.startQuery(active);
        }
        update(update) {
            let cState = update.state.field(completionState);
            if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
                return;
            let doesReset = update.transactions.some(tr => {
                return (tr.selection || tr.docChanged) && !getUserEvent(tr);
            });
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (doesReset ||
                    query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
                    for (let handler of query.context.abortListeners) {
                        try {
                            handler();
                        }
                        catch (e) {
                            logException(this.view.state, e);
                        }
                    }
                    query.context.abortListeners = null;
                    this.running.splice(i--, 1);
                }
                else {
                    query.updates.push(...update.transactions);
                }
            }
            if (this.debounceUpdate > -1)
                clearTimeout(this.debounceUpdate);
            this.debounceUpdate = cState.active.some(a => a.state == 1 /* Pending */ && !this.running.some(q => q.active.source == a.source))
                ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;
            if (this.composing != 0 /* None */)
                for (let tr of update.transactions) {
                    if (getUserEvent(tr) == "input")
                        this.composing = 2 /* Changed */;
                    else if (this.composing == 2 /* Changed */ && tr.selection)
                        this.composing = 3 /* ChangedAndMoved */;
                }
        }
        startUpdate() {
            this.debounceUpdate = -1;
            let { state } = this.view, cState = state.field(completionState);
            for (let active of cState.active) {
                if (active.state == 1 /* Pending */ && !this.running.some(r => r.active.source == active.source))
                    this.startQuery(active);
            }
        }
        startQuery(active) {
            let { state } = this.view, pos = cur(state);
            let context = new CompletionContext(state, pos, active.explicitPos == pos);
            let pending = new RunningQuery(active, context);
            this.running.push(pending);
            Promise.resolve(active.source(context)).then(result => {
                if (!pending.context.aborted) {
                    pending.done = result || null;
                    this.scheduleAccept();
                }
            }, err => {
                this.view.dispatch({ effects: closeCompletionEffect.of(null) });
                logException(this.view.state, err);
            });
        }
        scheduleAccept() {
            if (this.running.every(q => q.done !== undefined))
                this.accept();
            else if (this.debounceAccept < 0)
                this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);
        }
        // For each finished query in this.running, try to create a result
        // or, if appropriate, restart the query.
        accept() {
            var _a;
            if (this.debounceAccept > -1)
                clearTimeout(this.debounceAccept);
            this.debounceAccept = -1;
            let updated = [];
            let conf = this.view.state.facet(completionConfig);
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (query.done === undefined)
                    continue;
                this.running.splice(i--, 1);
                if (query.done) {
                    let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));
                    // Replay the transactions that happened since the start of
                    // the request and see if that preserves the result
                    for (let tr of query.updates)
                        active = active.update(tr, conf);
                    if (active.hasResult()) {
                        updated.push(active);
                        continue;
                    }
                }
                let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);
                if (current && current.state == 1 /* Pending */) {
                    if (query.done == null) {
                        // Explicitly failed. Should clear the pending status if it
                        // hasn't been re-set in the meantime.
                        let active = new ActiveSource(query.active.source, 0 /* Inactive */);
                        for (let tr of query.updates)
                            active = active.update(tr, conf);
                        if (active.state != 1 /* Pending */)
                            updated.push(active);
                    }
                    else {
                        // Cleared by subsequent transactions. Restart.
                        this.startQuery(current);
                    }
                }
            }
            if (updated.length)
                this.view.dispatch({ effects: setActiveEffect.of(updated) });
        }
    }, {
        eventHandlers: {
            blur() {
                let state = this.view.state.field(completionState, false);
                if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur)
                    this.view.dispatch({ effects: closeCompletionEffect.of(null) });
            },
            compositionstart() {
                this.composing = 1 /* Started */;
            },
            compositionend() {
                if (this.composing == 3 /* ChangedAndMoved */) {
                    // Safari fires compositionend events synchronously, possibly
                    // from inside an update, so dispatch asynchronously to avoid reentrancy
                    setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
                }
                this.composing = 0 /* None */;
            }
        }
    });

    const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-tooltip.cm-tooltip-autocomplete": {
            "& > ul": {
                fontFamily: "monospace",
                whiteSpace: "nowrap",
                overflow: "hidden auto",
                maxWidth_fallback: "700px",
                maxWidth: "min(700px, 95vw)",
                minWidth: "250px",
                maxHeight: "10em",
                listStyle: "none",
                margin: 0,
                padding: 0,
                "& > li": {
                    overflowX: "hidden",
                    textOverflow: "ellipsis",
                    cursor: "pointer",
                    padding: "1px 3px",
                    lineHeight: 1.2
                },
            }
        },
        "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
            background: "#17c",
            color: "white",
        },
        "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
            background: "#347",
            color: "white",
        },
        ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
            content: '"···"',
            opacity: 0.5,
            display: "block",
            textAlign: "center"
        },
        ".cm-tooltip.cm-completionInfo": {
            position: "absolute",
            padding: "3px 9px",
            width: "max-content",
            maxWidth: "300px",
        },
        ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
        ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
        "&light .cm-snippetField": { backgroundColor: "#00000022" },
        "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
        ".cm-snippetFieldPosition": {
            verticalAlign: "text-top",
            width: 0,
            height: "1.15em",
            margin: "0 -0.7px -.7em",
            borderLeft: "1.4px dotted #888"
        },
        ".cm-completionMatchedText": {
            textDecoration: "underline"
        },
        ".cm-completionDetail": {
            marginLeft: "0.5em",
            fontStyle: "italic"
        },
        ".cm-completionIcon": {
            fontSize: "90%",
            width: ".8em",
            display: "inline-block",
            textAlign: "center",
            paddingRight: ".6em",
            opacity: "0.6"
        },
        ".cm-completionIcon-function, .cm-completionIcon-method": {
            "&:after": { content: "'ƒ'" }
        },
        ".cm-completionIcon-class": {
            "&:after": { content: "'○'" }
        },
        ".cm-completionIcon-interface": {
            "&:after": { content: "'◌'" }
        },
        ".cm-completionIcon-variable": {
            "&:after": { content: "'𝑥'" }
        },
        ".cm-completionIcon-constant": {
            "&:after": { content: "'𝐶'" }
        },
        ".cm-completionIcon-type": {
            "&:after": { content: "'𝑡'" }
        },
        ".cm-completionIcon-enum": {
            "&:after": { content: "'∪'" }
        },
        ".cm-completionIcon-property": {
            "&:after": { content: "'□'" }
        },
        ".cm-completionIcon-keyword": {
            "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
        },
        ".cm-completionIcon-namespace": {
            "&:after": { content: "'▢'" }
        },
        ".cm-completionIcon-text": {
            "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
        }
    });

    const defaults = {
        brackets: ["(", "[", "{", "'", '"'],
        before: ")]}:;>"
    };
    const closeBracketEffect = /*@__PURE__*/StateEffect.define({
        map(value, mapping) {
            let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
            return mapped == null ? undefined : mapped;
        }
    });
    const skipBracketEffect = /*@__PURE__*/StateEffect.define({
        map(value, mapping) { return mapping.mapPos(value); }
    });
    const closedBracket = /*@__PURE__*/new class extends RangeValue {
    };
    closedBracket.startSide = 1;
    closedBracket.endSide = -1;
    const bracketState = /*@__PURE__*/StateField.define({
        create() { return RangeSet.empty; },
        update(value, tr) {
            if (tr.selection) {
                let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
                let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
                if (lineStart != tr.changes.mapPos(prevLineStart, -1))
                    value = RangeSet.empty;
            }
            value = value.map(tr.changes);
            for (let effect of tr.effects) {
                if (effect.is(closeBracketEffect))
                    value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
                else if (effect.is(skipBracketEffect))
                    value = value.update({ filter: from => from != effect.value });
            }
            return value;
        }
    });
    /**
    Extension to enable bracket-closing behavior. When a closeable
    bracket is typed, its closing bracket is immediately inserted
    after the cursor. When closing a bracket directly in front of a
    closing bracket inserted by the extension, the cursor moves over
    that bracket.
    */
    function closeBrackets() {
        return [inputHandler, bracketState];
    }
    const definedClosing = "()[]{}<>";
    function closing(ch) {
        for (let i = 0; i < definedClosing.length; i += 2)
            if (definedClosing.charCodeAt(i) == ch)
                return definedClosing.charAt(i + 1);
        return fromCodePoint(ch < 128 ? ch : ch + 1);
    }
    function config(state, pos) {
        return state.languageDataAt("closeBrackets", pos)[0] || defaults;
    }
    const android = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
    const inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {
        if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
            return false;
        let sel = view.state.selection.main;
        if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
            from != sel.from || to != sel.to)
            return false;
        let tr = insertBracket(view.state, insert);
        if (!tr)
            return false;
        view.dispatch(tr);
        return true;
    });
    /**
    Command that implements deleting a pair of matching brackets when
    the cursor is between them.
    */
    const deleteBracketPair = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let conf = config(state, state.selection.main.head);
        let tokens = conf.brackets || defaults.brackets;
        let dont = null, changes = state.changeByRange(range => {
            if (range.empty) {
                let before = prevChar(state.doc, range.head);
                for (let token of tokens) {
                    if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))
                        return { changes: { from: range.head - token.length, to: range.head + token.length },
                            range: EditorSelection.cursor(range.head - token.length),
                            userEvent: "delete.backward" };
                }
            }
            return { range: dont = range };
        });
        if (!dont)
            dispatch(state.update(changes, { scrollIntoView: true }));
        return !dont;
    };
    /**
    Close-brackets related key bindings. Binds Backspace to
    [`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
    */
    const closeBracketsKeymap = [
        { key: "Backspace", run: deleteBracketPair }
    ];
    /**
    Implements the extension's behavior on text insertion. If the
    given string counts as a bracket in the language around the
    selection, and replacing the selection with it requires custom
    behavior (inserting a closing version or skipping past a
    previously-closed bracket), this function returns a transaction
    representing that custom behavior. (You only need this if you want
    to programmatically insert brackets—the
    [`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
    take care of running this for user input.)
    */
    function insertBracket(state, bracket) {
        let conf = config(state, state.selection.main.head);
        let tokens = conf.brackets || defaults.brackets;
        for (let tok of tokens) {
            let closed = closing(codePointAt(tok, 0));
            if (bracket == tok)
                return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1)
                    : handleOpen(state, tok, closed, conf.before || defaults.before);
            if (bracket == closed && closedBracketAt(state, state.selection.main.from))
                return handleClose(state, tok, closed);
        }
        return null;
    }
    function closedBracketAt(state, pos) {
        let found = false;
        state.field(bracketState).between(0, state.doc.length, from => {
            if (from == pos)
                found = true;
        });
        return found;
    }
    function nextChar(doc, pos) {
        let next = doc.sliceString(pos, pos + 2);
        return next.slice(0, codePointSize(codePointAt(next, 0)));
    }
    function prevChar(doc, pos) {
        let prev = doc.sliceString(pos - 2, pos);
        return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
    }
    function handleOpen(state, open, close, closeBefore) {
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
                    effects: closeBracketEffect.of(range.to + open.length),
                    range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
            let next = nextChar(state.doc, range.head);
            if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
                return { changes: { insert: open + close, from: range.head },
                    effects: closeBracketEffect.of(range.head + open.length),
                    range: EditorSelection.cursor(range.head + open.length) };
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            userEvent: "input.type"
        });
    }
    function handleClose(state, _open, close) {
        let dont = null, moved = state.selection.ranges.map(range => {
            if (range.empty && nextChar(state.doc, range.head) == close)
                return EditorSelection.cursor(range.head + close.length);
            return dont = range;
        });
        return dont ? null : state.update({
            selection: EditorSelection.create(moved, state.selection.mainIndex),
            scrollIntoView: true,
            effects: state.selection.ranges.map(({ from }) => skipBracketEffect.of(from))
        });
    }
    // Handles cases where the open and close token are the same, and
    // possibly triple quotes (as in `"""abc"""`-style quoting).
    function handleSame(state, token, allowTriple) {
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
                    effects: closeBracketEffect.of(range.to + token.length),
                    range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
            let pos = range.head, next = nextChar(state.doc, pos);
            if (next == token) {
                if (nodeStart(state, pos)) {
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
                }
                else if (closedBracketAt(state, pos)) {
                    let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
                    return { range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),
                        effects: skipBracketEffect.of(pos) };
                }
            }
            else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
                nodeStart(state, pos - 2 * token.length)) {
                return { changes: { insert: token + token + token + token, from: pos },
                    effects: closeBracketEffect.of(pos + token.length),
                    range: EditorSelection.cursor(pos + token.length) };
            }
            else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
                let prev = state.sliceDoc(pos - 1, pos);
                if (prev != token && state.charCategorizer(pos)(prev) != CharCategory.Word && !probablyInString(state, pos, token))
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
            }
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            userEvent: "input.type"
        });
    }
    function nodeStart(state, pos) {
        let tree = syntaxTree(state).resolveInner(pos + 1);
        return tree.parent && tree.from == pos;
    }
    function probablyInString(state, pos, quoteToken) {
        let node = syntaxTree(state).resolveInner(pos, -1);
        for (let i = 0; i < 5; i++) {
            if (state.sliceDoc(node.from, node.from + quoteToken.length) == quoteToken)
                return true;
            let parent = node.to == pos && node.parent;
            if (!parent)
                break;
            node = parent;
        }
        return false;
    }

    /**
    Returns an extension that enables autocompletion.
    */
    function autocompletion(config = {}) {
        return [
            completionState,
            completionConfig.of(config),
            completionPlugin,
            completionKeymapExt,
            baseTheme$1
        ];
    }
    /**
    Basic keybindings for autocompletion.

     - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
     - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
     - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
     - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
     - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
     - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
     - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
    */
    const completionKeymap = [
        { key: "Ctrl-Space", run: startCompletion },
        { key: "Escape", run: closeCompletion },
        { key: "ArrowDown", run: /*@__PURE__*/moveCompletionSelection(true) },
        { key: "ArrowUp", run: /*@__PURE__*/moveCompletionSelection(false) },
        { key: "PageDown", run: /*@__PURE__*/moveCompletionSelection(true, "page") },
        { key: "PageUp", run: /*@__PURE__*/moveCompletionSelection(false, "page") },
        { key: "Enter", run: acceptCompletion }
    ];
    const completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

    class SelectedDiagnostic {
        constructor(from, to, diagnostic) {
            this.from = from;
            this.to = to;
            this.diagnostic = diagnostic;
        }
    }
    class LintState {
        constructor(diagnostics, panel, selected) {
            this.diagnostics = diagnostics;
            this.panel = panel;
            this.selected = selected;
        }
        static init(diagnostics, panel, state) {
            // Filter the list of diagnostics for which to create markers
            let markedDiagnostics = diagnostics;
            let diagnosticFilter = state.facet(lintConfig).markerFilter;
            if (diagnosticFilter)
                markedDiagnostics = diagnosticFilter(markedDiagnostics);
            let ranges = Decoration.set(markedDiagnostics.map((d) => {
                // For zero-length ranges or ranges covering only a line break, create a widget
                return d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)
                    ? Decoration.widget({
                        widget: new DiagnosticWidget(d),
                        diagnostic: d
                    }).range(d.from)
                    : Decoration.mark({
                        attributes: { class: "cm-lintRange cm-lintRange-" + d.severity },
                        diagnostic: d
                    }).range(d.from, d.to);
            }), true);
            return new LintState(ranges, panel, findDiagnostic(ranges));
        }
    }
    function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
        let found = null;
        diagnostics.between(after, 1e9, (from, to, { spec }) => {
            if (diagnostic && spec.diagnostic != diagnostic)
                return;
            found = new SelectedDiagnostic(from, to, spec.diagnostic);
            return false;
        });
        return found;
    }
    function hideTooltip(tr, tooltip) {
        return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(tooltip.pos));
    }
    function maybeEnableLint(state, effects) {
        return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of([
            lintState,
            EditorView.decorations.compute([lintState], state => {
                let { selected, panel } = state.field(lintState);
                return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
                    activeMark.range(selected.from, selected.to)
                ]);
            }),
            hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
            baseTheme
        ]));
    }
    /**
    Returns a transaction spec which updates the current set of
    diagnostics, and enables the lint extension if if wasn't already
    active.
    */
    function setDiagnostics(state, diagnostics) {
        return {
            effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
        };
    }
    /**
    The state effect that updates the set of active diagnostics. Can
    be useful when writing an extension that needs to track these.
    */
    const setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();
    const togglePanel = /*@__PURE__*/StateEffect.define();
    const movePanelSelection = /*@__PURE__*/StateEffect.define();
    const lintState = /*@__PURE__*/StateField.define({
        create() {
            return new LintState(Decoration.none, null, null);
        },
        update(value, tr) {
            if (tr.docChanged) {
                let mapped = value.diagnostics.map(tr.changes), selected = null;
                if (value.selected) {
                    let selPos = tr.changes.mapPos(value.selected.from, 1);
                    selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
                }
                value = new LintState(mapped, value.panel, selected);
            }
            for (let effect of tr.effects) {
                if (effect.is(setDiagnosticsEffect)) {
                    value = LintState.init(effect.value, value.panel, tr.state);
                }
                else if (effect.is(togglePanel)) {
                    value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
                }
                else if (effect.is(movePanelSelection)) {
                    value = new LintState(value.diagnostics, value.panel, effect.value);
                }
            }
            return value;
        },
        provide: f => [showPanel.from(f, val => val.panel),
            EditorView.decorations.from(f, s => s.diagnostics)]
    });
    const activeMark = /*@__PURE__*/Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
    function lintTooltip(view, pos, side) {
        let { diagnostics } = view.state.field(lintState);
        let found = [], stackStart = 2e8, stackEnd = 0;
        diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
            if (pos >= from && pos <= to &&
                (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {
                found.push(spec.diagnostic);
                stackStart = Math.min(from, stackStart);
                stackEnd = Math.max(to, stackEnd);
            }
        });
        let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
        if (diagnosticFilter)
            found = diagnosticFilter(found);
        if (!found.length)
            return null;
        return {
            pos: stackStart,
            end: stackEnd,
            above: view.state.doc.lineAt(stackStart).to < stackEnd,
            create() {
                return { dom: diagnosticsTooltip(view, found) };
            }
        };
    }
    function diagnosticsTooltip(view, diagnostics) {
        return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map(d => renderDiagnostic(view, d, false)));
    }
    /**
    Command to open and focus the lint panel.
    */
    const openLintPanel = (view) => {
        let field = view.state.field(lintState, false);
        if (!field || !field.panel)
            view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel.of(true)]) });
        let panel = getPanel(view, LintPanel.open);
        if (panel)
            panel.dom.querySelector(".cm-panel-lint ul").focus();
        return true;
    };
    /**
    Command to close the lint panel, when open.
    */
    const closeLintPanel = (view) => {
        let field = view.state.field(lintState, false);
        if (!field || !field.panel)
            return false;
        view.dispatch({ effects: togglePanel.of(false) });
        return true;
    };
    /**
    Move the selection to the next diagnostic.
    */
    const nextDiagnostic = (view) => {
        let field = view.state.field(lintState, false);
        if (!field)
            return false;
        let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
        if (!next.value) {
            next = field.diagnostics.iter(0);
            if (!next.value || next.from == sel.from && next.to == sel.to)
                return false;
        }
        view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
        return true;
    };
    /**
    A set of default key bindings for the lint functionality.

    - Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
    - F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
    */
    const lintKeymap = [
        { key: "Mod-Shift-m", run: openLintPanel },
        { key: "F8", run: nextDiagnostic }
    ];
    const lintPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.timeout = -1;
            this.set = true;
            let { delay } = view.state.facet(lintConfig);
            this.lintTime = Date.now() + delay;
            this.run = this.run.bind(this);
            this.timeout = setTimeout(this.run, delay);
        }
        run() {
            let now = Date.now();
            if (now < this.lintTime - 10) {
                setTimeout(this.run, this.lintTime - now);
            }
            else {
                this.set = false;
                let { state } = this.view, { sources } = state.facet(lintConfig);
                Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {
                    let all = annotations.reduce((a, b) => a.concat(b));
                    if (this.view.state.doc == state.doc)
                        this.view.dispatch(setDiagnostics(this.view.state, all));
                }, error => { logException(this.view.state, error); });
            }
        }
        update(update) {
            let config = update.state.facet(lintConfig);
            if (update.docChanged || config != update.startState.facet(lintConfig)) {
                this.lintTime = Date.now() + config.delay;
                if (!this.set) {
                    this.set = true;
                    this.timeout = setTimeout(this.run, config.delay);
                }
            }
        }
        force() {
            if (this.set) {
                this.lintTime = Date.now();
                this.run();
            }
        }
        destroy() {
            clearTimeout(this.timeout);
        }
    });
    const lintConfig = /*@__PURE__*/Facet.define({
        combine(input) {
            return Object.assign({ sources: input.map(i => i.source) }, combineConfig(input.map(i => i.config), {
                delay: 750,
                markerFilter: null,
                tooltipFilter: null
            }));
        },
        enables: lintPlugin
    });
    /**
    Given a diagnostic source, this function returns an extension that
    enables linting with that source. It will be called whenever the
    editor is idle (after its content changed).
    */
    function linter(source, config = {}) {
        return lintConfig.of({ source, config });
    }
    function assignKeys(actions) {
        let assigned = [];
        if (actions)
            actions: for (let { name } of actions) {
                for (let i = 0; i < name.length; i++) {
                    let ch = name[i];
                    if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {
                        assigned.push(ch);
                        continue actions;
                    }
                }
                assigned.push("");
            }
        return assigned;
    }
    function renderDiagnostic(view, diagnostic, inPanel) {
        var _a;
        let keys = inPanel ? assignKeys(diagnostic.actions) : [];
        return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
            let click = (e) => {
                e.preventDefault();
                let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
                if (found)
                    action.apply(view, found.from, found.to);
            };
            let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
            let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),
                crelt("u", name.slice(keyIndex, keyIndex + 1)),
                name.slice(keyIndex + 1)];
            return crelt("button", {
                type: "button",
                class: "cm-diagnosticAction",
                onclick: click,
                onmousedown: click,
                "aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
            }, nameElt);
        }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
    }
    class DiagnosticWidget extends WidgetType {
        constructor(diagnostic) {
            super();
            this.diagnostic = diagnostic;
        }
        eq(other) { return other.diagnostic == this.diagnostic; }
        toDOM() {
            return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
        }
    }
    class PanelItem {
        constructor(view, diagnostic) {
            this.diagnostic = diagnostic;
            this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
            this.dom = renderDiagnostic(view, diagnostic, true);
            this.dom.id = this.id;
            this.dom.setAttribute("role", "option");
        }
    }
    class LintPanel {
        constructor(view) {
            this.view = view;
            this.items = [];
            let onkeydown = (event) => {
                if (event.keyCode == 27) { // Escape
                    closeLintPanel(this.view);
                    this.view.focus();
                }
                else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp
                    this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
                }
                else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown
                    this.moveSelection((this.selectedIndex + 1) % this.items.length);
                }
                else if (event.keyCode == 36) { // Home
                    this.moveSelection(0);
                }
                else if (event.keyCode == 35) { // End
                    this.moveSelection(this.items.length - 1);
                }
                else if (event.keyCode == 13) { // Enter
                    this.view.focus();
                }
                else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z
                    let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);
                    for (let i = 0; i < keys.length; i++)
                        if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
                            let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
                            if (found)
                                diagnostic.actions[i].apply(view, found.from, found.to);
                        }
                }
                else {
                    return;
                }
                event.preventDefault();
            };
            let onclick = (event) => {
                for (let i = 0; i < this.items.length; i++) {
                    if (this.items[i].dom.contains(event.target))
                        this.moveSelection(i);
                }
            };
            this.list = crelt("ul", {
                tabIndex: 0,
                role: "listbox",
                "aria-label": this.view.state.phrase("Diagnostics"),
                onkeydown,
                onclick
            });
            this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
                type: "button",
                name: "close",
                "aria-label": this.view.state.phrase("close"),
                onclick: () => closeLintPanel(this.view)
            }, "×"));
            this.update();
        }
        get selectedIndex() {
            let selected = this.view.state.field(lintState).selected;
            if (!selected)
                return -1;
            for (let i = 0; i < this.items.length; i++)
                if (this.items[i].diagnostic == selected.diagnostic)
                    return i;
            return -1;
        }
        update() {
            let { diagnostics, selected } = this.view.state.field(lintState);
            let i = 0, needsSync = false, newSelectedItem = null;
            diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
                let found = -1, item;
                for (let j = i; j < this.items.length; j++)
                    if (this.items[j].diagnostic == spec.diagnostic) {
                        found = j;
                        break;
                    }
                if (found < 0) {
                    item = new PanelItem(this.view, spec.diagnostic);
                    this.items.splice(i, 0, item);
                    needsSync = true;
                }
                else {
                    item = this.items[found];
                    if (found > i) {
                        this.items.splice(i, found - i);
                        needsSync = true;
                    }
                }
                if (selected && item.diagnostic == selected.diagnostic) {
                    if (!item.dom.hasAttribute("aria-selected")) {
                        item.dom.setAttribute("aria-selected", "true");
                        newSelectedItem = item;
                    }
                }
                else if (item.dom.hasAttribute("aria-selected")) {
                    item.dom.removeAttribute("aria-selected");
                }
                i++;
            });
            while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
                needsSync = true;
                this.items.pop();
            }
            if (this.items.length == 0) {
                this.items.push(new PanelItem(this.view, {
                    from: -1, to: -1,
                    severity: "info",
                    message: this.view.state.phrase("No diagnostics")
                }));
                needsSync = true;
            }
            if (newSelectedItem) {
                this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
                this.view.requestMeasure({
                    key: this,
                    read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
                    write: ({ sel, panel }) => {
                        if (sel.top < panel.top)
                            this.list.scrollTop -= panel.top - sel.top;
                        else if (sel.bottom > panel.bottom)
                            this.list.scrollTop += sel.bottom - panel.bottom;
                    }
                });
            }
            else if (this.selectedIndex < 0) {
                this.list.removeAttribute("aria-activedescendant");
            }
            if (needsSync)
                this.sync();
        }
        sync() {
            let domPos = this.list.firstChild;
            function rm() {
                let prev = domPos;
                domPos = prev.nextSibling;
                prev.remove();
            }
            for (let item of this.items) {
                if (item.dom.parentNode == this.list) {
                    while (domPos != item.dom)
                        rm();
                    domPos = item.dom.nextSibling;
                }
                else {
                    this.list.insertBefore(item.dom, domPos);
                }
            }
            while (domPos)
                rm();
        }
        moveSelection(selectedIndex) {
            if (this.selectedIndex < 0)
                return;
            let field = this.view.state.field(lintState);
            let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
            if (!selection)
                return;
            this.view.dispatch({
                selection: { anchor: selection.from, head: selection.to },
                scrollIntoView: true,
                effects: movePanelSelection.of(selection)
            });
        }
        static open(view) { return new LintPanel(view); }
    }
    function svg(content, attrs = `viewBox="0 0 40 40"`) {
        return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content)}</svg>')`;
    }
    function underline(color) {
        return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
    }
    const baseTheme = /*@__PURE__*/EditorView.baseTheme({
        ".cm-diagnostic": {
            padding: "3px 6px 3px 8px",
            marginLeft: "-1px",
            display: "block",
            whiteSpace: "pre-wrap"
        },
        ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
        ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
        ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
        ".cm-diagnosticAction": {
            font: "inherit",
            border: "none",
            padding: "2px 4px",
            backgroundColor: "#444",
            color: "white",
            borderRadius: "3px",
            marginLeft: "8px"
        },
        ".cm-diagnosticSource": {
            fontSize: "70%",
            opacity: .7
        },
        ".cm-lintRange": {
            backgroundPosition: "left bottom",
            backgroundRepeat: "repeat-x",
            paddingBottom: "0.7px",
        },
        ".cm-lintRange-error": { backgroundImage: /*@__PURE__*/underline("#d11") },
        ".cm-lintRange-warning": { backgroundImage: /*@__PURE__*/underline("orange") },
        ".cm-lintRange-info": { backgroundImage: /*@__PURE__*/underline("#999") },
        ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
        ".cm-tooltip-lint": {
            padding: 0,
            margin: 0
        },
        ".cm-lintPoint": {
            position: "relative",
            "&:after": {
                content: '""',
                position: "absolute",
                bottom: 0,
                left: "-2px",
                borderLeft: "3px solid transparent",
                borderRight: "3px solid transparent",
                borderBottom: "4px solid #d11"
            }
        },
        ".cm-lintPoint-warning": {
            "&:after": { borderBottomColor: "orange" }
        },
        ".cm-lintPoint-info": {
            "&:after": { borderBottomColor: "#999" }
        },
        ".cm-panel.cm-panel-lint": {
            position: "relative",
            "& ul": {
                maxHeight: "100px",
                overflowY: "auto",
                "& [aria-selected]": {
                    backgroundColor: "#ddd",
                    "& u": { textDecoration: "underline" }
                },
                "&:focus [aria-selected]": {
                    background_fallback: "#bdf",
                    backgroundColor: "Highlight",
                    color_fallback: "white",
                    color: "HighlightText"
                },
                "& u": { textDecoration: "none" },
                padding: 0,
                margin: 0
            },
            "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "2px",
                background: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0
            }
        }
    });
    class LintGutterMarker extends GutterMarker {
        constructor(diagnostics) {
            super();
            this.diagnostics = diagnostics;
            this.severity = diagnostics.reduce((max, d) => {
                let s = d.severity;
                return s == "error" || s == "warning" && max == "info" ? s : max;
            }, "info");
        }
        toDOM(view) {
            let elt = document.createElement("div");
            elt.className = "cm-lint-marker cm-lint-marker-" + this.severity;
            let diagnostics = this.diagnostics;
            let diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;
            if (diagnosticsFilter)
                diagnostics = diagnosticsFilter(diagnostics);
            if (diagnostics.length)
                elt.onmouseover = () => gutterMarkerMouseOver(view, elt, diagnostics);
            return elt;
        }
    }
    function trackHoverOn(view, marker) {
        let mousemove = (event) => {
            let rect = marker.getBoundingClientRect();
            if (event.clientX > rect.left - 10 /* Margin */ && event.clientX < rect.right + 10 /* Margin */ &&
                event.clientY > rect.top - 10 /* Margin */ && event.clientY < rect.bottom + 10 /* Margin */)
                return;
            for (let target = event.target; target; target = target.parentNode) {
                if (target.nodeType == 1 && target.classList.contains("cm-tooltip-lint"))
                    return;
            }
            window.removeEventListener("mousemove", mousemove);
            if (view.state.field(lintGutterTooltip))
                view.dispatch({ effects: setLintGutterTooltip.of(null) });
        };
        window.addEventListener("mousemove", mousemove);
    }
    function gutterMarkerMouseOver(view, marker, diagnostics) {
        function hovered() {
            let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);
            const linePos = view.coordsAtPos(line.from);
            if (linePos) {
                view.dispatch({ effects: setLintGutterTooltip.of({
                        pos: line.from,
                        above: false,
                        create() {
                            return {
                                dom: diagnosticsTooltip(view, diagnostics),
                                getCoords: () => marker.getBoundingClientRect()
                            };
                        }
                    }) });
            }
            marker.onmouseout = marker.onmousemove = null;
            trackHoverOn(view, marker);
        }
        let { hoverTime } = view.state.facet(lintGutterConfig);
        let hoverTimeout = setTimeout(hovered, hoverTime);
        marker.onmouseout = () => {
            clearTimeout(hoverTimeout);
            marker.onmouseout = marker.onmousemove = null;
        };
        marker.onmousemove = () => {
            clearTimeout(hoverTimeout);
            hoverTimeout = setTimeout(hovered, hoverTime);
        };
    }
    function markersForDiagnostics(doc, diagnostics) {
        let byLine = Object.create(null);
        for (let diagnostic of diagnostics) {
            let line = doc.lineAt(diagnostic.from);
            (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);
        }
        let markers = [];
        for (let line in byLine) {
            markers.push(new LintGutterMarker(byLine[line]).range(+line));
        }
        return RangeSet.of(markers, true);
    }
    const lintGutterExtension = /*@__PURE__*/gutter({
        class: "cm-gutter-lint",
        markers: view => view.state.field(lintGutterMarkers),
    });
    const lintGutterMarkers = /*@__PURE__*/StateField.define({
        create() {
            return RangeSet.empty;
        },
        update(markers, tr) {
            markers = markers.map(tr.changes);
            let diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;
            for (let effect of tr.effects) {
                if (effect.is(setDiagnosticsEffect)) {
                    let diagnostics = effect.value;
                    if (diagnosticFilter)
                        diagnostics = diagnosticFilter(diagnostics || []);
                    markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));
                }
            }
            return markers;
        }
    });
    const setLintGutterTooltip = /*@__PURE__*/StateEffect.define();
    const lintGutterTooltip = /*@__PURE__*/StateField.define({
        create() { return null; },
        update(tooltip, tr) {
            if (tooltip && tr.docChanged)
                tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), { pos: tr.changes.mapPos(tooltip.pos) });
            return tr.effects.reduce((t, e) => e.is(setLintGutterTooltip) ? e.value : t, tooltip);
        },
        provide: field => showTooltip.from(field)
    });
    const lintGutterTheme = /*@__PURE__*/EditorView.baseTheme({
        ".cm-gutter-lint": {
            width: "1.4em",
            "& .cm-gutterElement": {
                padding: ".2em"
            }
        },
        ".cm-lint-marker": {
            width: "1em",
            height: "1em"
        },
        ".cm-lint-marker-info": {
            content: /*@__PURE__*/svg(`<path fill="#aaf" stroke="#77e" stroke-width="6" stroke-linejoin="round" d="M5 5L35 5L35 35L5 35Z"/>`)
        },
        ".cm-lint-marker-warning": {
            content: /*@__PURE__*/svg(`<path fill="#fe8" stroke="#fd7" stroke-width="6" stroke-linejoin="round" d="M20 6L37 35L3 35Z"/>`),
        },
        ".cm-lint-marker-error:before": {
            content: /*@__PURE__*/svg(`<circle cx="20" cy="20" r="15" fill="#f87" stroke="#f43" stroke-width="6"/>`)
        },
    });
    const lintGutterConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                hoverTime: 300 /* Time */,
                markerFilter: null,
                tooltipFilter: null
            });
        }
    });
    /**
    Returns an extension that installs a gutter showing markers for
    each line that has diagnostics, which can be hovered over to see
    the diagnostics.
    */
    function lintGutter(config = {}) {
        return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];
    }

    /**
    This is an extension value that just pulls together a number of
    extensions that you might want in a basic editor. It is meant as a
    convenient helper to quickly set up CodeMirror without installing
    and importing a lot of separate packages.

    Specifically, it includes...

     - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)
     - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)
     - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)
     - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)
     - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)
     - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)
     - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)
     - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
     - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)
     - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)
     - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)
     - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)
     - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)
     - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)
     - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)
     - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)
     - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)
     - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)
     - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)

    (You'll probably want to add some language package to your setup
    too.)

    This extension does not allow customization. The idea is that,
    once you decide you want to configure your editor more precisely,
    you take this package's source (which is just a bunch of imports
    and an array literal), copy it into your own code, and adjust it
    as desired.
    */
    const basicSetup = [
        /*@__PURE__*/lineNumbers(),
        /*@__PURE__*/highlightActiveLineGutter(),
        /*@__PURE__*/highlightSpecialChars(),
        /*@__PURE__*/history(),
        /*@__PURE__*/foldGutter(),
        /*@__PURE__*/drawSelection(),
        /*@__PURE__*/dropCursor(),
        /*@__PURE__*/EditorState.allowMultipleSelections.of(true),
        /*@__PURE__*/indentOnInput(),
        /*@__PURE__*/syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
        /*@__PURE__*/bracketMatching(),
        /*@__PURE__*/closeBrackets(),
        /*@__PURE__*/autocompletion(),
        /*@__PURE__*/rectangularSelection(),
        /*@__PURE__*/crosshairCursor(),
        /*@__PURE__*/highlightActiveLine(),
        /*@__PURE__*/highlightSelectionMatches(),
        /*@__PURE__*/keymap.of([
            ...closeBracketsKeymap,
            ...defaultKeymap,
            ...searchKeymap,
            ...historyKeymap,
            ...foldKeymap,
            ...completionKeymap,
            ...lintKeymap
        ])
    ];

    /// A parse stack. These are used internally by the parser to track
    /// parsing progress. They also provide some properties and methods
    /// that external code such as a tokenizer can use to get information
    /// about the parse state.
    class Stack {
        /// @internal
        constructor(
        /// The parse that this stack is part of @internal
        p, 
        /// Holds state, input pos, buffer index triplets for all but the
        /// top state @internal
        stack, 
        /// The current parse state @internal
        state, 
        // The position at which the next reduce should take place. This
        // can be less than `this.pos` when skipped expressions have been
        // added to the stack (which should be moved outside of the next
        // reduction)
        /// @internal
        reducePos, 
        /// The input position up to which this stack has parsed.
        pos, 
        /// The dynamic score of the stack, including dynamic precedence
        /// and error-recovery penalties
        /// @internal
        score, 
        // The output buffer. Holds (type, start, end, size) quads
        // representing nodes created by the parser, where `size` is
        // amount of buffer array entries covered by this node.
        /// @internal
        buffer, 
        // The base offset of the buffer. When stacks are split, the split
        // instance shared the buffer history with its parent up to
        // `bufferBase`, which is the absolute offset (including the
        // offset of previous splits) into the buffer at which this stack
        // starts writing.
        /// @internal
        bufferBase, 
        /// @internal
        curContext, 
        /// @internal
        lookAhead = 0, 
        // A parent stack from which this was split off, if any. This is
        // set up so that it always points to a stack that has some
        // additional buffer content, never to a stack with an equal
        // `bufferBase`.
        /// @internal
        parent) {
            this.p = p;
            this.stack = stack;
            this.state = state;
            this.reducePos = reducePos;
            this.pos = pos;
            this.score = score;
            this.buffer = buffer;
            this.bufferBase = bufferBase;
            this.curContext = curContext;
            this.lookAhead = lookAhead;
            this.parent = parent;
        }
        /// @internal
        toString() {
            return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
        }
        // Start an empty stack
        /// @internal
        static start(p, state, pos = 0) {
            let cx = p.parser.context;
            return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
        }
        /// The stack's current [context](#lr.ContextTracker) value, if
        /// any. Its type will depend on the context tracker's type
        /// parameter, or it will be `null` if there is no context
        /// tracker.
        get context() { return this.curContext ? this.curContext.context : null; }
        // Push a state onto the stack, tracking its start position as well
        // as the buffer base at that point.
        /// @internal
        pushState(state, start) {
            this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
            this.state = state;
        }
        // Apply a reduce action
        /// @internal
        reduce(action) {
            let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;
            let { parser } = this.p;
            let dPrec = parser.dynamicPrecedence(type);
            if (dPrec)
                this.score += dPrec;
            if (depth == 0) {
                this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
                // Zero-depth reductions are a special case—they add stuff to
                // the stack without popping anything off.
                if (type < parser.minRepeatTerm)
                    this.storeNode(type, this.reducePos, this.reducePos, 4, true);
                this.reduceContext(type, this.reducePos);
                return;
            }
            // Find the base index into `this.stack`, content after which will
            // be dropped. Note that with `StayFlag` reductions we need to
            // consume two extra frames (the dummy parent node for the skipped
            // expression and the state that we'll be staying in, which should
            // be moved to `this.state`).
            let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);
            let start = this.stack[base - 2];
            let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;
            // Store normal terms or `R -> R R` repeat reductions
            if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {
                let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;
                this.storeNode(type, start, pos, count + 4, true);
            }
            if (action & 262144 /* StayFlag */) {
                this.state = this.stack[base];
            }
            else {
                let baseStateID = this.stack[base - 3];
                this.state = parser.getGoto(baseStateID, type, true);
            }
            while (this.stack.length > base)
                this.stack.pop();
            this.reduceContext(type, start);
        }
        // Shift a value into the buffer
        /// @internal
        storeNode(term, start, end, size = 4, isReduce = false) {
            if (term == 0 /* Err */ &&
                (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
                // Try to omit/merge adjacent error nodes
                let cur = this, top = this.buffer.length;
                if (top == 0 && cur.parent) {
                    top = cur.bufferBase - cur.parent.bufferBase;
                    cur = cur.parent;
                }
                if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {
                    if (start == end)
                        return;
                    if (cur.buffer[top - 2] >= start) {
                        cur.buffer[top - 2] = end;
                        return;
                    }
                }
            }
            if (!isReduce || this.pos == end) { // Simple case, just append
                this.buffer.push(term, start, end, size);
            }
            else { // There may be skipped nodes that have to be moved forward
                let index = this.buffer.length;
                if (index > 0 && this.buffer[index - 4] != 0 /* Err */)
                    while (index > 0 && this.buffer[index - 2] > end) {
                        // Move this record forward
                        this.buffer[index] = this.buffer[index - 4];
                        this.buffer[index + 1] = this.buffer[index - 3];
                        this.buffer[index + 2] = this.buffer[index - 2];
                        this.buffer[index + 3] = this.buffer[index - 1];
                        index -= 4;
                        if (size > 4)
                            size -= 4;
                    }
                this.buffer[index] = term;
                this.buffer[index + 1] = start;
                this.buffer[index + 2] = end;
                this.buffer[index + 3] = size;
            }
        }
        // Apply a shift action
        /// @internal
        shift(action, next, nextEnd) {
            let start = this.pos;
            if (action & 131072 /* GotoFlag */) {
                this.pushState(action & 65535 /* ValueMask */, this.pos);
            }
            else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift
                let nextState = action, { parser } = this.p;
                if (nextEnd > this.pos || next <= parser.maxNode) {
                    this.pos = nextEnd;
                    if (!parser.stateFlag(nextState, 1 /* Skipped */))
                        this.reducePos = nextEnd;
                }
                this.pushState(nextState, start);
                this.shiftContext(next, start);
                if (next <= parser.maxNode)
                    this.buffer.push(next, start, nextEnd, 4);
            }
            else { // Shift-and-stay, which means this is a skipped token
                this.pos = nextEnd;
                this.shiftContext(next, start);
                if (next <= this.p.parser.maxNode)
                    this.buffer.push(next, start, nextEnd, 4);
            }
        }
        // Apply an action
        /// @internal
        apply(action, next, nextEnd) {
            if (action & 65536 /* ReduceFlag */)
                this.reduce(action);
            else
                this.shift(action, next, nextEnd);
        }
        // Add a prebuilt (reused) node into the buffer.
        /// @internal
        useNode(value, next) {
            let index = this.p.reused.length - 1;
            if (index < 0 || this.p.reused[index] != value) {
                this.p.reused.push(value);
                index++;
            }
            let start = this.pos;
            this.reducePos = this.pos = start + value.length;
            this.pushState(next, start);
            this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
        }
        // Split the stack. Due to the buffer sharing and the fact
        // that `this.stack` tends to stay quite shallow, this isn't very
        // expensive.
        /// @internal
        split() {
            let parent = this;
            let off = parent.buffer.length;
            // Because the top of the buffer (after this.pos) may be mutated
            // to reorder reductions and skipped tokens, and shared buffers
            // should be immutable, this copies any outstanding skipped tokens
            // to the new buffer, and puts the base pointer before them.
            while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
                off -= 4;
            let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
            // Make sure parent points to an actual parent with content, if there is such a parent.
            while (parent && base == parent.bufferBase)
                parent = parent.parent;
            return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
        }
        // Try to recover from an error by 'deleting' (ignoring) one token.
        /// @internal
        recoverByDelete(next, nextEnd) {
            let isNode = next <= this.p.parser.maxNode;
            if (isNode)
                this.storeNode(next, this.pos, nextEnd, 4);
            this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);
            this.pos = this.reducePos = nextEnd;
            this.score -= 190 /* Delete */;
        }
        /// Check if the given term would be able to be shifted (optionally
        /// after some reductions) on this stack. This can be useful for
        /// external tokenizers that want to make sure they only provide a
        /// given token when it applies.
        canShift(term) {
            for (let sim = new SimulatedStack(this);;) {
                let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
                if ((action & 65536 /* ReduceFlag */) == 0)
                    return true;
                if (action == 0)
                    return false;
                sim.reduce(action);
            }
        }
        // Apply up to Recover.MaxNext recovery actions that conceptually
        // inserts some missing token or rule.
        /// @internal
        recoverByInsert(next) {
            if (this.stack.length >= 300 /* MaxInsertStackDepth */)
                return [];
            let nextStates = this.p.parser.nextStates(this.state);
            if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {
                let best = [];
                for (let i = 0, s; i < nextStates.length; i += 2) {
                    if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                        best.push(nextStates[i], s);
                }
                if (this.stack.length < 120 /* DampenInsertStackDepth */)
                    for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {
                        let s = nextStates[i + 1];
                        if (!best.some((v, i) => (i & 1) && v == s))
                            best.push(nextStates[i], s);
                    }
                nextStates = best;
            }
            let result = [];
            for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {
                let s = nextStates[i + 1];
                if (s == this.state)
                    continue;
                let stack = this.split();
                stack.pushState(s, this.pos);
                stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);
                stack.shiftContext(nextStates[i], this.pos);
                stack.score -= 200 /* Insert */;
                result.push(stack);
            }
            return result;
        }
        // Force a reduce, if possible. Return false if that can't
        // be done.
        /// @internal
        forceReduce() {
            let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);
            if ((reduce & 65536 /* ReduceFlag */) == 0)
                return false;
            let { parser } = this.p;
            if (!parser.validAction(this.state, reduce)) {
                let depth = reduce >> 19 /* ReduceDepthShift */, term = reduce & 65535 /* ValueMask */;
                let target = this.stack.length - depth * 3;
                if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)
                    return false;
                this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);
                this.score -= 100 /* Reduce */;
            }
            this.reducePos = this.pos;
            this.reduce(reduce);
            return true;
        }
        /// @internal
        forceAll() {
            while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {
                if (!this.forceReduce()) {
                    this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);
                    break;
                }
            }
            return this;
        }
        /// Check whether this state has no further actions (assumed to be a direct descendant of the
        /// top state, since any other states must be able to continue
        /// somehow). @internal
        get deadEnd() {
            if (this.stack.length != 3)
                return false;
            let { parser } = this.p;
            return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&
                !parser.stateSlot(this.state, 4 /* DefaultReduce */);
        }
        /// Restart the stack (put it back in its start state). Only safe
        /// when this.stack.length == 3 (state is directly below the top
        /// state). @internal
        restart() {
            this.state = this.stack[0];
            this.stack.length = 0;
        }
        /// @internal
        sameState(other) {
            if (this.state != other.state || this.stack.length != other.stack.length)
                return false;
            for (let i = 0; i < this.stack.length; i += 3)
                if (this.stack[i] != other.stack[i])
                    return false;
            return true;
        }
        /// Get the parser used by this stack.
        get parser() { return this.p.parser; }
        /// Test whether a given dialect (by numeric ID, as exported from
        /// the terms file) is enabled.
        dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
        shiftContext(term, start) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        reduceContext(term, start) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        /// @internal
        emitContext() {
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -3)
                this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
        }
        /// @internal
        emitLookAhead() {
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -4)
                this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
        }
        updateContext(context) {
            if (context != this.curContext.context) {
                let newCx = new StackContext(this.curContext.tracker, context);
                if (newCx.hash != this.curContext.hash)
                    this.emitContext();
                this.curContext = newCx;
            }
        }
        /// @internal
        setLookAhead(lookAhead) {
            if (lookAhead > this.lookAhead) {
                this.emitLookAhead();
                this.lookAhead = lookAhead;
            }
        }
        /// @internal
        close() {
            if (this.curContext && this.curContext.tracker.strict)
                this.emitContext();
            if (this.lookAhead > 0)
                this.emitLookAhead();
        }
    }
    class StackContext {
        constructor(tracker, context) {
            this.tracker = tracker;
            this.context = context;
            this.hash = tracker.strict ? tracker.hash(context) : 0;
        }
    }
    var Recover;
    (function (Recover) {
        Recover[Recover["Insert"] = 200] = "Insert";
        Recover[Recover["Delete"] = 190] = "Delete";
        Recover[Recover["Reduce"] = 100] = "Reduce";
        Recover[Recover["MaxNext"] = 4] = "MaxNext";
        Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
        Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
    })(Recover || (Recover = {}));
    // Used to cheaply run some reductions to scan ahead without mutating
    // an entire stack
    class SimulatedStack {
        constructor(start) {
            this.start = start;
            this.state = start.state;
            this.stack = start.stack;
            this.base = this.stack.length;
        }
        reduce(action) {
            let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;
            if (depth == 0) {
                if (this.stack == this.start.stack)
                    this.stack = this.stack.slice();
                this.stack.push(this.state, 0, 0);
                this.base += 3;
            }
            else {
                this.base -= (depth - 1) * 3;
            }
            let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
            this.state = goto;
        }
    }
    // This is given to `Tree.build` to build a buffer, and encapsulates
    // the parent-stack-walking necessary to read the nodes.
    class StackBufferCursor {
        constructor(stack, pos, index) {
            this.stack = stack;
            this.pos = pos;
            this.index = index;
            this.buffer = stack.buffer;
            if (this.index == 0)
                this.maybeNext();
        }
        static create(stack, pos = stack.bufferBase + stack.buffer.length) {
            return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
        }
        maybeNext() {
            let next = this.stack.parent;
            if (next != null) {
                this.index = this.stack.bufferBase - next.bufferBase;
                this.stack = next;
                this.buffer = next.buffer;
            }
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        next() {
            this.index -= 4;
            this.pos -= 4;
            if (this.index == 0)
                this.maybeNext();
        }
        fork() {
            return new StackBufferCursor(this.stack, this.pos, this.index);
        }
    }

    class CachedToken {
        constructor() {
            this.start = -1;
            this.value = -1;
            this.end = -1;
            this.extended = -1;
            this.lookAhead = 0;
            this.mask = 0;
            this.context = 0;
        }
    }
    const nullToken = new CachedToken;
    /// [Tokenizers](#lr.ExternalTokenizer) interact with the input
    /// through this interface. It presents the input as a stream of
    /// characters, tracking lookahead and hiding the complexity of
    /// [ranges](#common.Parser.parse^ranges) from tokenizer code.
    class InputStream {
        /// @internal
        constructor(
        /// @internal
        input, 
        /// @internal
        ranges) {
            this.input = input;
            this.ranges = ranges;
            /// @internal
            this.chunk = "";
            /// @internal
            this.chunkOff = 0;
            /// Backup chunk
            this.chunk2 = "";
            this.chunk2Pos = 0;
            /// The character code of the next code unit in the input, or -1
            /// when the stream is at the end of the input.
            this.next = -1;
            /// @internal
            this.token = nullToken;
            this.rangeIndex = 0;
            this.pos = this.chunkPos = ranges[0].from;
            this.range = ranges[0];
            this.end = ranges[ranges.length - 1].to;
            this.readNext();
        }
        /// @internal
        resolveOffset(offset, assoc) {
            let range = this.range, index = this.rangeIndex;
            let pos = this.pos + offset;
            while (pos < range.from) {
                if (!index)
                    return null;
                let next = this.ranges[--index];
                pos -= range.from - next.to;
                range = next;
            }
            while (assoc < 0 ? pos > range.to : pos >= range.to) {
                if (index == this.ranges.length - 1)
                    return null;
                let next = this.ranges[++index];
                pos += next.from - range.to;
                range = next;
            }
            return pos;
        }
        /// Look at a code unit near the stream position. `.peek(0)` equals
        /// `.next`, `.peek(-1)` gives you the previous character, and so
        /// on.
        ///
        /// Note that looking around during tokenizing creates dependencies
        /// on potentially far-away content, which may reduce the
        /// effectiveness incremental parsing—when looking forward—or even
        /// cause invalid reparses when looking backward more than 25 code
        /// units, since the library does not track lookbehind.
        peek(offset) {
            let idx = this.chunkOff + offset, pos, result;
            if (idx >= 0 && idx < this.chunk.length) {
                pos = this.pos + offset;
                result = this.chunk.charCodeAt(idx);
            }
            else {
                let resolved = this.resolveOffset(offset, 1);
                if (resolved == null)
                    return -1;
                pos = resolved;
                if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                    result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
                }
                else {
                    let i = this.rangeIndex, range = this.range;
                    while (range.to <= pos)
                        range = this.ranges[++i];
                    this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                    if (pos + this.chunk2.length > range.to)
                        this.chunk2 = this.chunk2.slice(0, range.to - pos);
                    result = this.chunk2.charCodeAt(0);
                }
            }
            if (pos >= this.token.lookAhead)
                this.token.lookAhead = pos + 1;
            return result;
        }
        /// Accept a token. By default, the end of the token is set to the
        /// current stream position, but you can pass an offset (relative to
        /// the stream position) to change that.
        acceptToken(token, endOffset = 0) {
            let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
            if (end == null || end < this.token.start)
                throw new RangeError("Token end out of bounds");
            this.token.value = token;
            this.token.end = end;
        }
        getChunk() {
            if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
                let { chunk, chunkPos } = this;
                this.chunk = this.chunk2;
                this.chunkPos = this.chunk2Pos;
                this.chunk2 = chunk;
                this.chunk2Pos = chunkPos;
                this.chunkOff = this.pos - this.chunkPos;
            }
            else {
                this.chunk2 = this.chunk;
                this.chunk2Pos = this.chunkPos;
                let nextChunk = this.input.chunk(this.pos);
                let end = this.pos + nextChunk.length;
                this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
                this.chunkPos = this.pos;
                this.chunkOff = 0;
            }
        }
        readNext() {
            if (this.chunkOff >= this.chunk.length) {
                this.getChunk();
                if (this.chunkOff == this.chunk.length)
                    return this.next = -1;
            }
            return this.next = this.chunk.charCodeAt(this.chunkOff);
        }
        /// Move the stream forward N (defaults to 1) code units. Returns
        /// the new value of [`next`](#lr.InputStream.next).
        advance(n = 1) {
            this.chunkOff += n;
            while (this.pos + n >= this.range.to) {
                if (this.rangeIndex == this.ranges.length - 1)
                    return this.setDone();
                n -= this.range.to - this.pos;
                this.range = this.ranges[++this.rangeIndex];
                this.pos = this.range.from;
            }
            this.pos += n;
            if (this.pos >= this.token.lookAhead)
                this.token.lookAhead = this.pos + 1;
            return this.readNext();
        }
        setDone() {
            this.pos = this.chunkPos = this.end;
            this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
            this.chunk = "";
            return this.next = -1;
        }
        /// @internal
        reset(pos, token) {
            if (token) {
                this.token = token;
                token.start = pos;
                token.lookAhead = pos + 1;
                token.value = token.extended = -1;
            }
            else {
                this.token = nullToken;
            }
            if (this.pos != pos) {
                this.pos = pos;
                if (pos == this.end) {
                    this.setDone();
                    return this;
                }
                while (pos < this.range.from)
                    this.range = this.ranges[--this.rangeIndex];
                while (pos >= this.range.to)
                    this.range = this.ranges[++this.rangeIndex];
                if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                    this.chunkOff = pos - this.chunkPos;
                }
                else {
                    this.chunk = "";
                    this.chunkOff = 0;
                }
                this.readNext();
            }
            return this;
        }
        /// @internal
        read(from, to) {
            if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
                return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
            if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
                return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
            if (from >= this.range.from && to <= this.range.to)
                return this.input.read(from, to);
            let result = "";
            for (let r of this.ranges) {
                if (r.from >= to)
                    break;
                if (r.to > from)
                    result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
            }
            return result;
        }
    }
    /// @internal
    class TokenGroup {
        constructor(data, id) {
            this.data = data;
            this.id = id;
        }
        token(input, stack) { readToken(this.data, input, stack, this.id); }
    }
    TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    // Tokenizer data is stored a big uint16 array containing, for each
    // state:
    //
    //  - A group bitmask, indicating what token groups are reachable from
    //    this state, so that paths that can only lead to tokens not in
    //    any of the current groups can be cut off early.
    //
    //  - The position of the end of the state's sequence of accepting
    //    tokens
    //
    //  - The number of outgoing edges for the state
    //
    //  - The accepting tokens, as (token id, group mask) pairs
    //
    //  - The outgoing edges, as (start character, end character, state
    //    index) triples, with end character being exclusive
    //
    // This function interprets that data, running through a stream as
    // long as new states with the a matching group mask can be reached,
    // and updating `token` when it matches a token.
    function readToken(data, input, stack, group) {
        let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;
        scan: for (;;) {
            if ((groupMask & data[state]) == 0)
                break;
            let accEnd = data[state + 1];
            // Check whether this state can lead to a token in the current group
            // Accept tokens in this state, possibly overwriting
            // lower-precedence / shorter tokens
            for (let i = state + 3; i < accEnd; i += 2)
                if ((data[i + 1] & groupMask) > 0) {
                    let term = data[i];
                    if (dialect.allows(term) &&
                        (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {
                        input.acceptToken(term);
                        break;
                    }
                }
            // Do a binary search on the state's edges
            for (let next = input.next, low = 0, high = data[state + 2]; low < high;) {
                let mid = (low + high) >> 1;
                let index = accEnd + mid + (mid << 1);
                let from = data[index], to = data[index + 1];
                if (next < from)
                    high = mid;
                else if (next >= to)
                    low = mid + 1;
                else {
                    state = data[index + 2];
                    input.advance();
                    continue scan;
                }
            }
            break;
        }
    }

    // See lezer-generator/src/encode.ts for comments about the encoding
    // used here
    function decodeArray(input, Type = Uint16Array) {
        if (typeof input != "string")
            return input;
        let array = null;
        for (let pos = 0, out = 0; pos < input.length;) {
            let value = 0;
            for (;;) {
                let next = input.charCodeAt(pos++), stop = false;
                if (next == 126 /* BigValCode */) {
                    value = 65535 /* BigVal */;
                    break;
                }
                if (next >= 92 /* Gap2 */)
                    next--;
                if (next >= 34 /* Gap1 */)
                    next--;
                let digit = next - 32 /* Start */;
                if (digit >= 46 /* Base */) {
                    digit -= 46 /* Base */;
                    stop = true;
                }
                value += digit;
                if (stop)
                    break;
                value *= 46 /* Base */;
            }
            if (array)
                array[out++] = value;
            else
                array = new Type(value);
        }
        return array;
    }

    // Environment variable used to control console output
    const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
    let stackIDs = null;
    var Safety;
    (function (Safety) {
        Safety[Safety["Margin"] = 25] = "Margin";
    })(Safety || (Safety = {}));
    function cutAt(tree, pos, side) {
        let cursor = tree.cursor(IterMode.IncludeAnonymous);
        cursor.moveTo(pos);
        for (;;) {
            if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
                for (;;) {
                    if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                        return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))
                            : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));
                    if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                        break;
                    if (!cursor.parent())
                        return side < 0 ? 0 : tree.length;
                }
        }
    }
    class FragmentCursor {
        constructor(fragments, nodeSet) {
            this.fragments = fragments;
            this.nodeSet = nodeSet;
            this.i = 0;
            this.fragment = null;
            this.safeFrom = -1;
            this.safeTo = -1;
            this.trees = [];
            this.start = [];
            this.index = [];
            this.nextFragment();
        }
        nextFragment() {
            let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
            if (fr) {
                this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
                this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
                while (this.trees.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                }
                this.trees.push(fr.tree);
                this.start.push(-fr.offset);
                this.index.push(0);
                this.nextStart = this.safeFrom;
            }
            else {
                this.nextStart = 1e9;
            }
        }
        // `pos` must be >= any previously given `pos` for this cursor
        nodeAt(pos) {
            if (pos < this.nextStart)
                return null;
            while (this.fragment && this.safeTo <= pos)
                this.nextFragment();
            if (!this.fragment)
                return null;
            for (;;) {
                let last = this.trees.length - 1;
                if (last < 0) { // End of tree
                    this.nextFragment();
                    return null;
                }
                let top = this.trees[last], index = this.index[last];
                if (index == top.children.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                    continue;
                }
                let next = top.children[index];
                let start = this.start[last] + top.positions[index];
                if (start > pos) {
                    this.nextStart = start;
                    return null;
                }
                if (next instanceof Tree) {
                    if (start == pos) {
                        if (start < this.safeFrom)
                            return null;
                        let end = start + next.length;
                        if (end <= this.safeTo) {
                            let lookAhead = next.prop(NodeProp.lookAhead);
                            if (!lookAhead || end + lookAhead < this.fragment.to)
                                return next;
                        }
                    }
                    this.index[last]++;
                    if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                        this.trees.push(next);
                        this.start.push(start);
                        this.index.push(0);
                    }
                }
                else {
                    this.index[last]++;
                    this.nextStart = start + next.length;
                }
            }
        }
    }
    class TokenCache {
        constructor(parser, stream) {
            this.stream = stream;
            this.tokens = [];
            this.mainToken = null;
            this.actions = [];
            this.tokens = parser.tokenizers.map(_ => new CachedToken);
        }
        getActions(stack) {
            let actionIndex = 0;
            let main = null;
            let { parser } = stack.p, { tokenizers } = parser;
            let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);
            let context = stack.curContext ? stack.curContext.hash : 0;
            let lookAhead = 0;
            for (let i = 0; i < tokenizers.length; i++) {
                if (((1 << i) & mask) == 0)
                    continue;
                let tokenizer = tokenizers[i], token = this.tokens[i];
                if (main && !tokenizer.fallback)
                    continue;
                if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                    this.updateCachedToken(token, tokenizer, stack);
                    token.mask = mask;
                    token.context = context;
                }
                if (token.lookAhead > token.end + 25 /* Margin */)
                    lookAhead = Math.max(token.lookAhead, lookAhead);
                if (token.value != 0 /* Err */) {
                    let startIndex = actionIndex;
                    if (token.extended > -1)
                        actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                    actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                    if (!tokenizer.extend) {
                        main = token;
                        if (actionIndex > startIndex)
                            break;
                    }
                }
            }
            while (this.actions.length > actionIndex)
                this.actions.pop();
            if (lookAhead)
                stack.setLookAhead(lookAhead);
            if (!main && stack.pos == this.stream.end) {
                main = new CachedToken;
                main.value = stack.p.parser.eofTerm;
                main.start = main.end = stack.pos;
                actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
            }
            this.mainToken = main;
            return this.actions;
        }
        getMainToken(stack) {
            if (this.mainToken)
                return this.mainToken;
            let main = new CachedToken, { pos, p } = stack;
            main.start = pos;
            main.end = Math.min(pos + 1, p.stream.end);
            main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;
            return main;
        }
        updateCachedToken(token, tokenizer, stack) {
            tokenizer.token(this.stream.reset(stack.pos, token), stack);
            if (token.value > -1) {
                let { parser } = stack.p;
                for (let i = 0; i < parser.specialized.length; i++)
                    if (parser.specialized[i] == token.value) {
                        let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                            if ((result & 1) == 0 /* Specialize */)
                                token.value = result >> 1;
                            else
                                token.extended = result >> 1;
                            break;
                        }
                    }
            }
            else {
                token.value = 0 /* Err */;
                token.end = Math.min(stack.p.stream.end, stack.pos + 1);
            }
        }
        putAction(action, token, end, index) {
            // Don't add duplicate actions
            for (let i = 0; i < index; i += 3)
                if (this.actions[i] == action)
                    return index;
            this.actions[index++] = action;
            this.actions[index++] = token;
            this.actions[index++] = end;
            return index;
        }
        addActions(stack, token, end, index) {
            let { state } = stack, { parser } = stack.p, { data } = parser;
            for (let set = 0; set < 2; set++) {
                for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {
                    if (data[i] == 65535 /* End */) {
                        if (data[i + 1] == 1 /* Next */) {
                            i = pair(data, i + 2);
                        }
                        else {
                            if (index == 0 && data[i + 1] == 2 /* Other */)
                                index = this.putAction(pair(data, i + 2), token, end, index);
                            break;
                        }
                    }
                    if (data[i] == token)
                        index = this.putAction(pair(data, i + 1), token, end, index);
                }
            }
            return index;
        }
    }
    var Rec;
    (function (Rec) {
        Rec[Rec["Distance"] = 5] = "Distance";
        Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
        // When two stacks have been running independently long enough to
        // add this many elements to their buffers, prune one.
        Rec[Rec["MinBufferLengthPrune"] = 500] = "MinBufferLengthPrune";
        Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit";
        // Once a stack reaches this depth (in .stack.length) force-reduce
        // it back to CutTo to avoid creating trees that overflow the stack
        // on recursive traversal.
        Rec[Rec["CutDepth"] = 15000] = "CutDepth";
        Rec[Rec["CutTo"] = 9000] = "CutTo";
    })(Rec || (Rec = {}));
    class Parse {
        constructor(parser, input, fragments, ranges) {
            this.parser = parser;
            this.input = input;
            this.ranges = ranges;
            this.recovering = 0;
            this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
            this.minStackPos = 0;
            this.reused = [];
            this.stoppedAt = null;
            this.stream = new InputStream(input, ranges);
            this.tokens = new TokenCache(parser, this.stream);
            this.topTerm = parser.top[1];
            let { from } = ranges[0];
            this.stacks = [Stack.start(this, parser.top[0], from)];
            this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
                ? new FragmentCursor(fragments, parser.nodeSet) : null;
        }
        get parsedPos() {
            return this.minStackPos;
        }
        // Move the parser forward. This will process all parse stacks at
        // `this.pos` and try to advance them to a further position. If no
        // stack for such a position is found, it'll start error-recovery.
        //
        // When the parse is finished, this will return a syntax tree. When
        // not, it returns `null`.
        advance() {
            let stacks = this.stacks, pos = this.minStackPos;
            // This will hold stacks beyond `pos`.
            let newStacks = this.stacks = [];
            let stopped, stoppedTokens;
            // Keep advancing any stacks at `pos` until they either move
            // forward or can't be advanced. Gather stacks that can't be
            // advanced further in `stopped`.
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i];
                for (;;) {
                    this.tokens.mainToken = null;
                    if (stack.pos > pos) {
                        newStacks.push(stack);
                    }
                    else if (this.advanceStack(stack, newStacks, stacks)) {
                        continue;
                    }
                    else {
                        if (!stopped) {
                            stopped = [];
                            stoppedTokens = [];
                        }
                        stopped.push(stack);
                        let tok = this.tokens.getMainToken(stack);
                        stoppedTokens.push(tok.value, tok.end);
                    }
                    break;
                }
            }
            if (!newStacks.length) {
                let finished = stopped && findFinished(stopped);
                if (finished)
                    return this.stackToTree(finished);
                if (this.parser.strict) {
                    if (verbose && stopped)
                        console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                    throw new SyntaxError("No parse at " + pos);
                }
                if (!this.recovering)
                    this.recovering = 5 /* Distance */;
            }
            if (this.recovering && stopped) {
                let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
                    : this.runRecovery(stopped, stoppedTokens, newStacks);
                if (finished)
                    return this.stackToTree(finished.forceAll());
            }
            if (this.recovering) {
                let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;
                if (newStacks.length > maxRemaining) {
                    newStacks.sort((a, b) => b.score - a.score);
                    while (newStacks.length > maxRemaining)
                        newStacks.pop();
                }
                if (newStacks.some(s => s.reducePos > pos))
                    this.recovering--;
            }
            else if (newStacks.length > 1) {
                // Prune stacks that are in the same state, or that have been
                // running without splitting for a while, to avoid getting stuck
                // with multiple successful stacks running endlessly on.
                outer: for (let i = 0; i < newStacks.length - 1; i++) {
                    let stack = newStacks[i];
                    for (let j = i + 1; j < newStacks.length; j++) {
                        let other = newStacks[j];
                        if (stack.sameState(other) ||
                            stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {
                            if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                                newStacks.splice(j--, 1);
                            }
                            else {
                                newStacks.splice(i--, 1);
                                continue outer;
                            }
                        }
                    }
                }
            }
            this.minStackPos = newStacks[0].pos;
            for (let i = 1; i < newStacks.length; i++)
                if (newStacks[i].pos < this.minStackPos)
                    this.minStackPos = newStacks[i].pos;
            return null;
        }
        stopAt(pos) {
            if (this.stoppedAt != null && this.stoppedAt < pos)
                throw new RangeError("Can't move stoppedAt forward");
            this.stoppedAt = pos;
        }
        // Returns an updated version of the given stack, or null if the
        // stack can't advance normally. When `split` and `stacks` are
        // given, stacks split off by ambiguous operations will be pushed to
        // `split`, or added to `stacks` if they move `pos` forward.
        advanceStack(stack, stacks, split) {
            let start = stack.pos, { parser } = this;
            let base = verbose ? this.stackID(stack) + " -> " : "";
            if (this.stoppedAt != null && start > this.stoppedAt)
                return stack.forceReduce() ? stack : null;
            if (this.fragments) {
                let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
                for (let cached = this.fragments.nodeAt(start); cached;) {
                    let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                    if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                        stack.useNode(cached, match);
                        if (verbose)
                            console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                        return true;
                    }
                    if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                        break;
                    let inner = cached.children[0];
                    if (inner instanceof Tree && cached.positions[0] == 0)
                        cached = inner;
                    else
                        break;
                }
            }
            let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);
            if (defaultReduce > 0) {
                stack.reduce(defaultReduce);
                if (verbose)
                    console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);
                return true;
            }
            if (stack.stack.length >= 15000 /* CutDepth */) {
                while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) { }
            }
            let actions = this.tokens.getActions(stack);
            for (let i = 0; i < actions.length;) {
                let action = actions[i++], term = actions[i++], end = actions[i++];
                let last = i == actions.length || !split;
                let localStack = last ? stack : stack.split();
                localStack.apply(action, term, end);
                if (verbose)
                    console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
                if (last)
                    return true;
                else if (localStack.pos > start)
                    stacks.push(localStack);
                else
                    split.push(localStack);
            }
            return false;
        }
        // Advance a given stack forward as far as it will go. Returns the
        // (possibly updated) stack if it got stuck, or null if it moved
        // forward and was given to `pushStackDedup`.
        advanceFully(stack, newStacks) {
            let pos = stack.pos;
            for (;;) {
                if (!this.advanceStack(stack, null, null))
                    return false;
                if (stack.pos > pos) {
                    pushStackDedup(stack, newStacks);
                    return true;
                }
            }
        }
        runRecovery(stacks, tokens, newStacks) {
            let finished = null, restarted = false;
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
                let base = verbose ? this.stackID(stack) + " -> " : "";
                if (stack.deadEnd) {
                    if (restarted)
                        continue;
                    restarted = true;
                    stack.restart();
                    if (verbose)
                        console.log(base + this.stackID(stack) + " (restarted)");
                    let done = this.advanceFully(stack, newStacks);
                    if (done)
                        continue;
                }
                let force = stack.split(), forceBase = base;
                for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {
                    if (verbose)
                        console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                    let done = this.advanceFully(force, newStacks);
                    if (done)
                        break;
                    if (verbose)
                        forceBase = this.stackID(force) + " -> ";
                }
                for (let insert of stack.recoverByInsert(token)) {
                    if (verbose)
                        console.log(base + this.stackID(insert) + " (via recover-insert)");
                    this.advanceFully(insert, newStacks);
                }
                if (this.stream.end > stack.pos) {
                    if (tokenEnd == stack.pos) {
                        tokenEnd++;
                        token = 0 /* Err */;
                    }
                    stack.recoverByDelete(token, tokenEnd);
                    if (verbose)
                        console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                    pushStackDedup(stack, newStacks);
                }
                else if (!finished || finished.score < stack.score) {
                    finished = stack;
                }
            }
            return finished;
        }
        // Convert the stack's buffer to a syntax tree.
        stackToTree(stack) {
            stack.close();
            return Tree.build({ buffer: StackBufferCursor.create(stack),
                nodeSet: this.parser.nodeSet,
                topID: this.topTerm,
                maxBufferLength: this.parser.bufferLength,
                reused: this.reused,
                start: this.ranges[0].from,
                length: stack.pos - this.ranges[0].from,
                minRepeatType: this.parser.minRepeatTerm });
        }
        stackID(stack) {
            let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
            if (!id)
                stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
            return id + stack;
        }
    }
    function pushStackDedup(stack, newStacks) {
        for (let i = 0; i < newStacks.length; i++) {
            let other = newStacks[i];
            if (other.pos == stack.pos && other.sameState(stack)) {
                if (newStacks[i].score < stack.score)
                    newStacks[i] = stack;
                return;
            }
        }
        newStacks.push(stack);
    }
    class Dialect {
        constructor(source, flags, disabled) {
            this.source = source;
            this.flags = flags;
            this.disabled = disabled;
        }
        allows(term) { return !this.disabled || this.disabled[term] == 0; }
    }
    /// Holds the parse tables for a given grammar, as generated by
    /// `lezer-generator`, and provides [methods](#common.Parser) to parse
    /// content with.
    class LRParser extends Parser {
        /// @internal
        constructor(spec) {
            super();
            /// @internal
            this.wrappers = [];
            if (spec.version != 14 /* Version */)
                throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* Version */})`);
            let nodeNames = spec.nodeNames.split(" ");
            this.minRepeatTerm = nodeNames.length;
            for (let i = 0; i < spec.repeatNodeCount; i++)
                nodeNames.push("");
            let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
            let nodeProps = [];
            for (let i = 0; i < nodeNames.length; i++)
                nodeProps.push([]);
            function setProp(nodeID, prop, value) {
                nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
            }
            if (spec.nodeProps)
                for (let propSpec of spec.nodeProps) {
                    let prop = propSpec[0];
                    if (typeof prop == "string")
                        prop = NodeProp[prop];
                    for (let i = 1; i < propSpec.length;) {
                        let next = propSpec[i++];
                        if (next >= 0) {
                            setProp(next, prop, propSpec[i++]);
                        }
                        else {
                            let value = propSpec[i + -next];
                            for (let j = -next; j > 0; j--)
                                setProp(propSpec[i++], prop, value);
                            i++;
                        }
                    }
                }
            this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
                name: i >= this.minRepeatTerm ? undefined : name,
                id: i,
                props: nodeProps[i],
                top: topTerms.indexOf(i) > -1,
                error: i == 0,
                skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
            })));
            if (spec.propSources)
                this.nodeSet = this.nodeSet.extend(...spec.propSources);
            this.strict = false;
            this.bufferLength = DefaultBufferLength;
            let tokenArray = decodeArray(spec.tokenData);
            this.context = spec.context;
            this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);
            this.specializers = [];
            if (spec.specialized)
                for (let i = 0; i < spec.specialized.length; i++) {
                    this.specialized[i] = spec.specialized[i].term;
                    this.specializers[i] = spec.specialized[i].get;
                }
            this.states = decodeArray(spec.states, Uint32Array);
            this.data = decodeArray(spec.stateData);
            this.goto = decodeArray(spec.goto);
            this.maxTerm = spec.maxTerm;
            this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
            this.topRules = spec.topRules;
            this.dialects = spec.dialects || {};
            this.dynamicPrecedences = spec.dynamicPrecedences || null;
            this.tokenPrecTable = spec.tokenPrec;
            this.termNames = spec.termNames || null;
            this.maxNode = this.nodeSet.types.length - 1;
            this.dialect = this.parseDialect();
            this.top = this.topRules[Object.keys(this.topRules)[0]];
        }
        createParse(input, fragments, ranges) {
            let parse = new Parse(this, input, fragments, ranges);
            for (let w of this.wrappers)
                parse = w(parse, input, fragments, ranges);
            return parse;
        }
        /// Get a goto table entry @internal
        getGoto(state, term, loose = false) {
            let table = this.goto;
            if (term >= table[0])
                return -1;
            for (let pos = table[term + 1];;) {
                let groupTag = table[pos++], last = groupTag & 1;
                let target = table[pos++];
                if (last && loose)
                    return target;
                for (let end = pos + (groupTag >> 1); pos < end; pos++)
                    if (table[pos] == state)
                        return target;
                if (last)
                    return -1;
            }
        }
        /// Check if this state has an action for a given terminal @internal
        hasAction(state, terminal) {
            let data = this.data;
            for (let set = 0; set < 2; set++) {
                for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {
                    if ((next = data[i]) == 65535 /* End */) {
                        if (data[i + 1] == 1 /* Next */)
                            next = data[i = pair(data, i + 2)];
                        else if (data[i + 1] == 2 /* Other */)
                            return pair(data, i + 2);
                        else
                            break;
                    }
                    if (next == terminal || next == 0 /* Err */)
                        return pair(data, i + 1);
                }
            }
            return 0;
        }
        /// @internal
        stateSlot(state, slot) {
            return this.states[(state * 6 /* Size */) + slot];
        }
        /// @internal
        stateFlag(state, flag) {
            return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;
        }
        /// @internal
        validAction(state, action) {
            if (action == this.stateSlot(state, 4 /* DefaultReduce */))
                return true;
            for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                if (this.data[i] == 65535 /* End */) {
                    if (this.data[i + 1] == 1 /* Next */)
                        i = pair(this.data, i + 2);
                    else
                        return false;
                }
                if (action == pair(this.data, i + 1))
                    return true;
            }
        }
        /// Get the states that can follow this one through shift actions or
        /// goto jumps. @internal
        nextStates(state) {
            let result = [];
            for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                if (this.data[i] == 65535 /* End */) {
                    if (this.data[i + 1] == 1 /* Next */)
                        i = pair(this.data, i + 2);
                    else
                        break;
                }
                if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {
                    let value = this.data[i + 1];
                    if (!result.some((v, i) => (i & 1) && v == value))
                        result.push(this.data[i], value);
                }
            }
            return result;
        }
        /// @internal
        overrides(token, prev) {
            let iPrev = findOffset(this.data, this.tokenPrecTable, prev);
            return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
        }
        /// Configure the parser. Returns a new parser instance that has the
        /// given settings modified. Settings not provided in `config` are
        /// kept from the original parser.
        configure(config) {
            // Hideous reflection-based kludge to make it easy to create a
            // slightly modified copy of a parser.
            let copy = Object.assign(Object.create(LRParser.prototype), this);
            if (config.props)
                copy.nodeSet = this.nodeSet.extend(...config.props);
            if (config.top) {
                let info = this.topRules[config.top];
                if (!info)
                    throw new RangeError(`Invalid top rule name ${config.top}`);
                copy.top = info;
            }
            if (config.tokenizers)
                copy.tokenizers = this.tokenizers.map(t => {
                    let found = config.tokenizers.find(r => r.from == t);
                    return found ? found.to : t;
                });
            if (config.contextTracker)
                copy.context = config.contextTracker;
            if (config.dialect)
                copy.dialect = this.parseDialect(config.dialect);
            if (config.strict != null)
                copy.strict = config.strict;
            if (config.wrap)
                copy.wrappers = copy.wrappers.concat(config.wrap);
            if (config.bufferLength != null)
                copy.bufferLength = config.bufferLength;
            return copy;
        }
        /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
        /// are registered for this parser.
        hasWrappers() {
            return this.wrappers.length > 0;
        }
        /// Returns the name associated with a given term. This will only
        /// work for all terms when the parser was generated with the
        /// `--names` option. By default, only the names of tagged terms are
        /// stored.
        getName(term) {
            return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
        }
        /// The eof term id is always allocated directly after the node
        /// types. @internal
        get eofTerm() { return this.maxNode + 1; }
        /// The type of top node produced by the parser.
        get topNode() { return this.nodeSet.types[this.top[1]]; }
        /// @internal
        dynamicPrecedence(term) {
            let prec = this.dynamicPrecedences;
            return prec == null ? 0 : prec[term] || 0;
        }
        /// @internal
        parseDialect(dialect) {
            let values = Object.keys(this.dialects), flags = values.map(() => false);
            if (dialect)
                for (let part of dialect.split(" ")) {
                    let id = values.indexOf(part);
                    if (id >= 0)
                        flags[id] = true;
                }
            let disabled = null;
            for (let i = 0; i < values.length; i++)
                if (!flags[i]) {
                    for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)
                        (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
                }
            return new Dialect(dialect, flags, disabled);
        }
        /// (used by the output of the parser generator) @internal
        static deserialize(spec) {
            return new LRParser(spec);
        }
    }
    function pair(data, off) { return data[off] | (data[off + 1] << 16); }
    function findOffset(data, start, term) {
        for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)
            if (next == term)
                return i - start;
        return -1;
    }
    function findFinished(stacks) {
        let best = null;
        for (let stack of stacks) {
            let stopped = stack.p.stoppedAt;
            if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
                stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&
                (!best || best.score < stack.score))
                best = stack;
        }
        return best;
    }

    const jsonHighlighting = styleTags({
      String: tags.string,
      Number: tags.number,
      "True False": tags.bool,
      PropertyName: tags.propertyName,
      Null: tags.null,
      ",": tags.separator,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser = LRParser.deserialize({
      version: 14,
      states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
      stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
      goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
      nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
      maxTerm: 25,
      nodeProps: [
        ["openedBy", 7,"{",12,"["],
        ["closedBy", 8,"}",13,"]"]
      ],
      propSources: [jsonHighlighting],
      skippedNodes: [0],
      repeatNodeCount: 2,
      tokenData: "(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~",
      tokenizers: [0],
      topRules: {"JsonText":[0,1]},
      tokenPrec: 0
    });

    /**
    A language provider that provides JSON parsing.
    */
    const jsonLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Object: /*@__PURE__*/continuedIndent({ except: /^\s*\}/ }),
                    Array: /*@__PURE__*/continuedIndent({ except: /^\s*\]/ })
                }),
                /*@__PURE__*/foldNodeProp.add({
                    "Object Array": foldInside
                })
            ]
        }),
        languageData: {
            closeBrackets: { brackets: ["[", "{", '"'] },
            indentOnInput: /^\s*[\}\]]$/
        }
    });
    /**
    JSON language support.
    */
    function json() {
        return new LanguageSupport(jsonLanguage);
    }

    /**
     * Measure how long a callback takes to execute.
     * Returns the response from the callback
     * The measured duration is returned via the onDuration callback
     */
    function measure(callback, onDuration) {
        const start = Date.now();
        const result = callback();
        const end = Date.now();
        onDuration(end - start);
        return result;
    }

    /* node_modules/svelte-jsoneditor/components/modes/codemode/StatusBar.svelte generated by Svelte v3.48.0 */

    const file$G = "node_modules/svelte-jsoneditor/components/modes/codemode/StatusBar.svelte";

    // (18:2) {#if lineNumber !== undefined}
    function create_if_block_2$9(ctx) {
    	let div;
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Line: ");
    			t1 = text(/*lineNumber*/ ctx[0]);
    			attr_dev(div, "class", "jse-status-bar-info svelte-1oo7hnc");
    			add_location(div, file$G, 18, 4, 931);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*lineNumber*/ 1) set_data_dev(t1, /*lineNumber*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$9.name,
    		type: "if",
    		source: "(18:2) {#if lineNumber !== undefined}",
    		ctx
    	});

    	return block;
    }

    // (22:2) {#if columnNumber !== undefined}
    function create_if_block_1$9(ctx) {
    	let div;
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Column: ");
    			t1 = text(/*columnNumber*/ ctx[1]);
    			attr_dev(div, "class", "jse-status-bar-info svelte-1oo7hnc");
    			add_location(div, file$G, 22, 4, 1037);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*columnNumber*/ 2) set_data_dev(t1, /*columnNumber*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(22:2) {#if columnNumber !== undefined}",
    		ctx
    	});

    	return block;
    }

    // (26:2) {#if charCount !== undefined && charCount > 0}
    function create_if_block$o(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Selection: ");
    			t1 = text(/*charCount*/ ctx[2]);
    			t2 = text(" characters");
    			attr_dev(div, "class", "jse-status-bar-info svelte-1oo7hnc");
    			add_location(div, file$G, 26, 4, 1161);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    			append_dev(div, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*charCount*/ 4) set_data_dev(t1, /*charCount*/ ctx[2]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$o.name,
    		type: "if",
    		source: "(26:2) {#if charCount !== undefined && charCount > 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$K(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let if_block0 = /*lineNumber*/ ctx[0] !== undefined && create_if_block_2$9(ctx);
    	let if_block1 = /*columnNumber*/ ctx[1] !== undefined && create_if_block_1$9(ctx);
    	let if_block2 = /*charCount*/ ctx[2] !== undefined && /*charCount*/ ctx[2] > 0 && create_if_block$o(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div, "class", "jse-status-bar svelte-1oo7hnc");
    			add_location(div, file$G, 16, 0, 865);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*lineNumber*/ ctx[0] !== undefined) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$9(ctx);
    					if_block0.c();
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*columnNumber*/ ctx[1] !== undefined) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$9(ctx);
    					if_block1.c();
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*charCount*/ ctx[2] !== undefined && /*charCount*/ ctx[2] > 0) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$o(ctx);
    					if_block2.c();
    					if_block2.m(div, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$K.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$K($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StatusBar', slots, []);
    	var _a, _b, _c, _d, _e;
    	let { editorState } = $$props;
    	let pos;
    	let line;
    	let lineNumber;
    	let columnNumber;
    	let charCount;
    	const writable_props = ['editorState'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StatusBar> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('editorState' in $$props) $$invalidate(3, editorState = $$props.editorState);
    	};

    	$$self.$capture_state = () => ({
    		_a,
    		_b,
    		_c,
    		_d,
    		_e,
    		editorState,
    		pos,
    		line,
    		lineNumber,
    		columnNumber,
    		charCount
    	});

    	$$self.$inject_state = $$props => {
    		if ('_a' in $$props) $$invalidate(4, _a = $$props._a);
    		if ('_b' in $$props) $$invalidate(5, _b = $$props._b);
    		if ('_c' in $$props) $$invalidate(6, _c = $$props._c);
    		if ('_d' in $$props) $$invalidate(7, _d = $$props._d);
    		if ('_e' in $$props) $$invalidate(8, _e = $$props._e);
    		if ('editorState' in $$props) $$invalidate(3, editorState = $$props.editorState);
    		if ('pos' in $$props) $$invalidate(9, pos = $$props.pos);
    		if ('line' in $$props) $$invalidate(10, line = $$props.line);
    		if ('lineNumber' in $$props) $$invalidate(0, lineNumber = $$props.lineNumber);
    		if ('columnNumber' in $$props) $$invalidate(1, columnNumber = $$props.columnNumber);
    		if ('charCount' in $$props) $$invalidate(2, charCount = $$props.charCount);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*editorState, _a, _b*/ 56) {
    			$$invalidate(9, pos = $$invalidate(5, _b = $$invalidate(4, _a = editorState === null || editorState === void 0
    			? void 0
    			: editorState.selection) === null || _a === void 0
    			? void 0
    			: _a.main) === null || _b === void 0
    			? void 0
    			: _b.head);
    		}

    		if ($$self.$$.dirty & /*editorState, _c, pos*/ 584) {
    			$$invalidate(10, line = $$invalidate(6, _c = editorState === null || editorState === void 0
    			? void 0
    			: editorState.doc) === null || _c === void 0
    			? void 0
    			: _c.lineAt(pos));
    		}

    		if ($$self.$$.dirty & /*line*/ 1024) {
    			$$invalidate(0, lineNumber = line ? line.number : undefined);
    		}

    		if ($$self.$$.dirty & /*line, pos*/ 1536) {
    			$$invalidate(1, columnNumber = line ? pos - line.from + 1 : undefined);
    		}

    		if ($$self.$$.dirty & /*editorState, _d, _e*/ 392) {
    			$$invalidate(2, charCount = $$invalidate(8, _e = $$invalidate(7, _d = editorState === null || editorState === void 0
    			? void 0
    			: editorState.selection) === null || _d === void 0
    			? void 0
    			: _d.ranges) === null || _e === void 0
    			? void 0
    			: _e.reduce(
    					(count, range) => {
    						return count + range.to - range.from;
    					},
    					0
    				));
    		}
    	};

    	return [
    		lineNumber,
    		columnNumber,
    		charCount,
    		editorState,
    		_a,
    		_b,
    		_c,
    		_d,
    		_e,
    		pos,
    		line
    	];
    }

    class StatusBar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$K, create_fragment$K, safe_not_equal, { editorState: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StatusBar",
    			options,
    			id: create_fragment$K.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*editorState*/ ctx[3] === undefined && !('editorState' in props)) {
    			console.warn("<StatusBar> was created without expected prop 'editorState'");
    		}
    	}

    	get editorState() {
    		throw new Error("<StatusBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set editorState(value) {
    		throw new Error("<StatusBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const highlightStyle = HighlightStyle.define([
        { tag: tags.propertyName, color: 'var(--jse-key-color)' },
        { tag: tags.number, color: 'var(--jse-value-color-number)' },
        { tag: tags.bool, color: 'var(--jse-value-color-boolean)' },
        { tag: tags.string, color: 'var(--jse-value-color-string)' },
        { tag: tags.keyword, color: 'var(--jse-value-color-null)' } // null
    ]);
    const highlighter = syntaxHighlighting(highlightStyle);
    // TODO: remove workaround when not needed anymore
    // Workaround for the error "CodeMirror plugin crashed: TypeError: tags3 is undefined"
    // thrown when using the json() language from '@codemirror/lang-json'
    //
    // Note that a plain CodeSandbox with parcel and code mirror v6.0.0,
    // so it is maybe related to Vite
    //
    // See https://discuss.codemirror.net/t/highlighting-that-seems-ignored-in-cm6/4320/15
    const originalStyle = highlightStyle.style;
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    // noinspection JSConstantReassignment
    highlightStyle.style = (tags) => originalStyle(tags || []);

    /* node_modules/svelte-jsoneditor/components/modes/codemode/CodeMode.svelte generated by Svelte v3.48.0 */

    const { Object: Object_1$4, console: console_1$5 } = globals;
    const file$F = "node_modules/svelte-jsoneditor/components/modes/codemode/CodeMode.svelte";

    // (648:2) {#if mainMenuBar}
    function create_if_block_4$5(ctx) {
    	let codemenu;
    	let current;

    	codemenu = new CodeMenu({
    			props: {
    				readOnly: /*readOnly*/ ctx[1],
    				onFormat: /*handleFormat*/ ctx[17],
    				onCompact: /*handleCompact*/ ctx[18],
    				onSort: /*handleSort*/ ctx[19],
    				onTransform: /*handleTransform*/ ctx[20],
    				onToggleSearch: /*handleToggleSearch*/ ctx[21],
    				onUndo: /*handleUndo*/ ctx[22],
    				onRedo: /*handleRedo*/ ctx[23],
    				canFormat: !/*isNewDocument*/ ctx[15],
    				canCompact: !/*isNewDocument*/ ctx[15],
    				canSort: !/*isNewDocument*/ ctx[15],
    				canTransform: !/*isNewDocument*/ ctx[15],
    				canUndo: /*canUndo*/ ctx[10],
    				canRedo: /*canRedo*/ ctx[11],
    				onRenderMenu: /*onRenderMenu*/ ctx[5]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(codemenu.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(codemenu, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const codemenu_changes = {};
    			if (dirty[0] & /*readOnly*/ 2) codemenu_changes.readOnly = /*readOnly*/ ctx[1];
    			if (dirty[0] & /*isNewDocument*/ 32768) codemenu_changes.canFormat = !/*isNewDocument*/ ctx[15];
    			if (dirty[0] & /*isNewDocument*/ 32768) codemenu_changes.canCompact = !/*isNewDocument*/ ctx[15];
    			if (dirty[0] & /*isNewDocument*/ 32768) codemenu_changes.canSort = !/*isNewDocument*/ ctx[15];
    			if (dirty[0] & /*isNewDocument*/ 32768) codemenu_changes.canTransform = !/*isNewDocument*/ ctx[15];
    			if (dirty[0] & /*canUndo*/ 1024) codemenu_changes.canUndo = /*canUndo*/ ctx[10];
    			if (dirty[0] & /*canRedo*/ 2048) codemenu_changes.canRedo = /*canRedo*/ ctx[11];
    			if (dirty[0] & /*onRenderMenu*/ 32) codemenu_changes.onRenderMenu = /*onRenderMenu*/ ctx[5];
    			codemenu.$set(codemenu_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(codemenu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(codemenu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(codemenu, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$5.name,
    		type: "if",
    		source: "(648:2) {#if mainMenuBar}",
    		ctx
    	});

    	return block;
    }

    // (718:2) {:else}
    function create_else_block$d(ctx) {
    	let div2;
    	let div0;
    	let t0;
    	let div1;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			div1.textContent = "loading...";
    			attr_dev(div0, "class", "jse-loading-space svelte-1ol5grl");
    			add_location(div0, file$F, 719, 6, 23157);
    			attr_dev(div1, "class", "jse-loading svelte-1ol5grl");
    			add_location(div1, file$F, 720, 6, 23197);
    			attr_dev(div2, "class", "jse-contents svelte-1ol5grl");
    			add_location(div2, file$F, 718, 4, 23124);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$d.name,
    		type: "else",
    		source: "(718:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (668:2) {#if !isSSR}
    function create_if_block$n(ctx) {
    	let t0;
    	let div;
    	let t1;
    	let t2;
    	let t3;
    	let validationerrorsoverview;
    	let current;
    	let if_block0 = /*codeEditorDisabled*/ ctx[14] && create_if_block_3$7(ctx);
    	let if_block1 = /*statusBar*/ ctx[3] && create_if_block_2$8(ctx);
    	let if_block2 = /*jsonParseError*/ ctx[12] && create_if_block_1$8(ctx);

    	validationerrorsoverview = new ValidationErrorsOverview({
    			props: {
    				validationErrors: /*validationErrors*/ ctx[9],
    				selectError: /*handleSelectValidationError*/ ctx[26]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div = element("div");
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			t3 = space();
    			create_component(validationerrorsoverview.$$.fragment);
    			attr_dev(div, "class", "jse-contents svelte-1ol5grl");
    			toggle_class(div, "jse-hidden", /*codeEditorDisabled*/ ctx[14]);
    			add_location(div, file$F, 700, 4, 22603);
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			/*div_binding*/ ctx[46](div);
    			insert_dev(target, t1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(validationerrorsoverview, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*codeEditorDisabled*/ ctx[14]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*codeEditorDisabled*/ 16384) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_3$7(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*codeEditorDisabled*/ 16384) {
    				toggle_class(div, "jse-hidden", /*codeEditorDisabled*/ ctx[14]);
    			}

    			if (/*statusBar*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*statusBar*/ 8) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_2$8(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t2.parentNode, t2);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*jsonParseError*/ ctx[12]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*jsonParseError*/ 4096) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_1$8(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(t3.parentNode, t3);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			const validationerrorsoverview_changes = {};
    			if (dirty[0] & /*validationErrors*/ 512) validationerrorsoverview_changes.validationErrors = /*validationErrors*/ ctx[9];
    			validationerrorsoverview.$set(validationerrorsoverview_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(validationerrorsoverview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(validationerrorsoverview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[46](null);
    			if (detaching) detach_dev(t1);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(validationerrorsoverview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$n.name,
    		type: "if",
    		source: "(668:2) {#if !isSSR}",
    		ctx
    	});

    	return block;
    }

    // (669:4) {#if codeEditorDisabled}
    function create_if_block_3$7(ctx) {
    	let message;
    	let current;

    	message = new Message({
    			props: {
    				icon: faExclamationTriangle,
    				type: "error",
    				message: `The JSON document is larger than ${formatSize(MAX_DOCUMENT_SIZE_CODE_MODE, 1024)}, ` + `and may crash your browser when loading it in code mode. Actual size: ${formatSize(/*text*/ ctx[0].length, 1024)}.`,
    				actions: [
    					{
    						text: 'Open anyway',
    						title: 'Open the document in code mode. This may freeze or crash your browser.',
    						onClick: /*handleAcceptTooLarge*/ ctx[24]
    					},
    					{
    						text: 'Open in tree mode',
    						title: 'Open the document in tree mode. Tree mode can handle large documents.',
    						onClick: /*onSwitchToTreeMode*/ ctx[4]
    					},
    					{
    						text: 'Cancel',
    						title: 'Cancel opening this large document.',
    						onClick: /*cancelLoadTooLarge*/ ctx[25]
    					}
    				]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(message.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(message, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const message_changes = {};
    			if (dirty[0] & /*text*/ 1) message_changes.message = `The JSON document is larger than ${formatSize(MAX_DOCUMENT_SIZE_CODE_MODE, 1024)}, ` + `and may crash your browser when loading it in code mode. Actual size: ${formatSize(/*text*/ ctx[0].length, 1024)}.`;

    			if (dirty[0] & /*onSwitchToTreeMode*/ 16) message_changes.actions = [
    				{
    					text: 'Open anyway',
    					title: 'Open the document in code mode. This may freeze or crash your browser.',
    					onClick: /*handleAcceptTooLarge*/ ctx[24]
    				},
    				{
    					text: 'Open in tree mode',
    					title: 'Open the document in tree mode. Tree mode can handle large documents.',
    					onClick: /*onSwitchToTreeMode*/ ctx[4]
    				},
    				{
    					text: 'Cancel',
    					title: 'Cancel opening this large document.',
    					onClick: /*cancelLoadTooLarge*/ ctx[25]
    				}
    			];

    			message.$set(message_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(message.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(message.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(message, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$7.name,
    		type: "if",
    		source: "(669:4) {#if codeEditorDisabled}",
    		ctx
    	});

    	return block;
    }

    // (703:4) {#if statusBar}
    function create_if_block_2$8(ctx) {
    	let statusbar;
    	let current;

    	statusbar = new StatusBar({
    			props: { editorState: /*editorState*/ ctx[8] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(statusbar.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(statusbar, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const statusbar_changes = {};
    			if (dirty[0] & /*editorState*/ 256) statusbar_changes.editorState = /*editorState*/ ctx[8];
    			statusbar.$set(statusbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(statusbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(statusbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(statusbar, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$8.name,
    		type: "if",
    		source: "(703:4) {#if statusBar}",
    		ctx
    	});

    	return block;
    }

    // (707:4) {#if jsonParseError}
    function create_if_block_1$8(ctx) {
    	let message;
    	let current;

    	message = new Message({
    			props: {
    				type: "error",
    				icon: faExclamationTriangle,
    				message: /*jsonParseError*/ ctx[12].message,
    				actions: /*repairActions*/ ctx[13],
    				onClick: /*func*/ ctx[47]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(message.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(message, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const message_changes = {};
    			if (dirty[0] & /*jsonParseError*/ 4096) message_changes.message = /*jsonParseError*/ ctx[12].message;
    			if (dirty[0] & /*repairActions*/ 8192) message_changes.actions = /*repairActions*/ ctx[13];
    			if (dirty[0] & /*jsonParseError*/ 4096) message_changes.onClick = /*func*/ ctx[47];
    			message.$set(message_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(message.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(message.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(message, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(707:4) {#if jsonParseError}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$J(ctx) {
    	let div;
    	let t;
    	let current_block_type_index;
    	let if_block1;
    	let current;
    	let if_block0 = /*mainMenuBar*/ ctx[2] && create_if_block_4$5(ctx);
    	const if_block_creators = [create_if_block$n, create_else_block$d];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*isSSR*/ ctx[16]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if_block1.c();
    			attr_dev(div, "class", "jse-code-mode svelte-1ol5grl");
    			toggle_class(div, "no-main-menu", !/*mainMenuBar*/ ctx[2]);
    			add_location(div, file$F, 646, 0, 21047);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t);
    			if_blocks[current_block_type_index].m(div, null);
    			/*div_binding_1*/ ctx[48](div);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*mainMenuBar*/ ctx[2]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*mainMenuBar*/ 4) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_4$5(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div, t);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if_block1.p(ctx, dirty);

    			if (dirty[0] & /*mainMenuBar*/ 4) {
    				toggle_class(div, "no-main-menu", !/*mainMenuBar*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if_blocks[current_block_type_index].d();
    			/*div_binding_1*/ ctx[48](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$J.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$J($$self, $$props, $$invalidate) {
    	let isNewDocument;
    	let tooLarge;
    	let codeEditorDisabled;
    	let normalization;
    	let repairActions;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CodeMode', slots, []);
    	let { readOnly = false } = $$props;
    	let { mainMenuBar = true } = $$props;
    	let { statusBar = true } = $$props;
    	let { text = '' } = $$props;
    	let { indentation = 2 } = $$props;
    	let { tabSize = 4 } = $$props;
    	let { escapeUnicodeCharacters = false } = $$props;
    	let { validator = null } = $$props;
    	let { onChange = null } = $$props;
    	let { onSwitchToTreeMode = noop$1 } = $$props;
    	let { onError } = $$props;
    	let { onFocus = noop$1 } = $$props;
    	let { onBlur = noop$1 } = $$props;
    	let { onRenderMenu = noop$1 } = $$props;
    	let { onSortModal } = $$props;
    	let { onTransformModal } = $$props;
    	const debug = createDebug('jsoneditor:CodeMode');

    	const formatCompactKeyBinding = {
    		key: 'Mod-i',
    		run: handleFormat,
    		shift: handleCompact,
    		preventDefault: true
    	};

    	const isSSR = typeof window === 'undefined';
    	debug('isSSR:', isSSR);
    	let codeMirrorRef;
    	let codeMirrorView;
    	let codeMirrorText;
    	let domCodeMode;
    	let editorState;
    	let onChangeDisabled = false;
    	let acceptTooLarge = false;

    	/** @type{ValidationError[]} */
    	let validationErrors = [];

    	const readOnlyCompartment = new Compartment();
    	const indentUnitCompartment = new Compartment();
    	const tabSizeCompartment = new Compartment();

    	// force updating the text when escapeUnicodeCharacters changes
    	let previousEscapeUnicodeCharacters = escapeUnicodeCharacters;

    	onMount(async () => {
    		if (isSSR) {
    			return;
    		}

    		try {
    			codeMirrorView = createCodeMirrorView({
    				target: codeMirrorRef,
    				initialText: !codeEditorDisabled ? text : '',
    				readOnly,
    				indentation
    			});

    			focus();
    		} catch(err) {
    			// TODO: report error to the user
    			console.error(err);
    		}
    	});

    	onDestroy(() => {
    		if (codeMirrorView) {
    			debug('Destroy CodeMirror editor');
    			codeMirrorView.destroy();
    		}
    	});

    	let canUndo = false;
    	let canRedo = false;
    	const sortModalId = uniqueId();
    	const transformModalId = uniqueId();

    	function focus() {
    		if (codeMirrorView) {
    			debug('focus');
    			codeMirrorView.focus();
    		}
    	}

    	// modalOpen is true when one of the modals is open.
    	// This is used to track whether the editor still has focus
    	let modalOpen = false;

    	createFocusTracker({
    		onMount,
    		onDestroy,
    		getWindow: () => getWindow(domCodeMode),
    		hasFocus: () => modalOpen && document.hasFocus() || activeElementIsChildOf(domCodeMode),
    		onFocus,
    		onBlur
    	});

    	function patch(operations) {
    		debug('patch', operations);
    		const previousText = text;
    		const previousJson = JSON.parse(text);
    		const updatedJson = immutableJSONPatch.immutableJSONPatch(previousJson, operations);
    		const undo = immutableJSONPatch.revertJSONPatch(previousJson, operations);
    		$$invalidate(0, text = JSON.stringify(updatedJson, null, indentation));

    		if (text !== previousText) {
    			emitOnChange(text, previousText);
    		}

    		return {
    			json: updatedJson,
    			previousJson,
    			undo,
    			redo: operations
    		};
    	}

    	function handleFormat() {
    		debug('format');

    		if (readOnly) {
    			return;
    		}

    		try {
    			const previousText = text;
    			const json = JSON.parse(text);
    			$$invalidate(0, text = JSON.stringify(json, null, indentation));

    			if (text !== previousText) {
    				emitOnChange(text, previousText);
    			}
    		} catch(err) {
    			onError(err);
    		}
    	}

    	function handleCompact() {
    		debug('compact');

    		if (readOnly) {
    			return;
    		}

    		try {
    			const previousText = text;
    			const json = JSON.parse(text);
    			$$invalidate(0, text = JSON.stringify(json));

    			if (text !== previousText) {
    				emitOnChange(text, previousText);
    			}
    		} catch(err) {
    			onError(err);
    		}
    	}

    	function handleRepair() {
    		debug('repair');

    		if (readOnly) {
    			return;
    		}

    		try {
    			const previousText = text;
    			$$invalidate(0, text = jsonrepair_min(text));
    			$$invalidate(44, jsonStatus = JSON_STATUS_VALID);
    			$$invalidate(12, jsonParseError = undefined);

    			if (text !== previousText) {
    				emitOnChange(text, previousText);
    			}
    		} catch(err) {
    			onError(err);
    		}
    	}

    	function handleSort() {
    		if (readOnly) {
    			return;
    		}

    		try {
    			const json = JSON.parse(text);
    			modalOpen = true;

    			onSortModal({
    				id: sortModalId,
    				json,
    				selectedPath: [],
    				onSort: async operations => {
    					debug('onSort', operations);
    					patch(operations);
    				},
    				onClose: () => {
    					modalOpen = false;
    					focus();
    				}
    			});
    		} catch(err) {
    			onError(err);
    		}
    	}

    	function openTransformModal({ id, selectedPath, onTransform, onClose }) {
    		try {
    			const json = JSON.parse(text);
    			modalOpen = true;

    			onTransformModal({
    				id: id || transformModalId,
    				json,
    				selectedPath,
    				onTransform: onTransform
    				? operations => {
    						onTransform({
    							operations,
    							json,
    							transformedJson: immutableJSONPatch.immutableJSONPatch(json, operations)
    						});
    					}
    				: operations => {
    						debug('onTransform', operations);
    						patch(operations);
    					},
    				onClose: () => {
    					modalOpen = false;
    					focus();

    					if (onClose) {
    						onClose();
    					}
    				}
    			});
    		} catch(err) {
    			onError(err);
    		}
    	}

    	function handleTransform() {
    		if (readOnly) {
    			return;
    		}

    		openTransformModal({ selectedPath: [] });
    	}

    	function handleToggleSearch() {
    		if (codeMirrorView) {
    			// TODO: figure out the proper way to detect whether the search panel is open
    			if (codeMirrorRef && codeMirrorRef.querySelector('.cm-search')) {
    				closeSearchPanel(codeMirrorView);
    			} else {
    				openSearchPanel(codeMirrorView);
    			}
    		}
    	}

    	function handleUndo() {
    		if (readOnly) {
    			return;
    		}

    		if (codeMirrorView) {
    			undo(codeMirrorView);
    			focus();
    		}
    	}

    	function handleRedo() {
    		if (readOnly) {
    			return;
    		}

    		if (codeMirrorView) {
    			redo(codeMirrorView);
    			focus();
    		}
    	}

    	function handleAcceptTooLarge() {
    		$$invalidate(42, acceptTooLarge = true);
    		setCodeMirrorValue(text, true);
    	}

    	function cancelLoadTooLarge() {
    		// copy the latest contents of the code editor again into text
    		onChangeCodeMirrorValue();
    	}

    	/**
     * @param {ValidationError} validationError
     **/
    	function handleSelectValidationError(validationError) {
    		debug('select validation error', validationError);
    		const richValidationError = toRichValidationError(validationError);

    		// we take "to" as head, not as anchor, because the scrollIntoView will
    		// move to the head, and when a large whole object is selected as a whole,
    		// we want to scroll to the start of the object and not the end
    		setSelection(richValidationError.from, richValidationError.to);

    		focus();
    	}

    	/**
     * @param {ParseError} parseError
     **/
    	function handleSelectParseError(parseError) {
    		debug('select parse error', parseError);
    		const richParseError = toRichParseError(parseError);

    		// we take "to" as head, not as anchor, because the scrollIntoView will
    		// move to the head, and when a large whole object is selected as a whole,
    		// we want to scroll to the start of the object and not the end
    		setSelection(richParseError.from, richParseError.to);

    		focus();
    	}

    	/**
     * @param {number} anchor
     * @param {number} head
     **/
    	function setSelection(anchor, head) {
    		debug('setSelection', { anchor, head });

    		if (codeMirrorView) {
    			codeMirrorView.dispatch(codeMirrorView.state.update({
    				selection: { anchor, head },
    				scrollIntoView: true
    			}));
    		}
    	}

    	function handleDoubleClick(event, view) {
    		// When the user double-clicked right from a bracket [ or {,
    		// select the contents of the array or object
    		if (view.state.selection.ranges.length === 1) {
    			const range = view.state.selection.ranges[0];
    			const selectedText = text.slice(range.from, range.to);

    			if (selectedText === '{' || selectedText === '[') {
    				const jsmap = jsonSourceMap.parse(text);

    				const path = Object.keys(jsmap.pointers).find(path => {
    					var _a;
    					const pointer = jsmap.pointers[path];

    					return ((_a = pointer.value) === null || _a === void 0
    					? void 0
    					: _a.pos) === range.from;
    				});

    				const pointer = jsmap.pointers[path];

    				if (path && pointer && pointer.value && pointer.valueEnd) {
    					debug('pointer found, selecting inner contents of path:', path, pointer);
    					const anchor = pointer.value.pos + 1;
    					const head = pointer.valueEnd.pos - 1;
    					setSelection(anchor, head);
    				}
    			}
    		}
    	}

    	function createCodeMirrorView({ target, initialText, readOnly, indentation }) {
    		debug('Create CodeMirror editor', { readOnly, indentation });

    		const state = EditorState.create({
    			doc: initialText,
    			extensions: [
    				keymap.of([indentWithTab, formatCompactKeyBinding]),
    				linter(
    					() => {
    						onChangeCodeMirrorValueDebounced.flush();
    						return validate();
    					},
    					{ delay: CODE_MODE_ONCHANGE_DELAY }
    				),
    				lintGutter(),
    				basicSetup,
    				highlighter,
    				EditorView.domEventHandlers({ dblclick: handleDoubleClick }),
    				EditorView.updateListener.of(update => {
    					$$invalidate(8, editorState = update.state);

    					if (update.docChanged) {
    						onChangeCodeMirrorValueDebounced();
    					}
    				}),
    				json(),
    				search$1({ top: true }),
    				readOnlyCompartment.of(EditorState.readOnly.of(readOnly)),
    				tabSizeCompartment.of(EditorState.tabSize.of(tabSize)),
    				indentUnitCompartment.of(createIndentUnit(indentation)),
    				EditorView.lineWrapping
    			]
    		});

    		codeMirrorView = new EditorView({ state, parent: target });
    		return codeMirrorView;
    	}

    	function getCodeMirrorValue() {
    		return codeMirrorView
    		? normalization.unescapeValue(codeMirrorView.state.doc.toString())
    		: '';
    	}

    	/**
     * @param {ValidationError} validationError
     * @returns {RichValidationError}
     */
    	function toRichValidationError(validationError) {
    		const { path, message, isChildError } = validationError;
    		const { line, column, from, to } = findTextLocation(text, path);

    		return {
    			path,
    			isChildError,
    			line,
    			column,
    			from,
    			to,
    			message,
    			severity: 'warning',
    			actions: []
    		};
    	}

    	/**
     * @param {ParseError} parseError
     * @param {boolean} isRepairable
     * @returns {RichValidationError}
     */
    	function toRichParseError(parseError, isRepairable) {
    		const { line, column, position, message } = parseError;

    		return {
    			path: null,
    			line,
    			column,
    			from: position || 0,
    			to: position || 0,
    			severity: 'error',
    			message,
    			actions: isRepairable && !readOnly
    			? [
    					{
    						name: 'Auto repair',
    						apply: () => handleRepair()
    					}
    				]
    			: null
    		};
    	}

    	function setCodeMirrorValue(text, force = false) {
    		if (codeEditorDisabled && !force) {
    			debug('not applying text: editor is disabled');
    			return;
    		}

    		if (codeMirrorView && text !== codeMirrorText) {
    			debug('setCodeMirrorValue length=', text.length);
    			codeMirrorText = text;

    			// keep state
    			// to reset state: codeMirrorView.setState(EditorState.create({doc: text, extensions: ...}))
    			codeMirrorView.dispatch({
    				changes: {
    					from: 0,
    					to: codeMirrorView.state.doc.length,
    					insert: normalization.escapeValue(text)
    				}
    			});

    			updateCanUndoRedo();
    		}
    	}

    	function refresh() {
    		debug('refresh');
    		const index = codeMirrorView.state.doc.length;

    		// a trick to force Code Mirror to re-render the gutter values:
    		// insert a space at the end and then remove it again
    		codeMirrorView.dispatch({
    			changes: { from: index, to: index, insert: ' ' }
    		});

    		codeMirrorView.dispatch({
    			changes: { from: index, to: index + 1, insert: '' }
    		});
    	}

    	function forceUpdateText() {
    		debug('forceUpdateText', { escapeUnicodeCharacters });

    		if (codeMirrorView) {
    			codeMirrorView.dispatch({
    				changes: {
    					from: 0,
    					to: codeMirrorView.state.doc.length,
    					insert: normalization.escapeValue(text)
    				}
    			});
    		}
    	}

    	function onChangeCodeMirrorValue() {
    		if (onChangeDisabled || !codeMirrorView) {
    			return;
    		}

    		codeMirrorText = getCodeMirrorValue();

    		if (codeMirrorText !== text) {
    			const previousText = codeMirrorText;
    			debug('text changed');
    			$$invalidate(0, text = codeMirrorText);
    			updateCanUndoRedo();
    			emitOnChange(text, previousText);
    		}
    	}

    	function updateIndentation(indentation) {
    		if (codeMirrorView) {
    			debug('updateIndentation', indentation);

    			codeMirrorView.dispatch({
    				effects: indentUnitCompartment.reconfigure(createIndentUnit(indentation))
    			});
    		}
    	}

    	function updateTabSize(tabSize) {
    		if (codeMirrorView) {
    			debug('updateTabSize', tabSize);

    			codeMirrorView.dispatch({
    				effects: tabSizeCompartment.reconfigure(EditorState.tabSize.of(tabSize))
    			});
    		}
    	}

    	function updateReadOnly(readOnly) {
    		if (codeMirrorView) {
    			debug('updateReadOnly', readOnly);

    			codeMirrorView.dispatch({
    				effects: readOnlyCompartment.reconfigure(EditorState.readOnly.of(readOnly))
    			});
    		}
    	}

    	/**
     * @param {number | string} indentation
     * @returns {Extension}
     */
    	function createIndentUnit(indentation) {
    		return indentUnit.of(typeof indentation === 'number'
    		? (' ').repeat(indentation)
    		: indentation);
    	}

    	function updateCanUndoRedo() {
    		$$invalidate(10, canUndo = undoDepth(codeMirrorView.state) > 0);
    		$$invalidate(11, canRedo = redoDepth(codeMirrorView.state) > 0);
    		debug({ canUndo, canRedo });
    	}

    	// debounce the input: when pressing Enter at the end of a line, two change
    	// events are fired: one with the new Return character, and a second with
    	// indentation added on the new line. This causes a race condition when used
    	// for example in React. Debouncing the onChange events also results in not
    	// firing a change event with every character that a user types, but only as
    	// soon as the user stops typing.
    	const onChangeCodeMirrorValueDebounced = debounce$1(onChangeCodeMirrorValue, CODE_MODE_ONCHANGE_DELAY);

    	/**
     * @param {string} text
     * @param {string} previousText
     */
    	function emitOnChange(text, previousText) {
    		if (onChange) {
    			onChange(text, previousText);
    		}
    	}

    	let jsonStatus = JSON_STATUS_VALID;

    	/** @type {ParseError || null} */
    	let jsonParseError = null;

    	/**
     * @returns {Diagnostic[]}
     */
    	function validate() {
    		debug('validate');
    		$$invalidate(44, jsonStatus = JSON_STATUS_VALID);
    		$$invalidate(12, jsonParseError = null);
    		$$invalidate(9, validationErrors = []);

    		if (text.length > MAX_VALIDATABLE_SIZE) {
    			return [
    				{
    					from: 0,
    					to: 0,
    					message: 'Validation turned off: the document is too large',
    					severity: 'info'
    				}
    			];
    		}

    		if (text.length === 0) {
    			// new, empty document, do not try to parse
    			return [];
    		}

    		try {
    			const json = measure(() => JSON.parse(text), duration => debug(`validate: parsed json in ${duration} ms`));

    			if (!validator) {
    				return [];
    			}

    			$$invalidate(9, validationErrors = measure(() => validator(json), duration => debug(`validate: validated json in ${duration} ms`)));
    			return validationErrors.map(toRichValidationError);
    		} catch(err) {
    			const isRepairable = measure(() => canAutoRepair(text), duration => debug(`validate: checked whether repairable in ${duration} ms`));
    			$$invalidate(12, jsonParseError = normalizeJsonParseError(text, err.message || err.toString()));

    			$$invalidate(44, jsonStatus = isRepairable
    			? JSON_STATUS_REPAIRABLE
    			: JSON_STATUS_INVALID);

    			return [toRichParseError(jsonParseError, isRepairable)];
    		}
    	}

    	function canAutoRepair(text) {
    		if (text.length > MAX_AUTO_REPAIRABLE_SIZE) {
    			return false;
    		}

    		try {
    			JSON.parse(jsonrepair_min(text));
    			return true;
    		} catch(err) {
    			return false;
    		}
    	}

    	function triggerValidation() {
    		// a trick to trigger running diagnostics again
    		forceUpdateText();
    	}

    	const writable_props = [
    		'readOnly',
    		'mainMenuBar',
    		'statusBar',
    		'text',
    		'indentation',
    		'tabSize',
    		'escapeUnicodeCharacters',
    		'validator',
    		'onChange',
    		'onSwitchToTreeMode',
    		'onError',
    		'onFocus',
    		'onBlur',
    		'onRenderMenu',
    		'onSortModal',
    		'onTransformModal'
    	];

    	Object_1$4.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<CodeMode> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			codeMirrorRef = $$value;
    			$$invalidate(6, codeMirrorRef);
    		});
    	}

    	const func = () => handleSelectParseError(jsonParseError);

    	function div_binding_1($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			domCodeMode = $$value;
    			$$invalidate(7, domCodeMode);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('readOnly' in $$props) $$invalidate(1, readOnly = $$props.readOnly);
    		if ('mainMenuBar' in $$props) $$invalidate(2, mainMenuBar = $$props.mainMenuBar);
    		if ('statusBar' in $$props) $$invalidate(3, statusBar = $$props.statusBar);
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    		if ('indentation' in $$props) $$invalidate(28, indentation = $$props.indentation);
    		if ('tabSize' in $$props) $$invalidate(29, tabSize = $$props.tabSize);
    		if ('escapeUnicodeCharacters' in $$props) $$invalidate(30, escapeUnicodeCharacters = $$props.escapeUnicodeCharacters);
    		if ('validator' in $$props) $$invalidate(31, validator = $$props.validator);
    		if ('onChange' in $$props) $$invalidate(32, onChange = $$props.onChange);
    		if ('onSwitchToTreeMode' in $$props) $$invalidate(4, onSwitchToTreeMode = $$props.onSwitchToTreeMode);
    		if ('onError' in $$props) $$invalidate(33, onError = $$props.onError);
    		if ('onFocus' in $$props) $$invalidate(34, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(35, onBlur = $$props.onBlur);
    		if ('onRenderMenu' in $$props) $$invalidate(5, onRenderMenu = $$props.onRenderMenu);
    		if ('onSortModal' in $$props) $$invalidate(36, onSortModal = $$props.onSortModal);
    		if ('onTransformModal' in $$props) $$invalidate(37, onTransformModal = $$props.onTransformModal);
    	};

    	$$self.$capture_state = () => ({
    		faExclamationTriangle,
    		faWrench,
    		createDebug,
    		immutableJSONPatch: immutableJSONPatch.immutableJSONPatch,
    		revertJSONPatch: immutableJSONPatch.revertJSONPatch,
    		jsonrepair: jsonrepair_min,
    		debounce: debounce$1,
    		noop: noop$1,
    		uniqueId,
    		onDestroy,
    		onMount,
    		CODE_MODE_ONCHANGE_DELAY,
    		JSON_STATUS_INVALID,
    		JSON_STATUS_REPAIRABLE,
    		JSON_STATUS_VALID,
    		MAX_AUTO_REPAIRABLE_SIZE,
    		MAX_DOCUMENT_SIZE_CODE_MODE,
    		activeElementIsChildOf,
    		createNormalizationFunctions,
    		getWindow,
    		formatSize,
    		findTextLocation,
    		createFocusTracker,
    		Message,
    		ValidationErrorsOverview,
    		CodeMenu,
    		basicSetup,
    		EditorView,
    		Compartment,
    		EditorState,
    		keymap,
    		ViewUpdate,
    		indentWithTab,
    		redo,
    		redoDepth,
    		undo,
    		undoDepth,
    		linter,
    		lintGutter,
    		jsonLang: json,
    		indentUnit,
    		closeSearchPanel,
    		openSearchPanel,
    		search: search$1,
    		normalizeJsonParseError,
    		MAX_VALIDATABLE_SIZE,
    		measure,
    		jsonSourceMap,
    		StatusBar,
    		highlighter,
    		readOnly,
    		mainMenuBar,
    		statusBar,
    		text,
    		indentation,
    		tabSize,
    		escapeUnicodeCharacters,
    		validator,
    		onChange,
    		onSwitchToTreeMode,
    		onError,
    		onFocus,
    		onBlur,
    		onRenderMenu,
    		onSortModal,
    		onTransformModal,
    		debug,
    		formatCompactKeyBinding,
    		isSSR,
    		codeMirrorRef,
    		codeMirrorView,
    		codeMirrorText,
    		domCodeMode,
    		editorState,
    		onChangeDisabled,
    		acceptTooLarge,
    		validationErrors,
    		readOnlyCompartment,
    		indentUnitCompartment,
    		tabSizeCompartment,
    		previousEscapeUnicodeCharacters,
    		canUndo,
    		canRedo,
    		sortModalId,
    		transformModalId,
    		focus,
    		modalOpen,
    		patch,
    		handleFormat,
    		handleCompact,
    		handleRepair,
    		handleSort,
    		openTransformModal,
    		handleTransform,
    		handleToggleSearch,
    		handleUndo,
    		handleRedo,
    		handleAcceptTooLarge,
    		cancelLoadTooLarge,
    		handleSelectValidationError,
    		handleSelectParseError,
    		setSelection,
    		handleDoubleClick,
    		createCodeMirrorView,
    		getCodeMirrorValue,
    		toRichValidationError,
    		toRichParseError,
    		setCodeMirrorValue,
    		refresh,
    		forceUpdateText,
    		onChangeCodeMirrorValue,
    		updateIndentation,
    		updateTabSize,
    		updateReadOnly,
    		createIndentUnit,
    		updateCanUndoRedo,
    		onChangeCodeMirrorValueDebounced,
    		emitOnChange,
    		jsonStatus,
    		jsonParseError,
    		validate,
    		canAutoRepair,
    		triggerValidation,
    		repairActions,
    		normalization,
    		codeEditorDisabled,
    		tooLarge,
    		isNewDocument
    	});

    	$$self.$inject_state = $$props => {
    		if ('readOnly' in $$props) $$invalidate(1, readOnly = $$props.readOnly);
    		if ('mainMenuBar' in $$props) $$invalidate(2, mainMenuBar = $$props.mainMenuBar);
    		if ('statusBar' in $$props) $$invalidate(3, statusBar = $$props.statusBar);
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    		if ('indentation' in $$props) $$invalidate(28, indentation = $$props.indentation);
    		if ('tabSize' in $$props) $$invalidate(29, tabSize = $$props.tabSize);
    		if ('escapeUnicodeCharacters' in $$props) $$invalidate(30, escapeUnicodeCharacters = $$props.escapeUnicodeCharacters);
    		if ('validator' in $$props) $$invalidate(31, validator = $$props.validator);
    		if ('onChange' in $$props) $$invalidate(32, onChange = $$props.onChange);
    		if ('onSwitchToTreeMode' in $$props) $$invalidate(4, onSwitchToTreeMode = $$props.onSwitchToTreeMode);
    		if ('onError' in $$props) $$invalidate(33, onError = $$props.onError);
    		if ('onFocus' in $$props) $$invalidate(34, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(35, onBlur = $$props.onBlur);
    		if ('onRenderMenu' in $$props) $$invalidate(5, onRenderMenu = $$props.onRenderMenu);
    		if ('onSortModal' in $$props) $$invalidate(36, onSortModal = $$props.onSortModal);
    		if ('onTransformModal' in $$props) $$invalidate(37, onTransformModal = $$props.onTransformModal);
    		if ('codeMirrorRef' in $$props) $$invalidate(6, codeMirrorRef = $$props.codeMirrorRef);
    		if ('codeMirrorView' in $$props) codeMirrorView = $$props.codeMirrorView;
    		if ('codeMirrorText' in $$props) codeMirrorText = $$props.codeMirrorText;
    		if ('domCodeMode' in $$props) $$invalidate(7, domCodeMode = $$props.domCodeMode);
    		if ('editorState' in $$props) $$invalidate(8, editorState = $$props.editorState);
    		if ('onChangeDisabled' in $$props) onChangeDisabled = $$props.onChangeDisabled;
    		if ('acceptTooLarge' in $$props) $$invalidate(42, acceptTooLarge = $$props.acceptTooLarge);
    		if ('validationErrors' in $$props) $$invalidate(9, validationErrors = $$props.validationErrors);
    		if ('previousEscapeUnicodeCharacters' in $$props) $$invalidate(43, previousEscapeUnicodeCharacters = $$props.previousEscapeUnicodeCharacters);
    		if ('canUndo' in $$props) $$invalidate(10, canUndo = $$props.canUndo);
    		if ('canRedo' in $$props) $$invalidate(11, canRedo = $$props.canRedo);
    		if ('modalOpen' in $$props) modalOpen = $$props.modalOpen;
    		if ('jsonStatus' in $$props) $$invalidate(44, jsonStatus = $$props.jsonStatus);
    		if ('jsonParseError' in $$props) $$invalidate(12, jsonParseError = $$props.jsonParseError);
    		if ('repairActions' in $$props) $$invalidate(13, repairActions = $$props.repairActions);
    		if ('normalization' in $$props) normalization = $$props.normalization;
    		if ('codeEditorDisabled' in $$props) $$invalidate(14, codeEditorDisabled = $$props.codeEditorDisabled);
    		if ('tooLarge' in $$props) $$invalidate(45, tooLarge = $$props.tooLarge);
    		if ('isNewDocument' in $$props) $$invalidate(15, isNewDocument = $$props.isNewDocument);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*text*/ 1) {
    			$$invalidate(15, isNewDocument = text.length === 0);
    		}

    		if ($$self.$$.dirty[0] & /*text*/ 1) {
    			$$invalidate(45, tooLarge = text && text.length > MAX_DOCUMENT_SIZE_CODE_MODE);
    		}

    		if ($$self.$$.dirty[1] & /*tooLarge, acceptTooLarge*/ 18432) {
    			$$invalidate(14, codeEditorDisabled = tooLarge && !acceptTooLarge);
    		}

    		if ($$self.$$.dirty[0] & /*escapeUnicodeCharacters*/ 1073741824) {
    			normalization = createNormalizationFunctions({
    				escapeControlCharacters: false,
    				escapeUnicodeCharacters
    			});
    		}

    		if ($$self.$$.dirty[0] & /*text*/ 1) {
    			setCodeMirrorValue(text);
    		}

    		if ($$self.$$.dirty[0] & /*indentation*/ 268435456) {
    			updateIndentation(indentation);
    		}

    		if ($$self.$$.dirty[0] & /*tabSize*/ 536870912) {
    			updateTabSize(tabSize);
    		}

    		if ($$self.$$.dirty[0] & /*readOnly*/ 2) {
    			updateReadOnly(readOnly);
    		}

    		if ($$self.$$.dirty[0] & /*escapeUnicodeCharacters*/ 1073741824 | $$self.$$.dirty[1] & /*previousEscapeUnicodeCharacters*/ 4096) {
    			{
    				if (previousEscapeUnicodeCharacters !== escapeUnicodeCharacters) {
    					$$invalidate(43, previousEscapeUnicodeCharacters = escapeUnicodeCharacters);
    					forceUpdateText();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*readOnly*/ 2 | $$self.$$.dirty[1] & /*validator*/ 1) {
    			// we pass unused arguments to trigger the editor to update the diagnostics
    			// passing readOnly is to update the action buttons in case of invalid JSON
    			triggerValidation();
    		}

    		if ($$self.$$.dirty[0] & /*readOnly*/ 2 | $$self.$$.dirty[1] & /*jsonStatus*/ 8192) {
    			$$invalidate(13, repairActions = jsonStatus === JSON_STATUS_REPAIRABLE && !readOnly
    			? [
    					{
    						icon: faWrench,
    						text: 'Auto repair',
    						title: 'Automatically repair JSON',
    						onClick: handleRepair
    					}
    				]
    			: []);
    		}
    	};

    	return [
    		text,
    		readOnly,
    		mainMenuBar,
    		statusBar,
    		onSwitchToTreeMode,
    		onRenderMenu,
    		codeMirrorRef,
    		domCodeMode,
    		editorState,
    		validationErrors,
    		canUndo,
    		canRedo,
    		jsonParseError,
    		repairActions,
    		codeEditorDisabled,
    		isNewDocument,
    		isSSR,
    		handleFormat,
    		handleCompact,
    		handleSort,
    		handleTransform,
    		handleToggleSearch,
    		handleUndo,
    		handleRedo,
    		handleAcceptTooLarge,
    		cancelLoadTooLarge,
    		handleSelectValidationError,
    		handleSelectParseError,
    		indentation,
    		tabSize,
    		escapeUnicodeCharacters,
    		validator,
    		onChange,
    		onError,
    		onFocus,
    		onBlur,
    		onSortModal,
    		onTransformModal,
    		focus,
    		patch,
    		openTransformModal,
    		refresh,
    		acceptTooLarge,
    		previousEscapeUnicodeCharacters,
    		jsonStatus,
    		tooLarge,
    		div_binding,
    		func,
    		div_binding_1
    	];
    }

    class CodeMode extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$J,
    			create_fragment$J,
    			not_equal,
    			{
    				readOnly: 1,
    				mainMenuBar: 2,
    				statusBar: 3,
    				text: 0,
    				indentation: 28,
    				tabSize: 29,
    				escapeUnicodeCharacters: 30,
    				validator: 31,
    				onChange: 32,
    				onSwitchToTreeMode: 4,
    				onError: 33,
    				onFocus: 34,
    				onBlur: 35,
    				onRenderMenu: 5,
    				onSortModal: 36,
    				onTransformModal: 37,
    				focus: 38,
    				patch: 39,
    				openTransformModal: 40,
    				refresh: 41
    			},
    			null,
    			[-1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CodeMode",
    			options,
    			id: create_fragment$J.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*onError*/ ctx[33] === undefined && !('onError' in props)) {
    			console_1$5.warn("<CodeMode> was created without expected prop 'onError'");
    		}

    		if (/*onSortModal*/ ctx[36] === undefined && !('onSortModal' in props)) {
    			console_1$5.warn("<CodeMode> was created without expected prop 'onSortModal'");
    		}

    		if (/*onTransformModal*/ ctx[37] === undefined && !('onTransformModal' in props)) {
    			console_1$5.warn("<CodeMode> was created without expected prop 'onTransformModal'");
    		}
    	}

    	get readOnly() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readOnly(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mainMenuBar() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mainMenuBar(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get statusBar() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set statusBar(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get indentation() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set indentation(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tabSize() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tabSize(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get escapeUnicodeCharacters() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set escapeUnicodeCharacters(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validator() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validator(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChange() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChange(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSwitchToTreeMode() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSwitchToTreeMode(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onError() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onError(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onFocus() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onFocus(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onBlur() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onBlur(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRenderMenu() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRenderMenu(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSortModal() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSortModal(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTransformModal() {
    		throw new Error("<CodeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTransformModal(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		return this.$$.ctx[38];
    	}

    	set focus(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get patch() {
    		return this.$$.ctx[39];
    	}

    	set patch(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get openTransformModal() {
    		return this.$$.ctx[40];
    	}

    	set openTransformModal(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get refresh() {
    		return this.$$.ctx[41];
    	}

    	set refresh(value) {
    		throw new Error("<CodeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const debug = createDebug('jsoneditor:AutoScrollHandler');
    function createAutoScrollHandler(scrollableElement) {
        debug('createAutoScrollHandler', scrollableElement);
        let autoScrollSpeed; // pixels per second
        let autoScrollTimer;
        function calculateSpeed(diff) {
            return diff < 20
                ? AUTO_SCROLL_SPEED_SLOW
                : diff < 50
                    ? AUTO_SCROLL_SPEED_NORMAL
                    : AUTO_SCROLL_SPEED_FAST;
        }
        function autoScrollCallback() {
            if (scrollableElement) {
                // debug('auto scroll...')
                const diff = autoScrollSpeed * (AUTO_SCROLL_INTERVAL / 1000);
                scrollableElement.scrollTop += diff;
            }
        }
        function startAutoScroll(speed) {
            if (!autoScrollTimer || speed !== autoScrollSpeed) {
                stopAutoScroll();
                debug('startAutoScroll', speed);
                autoScrollSpeed = speed;
                autoScrollTimer = setInterval(autoScrollCallback, AUTO_SCROLL_INTERVAL);
            }
        }
        function stopAutoScroll() {
            if (autoScrollTimer) {
                debug('stopAutoScroll');
                clearInterval(autoScrollTimer);
                autoScrollTimer = undefined;
                autoScrollSpeed = undefined;
            }
        }
        function onDrag(event) {
            if (scrollableElement) {
                const y = event.clientY;
                const { top, bottom } = scrollableElement.getBoundingClientRect();
                if (y < top) {
                    const speed = calculateSpeed(top - y);
                    startAutoScroll(-speed);
                }
                else if (y > bottom) {
                    const speed = calculateSpeed(y - bottom);
                    startAutoScroll(speed);
                }
                else {
                    stopAutoScroll();
                }
            }
        }
        function onDragEnd() {
            stopAutoScroll();
        }
        return {
            onDrag,
            onDragEnd
        };
    }

    // Robert Penner's easeInOutQuad

    // find the rest of his easing functions here: http://robertpenner.com/easing/
    // find them exported for ES6 consumption here: https://github.com/jaxgeller/ez.js

    var easeInOutQuad = (t, b, c, d) => {
      t /= d / 2;
      if (t < 1) return (c / 2) * t * t + b
      t--;
      return (-c / 2) * (t * (t - 2) - 1) + b
    };

    const createJump = () => {
      // private variable cache
      // no variables are created during a jump, preventing memory leaks

      let container; // container element to be scrolled       (node)
      let element; // element to scroll to                   (node)

      let start; // where scroll starts                    (px)
      let stop; // where scroll stops                     (px)

      let offset; // adjustment from the stop position      (px)
      let easing; // easing function                        (function)
      let a11y; // accessibility support flag             (boolean)

      let distance; // distance of scroll                     (px)
      let duration; // scroll duration                        (ms)

      let timeStart; // time scroll started                    (ms)
      let timeElapsed; // time spent scrolling thus far          (ms)

      let next; // next scroll position                   (px)

      let callback; // to call when done scrolling            (function)

      let scrolling; // true whilst scrolling                  (boolean)

      // scroll position helper

      function location() {
        return container.scrollY || container.pageYOffset || container.scrollTop
      }

      // element offset helper

      function top(element) {
        const elementTop = element.getBoundingClientRect().top;
        const containerTop = container.getBoundingClientRect ? container.getBoundingClientRect().top : 0;

        return elementTop - containerTop + start
      }

      // scrollTo helper

      function scrollTo(top) {
        container.scrollTo
          ? container.scrollTo(0, top) // window
          : (container.scrollTop = top); // custom container
      }

      // rAF loop helper

      function loop(timeCurrent) {
        // store time scroll started, if not started already
        if (!timeStart) {
          timeStart = timeCurrent;
        }

        // determine time spent scrolling so far
        timeElapsed = timeCurrent - timeStart;

        // calculate next scroll position
        next = easing(timeElapsed, start, distance, duration);

        // scroll to it
        scrollTo(next);

        scrolling = true;

        // check progress
        timeElapsed < duration
          ? requestAnimationFrame(loop) // continue scroll loop
          : done(); // scrolling is done
      }

      // scroll finished helper

      function done() {
        // account for rAF time rounding inaccuracies
        scrollTo(start + distance);

        // if scrolling to an element, and accessibility is enabled
        if (element && a11y) {
          // add tabindex indicating programmatic focus
          element.setAttribute('tabindex', '-1');

          // focus the element
          element.focus();
        }

        // if it exists, fire the callback
        if (typeof callback === 'function') {
          callback();
        }

        // reset time for next jump
        timeStart = false;

        // we're done scrolling
        scrolling = false;
      }

      // API

      function jump(target, options = {}) {
        // resolve options, or use defaults
        duration = options.duration || 1000;
        offset = options.offset || 0;
        callback = options.callback; // "undefined" is a suitable default, and won't be called
        easing = options.easing || easeInOutQuad;
        a11y = options.a11y || false;

        // resolve container
        switch (typeof options.container) {
          case 'object':
            // we assume container is an HTML element (Node)
            container = options.container;
            break

          case 'string':
            container = document.querySelector(options.container);
            break

          default:
            container = window;
        }

        // cache starting position
        start = location();

        // resolve target
        switch (typeof target) {
          // scroll from current position
          case 'number':
            element = undefined; // no element to scroll to
            a11y = false; // make sure accessibility is off
            stop = start + target;
            break

          // scroll to element (node)
          // bounding rect is relative to the viewport
          case 'object':
            element = target;
            stop = top(element);
            break

          // scroll to element (selector)
          // bounding rect is relative to the viewport
          case 'string':
            element = document.querySelector(target);
            stop = top(element);
            break
        }

        // resolve scroll distance, accounting for offset
        distance = stop - start + offset;

        // resolve duration
        switch (typeof options.duration) {
          // number in ms
          case 'number':
            duration = options.duration;
            break

          // function passed the distance of the scroll
          case 'function':
            duration = options.duration(distance);
            break
        }

        // start the loop if we're not already scrolling
        if (!scrolling) {
          requestAnimationFrame(loop);
        } else {
          // reset time for next jump
          timeStart = false;
        }
      }

      // expose only the jump method
      return jump
    };

    const MAX_HISTORY_ITEMS = 1000;
    function createHistory(options = {}) {
        const maxItems = options.maxItems || MAX_HISTORY_ITEMS;
        /**
         * items in history are sorted from newest first to oldest last
         * @type {HistoryItem[]}
         */
        let items = [];
        /**
         * @type {number}
         */
        let index = 0;
        /**
         * @return {boolean}
         */
        function canUndo() {
            return index < items.length;
        }
        /**
         * @return {boolean}
         */
        function canRedo() {
            return index > 0;
        }
        function getState() {
            return {
                canUndo: canUndo(),
                canRedo: canRedo(),
                length: items.length
            };
        }
        function handleChange() {
            if (options.onChange) {
                options.onChange(getState());
            }
        }
        /**
         * @param {HistoryItem} item
         */
        function add(item) {
            items = [item].concat(items.slice(index)).slice(0, maxItems);
            index = 0;
            handleChange();
        }
        function clear() {
            items = [];
            index = 0;
            handleChange();
        }
        /**
         * @return {HistoryItem | undefined}
         */
        function undo() {
            if (canUndo()) {
                const item = items[index];
                index += 1;
                handleChange();
                return item;
            }
            return undefined;
        }
        /**
         * @return {HistoryItem | undefined}
         */
        function redo() {
            if (canRedo()) {
                index -= 1;
                handleChange();
                return items[index];
            }
            return undefined;
        }
        return {
            add,
            clear,
            getState,
            undo,
            redo
        };
    }

    /**
     * Find a unique name. Suffix the name with ' (copy)', '(copy 2)', etc
     * until a unique name is found
     * @param {string} name
     * @param {string[]} keys    Array with existing keys
     */
    function findUniqueName(name, keys) {
      const keysSet = new Set(keys);

      // remove any " (copy)" or " (copy 2)" suffix from the name
      const nameWithoutCopySuffix = name.replace(/ \(copy( \d+)?\)$/, '');

      let validName = name;
      let i = 1;

      while (keysSet.has(validName)) {
        const copy = 'copy' + (i > 1 ? ' ' + i : '');
        validName = `${nameWithoutCopySuffix} (${copy})`;
        i++;
      }

      return validName
    }

    /**
     * Truncate a text to a maximum length.
     * When truncated, the text will pe appended with ellipsis '...'
     * @param {string} text Text to be truncated
     * @param {number} maxLength Maximum allowed length for the text including ellipsis
     */
    function truncate(text, maxLength) {
      const ellipsis = '...';
      const maxTextLength = maxLength - ellipsis.length;

      return text.length > maxLength ? text.substr(0, maxTextLength) + ellipsis : text
    }

    /**
     * Cast contents of a string to the correct type.
     * This can be a string, a number, a boolean, null, undefined, etc
     * @param {string} str
     * @return {string | number | boolean | null | undefined} parsed string
     */
    function parseString(str) {
      if (str === '') {
        return ''
      }

      const lower = str.toLowerCase();
      if (lower === 'null') {
        return null
      }
      if (lower === 'true') {
        return true
      }
      if (lower === 'false') {
        return false
      }
      if (lower === 'undefined') {
        return undefined
      }

      const num = Number(str); // will nicely fail with '123ab'
      const numFloat = parseFloat(str); // will nicely fail with '  '
      if (!isNaN(num) && !isNaN(numFloat)) {
        return num
      }

      return str
    }

    /**
     * Create a JSONPatch for an insert operation.
     *
     * This function needs the current data in order to be able to determine
     * a unique property name for the inserted node in case of duplicating
     * and object property
     *
     * @param {JSON} json
     * @param {JSON} state
     * @param {Path} path
     * @param {ClipboardValues} values
     * @return {JSONPatchDocument}
     */
    // TODO: write tests
    function insertBefore(json, state, path, values) {
        // TODO: find a better name and define datastructure for values
        const parentPath = initial(path);
        const parent = immutableJSONPatch.getIn(json, parentPath);
        if (Array.isArray(parent)) {
            // the path is parsed from a JSONPatch operation,
            // so array indices are a string which we have to parse into a number
            const offset = parseInt(last(path), 10);
            return values.map((entry, index) => ({
                op: 'add',
                path: immutableJSONPatch.compileJSONPointer(parentPath.concat(offset + index)),
                value: entry.value
            }));
        }
        else {
            // 'object'
            const afterKey = last(path);
            const keys = getKeys(state, parentPath);
            const nextKeys = getNextKeys(keys, afterKey, true);
            return [
                // insert new values
                ...values.map((entry) => {
                    const newProp = findUniqueName(entry.key, keys);
                    return {
                        op: 'add',
                        path: immutableJSONPatch.compileJSONPointer(parentPath.concat(newProp)),
                        value: entry.value
                    };
                }),
                // move all lower down keys so the inserted key will maintain it's position
                ...nextKeys.map((key) => moveDown(parentPath, key))
            ];
        }
    }
    /**
     * Create a JSONPatch for an append operation. The values will be appended
     * to the end of the array or object.
     *
     * This function needs the current data in order to be able to determine
     * a unique property name for the inserted node in case of duplicating
     * and object property
     *
     * @param {JSON} json
     * @param {Path} path
     * @param {ClipboardValues} values
     * @return {JSONPatchDocument}
     */
    function append(json, path, values) {
        // TODO: find a better name and define data structure for values
        const parent = immutableJSONPatch.getIn(json, path);
        if (Array.isArray(parent)) {
            const offset = parent.length;
            return values.map((entry, index) => ({
                op: 'add',
                path: immutableJSONPatch.compileJSONPointer(path.concat(offset + index)),
                value: entry.value
            }));
        }
        else {
            // 'object'
            return values.map((entry) => {
                const newProp = findUniqueName(entry.key, Object.keys(parent));
                return {
                    op: 'add',
                    path: immutableJSONPatch.compileJSONPointer(path.concat(newProp)),
                    value: entry.value
                };
            });
        }
    }
    /**
     * Rename an object key
     * Not applicable to arrays
     *
     * @param {Path} parentPath
     * @param {string[]} keys
     * @param {string} oldKey
     * @param {string} newKey
     * @returns {JSONPatchDocument}
     */
    function rename(parentPath, keys, oldKey, newKey) {
        const filteredKeys = keys.filter((key) => key !== oldKey);
        const newKeyUnique = findUniqueName(newKey, filteredKeys);
        const nextKeys = getNextKeys(keys, oldKey, false);
        return [
            // rename a key
            {
                op: 'move',
                from: immutableJSONPatch.compileJSONPointer(parentPath.concat(oldKey)),
                path: immutableJSONPatch.compileJSONPointer(parentPath.concat(newKeyUnique))
            },
            // move all lower down keys so the renamed key will maintain it's position
            ...nextKeys.map((key) => moveDown(parentPath, key))
        ];
    }
    /**
     * Create a JSONPatch for an insert operation.
     *
     * This function needs the current data in order to be able to determine
     * a unique property name for the inserted node in case of duplicating
     * and object property
     *
     * @param {JSON} json
     * @param {JSON} state
     * @param {Path[]} paths
     * @param {ClipboardValues} values
     * @return {JSONPatchDocument}
     */
    function replace(json, state, paths, values) {
        // TODO: find a better name and define data structure for values
        const firstPath = head(paths);
        const parentPath = initial(firstPath);
        const parent = immutableJSONPatch.getIn(json, parentPath);
        if (Array.isArray(parent)) {
            const firstPath = head(paths);
            const offset = firstPath ? parseInt(last(firstPath), 10) : 0;
            return [
                // remove operations
                ...removeAll(paths),
                // insert operations
                ...values.map((entry, index) => ({
                    op: 'add',
                    path: immutableJSONPatch.compileJSONPointer(parentPath.concat(index + offset)),
                    value: entry.value
                }))
            ];
        }
        else {
            // parent is Object
            // if we're going to replace an existing object with key "a" with a new
            // key "a", we must not create a new unique name "a (copy)".
            const lastPath = last(paths);
            const parentPath = initial(lastPath);
            const beforeKey = last(lastPath);
            const keys = getKeys(state, parentPath);
            const nextKeys = getNextKeys(keys, beforeKey, false);
            const removeKeys = new Set(paths.map((path) => last(path)));
            const filteredKeys = keys.filter((key) => !removeKeys.has(key));
            return [
                // remove operations
                ...removeAll(paths),
                // insert operations
                ...values.map((entry) => {
                    const newProp = findUniqueName(entry.key, filteredKeys);
                    return {
                        op: 'add',
                        path: immutableJSONPatch.compileJSONPointer(parentPath.concat(newProp)),
                        value: entry.value
                    };
                }),
                // move down operations
                // move all lower down keys so the renamed key will maintain it's position
                ...nextKeys.map((key) => moveDown(parentPath, key))
            ];
        }
    }
    /**
     * Create a JSONPatch for a duplicate action.
     *
     * This function needs the current data in order to be able to determine
     * a unique property name for the duplicated node in case of duplicating
     * and object property
     *
     * @param {JSON} json
     * @param {JSON} state
     * @param {Path[]} paths
     * @return {JSONPatchDocument}
     */
    function duplicate(json, state, paths) {
        // FIXME: here we assume selection.paths is sorted correctly, that's a dangerous assumption
        const lastPath = last(paths);
        if (isEmpty(lastPath)) {
            throw new Error('Cannot duplicate root object');
        }
        const parentPath = initial(lastPath);
        const beforeKey = last(lastPath);
        const parent = immutableJSONPatch.getIn(json, parentPath);
        if (Array.isArray(parent)) {
            const lastPath = last(paths);
            const offset = lastPath ? parseInt(last(lastPath), 10) + 1 : 0;
            return [
                // copy operations
                ...paths.map((path, index) => ({
                    op: 'copy',
                    from: immutableJSONPatch.compileJSONPointer(path),
                    path: immutableJSONPatch.compileJSONPointer(parentPath.concat(index + offset))
                }))
            ];
        }
        else {
            // 'object'
            const keys = getKeys(state, parentPath);
            const nextKeys = getNextKeys(keys, beforeKey, false);
            return [
                // copy operations
                ...paths.map((path) => {
                    const prop = last(path);
                    const newProp = findUniqueName(prop, keys);
                    return {
                        op: 'copy',
                        from: immutableJSONPatch.compileJSONPointer(path),
                        path: immutableJSONPatch.compileJSONPointer(parentPath.concat(newProp))
                    };
                }),
                // move down operations
                // move all lower down keys so the renamed key will maintain it's position
                ...nextKeys.map((key) => moveDown(parentPath, key))
            ];
        }
    }
    /**
     * Create a JSONPatch for an extract action.
     *
     * @param {JSON} json
     * @param {JSON} state
     * @param {Selection} selection
     * @return {JSONPatchDocument}
     */
    // TODO: write unit tests
    function extract(json, state, selection) {
        if (selection.type === SELECTION_TYPE.VALUE) {
            return [
                {
                    op: 'move',
                    from: immutableJSONPatch.compileJSONPointer(selection.focusPath),
                    path: ''
                }
            ];
        }
        if (selection.type === SELECTION_TYPE.MULTI) {
            const parentPath = initial(selection.focusPath);
            const parent = immutableJSONPatch.getIn(json, parentPath);
            if (Array.isArray(parent)) {
                const value = selection.paths.map((path) => {
                    const index = last(path);
                    return parent[index];
                });
                return [
                    {
                        op: 'replace',
                        path: '',
                        value
                    }
                ];
            }
            else {
                // object
                const value = {};
                selection.paths.forEach((path) => {
                    const key = last(path);
                    value[key] = parent[key];
                });
                return [
                    {
                        op: 'replace',
                        path: '',
                        value
                    }
                ];
            }
        }
        // this should never happen
        throw new Error('Cannot extract: unsupported type of selection ' + JSON.stringify(selection));
    }
    /**
     * @param {JSON} json
     * @param {JSON} state
     * @param {Selection} selection
     * @param {string} clipboardText
     * @return {JSONPatchDocument}
     */
    // TODO: write unit tests
    function insert(json, state, selection, clipboardText) {
        if (selection.type === SELECTION_TYPE.KEY) {
            // rename key
            const clipboard = parseAndRepairOrUndefined(clipboardText);
            const parentPath = initial(selection.focusPath);
            const keys = getKeys(state, parentPath);
            const oldKey = last(selection.focusPath);
            const newKey = typeof clipboard === 'string' ? clipboard : clipboardText;
            return rename(parentPath, keys, oldKey, newKey);
        }
        if (selection.type === SELECTION_TYPE.VALUE ||
            (selection.type === SELECTION_TYPE.MULTI && isEmpty(selection.focusPath)) // root selected
        ) {
            // replace selected value (new value can be primitive or an array/object with contents)
            try {
                return [
                    {
                        op: 'replace',
                        path: immutableJSONPatch.compileJSONPointer(selection.focusPath),
                        value: parsePartialJson(clipboardText, parseAndRepair)
                    }
                ];
            }
            catch (err) {
                // parsing failed -> just paste the raw text as value
                return [
                    {
                        op: 'replace',
                        path: immutableJSONPatch.compileJSONPointer(selection.focusPath),
                        value: clipboardText
                    }
                ];
            }
        }
        if (selection.type === SELECTION_TYPE.MULTI) {
            const newValues = clipboardToValues(clipboardText);
            return replace(json, state, selection.paths, newValues);
        }
        if (selection.type === SELECTION_TYPE.AFTER) {
            const newValues = clipboardToValues(clipboardText);
            const path = selection.focusPath;
            const parentPath = initial(path);
            const parent = immutableJSONPatch.getIn(json, parentPath);
            if (Array.isArray(parent)) {
                const index = last(path);
                const nextItemPath = parentPath.concat([index + 1]);
                return insertBefore(json, state, nextItemPath, newValues);
            }
            else {
                // value is an Object
                const key = last(path);
                const keys = getKeys(state, parentPath);
                if (isEmpty(keys) || last(keys) === key) {
                    return append(json, parentPath, newValues);
                }
                else {
                    const index = keys.indexOf(key);
                    const nextKey = keys[index + 1];
                    const nextKeyPath = parentPath.concat([nextKey]);
                    return insertBefore(json, state, nextKeyPath, newValues);
                }
            }
        }
        if (selection.type === SELECTION_TYPE.INSIDE) {
            const newValues = clipboardToValues(clipboardText);
            const path = selection.focusPath;
            const value = immutableJSONPatch.getIn(json, path);
            if (Array.isArray(value)) {
                const firstItemPath = path.concat([0]);
                return insertBefore(json, state, firstItemPath, newValues);
            }
            else {
                // value is an Object
                const keys = getKeys(state, path);
                if (isEmpty(keys)) {
                    return append(json, path, newValues);
                }
                else {
                    const firstKey = head(keys);
                    const firstKeyPath = path.concat([firstKey]);
                    return insertBefore(json, state, firstKeyPath, newValues);
                }
            }
        }
        // this should never happen
        throw new Error('Cannot insert: unsupported type of selection ' + JSON.stringify(selection));
    }
    /**
     * @param {JSON} json
     * @param {JSON} state
     * @param {Selection} selection
     * @param {DragInsideAction} dragInsideAction
     */
    function moveInsideParent(json, state, selection, dragInsideAction) {
        const { beforePath, append } = dragInsideAction;
        const parentPath = initial(selection.focusPath);
        const parent = immutableJSONPatch.getIn(json, parentPath);
        if (append ||
            (beforePath && pathStartsWith(beforePath, parentPath) && beforePath.length > parentPath.length)) {
            const startPath = selection.paths ? head(selection.paths) : selection.focusPath;
            const endPath = selection.paths ? last(selection.paths) : selection.focusPath;
            const startKey = last(startPath);
            const endKey = last(endPath);
            const toKey = beforePath ? beforePath[parentPath.length] : undefined;
            if (isObject$1(parent)) {
                const keys = immutableJSONPatch.getIn(state, parentPath.concat(STATE_KEYS));
                const startIndex = keys.indexOf(startKey);
                const endIndex = keys.indexOf(endKey);
                const toIndex = append ? keys.length : keys.indexOf(toKey);
                if (startIndex !== -1 && endIndex !== -1 && toIndex !== -1) {
                    if (toIndex > startIndex) {
                        // moving down
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore
                        return [...keys.slice(startIndex, endIndex + 1), ...keys.slice(toIndex, keys.length)].map((key) => moveDown(parentPath, key));
                    }
                    else {
                        // moving up
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore
                        return [...keys.slice(toIndex, startIndex), ...keys.slice(endIndex + 1, keys.length)].map((key) => moveDown(parentPath, key));
                    }
                }
            }
            else {
                // array
                const startIndex = startKey;
                const endIndex = endKey;
                const toIndex = toKey;
                const count = endIndex - startIndex + 1;
                if (toIndex < startIndex) {
                    // move up
                    const operations = times(count, (offset) => {
                        return {
                            op: 'move',
                            from: immutableJSONPatch.compileJSONPointer(parentPath.concat(startIndex + offset)),
                            path: immutableJSONPatch.compileJSONPointer(parentPath.concat(toIndex + offset))
                        };
                    });
                    // debug('moveInsideParent', { startIndex, endIndex, toIndex, count, operations })
                    return operations;
                }
                else {
                    // move down
                    const operations = times(count, () => {
                        return {
                            op: 'move',
                            from: immutableJSONPatch.compileJSONPointer(parentPath.concat(startIndex)),
                            path: immutableJSONPatch.compileJSONPointer(parentPath.concat(toIndex))
                        };
                    });
                    // debug('moveInsideParent', { startIndex, endIndex, toIndex, count, operations })
                    return operations;
                }
            }
        }
        // TODO: throw exception?
        return undefined;
    }
    function createNewValue(json, selection, type) {
        if (type === 'object') {
            return {};
        }
        if (type === 'array') {
            return [];
        }
        if (type === 'structure') {
            const parentPath = getParentPath(selection);
            const parent = immutableJSONPatch.getIn(json, parentPath);
            if (Array.isArray(parent) && !isEmpty(parent)) {
                const jsonExample = head(parent);
                if (isObjectOrArray(jsonExample)) {
                    return cloneDeepWith(jsonExample, (value) => {
                        return Array.isArray(value)
                            ? []
                            : isObject$1(value)
                                ? undefined // leave object as is, will recurse into it
                                : '';
                    });
                }
                else {
                    // just a primitive value
                    return '';
                }
            }
        }
        // type === value,
        // or type === structure but the parent is no array or an array containing
        // primitive values (and no objects having any structure).
        return '';
    }
    /**
     * Create a JSONPatch for a multiple remove operation
     * @param {Path[]} paths
     * @return {JSONPatchDocument}
     */
    function removeAll(paths) {
        return paths
            .map((path) => ({
            op: 'remove',
            path: immutableJSONPatch.compileJSONPointer(path)
        }))
            .reverse(); // reverse is needed for arrays: delete the last index first
    }
    // helper function to move a key down in an object,
    // so another key can get positioned before the moved down keys
    function moveDown(parentPath, key) {
        return {
            op: 'move',
            from: immutableJSONPatch.compileJSONPointer(parentPath.concat(key)),
            path: immutableJSONPatch.compileJSONPointer(parentPath.concat(key))
        };
    }
    /**
     * @param {string} clipboardText
     * @returns {Array.<{key: string, value: *}>}
     */
    function clipboardToValues(clipboardText) {
        const textIsObject = /^\s*{/.test(clipboardText);
        const textIsArray = /^\s*\[/.test(clipboardText);
        const clipboardOriginal = parseAndRepairOrUndefined(clipboardText);
        const clipboardRepaired = clipboardOriginal !== undefined
            ? clipboardOriginal
            : parsePartialJson(clipboardText, parseAndRepair);
        if ((textIsObject && isObject$1(clipboardRepaired)) ||
            (textIsArray && Array.isArray(clipboardRepaired))) {
            return [{ key: 'New item', value: clipboardRepaired }];
        }
        if (Array.isArray(clipboardRepaired)) {
            return clipboardRepaired.map((value, index) => {
                return { key: 'New item ' + index, value };
            });
        }
        if (isObject$1(clipboardRepaired)) {
            return Object.keys(clipboardRepaired).map((key) => {
                return { key, value: clipboardRepaired[key] };
            });
        }
        // regular value
        return [{ key: 'New item', value: clipboardRepaired }];
    }
    /**
     * @param {JSON} json
     * @param {JSON} state
     * @param {Selection} selection
     * @returns {{newSelection: Selection, operations: JSONPatchDocument}}
     */
    // TODO: write unit tests
    function createRemoveOperations(json, state, selection) {
        if (selection.type === SELECTION_TYPE.KEY) {
            // FIXME: DOESN'T work yet
            const parentPath = initial(selection.focusPath);
            const keys = getKeys(state, parentPath);
            const oldKey = last(selection.focusPath);
            const newKey = '';
            const operations = rename(parentPath, keys, oldKey, newKey);
            const newSelection = createSelectionFromOperations(json, state, operations);
            return { operations, newSelection };
        }
        if (selection.type === SELECTION_TYPE.VALUE) {
            const operations = [
                {
                    op: 'replace',
                    path: immutableJSONPatch.compileJSONPointer(selection.focusPath),
                    value: ''
                }
            ];
            return { operations, newSelection: selection };
        }
        if (selection.type === SELECTION_TYPE.MULTI) {
            const operations = removeAll(selection.paths);
            const lastPath = last(selection.paths);
            if (isEmpty(lastPath)) {
                // there is no parent, this is the root document
                const operations = [{ op: 'replace', path: '', value: '' }];
                const newSelection = createSelection(json, state, {
                    type: SELECTION_TYPE.VALUE,
                    path: []
                });
                return { operations, newSelection };
            }
            const parentPath = initial(lastPath);
            const parent = immutableJSONPatch.getIn(json, parentPath);
            if (Array.isArray(parent)) {
                const firstPath = head(selection.paths);
                const index = last(firstPath);
                const newSelection = index === 0
                    ? createSelection(json, state, {
                        type: SELECTION_TYPE.INSIDE,
                        path: parentPath
                    })
                    : createSelection(json, state, {
                        type: SELECTION_TYPE.AFTER,
                        path: parentPath.concat([index - 1])
                    });
                return { operations, newSelection };
            }
            else {
                // parent is object
                const keys = getKeys(state, parentPath);
                const firstPath = head(selection.paths);
                const key = last(firstPath);
                const index = keys.indexOf(key);
                const previousKey = keys[index - 1];
                const newSelection = index === 0
                    ? createSelection(json, state, {
                        type: SELECTION_TYPE.INSIDE,
                        path: parentPath
                    })
                    : createSelection(json, state, {
                        type: SELECTION_TYPE.AFTER,
                        path: parentPath.concat([previousKey])
                    });
                return { operations, newSelection };
            }
        }
        // this should never happen
        throw new Error('Cannot remove: unsupported type of selection ' + JSON.stringify(selection));
    }

    // TODO: comment
    function updateSearchResult(json, flatResults, previousResult) {
        const flatItems = flatResults;
        const items = createRecursiveSearchResults(json, flatItems);
        const activePath = previousResult && previousResult.activeItem
            ? getNestedSearchResultPath(previousResult.activeItem)
            : undefined;
        const activeItem = activePath && immutableJSONPatch.existsIn(items, activePath) ? immutableJSONPatch.getIn(items, activePath) : flatItems[0];
        const activeIndex = flatItems.findIndex((item) => hasEqualSearchResultItemPointer(item, activeItem));
        const itemsWithActive = items && activeItem && activeIndex !== -1
            ? immutableJSONPatch.setIn(items, getActiveItemPropertyPath(activeItem), true)
            : items;
        return {
            items,
            itemsWithActive,
            flatItems,
            count: flatItems.length,
            activeItem,
            activeIndex
        };
    }
    /**
     * @param {JSON} referenceJson
     * @param {SearchResultItem[]} flatResults
     * @returns {{}}
     */
    function createRecursiveSearchResults(referenceJson, flatResults) {
        // TODO: smart update result based on previous results to make the results immutable when there is no actual change
        let result = {};
        flatResults.forEach((searchResultItem) => {
            const path = searchResultItem.path;
            // when the path is an array, we'll add a symbol on the array, but then
            // setIn has no information to determine whether to create an array or an
            // object, so we do that here explicitly based on referenceJson
            if (!immutableJSONPatch.existsIn(result, path)) {
                const item = immutableJSONPatch.getIn(referenceJson, path);
                result = immutableJSONPatch.setIn(result, path, Array.isArray(item) ? [] : {}, true);
            }
            result = immutableJSONPatch.setIn(result, getNestedSearchResultPath(searchResultItem), searchResultItem, true);
        });
        return result;
    }
    /**
     * @param {SearchResult} searchResult
     * @return {SearchResult}
     */
    function searchNext(searchResult) {
        const nextActiveIndex = searchResult.activeIndex < searchResult.flatItems.length - 1
            ? searchResult.activeIndex + 1
            : searchResult.flatItems.length > 0
                ? 0
                : -1;
        const nextActiveItem = searchResult.flatItems[nextActiveIndex];
        const itemsWithActive = nextActiveItem
            ? immutableJSONPatch.setIn(searchResult.items, getActiveItemPropertyPath(nextActiveItem), true, true)
            : searchResult.items;
        return {
            ...searchResult,
            itemsWithActive,
            activeItem: nextActiveItem,
            activeIndex: nextActiveIndex
        };
    }
    /**
     * @param {SearchResult} searchResult
     * @return {SearchResult}
     */
    function searchPrevious(searchResult) {
        const previousActiveIndex = searchResult.activeIndex > 0 ? searchResult.activeIndex - 1 : searchResult.flatItems.length - 1;
        const previousActiveItem = searchResult.flatItems[previousActiveIndex];
        const itemsWithActive = previousActiveItem
            ? immutableJSONPatch.setIn(searchResult.items, getActiveItemPropertyPath(previousActiveItem), true, true)
            : searchResult.items;
        return {
            ...searchResult,
            itemsWithActive,
            activeItem: previousActiveItem,
            activeIndex: previousActiveIndex
        };
    }
    // TODO: comment
    function search(searchText, json, state, maxResults = Infinity) {
        const results = [];
        const path = []; // we reuse the same Array recursively, this is *much* faster than creating a new path every time
        function onMatch(match) {
            if (results.length < maxResults) {
                results.push(match);
            }
        }
        function searchRecursive(searchTextLowerCase, json, state) {
            if (Array.isArray(json)) {
                const level = path.length;
                path.push(0);
                for (let i = 0; i < json.length; i++) {
                    path[level] = i;
                    searchRecursive(searchTextLowerCase, json[i], state ? state[i] : undefined);
                    if (results.length >= maxResults) {
                        return;
                    }
                }
                path.pop();
            }
            else if (json !== null && typeof json === 'object') {
                const level = path.length;
                path.push(0);
                const keys = state ? state[STATE_KEYS] : Object.keys(json);
                for (const key of keys) {
                    path[level] = key;
                    findCaseInsensitiveMatches(key, searchTextLowerCase, path, STATE_SEARCH_PROPERTY, onMatch);
                    searchRecursive(searchTextLowerCase, json[key], state ? state[key] : undefined);
                    if (results.length >= maxResults) {
                        return;
                    }
                }
                path.pop();
            }
            else {
                // type is a value
                findCaseInsensitiveMatches(json, searchTextLowerCase, path, STATE_SEARCH_VALUE, onMatch);
            }
        }
        if (typeof searchText === 'string' && searchText !== '') {
            const searchTextLowerCase = searchText.toLowerCase();
            searchRecursive(searchTextLowerCase, json, state);
        }
        return results;
    }
    /**
     * Do a case insensitive search for a search text in a text
     * @param {String} text
     * @param {String} searchTextLowerCase
     * @param {Path} path
     * @param {Symbol} field
     * @param {(searchResultItem: SearchResultItem) => void} onMatch
     */
    function findCaseInsensitiveMatches(text, searchTextLowerCase, path, field, onMatch) {
        const textLower = String(text).toLowerCase();
        let fieldIndex = 0;
        let position = -1;
        let index = -1;
        do {
            index = textLower.indexOf(searchTextLowerCase, position);
            if (index !== -1) {
                position = index + searchTextLowerCase.length;
                onMatch({
                    path: path.slice(0),
                    field,
                    fieldIndex,
                    start: index,
                    end: position,
                    active: false
                });
                fieldIndex++;
            }
        } while (index !== -1);
    }
    /**
     * Replace a search result item with a replacement text
     * @param {string} text
     * @param {string} replacementText
     * @param {number} start
     * @param {number} end
     */
    function replaceText(text, replacementText, start, end) {
        return text.substring(0, start) + replacementText + text.substring(end);
    }
    /**
     * Replace all matches with a replacement text
     * @param {string} text
     * @param {string} replacementText
     * @param {Array<{start: number, end: number}>} occurrences
     * @return {string}
     */
    function replaceAllText(text, replacementText, occurrences) {
        let updatedText = text;
        forEachRight(occurrences, (occurrence) => {
            updatedText = replaceText(updatedText, replacementText, occurrence.start, occurrence.end);
        });
        return updatedText;
    }
    /**
     * @param {JSON} json
     * @param {JSON} state
     * @param {string} replacementText
     * @param {SearchResultItem} searchResultItem
     */
    function createSearchAndReplaceOperations(json, state, replacementText, searchResultItem) {
        const { field, path, start, end } = searchResultItem;
        if (field === STATE_SEARCH_PROPERTY) {
            // replace a key
            const parentPath = initial(path);
            const oldKey = last(path);
            const keys = getKeys(state, parentPath);
            const newKey = replaceText(oldKey, replacementText, start, end);
            const operations = rename(parentPath, keys, oldKey, newKey);
            const newSelection = createSelectionFromOperations(json, state, operations);
            return {
                newSelection,
                operations
            };
        }
        else if (field === STATE_SEARCH_VALUE) {
            // replace a value
            const currentValue = immutableJSONPatch.getIn(json, path);
            if (currentValue === undefined) {
                throw new Error(`Cannot replace: path not found ${immutableJSONPatch.compileJSONPointer(path)}`);
            }
            const currentValueText = typeof currentValue === 'string' ? currentValue : String(currentValue);
            const enforceString = immutableJSONPatch.getIn(state, path.concat([STATE_ENFORCE_STRING])) || false;
            const value = replaceText(currentValueText, replacementText, start, end);
            const operations = [
                {
                    op: 'replace',
                    path: immutableJSONPatch.compileJSONPointer(path),
                    value: enforceString ? value : stringConvert(value)
                }
            ];
            const newSelection = createSelectionFromOperations(json, state, operations);
            return {
                newSelection,
                operations
            };
        }
        else {
            throw new Error(`Cannot replace: unknown type of search result field ${field}`);
        }
    }
    function createSearchAndReplaceAllOperations(json, state, searchText, replacementText) {
        // TODO: to improve performance, we could reuse existing search results (except when hitting a maxResult limit)
        const searchResultItems = search(searchText, json, state, Infinity /* maxResults */);
        // step 1: deduplicate matches inside the same field/value
        // (filter, map, and group)
        const deduplicatedMatches = [];
        for (let i = 0; i < searchResultItems.length; i++) {
            const previousItem = searchResultItems[i - 1];
            const item = searchResultItems[i];
            if (i === 0 || item.field !== previousItem.field || !isEqual(item.path, previousItem.path)) {
                deduplicatedMatches.push({
                    path: item.path,
                    field: item.field,
                    items: [item]
                });
            }
            else {
                last(deduplicatedMatches).items.push(item);
            }
        }
        // step 2: sort from deepest nested to least nested
        // this is needed to replace in that order because paths may change
        // if there are replacements in keys
        deduplicatedMatches.sort((a, b) => {
            // sort values first, properties next
            if (a.field !== b.field) {
                if (a.field === STATE_SEARCH_PROPERTY) {
                    return 1;
                }
                else {
                    return -1;
                }
            }
            // sort longest paths first, shortest last
            return b.path.length - a.path.length;
        });
        // step 3: call createSearchAndReplaceOperations for each of the matches
        let allOperations = [];
        let lastNewSelection = undefined;
        deduplicatedMatches.forEach((match) => {
            // TODO: there is overlap with the logic of createSearchAndReplaceOperations. Can we extract and reuse this logic?
            const { field, path, items } = match;
            if (field === STATE_SEARCH_PROPERTY) {
                // replace a key
                const parentPath = initial(path);
                const oldKey = last(path);
                const keys = getKeys(state, parentPath);
                const newKey = replaceAllText(oldKey, replacementText, items);
                const operations = rename(parentPath, keys, oldKey, newKey);
                allOperations = allOperations.concat(operations);
                lastNewSelection = createSelectionFromOperations(json, state, operations);
            }
            else if (field === STATE_SEARCH_VALUE) {
                // replace a value
                const currentValue = immutableJSONPatch.getIn(json, path);
                if (currentValue === undefined) {
                    throw new Error(`Cannot replace: path not found ${immutableJSONPatch.compileJSONPointer(path)}`);
                }
                const currentValueText = typeof currentValue === 'string' ? currentValue : String(currentValue);
                const enforceString = immutableJSONPatch.getIn(state, path.concat([STATE_ENFORCE_STRING])) || false;
                const value = replaceAllText(currentValueText, replacementText, items);
                const operations = [
                    {
                        op: 'replace',
                        path: immutableJSONPatch.compileJSONPointer(path),
                        value: enforceString ? value : stringConvert(value)
                    }
                ];
                allOperations = allOperations.concat(operations);
                lastNewSelection = createSelectionFromOperations(json, state, operations);
            }
            else {
                throw new Error(`Cannot replace: unknown type of search result field ${field}`);
            }
        });
        return {
            operations: allOperations,
            newSelection: lastNewSelection
        };
    }
    /**
     * Split the text into separate parts for each search result and the text
     * in between.
     */
    function splitValue(text, matches) {
        const parts = [];
        let previousEnd = 0;
        for (const match of matches) {
            const precedingText = text.slice(previousEnd, match.start);
            if (precedingText !== '') {
                parts.push({
                    type: 'normal',
                    text: precedingText,
                    active: false
                });
            }
            const matchingText = text.slice(match.start, match.end);
            parts.push({
                type: 'highlight',
                text: matchingText,
                active: match.active
            });
            previousEnd = match.end;
        }
        const lastMatch = last(matches);
        if (lastMatch.end < text.length) {
            parts.push({
                type: 'normal',
                text: text.slice(lastMatch.end),
                active: false
            });
        }
        return parts;
    }
    /**
     * Get the path of the .active property on a nested search result
     * @param {SearchResultItem} activeItem
     * @return {Path}
     */
    function getActiveItemPropertyPath(activeItem) {
        return activeItem.path.concat(activeItem.field, activeItem.fieldIndex, 'active');
    }
    /**
     * Get the path of the search result property on a nested search result
     * @param {SearchResultItem} searchResultItem
     * @return {Path}
     */
    function getNestedSearchResultPath(searchResultItem) {
        return searchResultItem.path.concat(searchResultItem.field, searchResultItem.fieldIndex);
    }
    /**
     * @param {SearchResultItem} a
     * @param {SearchResultItem} b
     * @return {boolean}
     */
    function hasEqualSearchResultItemPointer(a, b) {
        // we must NOT compare .fieldIndex or .active
        // TODO: refactor the data models so fieldIndex is not part of it?
        // we also don't compare end, so we will keep the search result focus whilst typing in the search box
        return a.start === b.start && a.field === b.field && isEqual(a.path, b.path);
    }

    /**
     * Create a nested map with validation errors,
     * and also create error messages for the parent nodes of the nodes having an error.
     *
     * Returns a nested object containing the validation errors
     */
    function mapValidationErrors(validationErrors) {
        let object;
        validationErrors.forEach((validationError) => {
            const errorPath = validationError.path.concat([VALIDATION_ERROR]);
            object = immutableJSONPatch.setIn(object, errorPath, validationError, true);
        });
        // create error entries for all parent nodes
        validationErrors.forEach((validationError) => {
            const path = validationError.path;
            let parentPath = path;
            while (parentPath.length > 0) {
                parentPath = initial(parentPath);
                const parentErrorPath = parentPath.concat([VALIDATION_ERROR]);
                if (!immutableJSONPatch.existsIn(object, parentErrorPath)) {
                    const error = {
                        isChildError: true,
                        path: parentPath,
                        message: 'Contains invalid data'
                    };
                    object = immutableJSONPatch.setIn(object, parentErrorPath, error, true);
                }
            }
        });
        return object;
    }

    /* node_modules/svelte-jsoneditor/components/modals/Header.svelte generated by Svelte v3.48.0 */
    const file$E = "node_modules/svelte-jsoneditor/components/modals/Header.svelte";

    function create_fragment$I(ctx) {
    	let div1;
    	let div0;
    	let t0;
    	let t1;
    	let button;
    	let icon;
    	let current;
    	let mounted;
    	let dispose;
    	icon = new Icon({ props: { data: faTimes }, $$inline: true });

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text(/*title*/ ctx[0]);
    			t1 = space();
    			button = element("button");
    			create_component(icon.$$.fragment);
    			attr_dev(div0, "class", "jse-title svelte-d01h2s");
    			add_location(div0, file$E, 10, 2, 295);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-close svelte-d01h2s");
    			add_location(button, file$E, 13, 2, 342);
    			attr_dev(div1, "class", "jse-header svelte-d01h2s");
    			add_location(div1, file$E, 9, 0, 268);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, t0);
    			append_dev(div1, t1);
    			append_dev(div1, button);
    			mount_component(icon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*close*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$I.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$I($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Header', slots, []);
    	let { title = 'Modal' } = $$props;
    	const { close } = getContext('simple-modal');
    	const writable_props = ['title'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    	};

    	$$self.$capture_state = () => ({ getContext, Icon, faTimes, title, close });

    	$$self.$inject_state = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title, close];
    }

    class Header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$I, create_fragment$I, not_equal, { title: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment$I.name
    		});
    	}

    	get title() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modals/CopyPasteModal.svelte generated by Svelte v3.48.0 */
    const file$D = "node_modules/svelte-jsoneditor/components/modals/CopyPasteModal.svelte";

    function create_fragment$H(ctx) {
    	let div10;
    	let header;
    	let t0;
    	let div9;
    	let div0;
    	let t2;
    	let div7;
    	let div2;
    	let div1;
    	let t5;
    	let t6;
    	let div4;
    	let div3;
    	let t9;
    	let t10;
    	let div6;
    	let div5;
    	let t13;
    	let t14;
    	let div8;
    	let button;
    	let current;
    	let mounted;
    	let dispose;

    	header = new Header({
    			props: { title: "Copying and pasting" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			create_component(header.$$.fragment);
    			t0 = space();
    			div9 = element("div");
    			div0 = element("div");
    			div0.textContent = "These actions are unavailable via the menu. Please use:";
    			t2 = space();
    			div7 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			div1.textContent = `${/*ctrl*/ ctx[1]}+C`;
    			t5 = text("\n        for copy");
    			t6 = space();
    			div4 = element("div");
    			div3 = element("div");
    			div3.textContent = `${/*ctrl*/ ctx[1]}+X`;
    			t9 = text("\n        for cut");
    			t10 = space();
    			div6 = element("div");
    			div5 = element("div");
    			div5.textContent = `${/*ctrl*/ ctx[1]}+V`;
    			t13 = text("\n        for paste");
    			t14 = space();
    			div8 = element("div");
    			button = element("button");
    			button.textContent = "Close";
    			add_location(div0, file$D, 13, 4, 388);
    			attr_dev(div1, "class", "jse-key svelte-t45ah0");
    			add_location(div1, file$D, 17, 8, 529);
    			attr_dev(div2, "class", "jse-shortcut");
    			add_location(div2, file$D, 16, 6, 494);
    			attr_dev(div3, "class", "jse-key svelte-t45ah0");
    			add_location(div3, file$D, 23, 8, 656);
    			attr_dev(div4, "class", "jse-shortcut");
    			add_location(div4, file$D, 22, 6, 621);
    			attr_dev(div5, "class", "jse-key svelte-t45ah0");
    			add_location(div5, file$D, 29, 8, 782);
    			attr_dev(div6, "class", "jse-shortcut");
    			add_location(div6, file$D, 28, 6, 747);
    			attr_dev(div7, "class", "jse-shortcuts svelte-t45ah0");
    			add_location(div7, file$D, 15, 4, 460);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-primary svelte-t45ah0");
    			add_location(button, file$D, 37, 6, 917);
    			attr_dev(div8, "class", "jse-actions svelte-t45ah0");
    			add_location(div8, file$D, 36, 4, 885);
    			attr_dev(div9, "class", "jse-contents svelte-t45ah0");
    			add_location(div9, file$D, 12, 2, 357);
    			attr_dev(div10, "class", "jse-modal jse-copy-paste svelte-t45ah0");
    			add_location(div10, file$D, 9, 0, 274);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			mount_component(header, div10, null);
    			append_dev(div10, t0);
    			append_dev(div10, div9);
    			append_dev(div9, div0);
    			append_dev(div9, t2);
    			append_dev(div9, div7);
    			append_dev(div7, div2);
    			append_dev(div2, div1);
    			append_dev(div2, t5);
    			append_dev(div7, t6);
    			append_dev(div7, div4);
    			append_dev(div4, div3);
    			append_dev(div4, t9);
    			append_dev(div7, t10);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div6, t13);
    			append_dev(div9, t14);
    			append_dev(div9, div8);
    			append_dev(div8, button);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*close*/ ctx[0], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			destroy_component(header);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$H.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$H($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CopyPasteModal', slots, []);
    	const { close } = getContext('simple-modal');
    	const ctrl = IS_MAC ? '⌘' : 'Ctrl';
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CopyPasteModal> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ getContext, IS_MAC, Header, close, ctrl });
    	return [close, ctrl];
    }

    class CopyPasteModal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$H, create_fragment$H, not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CopyPasteModal",
    			options,
    			id: create_fragment$H.name
    		});
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modals/repair/JSONRepairComponent.svelte generated by Svelte v3.48.0 */
    const file$C = "node_modules/svelte-jsoneditor/components/modals/repair/JSONRepairComponent.svelte";

    // (134:4) 
    function create_left_slot(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Repair invalid JSON, then click apply";
    			attr_dev(div, "slot", "left");
    			attr_dev(div, "class", "jse-info svelte-gz09vf");
    			add_location(div, file$C, 133, 4, 3473);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_left_slot.name,
    		type: "slot",
    		source: "(134:4) ",
    		ctx
    	});

    	return block;
    }

    // (144:2) {:else}
    function create_else_block$c(ctx) {
    	let message;
    	let current;

    	message = new Message({
    			props: {
    				type: "success",
    				message: "JSON is valid now and can be parsed.",
    				actions: /*successActions*/ ctx[5]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(message.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(message, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const message_changes = {};
    			if (dirty & /*successActions*/ 32) message_changes.actions = /*successActions*/ ctx[5];
    			message.$set(message_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(message.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(message.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(message, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$c.name,
    		type: "else",
    		source: "(144:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (137:2) {#if error}
    function create_if_block$m(ctx) {
    	let message;
    	let current;

    	message = new Message({
    			props: {
    				type: "error",
    				icon: faExclamationTriangle,
    				message: `Cannot parse JSON: ${/*error*/ ctx[2].message}`,
    				actions: /*errorActions*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(message.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(message, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const message_changes = {};
    			if (dirty & /*error*/ 4) message_changes.message = `Cannot parse JSON: ${/*error*/ ctx[2].message}`;
    			if (dirty & /*errorActions*/ 64) message_changes.actions = /*errorActions*/ ctx[6];
    			message.$set(message_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(message.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(message.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(message, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$m.name,
    		type: "if",
    		source: "(137:2) {#if error}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$G(ctx) {
    	let div;
    	let menu;
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let textarea;
    	let current;
    	let mounted;
    	let dispose;

    	menu = new Menu({
    			props: {
    				items: /*items*/ ctx[7],
    				$$slots: { left: [create_left_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block$m, create_else_block$c];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*error*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(menu.$$.fragment);
    			t0 = space();
    			if_block.c();
    			t1 = space();
    			textarea = element("textarea");
    			textarea.value = /*text*/ ctx[0];
    			textarea.readOnly = /*readOnly*/ ctx[1];
    			attr_dev(textarea, "class", "jse-json-text svelte-gz09vf");
    			attr_dev(textarea, "autocomplete", "off");
    			attr_dev(textarea, "autocapitalize", "off");
    			attr_dev(textarea, "spellcheck", "false");
    			add_location(textarea, file$C, 150, 2, 3878);
    			attr_dev(div, "class", "jse-json-repair-component svelte-gz09vf");
    			add_location(div, file$C, 131, 0, 3386);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(menu, div, null);
    			append_dev(div, t0);
    			if_blocks[current_block_type_index].m(div, null);
    			append_dev(div, t1);
    			append_dev(div, textarea);
    			/*textarea_binding*/ ctx[21](textarea);
    			/*div_binding*/ ctx[22](div);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(textarea, "input", /*handleChange*/ ctx[8], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const menu_changes = {};
    			if (dirty & /*items*/ 128) menu_changes.items = /*items*/ ctx[7];

    			if (dirty & /*$$scope*/ 536870912) {
    				menu_changes.$$scope = { dirty, ctx };
    			}

    			menu.$set(menu_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, t1);
    			}

    			if (!current || dirty & /*text*/ 1) {
    				prop_dev(textarea, "value", /*text*/ ctx[0]);
    			}

    			if (!current || dirty & /*readOnly*/ 2) {
    				prop_dev(textarea, "readOnly", /*readOnly*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menu.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menu.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(menu);
    			if_blocks[current_block_type_index].d();
    			/*textarea_binding*/ ctx[21](null);
    			/*div_binding*/ ctx[22](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$G.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$G($$self, $$props, $$invalidate) {
    	let error;
    	let repairable;
    	let defaultItems;
    	let items;
    	let gotoAction;
    	let repairAction;
    	let errorActions;
    	let successActions;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('JSONRepairComponent', slots, []);
    	let { text = '' } = $$props;
    	let { readOnly = false } = $$props;
    	let { onParse } = $$props;
    	let { onRepair } = $$props;
    	let { onChange = null } = $$props;
    	let { onApply } = $$props;
    	let { onCancel } = $$props;
    	let { onFocus } = $$props;
    	let { onBlur } = $$props;
    	let { onRenderMenu = noop$1 } = $$props;
    	const debug = createDebug('jsoneditor:JSONRepair');
    	let domJsonRepair;
    	let domTextArea;

    	createFocusTracker({
    		onMount,
    		onDestroy,
    		getWindow: () => getWindow(domJsonRepair),
    		hasFocus: () => activeElementIsChildOf(domJsonRepair),
    		onFocus: () => {
    			if (onFocus) {
    				onFocus();
    			}
    		},
    		onBlur: () => {
    			if (onBlur) {
    				onBlur();
    			}
    		}
    	});

    	function getErrorMessage(jsonText) {
    		try {
    			onParse(jsonText);
    			return null;
    		} catch(err) {
    			return normalizeJsonParseError(jsonText, err.message);
    		}
    	}

    	function isRepairable(jsonText) {
    		try {
    			onRepair(jsonText);
    			return true;
    		} catch(err) {
    			return false;
    		}
    	}

    	function goToError() {
    		if (domTextArea && error && error.position != null) {
    			domTextArea.setSelectionRange(error.position, error.position);

    			setTimeout(() => {
    				domTextArea.focus();
    			});
    		}
    	}

    	function handleChange(event) {
    		debug('handleChange');
    		const value = event.target.value;

    		if (text === value) {
    			return;
    		}

    		$$invalidate(0, text = value);

    		if (onChange) {
    			onChange(text);
    		}
    	}

    	function handleApply() {
    		onApply(text);
    	}

    	function handleRepair() {
    		try {
    			// TODO: simpleJsonRepair should also partially apply fixes. Now it's all or nothing
    			$$invalidate(0, text = onRepair(text));

    			if (onChange) {
    				onChange(text);
    			}
    		} catch(err) {
    			
    		} // no need to do something with the error
    	}

    	const writable_props = [
    		'text',
    		'readOnly',
    		'onParse',
    		'onRepair',
    		'onChange',
    		'onApply',
    		'onCancel',
    		'onFocus',
    		'onBlur',
    		'onRenderMenu'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<JSONRepairComponent> was created with unknown prop '${key}'`);
    	});

    	function textarea_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			domTextArea = $$value;
    			$$invalidate(4, domTextArea);
    		});
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			domJsonRepair = $$value;
    			$$invalidate(3, domJsonRepair);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    		if ('readOnly' in $$props) $$invalidate(1, readOnly = $$props.readOnly);
    		if ('onParse' in $$props) $$invalidate(9, onParse = $$props.onParse);
    		if ('onRepair' in $$props) $$invalidate(10, onRepair = $$props.onRepair);
    		if ('onChange' in $$props) $$invalidate(11, onChange = $$props.onChange);
    		if ('onApply' in $$props) $$invalidate(12, onApply = $$props.onApply);
    		if ('onCancel' in $$props) $$invalidate(13, onCancel = $$props.onCancel);
    		if ('onFocus' in $$props) $$invalidate(14, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(15, onBlur = $$props.onBlur);
    		if ('onRenderMenu' in $$props) $$invalidate(16, onRenderMenu = $$props.onRenderMenu);
    	};

    	$$self.$capture_state = () => ({
    		faArrowDown,
    		faCheck,
    		faExclamationTriangle,
    		faTimes,
    		faWrench,
    		createDebug,
    		Message,
    		onDestroy,
    		onMount,
    		activeElementIsChildOf,
    		getWindow,
    		normalizeJsonParseError,
    		createFocusTracker,
    		Menu,
    		noop: noop$1,
    		text,
    		readOnly,
    		onParse,
    		onRepair,
    		onChange,
    		onApply,
    		onCancel,
    		onFocus,
    		onBlur,
    		onRenderMenu,
    		debug,
    		domJsonRepair,
    		domTextArea,
    		getErrorMessage,
    		isRepairable,
    		goToError,
    		handleChange,
    		handleApply,
    		handleRepair,
    		successActions,
    		gotoAction,
    		repairAction,
    		repairable,
    		errorActions,
    		defaultItems,
    		items,
    		error
    	});

    	$$self.$inject_state = $$props => {
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    		if ('readOnly' in $$props) $$invalidate(1, readOnly = $$props.readOnly);
    		if ('onParse' in $$props) $$invalidate(9, onParse = $$props.onParse);
    		if ('onRepair' in $$props) $$invalidate(10, onRepair = $$props.onRepair);
    		if ('onChange' in $$props) $$invalidate(11, onChange = $$props.onChange);
    		if ('onApply' in $$props) $$invalidate(12, onApply = $$props.onApply);
    		if ('onCancel' in $$props) $$invalidate(13, onCancel = $$props.onCancel);
    		if ('onFocus' in $$props) $$invalidate(14, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(15, onBlur = $$props.onBlur);
    		if ('onRenderMenu' in $$props) $$invalidate(16, onRenderMenu = $$props.onRenderMenu);
    		if ('domJsonRepair' in $$props) $$invalidate(3, domJsonRepair = $$props.domJsonRepair);
    		if ('domTextArea' in $$props) $$invalidate(4, domTextArea = $$props.domTextArea);
    		if ('successActions' in $$props) $$invalidate(5, successActions = $$props.successActions);
    		if ('gotoAction' in $$props) $$invalidate(17, gotoAction = $$props.gotoAction);
    		if ('repairAction' in $$props) $$invalidate(18, repairAction = $$props.repairAction);
    		if ('repairable' in $$props) $$invalidate(19, repairable = $$props.repairable);
    		if ('errorActions' in $$props) $$invalidate(6, errorActions = $$props.errorActions);
    		if ('defaultItems' in $$props) $$invalidate(20, defaultItems = $$props.defaultItems);
    		if ('items' in $$props) $$invalidate(7, items = $$props.items);
    		if ('error' in $$props) $$invalidate(2, error = $$props.error);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*text*/ 1) {
    			$$invalidate(2, error = getErrorMessage(text));
    		}

    		if ($$self.$$.dirty & /*text*/ 1) {
    			$$invalidate(19, repairable = isRepairable(text));
    		}

    		if ($$self.$$.dirty & /*error*/ 4) {
    			debug('error', error);
    		}

    		if ($$self.$$.dirty & /*onCancel*/ 8192) {
    			$$invalidate(20, defaultItems = [
    				{ space: true },
    				{
    					icon: faTimes,
    					title: 'Cancel repair',
    					className: 'jse-cancel',
    					onClick: onCancel
    				}
    			]);
    		}

    		if ($$self.$$.dirty & /*onRenderMenu, defaultItems*/ 1114112) {
    			$$invalidate(7, items = onRenderMenu('repair', defaultItems) || defaultItems);
    		}

    		if ($$self.$$.dirty & /*repairable, gotoAction, repairAction*/ 917504) {
    			$$invalidate(6, errorActions = repairable ? [gotoAction, repairAction] : [gotoAction]);
    		}

    		if ($$self.$$.dirty & /*readOnly*/ 2) {
    			$$invalidate(5, successActions = [
    				{
    					icon: faCheck,
    					text: 'Apply',
    					title: 'Apply fixed JSON',
    					disabled: readOnly,
    					onClick: handleApply
    				}
    			]);
    		}
    	};

    	$$invalidate(17, gotoAction = {
    		icon: faArrowDown,
    		text: 'Show me',
    		title: 'Scroll to the error location',
    		onClick: goToError
    	});

    	$$invalidate(18, repairAction = {
    		icon: faWrench,
    		text: 'Auto repair',
    		title: 'Automatically repair JSON',
    		onClick: handleRepair
    	});

    	return [
    		text,
    		readOnly,
    		error,
    		domJsonRepair,
    		domTextArea,
    		successActions,
    		errorActions,
    		items,
    		handleChange,
    		onParse,
    		onRepair,
    		onChange,
    		onApply,
    		onCancel,
    		onFocus,
    		onBlur,
    		onRenderMenu,
    		gotoAction,
    		repairAction,
    		repairable,
    		defaultItems,
    		textarea_binding,
    		div_binding
    	];
    }

    class JSONRepairComponent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$G, create_fragment$G, not_equal, {
    			text: 0,
    			readOnly: 1,
    			onParse: 9,
    			onRepair: 10,
    			onChange: 11,
    			onApply: 12,
    			onCancel: 13,
    			onFocus: 14,
    			onBlur: 15,
    			onRenderMenu: 16
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "JSONRepairComponent",
    			options,
    			id: create_fragment$G.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*onParse*/ ctx[9] === undefined && !('onParse' in props)) {
    			console.warn("<JSONRepairComponent> was created without expected prop 'onParse'");
    		}

    		if (/*onRepair*/ ctx[10] === undefined && !('onRepair' in props)) {
    			console.warn("<JSONRepairComponent> was created without expected prop 'onRepair'");
    		}

    		if (/*onApply*/ ctx[12] === undefined && !('onApply' in props)) {
    			console.warn("<JSONRepairComponent> was created without expected prop 'onApply'");
    		}

    		if (/*onCancel*/ ctx[13] === undefined && !('onCancel' in props)) {
    			console.warn("<JSONRepairComponent> was created without expected prop 'onCancel'");
    		}

    		if (/*onFocus*/ ctx[14] === undefined && !('onFocus' in props)) {
    			console.warn("<JSONRepairComponent> was created without expected prop 'onFocus'");
    		}

    		if (/*onBlur*/ ctx[15] === undefined && !('onBlur' in props)) {
    			console.warn("<JSONRepairComponent> was created without expected prop 'onBlur'");
    		}
    	}

    	get text() {
    		throw new Error("<JSONRepairComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<JSONRepairComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readOnly() {
    		throw new Error("<JSONRepairComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readOnly(value) {
    		throw new Error("<JSONRepairComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onParse() {
    		throw new Error("<JSONRepairComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onParse(value) {
    		throw new Error("<JSONRepairComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRepair() {
    		throw new Error("<JSONRepairComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRepair(value) {
    		throw new Error("<JSONRepairComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChange() {
    		throw new Error("<JSONRepairComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChange(value) {
    		throw new Error("<JSONRepairComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onApply() {
    		throw new Error("<JSONRepairComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onApply(value) {
    		throw new Error("<JSONRepairComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onCancel() {
    		throw new Error("<JSONRepairComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onCancel(value) {
    		throw new Error("<JSONRepairComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onFocus() {
    		throw new Error("<JSONRepairComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onFocus(value) {
    		throw new Error("<JSONRepairComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onBlur() {
    		throw new Error("<JSONRepairComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onBlur(value) {
    		throw new Error("<JSONRepairComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRenderMenu() {
    		throw new Error("<JSONRepairComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRenderMenu(value) {
    		throw new Error("<JSONRepairComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modals/JSONRepairModal.svelte generated by Svelte v3.48.0 */
    const file$B = "node_modules/svelte-jsoneditor/components/modals/JSONRepairModal.svelte";

    function create_fragment$F(ctx) {
    	let div;
    	let jsonrepaircomponent;
    	let updating_text;
    	let current;

    	function jsonrepaircomponent_text_binding(value) {
    		/*jsonrepaircomponent_text_binding*/ ctx[9](value);
    	}

    	let jsonrepaircomponent_props = {
    		onParse: /*onParse*/ ctx[1],
    		onRepair: /*onRepair*/ ctx[2],
    		onApply: /*handleApply*/ ctx[6],
    		onCancel: /*handleCancel*/ ctx[7],
    		onFocus: /*onFocus*/ ctx[3],
    		onBlur: /*onBlur*/ ctx[4],
    		onRenderMenu: /*onRenderMenu*/ ctx[5]
    	};

    	if (/*text*/ ctx[0] !== void 0) {
    		jsonrepaircomponent_props.text = /*text*/ ctx[0];
    	}

    	jsonrepaircomponent = new JSONRepairComponent({
    			props: jsonrepaircomponent_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind$1(jsonrepaircomponent, 'text', jsonrepaircomponent_text_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(jsonrepaircomponent.$$.fragment);
    			attr_dev(div, "class", "jse-modal jse-repair svelte-1ffm3pm");
    			add_location(div, file$B, 26, 0, 492);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(jsonrepaircomponent, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const jsonrepaircomponent_changes = {};
    			if (dirty & /*onParse*/ 2) jsonrepaircomponent_changes.onParse = /*onParse*/ ctx[1];
    			if (dirty & /*onRepair*/ 4) jsonrepaircomponent_changes.onRepair = /*onRepair*/ ctx[2];
    			if (dirty & /*onFocus*/ 8) jsonrepaircomponent_changes.onFocus = /*onFocus*/ ctx[3];
    			if (dirty & /*onBlur*/ 16) jsonrepaircomponent_changes.onBlur = /*onBlur*/ ctx[4];
    			if (dirty & /*onRenderMenu*/ 32) jsonrepaircomponent_changes.onRenderMenu = /*onRenderMenu*/ ctx[5];

    			if (!updating_text && dirty & /*text*/ 1) {
    				updating_text = true;
    				jsonrepaircomponent_changes.text = /*text*/ ctx[0];
    				add_flush_callback(() => updating_text = false);
    			}

    			jsonrepaircomponent.$set(jsonrepaircomponent_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(jsonrepaircomponent.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(jsonrepaircomponent.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(jsonrepaircomponent);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$F.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$F($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('JSONRepairModal', slots, []);
    	let { text } = $$props;
    	let { onParse } = $$props;
    	let { onRepair } = $$props;
    	let { onApply } = $$props;
    	let { onFocus } = $$props;
    	let { onBlur } = $$props;
    	let { onRenderMenu } = $$props;
    	const { close } = getContext('simple-modal');

    	function handleApply(repairedText) {
    		close();
    		onApply(repairedText);
    	}

    	function handleCancel() {
    		close();
    	}

    	const writable_props = ['text', 'onParse', 'onRepair', 'onApply', 'onFocus', 'onBlur', 'onRenderMenu'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<JSONRepairModal> was created with unknown prop '${key}'`);
    	});

    	function jsonrepaircomponent_text_binding(value) {
    		text = value;
    		$$invalidate(0, text);
    	}

    	$$self.$$set = $$props => {
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    		if ('onParse' in $$props) $$invalidate(1, onParse = $$props.onParse);
    		if ('onRepair' in $$props) $$invalidate(2, onRepair = $$props.onRepair);
    		if ('onApply' in $$props) $$invalidate(8, onApply = $$props.onApply);
    		if ('onFocus' in $$props) $$invalidate(3, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(4, onBlur = $$props.onBlur);
    		if ('onRenderMenu' in $$props) $$invalidate(5, onRenderMenu = $$props.onRenderMenu);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		JSONRepairComponent,
    		text,
    		onParse,
    		onRepair,
    		onApply,
    		onFocus,
    		onBlur,
    		onRenderMenu,
    		close,
    		handleApply,
    		handleCancel
    	});

    	$$self.$inject_state = $$props => {
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    		if ('onParse' in $$props) $$invalidate(1, onParse = $$props.onParse);
    		if ('onRepair' in $$props) $$invalidate(2, onRepair = $$props.onRepair);
    		if ('onApply' in $$props) $$invalidate(8, onApply = $$props.onApply);
    		if ('onFocus' in $$props) $$invalidate(3, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(4, onBlur = $$props.onBlur);
    		if ('onRenderMenu' in $$props) $$invalidate(5, onRenderMenu = $$props.onRenderMenu);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		text,
    		onParse,
    		onRepair,
    		onFocus,
    		onBlur,
    		onRenderMenu,
    		handleApply,
    		handleCancel,
    		onApply,
    		jsonrepaircomponent_text_binding
    	];
    }

    class JSONRepairModal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$F, create_fragment$F, not_equal, {
    			text: 0,
    			onParse: 1,
    			onRepair: 2,
    			onApply: 8,
    			onFocus: 3,
    			onBlur: 4,
    			onRenderMenu: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "JSONRepairModal",
    			options,
    			id: create_fragment$F.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*text*/ ctx[0] === undefined && !('text' in props)) {
    			console.warn("<JSONRepairModal> was created without expected prop 'text'");
    		}

    		if (/*onParse*/ ctx[1] === undefined && !('onParse' in props)) {
    			console.warn("<JSONRepairModal> was created without expected prop 'onParse'");
    		}

    		if (/*onRepair*/ ctx[2] === undefined && !('onRepair' in props)) {
    			console.warn("<JSONRepairModal> was created without expected prop 'onRepair'");
    		}

    		if (/*onApply*/ ctx[8] === undefined && !('onApply' in props)) {
    			console.warn("<JSONRepairModal> was created without expected prop 'onApply'");
    		}

    		if (/*onFocus*/ ctx[3] === undefined && !('onFocus' in props)) {
    			console.warn("<JSONRepairModal> was created without expected prop 'onFocus'");
    		}

    		if (/*onBlur*/ ctx[4] === undefined && !('onBlur' in props)) {
    			console.warn("<JSONRepairModal> was created without expected prop 'onBlur'");
    		}

    		if (/*onRenderMenu*/ ctx[5] === undefined && !('onRenderMenu' in props)) {
    			console.warn("<JSONRepairModal> was created without expected prop 'onRenderMenu'");
    		}
    	}

    	get text() {
    		throw new Error("<JSONRepairModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<JSONRepairModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onParse() {
    		throw new Error("<JSONRepairModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onParse(value) {
    		throw new Error("<JSONRepairModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRepair() {
    		throw new Error("<JSONRepairModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRepair(value) {
    		throw new Error("<JSONRepairModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onApply() {
    		throw new Error("<JSONRepairModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onApply(value) {
    		throw new Error("<JSONRepairModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onFocus() {
    		throw new Error("<JSONRepairModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onFocus(value) {
    		throw new Error("<JSONRepairModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onBlur() {
    		throw new Error("<JSONRepairModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onBlur(value) {
    		throw new Error("<JSONRepairModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRenderMenu() {
    		throw new Error("<JSONRepairModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRenderMenu(value) {
    		throw new Error("<JSONRepairModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/controls/DropdownButton.svelte generated by Svelte v3.48.0 */
    const file$A = "node_modules/svelte-jsoneditor/components/controls/DropdownButton.svelte";

    function get_each_context$d(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    const get_defaultItem_slot_changes = dirty => ({});
    const get_defaultItem_slot_context = ctx => ({});

    // (59:12) {#if item.icon}
    function create_if_block$l(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { data: /*item*/ ctx[10].icon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty & /*items*/ 1) icon_changes.data = /*item*/ ctx[10].icon;
    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$l.name,
    		type: "if",
    		source: "(59:12) {#if item.icon}",
    		ctx
    	});

    	return block;
    }

    // (51:6) {#each items as item}
    function create_each_block$d(ctx) {
    	let li;
    	let button;
    	let t0;
    	let t1_value = /*item*/ ctx[10].text + "";
    	let t1;
    	let button_title_value;
    	let button_disabled_value;
    	let t2;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*item*/ ctx[10].icon && create_if_block$l(ctx);

    	function click_handler() {
    		return /*click_handler*/ ctx[8](/*item*/ ctx[10]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			button = element("button");
    			if (if_block) if_block.c();
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(button, "type", "button");
    			attr_dev(button, "title", button_title_value = /*item*/ ctx[10].title);
    			button.disabled = button_disabled_value = /*item*/ ctx[10].disabled;
    			attr_dev(button, "class", "svelte-mojfmz");
    			add_location(button, file$A, 52, 10, 1502);
    			attr_dev(li, "class", "svelte-mojfmz");
    			add_location(li, file$A, 51, 8, 1487);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, button);
    			if (if_block) if_block.m(button, null);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			append_dev(li, t2);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*item*/ ctx[10].icon) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*items*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$l(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(button, t0);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*items*/ 1) && t1_value !== (t1_value = /*item*/ ctx[10].text + "")) set_data_dev(t1, t1_value);

    			if (!current || dirty & /*items*/ 1 && button_title_value !== (button_title_value = /*item*/ ctx[10].title)) {
    				attr_dev(button, "title", button_title_value);
    			}

    			if (!current || dirty & /*items*/ 1 && button_disabled_value !== (button_disabled_value = /*item*/ ctx[10].disabled)) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$d.name,
    		type: "each",
    		source: "(51:6) {#each items as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$E(ctx) {
    	let div1;
    	let t0;
    	let button;
    	let icon;
    	let t1;
    	let div0;
    	let ul;
    	let current;
    	let mounted;
    	let dispose;
    	const defaultItem_slot_template = /*#slots*/ ctx[7].defaultItem;
    	const defaultItem_slot = create_slot(defaultItem_slot_template, ctx, /*$$scope*/ ctx[6], get_defaultItem_slot_context);

    	icon = new Icon({
    			props: { data: faCaretDown },
    			$$inline: true
    		});

    	let each_value = /*items*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (defaultItem_slot) defaultItem_slot.c();
    			t0 = space();
    			button = element("button");
    			create_component(icon.$$.fragment);
    			t1 = space();
    			div0 = element("div");
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-open-dropdown svelte-mojfmz");
    			attr_dev(button, "data-type", "jse-open-dropdown");
    			toggle_class(button, "jse-visible", /*visible*/ ctx[3]);
    			add_location(button, file$A, 38, 2, 1158);
    			attr_dev(ul, "class", "svelte-mojfmz");
    			add_location(ul, file$A, 49, 4, 1446);
    			attr_dev(div0, "class", "jse-dropdown-items svelte-mojfmz");
    			set_style(div0, "width", /*width*/ ctx[2]);
    			toggle_class(div0, "jse-visible", /*visible*/ ctx[3]);
    			add_location(div0, file$A, 48, 2, 1357);
    			attr_dev(div1, "class", "jse-dropdown-button svelte-mojfmz");
    			attr_dev(div1, "title", /*title*/ ctx[1]);
    			add_location(div1, file$A, 35, 0, 1060);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);

    			if (defaultItem_slot) {
    				defaultItem_slot.m(div1, null);
    			}

    			append_dev(div1, t0);
    			append_dev(div1, button);
    			mount_component(icon, button, null);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "click", /*toggleShow*/ ctx[4], false, false, false),
    					listen_dev(div1, "click", /*handleClick*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (defaultItem_slot) {
    				if (defaultItem_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						defaultItem_slot,
    						defaultItem_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(defaultItem_slot_template, /*$$scope*/ ctx[6], dirty, get_defaultItem_slot_changes),
    						get_defaultItem_slot_context
    					);
    				}
    			}

    			if (dirty & /*visible*/ 8) {
    				toggle_class(button, "jse-visible", /*visible*/ ctx[3]);
    			}

    			if (dirty & /*items*/ 1) {
    				each_value = /*items*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$d(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$d(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(ul, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*width*/ 4) {
    				set_style(div0, "width", /*width*/ ctx[2]);
    			}

    			if (dirty & /*visible*/ 8) {
    				toggle_class(div0, "jse-visible", /*visible*/ ctx[3]);
    			}

    			if (!current || dirty & /*title*/ 2) {
    				attr_dev(div1, "title", /*title*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(defaultItem_slot, local);
    			transition_in(icon.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(defaultItem_slot, local);
    			transition_out(icon.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (defaultItem_slot) defaultItem_slot.d(detaching);
    			destroy_component(icon);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$E($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DropdownButton', slots, ['defaultItem']);
    	let { items = [] } = $$props;
    	let { title = undefined } = $$props;
    	let { width = '120px' } = $$props;
    	let visible = false;

    	function toggleShow() {
    		const wasVisible = visible;

    		// trigger *after* the handleClick which changes visibility to false
    		setTimeout(() => $$invalidate(3, visible = !wasVisible));
    	}

    	function handleClick() {
    		$$invalidate(3, visible = false);
    	}

    	function handleKeyDown(event) {
    		const combo = keyComboFromEvent(event);

    		if (combo === 'Escape') {
    			event.preventDefault();
    			$$invalidate(3, visible = false);
    		}
    	}

    	onMount(() => {
    		document.addEventListener('click', handleClick);
    		document.addEventListener('keydown', handleKeyDown);
    	});

    	onDestroy(() => {
    		document.removeEventListener('click', handleClick);
    		document.removeEventListener('keydown', handleKeyDown);
    	});

    	const writable_props = ['items', 'title', 'width'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DropdownButton> was created with unknown prop '${key}'`);
    	});

    	const click_handler = item => item.onClick();

    	$$self.$$set = $$props => {
    		if ('items' in $$props) $$invalidate(0, items = $$props.items);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('width' in $$props) $$invalidate(2, width = $$props.width);
    		if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Icon,
    		faCaretDown,
    		onDestroy,
    		onMount,
    		keyComboFromEvent,
    		items,
    		title,
    		width,
    		visible,
    		toggleShow,
    		handleClick,
    		handleKeyDown
    	});

    	$$self.$inject_state = $$props => {
    		if ('items' in $$props) $$invalidate(0, items = $$props.items);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('width' in $$props) $$invalidate(2, width = $$props.width);
    		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		items,
    		title,
    		width,
    		visible,
    		toggleShow,
    		handleClick,
    		$$scope,
    		slots,
    		click_handler
    	];
    }

    class DropdownButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$E, create_fragment$E, not_equal, { items: 0, title: 1, width: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DropdownButton",
    			options,
    			id: create_fragment$E.name
    		});
    	}

    	get items() {
    		throw new Error("<DropdownButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<DropdownButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<DropdownButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<DropdownButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<DropdownButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<DropdownButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*!
     * Font Awesome Free 6.1.1 by @fontawesome - https://fontawesome.com
     * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
     * Copyright 2022 Fonticons, Inc.
     */
    var faClock = {
      prefix: 'far',
      iconName: 'clock',
      icon: [512, 512, [128339, "clock-four"], "f017", "M232 120C232 106.7 242.7 96 256 96C269.3 96 280 106.7 280 120V243.2L365.3 300C376.3 307.4 379.3 322.3 371.1 333.3C364.6 344.3 349.7 347.3 338.7 339.1L242.7 275.1C236 271.5 232 264 232 255.1L232 120zM256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0zM48 256C48 370.9 141.1 464 256 464C370.9 464 464 370.9 464 256C464 141.1 370.9 48 256 48C141.1 48 48 141.1 48 256z"]
    };
    var faLightbulb = {
      prefix: 'far',
      iconName: 'lightbulb',
      icon: [384, 512, [128161], "f0eb", "M112.1 454.3c0 6.297 1.816 12.44 5.284 17.69l17.14 25.69c5.25 7.875 17.17 14.28 26.64 14.28h61.67c9.438 0 21.36-6.401 26.61-14.28l17.08-25.68c2.938-4.438 5.348-12.37 5.348-17.7L272 415.1h-160L112.1 454.3zM192 0C90.02 .3203 16 82.97 16 175.1c0 44.38 16.44 84.84 43.56 115.8c16.53 18.84 42.34 58.23 52.22 91.45c.0313 .25 .0938 .5166 .125 .7823h160.2c.0313-.2656 .0938-.5166 .125-.7823c9.875-33.22 35.69-72.61 52.22-91.45C351.6 260.8 368 220.4 368 175.1C368 78.8 289.2 .0039 192 0zM288.4 260.1c-15.66 17.85-35.04 46.3-49.05 75.89h-94.61c-14.01-29.59-33.39-58.04-49.04-75.88C75.24 236.8 64 206.1 64 175.1C64 113.3 112.1 48.25 191.1 48C262.6 48 320 105.4 320 175.1C320 206.1 308.8 236.8 288.4 260.1zM176 80C131.9 80 96 115.9 96 160c0 8.844 7.156 16 16 16S128 168.8 128 160c0-26.47 21.53-48 48-48c8.844 0 16-7.148 16-15.99S184.8 80 176 80z"]
    };
    var faSquare = {
      prefix: 'far',
      iconName: 'square',
      icon: [448, 512, [9723, 9724, 61590, 9632], "f0c8", "M384 32C419.3 32 448 60.65 448 96V416C448 451.3 419.3 480 384 480H64C28.65 480 0 451.3 0 416V96C0 60.65 28.65 32 64 32H384zM384 80H64C55.16 80 48 87.16 48 96V416C48 424.8 55.16 432 64 432H384C392.8 432 400 424.8 400 416V96C400 87.16 392.8 80 384 80z"]
    };
    var faSquareCheck = {
      prefix: 'far',
      iconName: 'square-check',
      icon: [448, 512, [9989, 61510, 9745, "check-square"], "f14a", "M211.8 339.8C200.9 350.7 183.1 350.7 172.2 339.8L108.2 275.8C97.27 264.9 97.27 247.1 108.2 236.2C119.1 225.3 136.9 225.3 147.8 236.2L192 280.4L300.2 172.2C311.1 161.3 328.9 161.3 339.8 172.2C350.7 183.1 350.7 200.9 339.8 211.8L211.8 339.8zM0 96C0 60.65 28.65 32 64 32H384C419.3 32 448 60.65 448 96V416C448 451.3 419.3 480 384 480H64C28.65 480 0 451.3 0 416V96zM48 96V416C48 424.8 55.16 432 64 432H384C392.8 432 400 424.8 400 416V96C400 87.16 392.8 80 384 80H64C55.16 80 48 87.16 48 96z"]
    };
    var faCheckSquare = faSquareCheck;

    /* node_modules/svelte-jsoneditor/components/modes/treemode/contextmenu/ContextMenu.svelte generated by Svelte v3.48.0 */
    const file$z = "node_modules/svelte-jsoneditor/components/modes/treemode/contextmenu/ContextMenu.svelte";

    // (234:6) 
    function create_defaultItem_slot_2(ctx) {
    	let button;
    	let icon;
    	let t;
    	let button_disabled_value;
    	let current;
    	let mounted;
    	let dispose;
    	icon = new Icon({ props: { data: faPen }, $$inline: true });

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(icon.$$.fragment);
    			t = text(" Edit value");
    			attr_dev(button, "type", "button");
    			attr_dev(button, "slot", "defaultItem");
    			attr_dev(button, "title", "Edit the value (Double-click on the value)");
    			button.disabled = button_disabled_value = !/*canEditValue*/ ctx[2];
    			attr_dev(button, "class", "svelte-1yai37q");
    			add_location(button, file$z, 233, 6, 7418);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(icon, button, null);
    			append_dev(button, t);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleEditValue*/ ctx[18], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty[0] & /*canEditValue*/ 4 && button_disabled_value !== (button_disabled_value = !/*canEditValue*/ ctx[2])) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_defaultItem_slot_2.name,
    		type: "slot",
    		source: "(234:6) ",
    		ctx
    	});

    	return block;
    }

    // (248:6) 
    function create_defaultItem_slot_1(ctx) {
    	let button;
    	let icon;
    	let t;
    	let button_disabled_value;
    	let current;
    	let mounted;
    	let dispose;
    	icon = new Icon({ props: { data: faCut }, $$inline: true });

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(icon.$$.fragment);
    			t = text(" Cut");
    			attr_dev(button, "type", "button");
    			attr_dev(button, "slot", "defaultItem");
    			attr_dev(button, "title", "Cut selected contents, formatted with indentation (Ctrl+X)");
    			button.disabled = button_disabled_value = !/*hasSelectionContents*/ ctx[1];
    			attr_dev(button, "class", "svelte-1yai37q");
    			add_location(button, file$z, 247, 6, 7819);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(icon, button, null);
    			append_dev(button, t);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleCut*/ ctx[19], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty[0] & /*hasSelectionContents*/ 2 && button_disabled_value !== (button_disabled_value = !/*hasSelectionContents*/ ctx[1])) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_defaultItem_slot_1.name,
    		type: "slot",
    		source: "(248:6) ",
    		ctx
    	});

    	return block;
    }

    // (259:6) 
    function create_defaultItem_slot(ctx) {
    	let button;
    	let icon;
    	let t;
    	let button_disabled_value;
    	let current;
    	let mounted;
    	let dispose;
    	icon = new Icon({ props: { data: faCopy }, $$inline: true });

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(icon.$$.fragment);
    			t = text(" Copy");
    			attr_dev(button, "type", "button");
    			attr_dev(button, "slot", "defaultItem");
    			attr_dev(button, "title", "Copy selected contents, formatted with indentation (Ctrl+C)");
    			button.disabled = button_disabled_value = !/*hasSelectionContents*/ ctx[1];
    			attr_dev(button, "class", "svelte-1yai37q");
    			add_location(button, file$z, 258, 6, 8167);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(icon, button, null);
    			append_dev(button, t);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleCopy*/ ctx[20], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty[0] & /*hasSelectionContents*/ 2 && button_disabled_value !== (button_disabled_value = !/*hasSelectionContents*/ ctx[1])) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_defaultItem_slot.name,
    		type: "slot",
    		source: "(259:6) ",
    		ctx
    	});

    	return block;
    }

    // (379:2) {#if showTip}
    function create_if_block$k(ctx) {
    	let div3;
    	let div2;
    	let div0;
    	let icon;
    	let t0;
    	let div1;
    	let current;

    	icon = new Icon({
    			props: { data: faLightbulb },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			create_component(icon.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			div1.textContent = "Tip: you can open this context menu via right-click or with Ctrl+Q";
    			attr_dev(div0, "class", "svelte-1yai37q");
    			add_location(div0, file$z, 381, 8, 11791);
    			attr_dev(div1, "class", "svelte-1yai37q");
    			add_location(div1, file$z, 384, 8, 11858);
    			attr_dev(div2, "class", "jse-tip svelte-1yai37q");
    			add_location(div2, file$z, 380, 6, 11761);
    			attr_dev(div3, "class", "jse-row svelte-1yai37q");
    			add_location(div3, file$z, 379, 4, 11733);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			mount_component(icon, div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(icon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$k.name,
    		type: "if",
    		source: "(379:2) {#if showTip}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$D(ctx) {
    	let div10;
    	let div0;
    	let button0;
    	let icon0;
    	let t0;
    	let button0_disabled_value;
    	let t1;
    	let dropdownbutton0;
    	let t2;
    	let div1;
    	let t3;
    	let div2;
    	let dropdownbutton1;
    	let t4;
    	let dropdownbutton2;
    	let t5;
    	let button1;
    	let icon1;
    	let t6;
    	let button1_disabled_value;
    	let t7;
    	let div3;
    	let t8;
    	let div7;
    	let div4;
    	let button2;
    	let icon2;
    	let t9;
    	let button2_disabled_value;
    	let t10;
    	let button3;
    	let icon3;
    	let t11;
    	let button3_disabled_value;
    	let t12;
    	let button4;
    	let icon4;
    	let t13;
    	let button4_disabled_value;
    	let t14;
    	let button5;
    	let icon5;
    	let t15;
    	let button5_disabled_value;
    	let t16;
    	let button6;
    	let icon6;
    	let t17;
    	let button6_disabled_value;
    	let t18;
    	let div6;
    	let div5;
    	let t19;
    	let t20;
    	let t21;
    	let button7;
    	let span1;
    	let span0;
    	let t23;
    	let button7_title_value;
    	let button7_disabled_value;
    	let t24;
    	let button8;
    	let span2;
    	let t26;
    	let button8_title_value;
    	let button8_disabled_value;
    	let t27;
    	let button9;
    	let span3;
    	let t29;
    	let button9_title_value;
    	let button9_disabled_value;
    	let t30;
    	let button10;
    	let span5;
    	let span4;
    	let t32;
    	let button10_title_value;
    	let button10_disabled_value;
    	let t33;
    	let div8;
    	let t34;
    	let div9;
    	let button11;
    	let icon7;
    	let t35;
    	let button11_disabled_value;
    	let t36;
    	let button12;
    	let icon8;
    	let t37;
    	let button12_disabled_value;
    	let t38;
    	let current;
    	let mounted;
    	let dispose;
    	icon0 = new Icon({ props: { data: faPen }, $$inline: true });

    	dropdownbutton0 = new DropdownButton({
    			props: {
    				width: "11em",
    				items: /*editValueDropdownItems*/ ctx[8],
    				$$slots: { defaultItem: [create_defaultItem_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	dropdownbutton1 = new DropdownButton({
    			props: {
    				width: "10em",
    				items: /*cutDropdownItems*/ ctx[7],
    				$$slots: { defaultItem: [create_defaultItem_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	dropdownbutton2 = new DropdownButton({
    			props: {
    				width: "12em",
    				items: /*copyDropdownItems*/ ctx[6],
    				$$slots: { defaultItem: [create_defaultItem_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	icon1 = new Icon({ props: { data: faPaste }, $$inline: true });
    	icon2 = new Icon({ props: { data: faTimes }, $$inline: true });
    	icon3 = new Icon({ props: { data: faClone }, $$inline: true });

    	icon4 = new Icon({
    			props: { data: faCropAlt },
    			$$inline: true
    		});

    	icon5 = new Icon({
    			props: { data: faSortAmountDownAlt },
    			$$inline: true
    		});

    	icon6 = new Icon({
    			props: { data: faFilter },
    			$$inline: true
    		});

    	icon7 = new Icon({
    			props: { data: faCaretSquareUp },
    			$$inline: true
    		});

    	icon8 = new Icon({
    			props: { data: faCaretSquareDown },
    			$$inline: true
    		});

    	let if_block = /*showTip*/ ctx[0] && create_if_block$k(ctx);

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			create_component(icon0.$$.fragment);
    			t0 = text(" Edit key");
    			t1 = space();
    			create_component(dropdownbutton0.$$.fragment);
    			t2 = space();
    			div1 = element("div");
    			t3 = space();
    			div2 = element("div");
    			create_component(dropdownbutton1.$$.fragment);
    			t4 = space();
    			create_component(dropdownbutton2.$$.fragment);
    			t5 = space();
    			button1 = element("button");
    			create_component(icon1.$$.fragment);
    			t6 = text(" Paste");
    			t7 = space();
    			div3 = element("div");
    			t8 = space();
    			div7 = element("div");
    			div4 = element("div");
    			button2 = element("button");
    			create_component(icon2.$$.fragment);
    			t9 = text(" Remove");
    			t10 = space();
    			button3 = element("button");
    			create_component(icon3.$$.fragment);
    			t11 = text(" Duplicate");
    			t12 = space();
    			button4 = element("button");
    			create_component(icon4.$$.fragment);
    			t13 = text(" Extract");
    			t14 = space();
    			button5 = element("button");
    			create_component(icon5.$$.fragment);
    			t15 = text(" Sort");
    			t16 = space();
    			button6 = element("button");
    			create_component(icon6.$$.fragment);
    			t17 = text(" Transform");
    			t18 = space();
    			div6 = element("div");
    			div5 = element("div");
    			t19 = text(/*insertOrConvertText*/ ctx[13]);
    			t20 = text(":");
    			t21 = space();
    			button7 = element("button");
    			span1 = element("span");
    			span0 = element("span");
    			span0.textContent = `${'+'}`;
    			t23 = text(" Structure");
    			t24 = space();
    			button8 = element("button");
    			span2 = element("span");
    			span2.textContent = `${'{}'}`;
    			t26 = text(" Object");
    			t27 = space();
    			button9 = element("button");
    			span3 = element("span");
    			span3.textContent = "[]";
    			t29 = text(" Array");
    			t30 = space();
    			button10 = element("button");
    			span5 = element("span");
    			span4 = element("span");
    			span4.textContent = "\"";
    			t32 = text(" Value");
    			t33 = space();
    			div8 = element("div");
    			t34 = space();
    			div9 = element("div");
    			button11 = element("button");
    			create_component(icon7.$$.fragment);
    			t35 = text(" Insert before");
    			t36 = space();
    			button12 = element("button");
    			create_component(icon8.$$.fragment);
    			t37 = text(" Insert after");
    			t38 = space();
    			if (if_block) if_block.c();
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "title", "Edit the key (Double-click on the key)");
    			button0.disabled = button0_disabled_value = !/*canEditKey*/ ctx[14];
    			attr_dev(button0, "class", "svelte-1yai37q");
    			add_location(button0, file$z, 224, 4, 7149);
    			attr_dev(div0, "class", "jse-row svelte-1yai37q");
    			add_location(div0, file$z, 223, 2, 7123);
    			attr_dev(div1, "class", "jse-separator svelte-1yai37q");
    			add_location(div1, file$z, 244, 2, 7700);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "title", "Paste clipboard contents (Ctrl+V)");
    			button1.disabled = button1_disabled_value = !/*hasSelection*/ ctx[3];
    			attr_dev(button1, "class", "svelte-1yai37q");
    			add_location(button1, file$z, 268, 4, 8457);
    			attr_dev(div2, "class", "jse-row svelte-1yai37q");
    			add_location(div2, file$z, 245, 2, 7732);
    			attr_dev(div3, "class", "jse-separator svelte-1yai37q");
    			add_location(div3, file$z, 277, 2, 8660);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "title", "Remove selected contents (Delete)");
    			button2.disabled = button2_disabled_value = !/*hasSelectionContents*/ ctx[1];
    			attr_dev(button2, "class", "svelte-1yai37q");
    			add_location(button2, file$z, 280, 6, 8749);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "title", "Duplicate selected contents (Ctrl+D)");
    			button3.disabled = button3_disabled_value = !/*canDuplicate*/ ctx[16];
    			attr_dev(button3, "class", "svelte-1yai37q");
    			add_location(button3, file$z, 288, 6, 8971);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "title", "Extract selected contents");
    			button4.disabled = button4_disabled_value = !/*canExtract*/ ctx[15];
    			attr_dev(button4, "class", "svelte-1yai37q");
    			add_location(button4, file$z, 296, 6, 9194);
    			attr_dev(button5, "type", "button");
    			attr_dev(button5, "title", "Sort array or object contents");
    			button5.disabled = button5_disabled_value = !/*hasSelectionContents*/ ctx[1];
    			attr_dev(button5, "class", "svelte-1yai37q");
    			add_location(button5, file$z, 304, 6, 9402);
    			attr_dev(button6, "type", "button");
    			attr_dev(button6, "title", "Transform array or object contents (filter, sort, project)");
    			button6.disabled = button6_disabled_value = !/*hasSelectionContents*/ ctx[1];
    			attr_dev(button6, "class", "svelte-1yai37q");
    			add_location(button6, file$z, 312, 6, 9628);
    			attr_dev(div4, "class", "jse-column svelte-1yai37q");
    			add_location(div4, file$z, 279, 4, 8718);
    			attr_dev(div5, "class", "jse-label svelte-1yai37q");
    			add_location(div5, file$z, 322, 6, 9922);
    			attr_dev(span0, "class", "jse-plus svelte-1yai37q");
    			add_location(span0, file$z, 331, 33, 10223);
    			attr_dev(span1, "class", "jse-insert svelte-1yai37q");
    			add_location(span1, file$z, 331, 8, 10198);
    			attr_dev(button7, "type", "button");
    			attr_dev(button7, "title", button7_title_value = "" + (/*insertOrConvertText*/ ctx[13] + " structure"));
    			button7.disabled = button7_disabled_value = !/*canInsertOrConvertStructure*/ ctx[12];
    			attr_dev(button7, "class", "svelte-1yai37q");
    			add_location(button7, file$z, 325, 6, 9996);
    			attr_dev(span2, "class", "jse-insert svelte-1yai37q");
    			add_location(span2, file$z, 339, 8, 10491);
    			attr_dev(button8, "type", "button");
    			attr_dev(button8, "title", button8_title_value = "" + (/*insertOrConvertText*/ ctx[13] + " object"));
    			button8.disabled = button8_disabled_value = !/*canInsertOrConvertObject*/ ctx[11];
    			attr_dev(button8, "class", "svelte-1yai37q");
    			add_location(button8, file$z, 333, 6, 10298);
    			attr_dev(span3, "class", "jse-insert svelte-1yai37q");
    			add_location(span3, file$z, 347, 8, 10749);
    			attr_dev(button9, "type", "button");
    			attr_dev(button9, "title", button9_title_value = "" + (/*insertOrConvertText*/ ctx[13] + " array"));
    			button9.disabled = button9_disabled_value = !/*canInsertOrConvertArray*/ ctx[10];
    			attr_dev(button9, "class", "svelte-1yai37q");
    			add_location(button9, file$z, 341, 6, 10559);
    			attr_dev(span4, "class", "jse-quote svelte-1yai37q");
    			add_location(span4, file$z, 355, 33, 11027);
    			attr_dev(span5, "class", "jse-insert svelte-1yai37q");
    			add_location(span5, file$z, 355, 8, 11002);
    			attr_dev(button10, "type", "button");
    			attr_dev(button10, "title", button10_title_value = "" + (/*insertOrConvertText*/ ctx[13] + " value"));
    			button10.disabled = button10_disabled_value = !/*canInsertOrConvertValue*/ ctx[9];
    			attr_dev(button10, "class", "svelte-1yai37q");
    			add_location(button10, file$z, 349, 6, 10812);
    			attr_dev(div6, "class", "jse-column svelte-1yai37q");
    			add_location(div6, file$z, 321, 4, 9891);
    			attr_dev(div7, "class", "jse-row svelte-1yai37q");
    			add_location(div7, file$z, 278, 2, 8692);
    			attr_dev(div8, "class", "jse-separator svelte-1yai37q");
    			add_location(div8, file$z, 359, 2, 11111);
    			attr_dev(button11, "type", "button");
    			attr_dev(button11, "title", "Select area before current entry to insert or paste contents");
    			button11.disabled = button11_disabled_value = !/*hasSelectionContents*/ ctx[1] || /*rootSelected*/ ctx[4];
    			attr_dev(button11, "class", "svelte-1yai37q");
    			add_location(button11, file$z, 361, 4, 11169);
    			attr_dev(button12, "type", "button");
    			attr_dev(button12, "title", "Select area after current entry to insert or paste contents");
    			button12.disabled = button12_disabled_value = !/*hasSelectionContents*/ ctx[1] || /*rootSelected*/ ctx[4];
    			attr_dev(button12, "class", "svelte-1yai37q");
    			add_location(button12, file$z, 369, 4, 11439);
    			attr_dev(div9, "class", "jse-row svelte-1yai37q");
    			add_location(div9, file$z, 360, 2, 11143);
    			attr_dev(div10, "class", "jse-contextmenu svelte-1yai37q");
    			add_location(div10, file$z, 222, 0, 7037);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div0);
    			append_dev(div0, button0);
    			mount_component(icon0, button0, null);
    			append_dev(button0, t0);
    			append_dev(div0, t1);
    			mount_component(dropdownbutton0, div0, null);
    			append_dev(div10, t2);
    			append_dev(div10, div1);
    			append_dev(div10, t3);
    			append_dev(div10, div2);
    			mount_component(dropdownbutton1, div2, null);
    			append_dev(div2, t4);
    			mount_component(dropdownbutton2, div2, null);
    			append_dev(div2, t5);
    			append_dev(div2, button1);
    			mount_component(icon1, button1, null);
    			append_dev(button1, t6);
    			append_dev(div10, t7);
    			append_dev(div10, div3);
    			append_dev(div10, t8);
    			append_dev(div10, div7);
    			append_dev(div7, div4);
    			append_dev(div4, button2);
    			mount_component(icon2, button2, null);
    			append_dev(button2, t9);
    			append_dev(div4, t10);
    			append_dev(div4, button3);
    			mount_component(icon3, button3, null);
    			append_dev(button3, t11);
    			append_dev(div4, t12);
    			append_dev(div4, button4);
    			mount_component(icon4, button4, null);
    			append_dev(button4, t13);
    			append_dev(div4, t14);
    			append_dev(div4, button5);
    			mount_component(icon5, button5, null);
    			append_dev(button5, t15);
    			append_dev(div4, t16);
    			append_dev(div4, button6);
    			mount_component(icon6, button6, null);
    			append_dev(button6, t17);
    			append_dev(div7, t18);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, t19);
    			append_dev(div5, t20);
    			append_dev(div6, t21);
    			append_dev(div6, button7);
    			append_dev(button7, span1);
    			append_dev(span1, span0);
    			append_dev(button7, t23);
    			append_dev(div6, t24);
    			append_dev(div6, button8);
    			append_dev(button8, span2);
    			append_dev(button8, t26);
    			append_dev(div6, t27);
    			append_dev(div6, button9);
    			append_dev(button9, span3);
    			append_dev(button9, t29);
    			append_dev(div6, t30);
    			append_dev(div6, button10);
    			append_dev(button10, span5);
    			append_dev(span5, span4);
    			append_dev(button10, t32);
    			append_dev(div10, t33);
    			append_dev(div10, div8);
    			append_dev(div10, t34);
    			append_dev(div10, div9);
    			append_dev(div9, button11);
    			mount_component(icon7, button11, null);
    			append_dev(button11, t35);
    			append_dev(div9, t36);
    			append_dev(div9, button12);
    			mount_component(icon8, button12, null);
    			append_dev(button12, t37);
    			append_dev(div10, t38);
    			if (if_block) if_block.m(div10, null);
    			/*div10_binding*/ ctx[58](div10);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*handleEditKey*/ ctx[17], false, false, false),
    					listen_dev(button1, "click", /*handlePaste*/ ctx[21], false, false, false),
    					listen_dev(button2, "click", /*handleRemove*/ ctx[22], false, false, false),
    					listen_dev(button3, "click", /*handleDuplicate*/ ctx[23], false, false, false),
    					listen_dev(button4, "click", /*handleExtract*/ ctx[24], false, false, false),
    					listen_dev(button5, "click", /*handleSort*/ ctx[26], false, false, false),
    					listen_dev(button6, "click", /*handleTransform*/ ctx[27], false, false, false),
    					listen_dev(button7, "click", /*click_handler*/ ctx[54], false, false, false),
    					listen_dev(button8, "click", /*click_handler_1*/ ctx[55], false, false, false),
    					listen_dev(button9, "click", /*click_handler_2*/ ctx[56], false, false, false),
    					listen_dev(button10, "click", /*click_handler_3*/ ctx[57], false, false, false),
    					listen_dev(button11, "click", /*handleInsertBefore*/ ctx[28], false, false, false),
    					listen_dev(button12, "click", /*handleInsertAfter*/ ctx[29], false, false, false),
    					listen_dev(div10, "keydown", /*handleKeyDown*/ ctx[30], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty[0] & /*canEditKey*/ 16384 && button0_disabled_value !== (button0_disabled_value = !/*canEditKey*/ ctx[14])) {
    				prop_dev(button0, "disabled", button0_disabled_value);
    			}

    			const dropdownbutton0_changes = {};
    			if (dirty[0] & /*editValueDropdownItems*/ 256) dropdownbutton0_changes.items = /*editValueDropdownItems*/ ctx[8];

    			if (dirty[0] & /*canEditValue*/ 4 | dirty[2] & /*$$scope*/ 1) {
    				dropdownbutton0_changes.$$scope = { dirty, ctx };
    			}

    			dropdownbutton0.$set(dropdownbutton0_changes);
    			const dropdownbutton1_changes = {};
    			if (dirty[0] & /*cutDropdownItems*/ 128) dropdownbutton1_changes.items = /*cutDropdownItems*/ ctx[7];

    			if (dirty[0] & /*hasSelectionContents*/ 2 | dirty[2] & /*$$scope*/ 1) {
    				dropdownbutton1_changes.$$scope = { dirty, ctx };
    			}

    			dropdownbutton1.$set(dropdownbutton1_changes);
    			const dropdownbutton2_changes = {};
    			if (dirty[0] & /*copyDropdownItems*/ 64) dropdownbutton2_changes.items = /*copyDropdownItems*/ ctx[6];

    			if (dirty[0] & /*hasSelectionContents*/ 2 | dirty[2] & /*$$scope*/ 1) {
    				dropdownbutton2_changes.$$scope = { dirty, ctx };
    			}

    			dropdownbutton2.$set(dropdownbutton2_changes);

    			if (!current || dirty[0] & /*hasSelection*/ 8 && button1_disabled_value !== (button1_disabled_value = !/*hasSelection*/ ctx[3])) {
    				prop_dev(button1, "disabled", button1_disabled_value);
    			}

    			if (!current || dirty[0] & /*hasSelectionContents*/ 2 && button2_disabled_value !== (button2_disabled_value = !/*hasSelectionContents*/ ctx[1])) {
    				prop_dev(button2, "disabled", button2_disabled_value);
    			}

    			if (!current || dirty[0] & /*canDuplicate*/ 65536 && button3_disabled_value !== (button3_disabled_value = !/*canDuplicate*/ ctx[16])) {
    				prop_dev(button3, "disabled", button3_disabled_value);
    			}

    			if (!current || dirty[0] & /*canExtract*/ 32768 && button4_disabled_value !== (button4_disabled_value = !/*canExtract*/ ctx[15])) {
    				prop_dev(button4, "disabled", button4_disabled_value);
    			}

    			if (!current || dirty[0] & /*hasSelectionContents*/ 2 && button5_disabled_value !== (button5_disabled_value = !/*hasSelectionContents*/ ctx[1])) {
    				prop_dev(button5, "disabled", button5_disabled_value);
    			}

    			if (!current || dirty[0] & /*hasSelectionContents*/ 2 && button6_disabled_value !== (button6_disabled_value = !/*hasSelectionContents*/ ctx[1])) {
    				prop_dev(button6, "disabled", button6_disabled_value);
    			}

    			if (!current || dirty[0] & /*insertOrConvertText*/ 8192) set_data_dev(t19, /*insertOrConvertText*/ ctx[13]);

    			if (!current || dirty[0] & /*insertOrConvertText*/ 8192 && button7_title_value !== (button7_title_value = "" + (/*insertOrConvertText*/ ctx[13] + " structure"))) {
    				attr_dev(button7, "title", button7_title_value);
    			}

    			if (!current || dirty[0] & /*canInsertOrConvertStructure*/ 4096 && button7_disabled_value !== (button7_disabled_value = !/*canInsertOrConvertStructure*/ ctx[12])) {
    				prop_dev(button7, "disabled", button7_disabled_value);
    			}

    			if (!current || dirty[0] & /*insertOrConvertText*/ 8192 && button8_title_value !== (button8_title_value = "" + (/*insertOrConvertText*/ ctx[13] + " object"))) {
    				attr_dev(button8, "title", button8_title_value);
    			}

    			if (!current || dirty[0] & /*canInsertOrConvertObject*/ 2048 && button8_disabled_value !== (button8_disabled_value = !/*canInsertOrConvertObject*/ ctx[11])) {
    				prop_dev(button8, "disabled", button8_disabled_value);
    			}

    			if (!current || dirty[0] & /*insertOrConvertText*/ 8192 && button9_title_value !== (button9_title_value = "" + (/*insertOrConvertText*/ ctx[13] + " array"))) {
    				attr_dev(button9, "title", button9_title_value);
    			}

    			if (!current || dirty[0] & /*canInsertOrConvertArray*/ 1024 && button9_disabled_value !== (button9_disabled_value = !/*canInsertOrConvertArray*/ ctx[10])) {
    				prop_dev(button9, "disabled", button9_disabled_value);
    			}

    			if (!current || dirty[0] & /*insertOrConvertText*/ 8192 && button10_title_value !== (button10_title_value = "" + (/*insertOrConvertText*/ ctx[13] + " value"))) {
    				attr_dev(button10, "title", button10_title_value);
    			}

    			if (!current || dirty[0] & /*canInsertOrConvertValue*/ 512 && button10_disabled_value !== (button10_disabled_value = !/*canInsertOrConvertValue*/ ctx[9])) {
    				prop_dev(button10, "disabled", button10_disabled_value);
    			}

    			if (!current || dirty[0] & /*hasSelectionContents, rootSelected*/ 18 && button11_disabled_value !== (button11_disabled_value = !/*hasSelectionContents*/ ctx[1] || /*rootSelected*/ ctx[4])) {
    				prop_dev(button11, "disabled", button11_disabled_value);
    			}

    			if (!current || dirty[0] & /*hasSelectionContents, rootSelected*/ 18 && button12_disabled_value !== (button12_disabled_value = !/*hasSelectionContents*/ ctx[1] || /*rootSelected*/ ctx[4])) {
    				prop_dev(button12, "disabled", button12_disabled_value);
    			}

    			if (/*showTip*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*showTip*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$k(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div10, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon0.$$.fragment, local);
    			transition_in(dropdownbutton0.$$.fragment, local);
    			transition_in(dropdownbutton1.$$.fragment, local);
    			transition_in(dropdownbutton2.$$.fragment, local);
    			transition_in(icon1.$$.fragment, local);
    			transition_in(icon2.$$.fragment, local);
    			transition_in(icon3.$$.fragment, local);
    			transition_in(icon4.$$.fragment, local);
    			transition_in(icon5.$$.fragment, local);
    			transition_in(icon6.$$.fragment, local);
    			transition_in(icon7.$$.fragment, local);
    			transition_in(icon8.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon0.$$.fragment, local);
    			transition_out(dropdownbutton0.$$.fragment, local);
    			transition_out(dropdownbutton1.$$.fragment, local);
    			transition_out(dropdownbutton2.$$.fragment, local);
    			transition_out(icon1.$$.fragment, local);
    			transition_out(icon2.$$.fragment, local);
    			transition_out(icon3.$$.fragment, local);
    			transition_out(icon4.$$.fragment, local);
    			transition_out(icon5.$$.fragment, local);
    			transition_out(icon6.$$.fragment, local);
    			transition_out(icon7.$$.fragment, local);
    			transition_out(icon8.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			destroy_component(icon0);
    			destroy_component(dropdownbutton0);
    			destroy_component(dropdownbutton1);
    			destroy_component(dropdownbutton2);
    			destroy_component(icon1);
    			destroy_component(icon2);
    			destroy_component(icon3);
    			destroy_component(icon4);
    			destroy_component(icon5);
    			destroy_component(icon6);
    			destroy_component(icon7);
    			destroy_component(icon8);
    			if (if_block) if_block.d();
    			/*div10_binding*/ ctx[58](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$D($$self, $$props, $$invalidate) {
    	let hasJson;
    	let hasSelection;
    	let rootSelected;
    	let focusValue;
    	let hasSelectionContents;
    	let canDuplicate;
    	let canExtract;
    	let canEditKey;
    	let canEditValue;
    	let convertMode;
    	let insertOrConvertText;
    	let canInsertOrConvertStructure;
    	let canInsertOrConvertObject;
    	let canInsertOrConvertArray;
    	let canInsertOrConvertValue;
    	let enforceString;
    	let editValueDropdownItems;
    	let cutDropdownItems;
    	let copyDropdownItems;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ContextMenu', slots, []);
    	let { json } = $$props;
    	let { state } = $$props;
    	let { selection } = $$props;
    	let { showTip } = $$props;
    	let { onCloseContextMenu } = $$props;
    	let { onEditKey } = $$props;
    	let { onEditValue } = $$props;
    	let { onToggleEnforceString } = $$props;
    	let { onCut } = $$props;
    	let { onCopy } = $$props;
    	let { onPaste } = $$props;
    	let { onRemove } = $$props;
    	let { onDuplicate } = $$props;
    	let { onExtract } = $$props;
    	let { onInsertBefore } = $$props;
    	let { onInsert } = $$props;
    	let { onConvert } = $$props;
    	let { onInsertAfter } = $$props;
    	let { onSort } = $$props;
    	let { onTransform } = $$props;
    	let refContextMenu;

    	onMount(() => {
    		setTimeout(() => {
    			const firstEnabledButton = [...refContextMenu.querySelectorAll('button')].find(button => !button.disabled);

    			if (firstEnabledButton) {
    				firstEnabledButton.focus();
    			}
    		});
    	});

    	function handleEditKey() {
    		onCloseContextMenu();
    		onEditKey();
    	}

    	function handleEditValue() {
    		onCloseContextMenu();
    		onEditValue();
    	}

    	function handleToggleEnforceString() {
    		onCloseContextMenu();
    		onToggleEnforceString();
    	}

    	function handleCut() {
    		onCloseContextMenu();
    		onCut(true);
    	}

    	function handleCutCompact() {
    		onCloseContextMenu();
    		onCut(false);
    	}

    	function handleCopy() {
    		onCloseContextMenu();
    		onCopy(true);
    	}

    	function handleCopyCompact() {
    		onCloseContextMenu();
    		onCopy(false);
    	}

    	function handlePaste() {
    		onCloseContextMenu();
    		onPaste();
    	}

    	function handleRemove() {
    		onCloseContextMenu();
    		onRemove();
    	}

    	function handleDuplicate() {
    		onCloseContextMenu();
    		onDuplicate();
    	}

    	function handleExtract() {
    		onCloseContextMenu();
    		onExtract();
    	}

    	function handleInsertOrConvert(type) {
    		onCloseContextMenu();

    		if (hasSelectionContents) {
    			onConvert(type);
    		} else {
    			onInsert(type);
    		}
    	}

    	function handleSort() {
    		onCloseContextMenu();
    		onSort();
    	}

    	function handleTransform() {
    		onCloseContextMenu();
    		onTransform();
    	}

    	function handleInsertBefore() {
    		onCloseContextMenu();
    		onInsertBefore();
    	}

    	function handleInsertAfter() {
    		onCloseContextMenu();
    		onInsertAfter();
    	}

    	function handleKeyDown(event) {
    		const combo = keyComboFromEvent(event).replace(/^Command\+/, 'Ctrl+');

    		if (combo === 'Up' || combo === 'Down' || combo === 'Left' || combo === 'Right') {
    			event.preventDefault();
    			const buttons = Array.from(refContextMenu.querySelectorAll('button:not([disabled])'));

    			const nearest = findNearestElement({
    				allElements: buttons,
    				currentElement: event.target,
    				direction: combo,
    				hasPrio: element => {
    					return element.getAttribute('data-type') !== 'jse-open-dropdown';
    				}
    			});

    			if (nearest) {
    				nearest.focus();
    			}
    		}
    	}

    	const writable_props = [
    		'json',
    		'state',
    		'selection',
    		'showTip',
    		'onCloseContextMenu',
    		'onEditKey',
    		'onEditValue',
    		'onToggleEnforceString',
    		'onCut',
    		'onCopy',
    		'onPaste',
    		'onRemove',
    		'onDuplicate',
    		'onExtract',
    		'onInsertBefore',
    		'onInsert',
    		'onConvert',
    		'onInsertAfter',
    		'onSort',
    		'onTransform'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ContextMenu> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => handleInsertOrConvert('structure');
    	const click_handler_1 = () => handleInsertOrConvert('object');
    	const click_handler_2 = () => handleInsertOrConvert('array');
    	const click_handler_3 = () => handleInsertOrConvert('value');

    	function div10_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refContextMenu = $$value;
    			$$invalidate(5, refContextMenu);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('json' in $$props) $$invalidate(31, json = $$props.json);
    		if ('state' in $$props) $$invalidate(32, state = $$props.state);
    		if ('selection' in $$props) $$invalidate(33, selection = $$props.selection);
    		if ('showTip' in $$props) $$invalidate(0, showTip = $$props.showTip);
    		if ('onCloseContextMenu' in $$props) $$invalidate(34, onCloseContextMenu = $$props.onCloseContextMenu);
    		if ('onEditKey' in $$props) $$invalidate(35, onEditKey = $$props.onEditKey);
    		if ('onEditValue' in $$props) $$invalidate(36, onEditValue = $$props.onEditValue);
    		if ('onToggleEnforceString' in $$props) $$invalidate(37, onToggleEnforceString = $$props.onToggleEnforceString);
    		if ('onCut' in $$props) $$invalidate(38, onCut = $$props.onCut);
    		if ('onCopy' in $$props) $$invalidate(39, onCopy = $$props.onCopy);
    		if ('onPaste' in $$props) $$invalidate(40, onPaste = $$props.onPaste);
    		if ('onRemove' in $$props) $$invalidate(41, onRemove = $$props.onRemove);
    		if ('onDuplicate' in $$props) $$invalidate(42, onDuplicate = $$props.onDuplicate);
    		if ('onExtract' in $$props) $$invalidate(43, onExtract = $$props.onExtract);
    		if ('onInsertBefore' in $$props) $$invalidate(44, onInsertBefore = $$props.onInsertBefore);
    		if ('onInsert' in $$props) $$invalidate(45, onInsert = $$props.onInsert);
    		if ('onConvert' in $$props) $$invalidate(46, onConvert = $$props.onConvert);
    		if ('onInsertAfter' in $$props) $$invalidate(47, onInsertAfter = $$props.onInsertAfter);
    		if ('onSort' in $$props) $$invalidate(48, onSort = $$props.onSort);
    		if ('onTransform' in $$props) $$invalidate(49, onTransform = $$props.onTransform);
    	};

    	$$self.$capture_state = () => ({
    		faCaretSquareDown,
    		faCaretSquareUp,
    		faClone,
    		faCopy,
    		faCropAlt,
    		faCut,
    		faFilter,
    		faPaste,
    		faPen,
    		faSortAmountDownAlt,
    		faTimes,
    		getIn: immutableJSONPatch.getIn,
    		initial,
    		isEmpty,
    		onMount,
    		Icon,
    		DropdownButton,
    		SELECTION_TYPE,
    		keyComboFromEvent,
    		isObjectOrArray,
    		faCheckSquare,
    		faLightbulb,
    		faSquare,
    		STATE_ENFORCE_STRING,
    		isObject: isObject$1,
    		canConvert,
    		singleItemSelected,
    		findNearestElement,
    		json,
    		state,
    		selection,
    		showTip,
    		onCloseContextMenu,
    		onEditKey,
    		onEditValue,
    		onToggleEnforceString,
    		onCut,
    		onCopy,
    		onPaste,
    		onRemove,
    		onDuplicate,
    		onExtract,
    		onInsertBefore,
    		onInsert,
    		onConvert,
    		onInsertAfter,
    		onSort,
    		onTransform,
    		refContextMenu,
    		handleEditKey,
    		handleEditValue,
    		handleToggleEnforceString,
    		handleCut,
    		handleCutCompact,
    		handleCopy,
    		handleCopyCompact,
    		handlePaste,
    		handleRemove,
    		handleDuplicate,
    		handleExtract,
    		handleInsertOrConvert,
    		handleSort,
    		handleTransform,
    		handleInsertBefore,
    		handleInsertAfter,
    		handleKeyDown,
    		hasSelectionContents,
    		copyDropdownItems,
    		cutDropdownItems,
    		canEditValue,
    		enforceString,
    		editValueDropdownItems,
    		hasSelection,
    		focusValue,
    		convertMode,
    		canInsertOrConvertValue,
    		canInsertOrConvertArray,
    		canInsertOrConvertObject,
    		canInsertOrConvertStructure,
    		insertOrConvertText,
    		hasJson,
    		rootSelected,
    		canEditKey,
    		canExtract,
    		canDuplicate
    	});

    	$$self.$inject_state = $$props => {
    		if ('json' in $$props) $$invalidate(31, json = $$props.json);
    		if ('state' in $$props) $$invalidate(32, state = $$props.state);
    		if ('selection' in $$props) $$invalidate(33, selection = $$props.selection);
    		if ('showTip' in $$props) $$invalidate(0, showTip = $$props.showTip);
    		if ('onCloseContextMenu' in $$props) $$invalidate(34, onCloseContextMenu = $$props.onCloseContextMenu);
    		if ('onEditKey' in $$props) $$invalidate(35, onEditKey = $$props.onEditKey);
    		if ('onEditValue' in $$props) $$invalidate(36, onEditValue = $$props.onEditValue);
    		if ('onToggleEnforceString' in $$props) $$invalidate(37, onToggleEnforceString = $$props.onToggleEnforceString);
    		if ('onCut' in $$props) $$invalidate(38, onCut = $$props.onCut);
    		if ('onCopy' in $$props) $$invalidate(39, onCopy = $$props.onCopy);
    		if ('onPaste' in $$props) $$invalidate(40, onPaste = $$props.onPaste);
    		if ('onRemove' in $$props) $$invalidate(41, onRemove = $$props.onRemove);
    		if ('onDuplicate' in $$props) $$invalidate(42, onDuplicate = $$props.onDuplicate);
    		if ('onExtract' in $$props) $$invalidate(43, onExtract = $$props.onExtract);
    		if ('onInsertBefore' in $$props) $$invalidate(44, onInsertBefore = $$props.onInsertBefore);
    		if ('onInsert' in $$props) $$invalidate(45, onInsert = $$props.onInsert);
    		if ('onConvert' in $$props) $$invalidate(46, onConvert = $$props.onConvert);
    		if ('onInsertAfter' in $$props) $$invalidate(47, onInsertAfter = $$props.onInsertAfter);
    		if ('onSort' in $$props) $$invalidate(48, onSort = $$props.onSort);
    		if ('onTransform' in $$props) $$invalidate(49, onTransform = $$props.onTransform);
    		if ('refContextMenu' in $$props) $$invalidate(5, refContextMenu = $$props.refContextMenu);
    		if ('hasSelectionContents' in $$props) $$invalidate(1, hasSelectionContents = $$props.hasSelectionContents);
    		if ('copyDropdownItems' in $$props) $$invalidate(6, copyDropdownItems = $$props.copyDropdownItems);
    		if ('cutDropdownItems' in $$props) $$invalidate(7, cutDropdownItems = $$props.cutDropdownItems);
    		if ('canEditValue' in $$props) $$invalidate(2, canEditValue = $$props.canEditValue);
    		if ('enforceString' in $$props) $$invalidate(50, enforceString = $$props.enforceString);
    		if ('editValueDropdownItems' in $$props) $$invalidate(8, editValueDropdownItems = $$props.editValueDropdownItems);
    		if ('hasSelection' in $$props) $$invalidate(3, hasSelection = $$props.hasSelection);
    		if ('focusValue' in $$props) $$invalidate(51, focusValue = $$props.focusValue);
    		if ('convertMode' in $$props) $$invalidate(52, convertMode = $$props.convertMode);
    		if ('canInsertOrConvertValue' in $$props) $$invalidate(9, canInsertOrConvertValue = $$props.canInsertOrConvertValue);
    		if ('canInsertOrConvertArray' in $$props) $$invalidate(10, canInsertOrConvertArray = $$props.canInsertOrConvertArray);
    		if ('canInsertOrConvertObject' in $$props) $$invalidate(11, canInsertOrConvertObject = $$props.canInsertOrConvertObject);
    		if ('canInsertOrConvertStructure' in $$props) $$invalidate(12, canInsertOrConvertStructure = $$props.canInsertOrConvertStructure);
    		if ('insertOrConvertText' in $$props) $$invalidate(13, insertOrConvertText = $$props.insertOrConvertText);
    		if ('hasJson' in $$props) $$invalidate(53, hasJson = $$props.hasJson);
    		if ('rootSelected' in $$props) $$invalidate(4, rootSelected = $$props.rootSelected);
    		if ('canEditKey' in $$props) $$invalidate(14, canEditKey = $$props.canEditKey);
    		if ('canExtract' in $$props) $$invalidate(15, canExtract = $$props.canExtract);
    		if ('canDuplicate' in $$props) $$invalidate(16, canDuplicate = $$props.canDuplicate);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[1] & /*json*/ 1) {
    			$$invalidate(53, hasJson = json !== undefined);
    		}

    		if ($$self.$$.dirty[1] & /*selection*/ 4) {
    			$$invalidate(3, hasSelection = selection != null);
    		}

    		if ($$self.$$.dirty[0] & /*hasSelection*/ 8 | $$self.$$.dirty[1] & /*selection*/ 4) {
    			$$invalidate(4, rootSelected = hasSelection && isEmpty(selection.focusPath));
    		}

    		if ($$self.$$.dirty[0] & /*hasSelection*/ 8 | $$self.$$.dirty[1] & /*json, selection*/ 5) {
    			$$invalidate(51, focusValue = hasSelection
    			? immutableJSONPatch.getIn(json, selection.focusPath)
    			: undefined);
    		}

    		if ($$self.$$.dirty[1] & /*hasJson, selection*/ 4194308) {
    			$$invalidate(1, hasSelectionContents = hasJson && selection != null && (selection.type === SELECTION_TYPE.MULTI || selection.type === SELECTION_TYPE.KEY || selection.type === SELECTION_TYPE.VALUE));
    		}

    		if ($$self.$$.dirty[0] & /*hasSelectionContents, rootSelected*/ 18 | $$self.$$.dirty[1] & /*hasJson*/ 4194304) {
    			$$invalidate(16, canDuplicate = hasJson && hasSelectionContents && !rootSelected); // must not be root
    		}

    		if ($$self.$$.dirty[0] & /*rootSelected*/ 16 | $$self.$$.dirty[1] & /*hasJson, selection*/ 4194308) {
    			$$invalidate(15, canExtract = hasJson && selection != null && (selection.type === SELECTION_TYPE.MULTI || selection.type === SELECTION_TYPE.VALUE) && !rootSelected); // must not be root
    		}

    		if ($$self.$$.dirty[0] & /*rootSelected*/ 16 | $$self.$$.dirty[1] & /*hasJson, selection, json*/ 4194309) {
    			$$invalidate(14, canEditKey = hasJson && selection != null && singleItemSelected(selection) && !rootSelected && !Array.isArray(immutableJSONPatch.getIn(json, initial(selection.focusPath))));
    		}

    		if ($$self.$$.dirty[1] & /*hasJson, selection, focusValue*/ 5242884) {
    			$$invalidate(2, canEditValue = hasJson && selection != null && singleItemSelected(selection) && !isObjectOrArray(focusValue));
    		}

    		if ($$self.$$.dirty[0] & /*hasSelectionContents*/ 2) {
    			$$invalidate(52, convertMode = hasSelectionContents);
    		}

    		if ($$self.$$.dirty[1] & /*convertMode*/ 2097152) {
    			$$invalidate(13, insertOrConvertText = convertMode ? 'Convert to' : 'Insert');
    		}

    		if ($$self.$$.dirty[0] & /*hasSelection*/ 8 | $$self.$$.dirty[1] & /*convertMode*/ 2097152) {
    			$$invalidate(12, canInsertOrConvertStructure = convertMode ? false : hasSelection);
    		}

    		if ($$self.$$.dirty[0] & /*hasSelection*/ 8 | $$self.$$.dirty[1] & /*convertMode, selection, focusValue*/ 3145732) {
    			$$invalidate(11, canInsertOrConvertObject = convertMode
    			? canConvert(selection) && !isObject$1(focusValue)
    			: hasSelection);
    		}

    		if ($$self.$$.dirty[0] & /*hasSelection*/ 8 | $$self.$$.dirty[1] & /*convertMode, selection, focusValue*/ 3145732) {
    			$$invalidate(10, canInsertOrConvertArray = convertMode
    			? canConvert(selection) && !Array.isArray(focusValue)
    			: hasSelection);
    		}

    		if ($$self.$$.dirty[0] & /*hasSelection*/ 8 | $$self.$$.dirty[1] & /*convertMode, selection, focusValue*/ 3145732) {
    			$$invalidate(9, canInsertOrConvertValue = convertMode
    			? canConvert(selection) && isObjectOrArray(focusValue)
    			: hasSelection);
    		}

    		if ($$self.$$.dirty[1] & /*selection, state*/ 6) {
    			$$invalidate(50, enforceString = selection != null
    			? immutableJSONPatch.getIn(state, selection.focusPath.concat(STATE_ENFORCE_STRING)) === true
    			: false);
    		}

    		if ($$self.$$.dirty[0] & /*canEditValue*/ 4 | $$self.$$.dirty[1] & /*enforceString*/ 524288) {
    			$$invalidate(8, editValueDropdownItems = [
    				{
    					icon: faPen,
    					text: 'Edit value',
    					title: 'Edit the value (Double-click on the value)',
    					onClick: handleEditValue,
    					disabled: !canEditValue
    				},
    				{
    					icon: enforceString ? faCheckSquare : faSquare,
    					text: 'Enforce string',
    					title: 'Enforce keeping the value as string when it contains a numeric value',
    					onClick: handleToggleEnforceString,
    					disabled: !canEditValue
    				}
    			]);
    		}

    		if ($$self.$$.dirty[0] & /*hasSelectionContents*/ 2) {
    			$$invalidate(7, cutDropdownItems = [
    				{
    					icon: faCut,
    					text: 'Cut formatted',
    					title: 'Cut selected contents, formatted with indentation (Ctrl+X)',
    					onClick: handleCut,
    					disabled: !hasSelectionContents
    				},
    				{
    					icon: faCut,
    					text: 'Cut compacted',
    					title: 'Cut selected contents, without indentation (Ctrl+Shift+X)',
    					onClick: handleCutCompact,
    					disabled: !hasSelectionContents
    				}
    			]);
    		}

    		if ($$self.$$.dirty[0] & /*hasSelectionContents*/ 2) {
    			$$invalidate(6, copyDropdownItems = [
    				{
    					icon: faCopy,
    					text: 'Copy formatted',
    					title: 'Copy selected contents, formatted with indentation (Ctrl+C)',
    					onClick: handleCopy,
    					disabled: !hasSelectionContents
    				},
    				{
    					icon: faCopy,
    					text: 'Copy compacted',
    					title: 'Copy selected contents, without indentation (Ctrl+Shift+C)',
    					onClick: handleCopyCompact,
    					disabled: !hasSelectionContents
    				}
    			]);
    		}
    	};

    	return [
    		showTip,
    		hasSelectionContents,
    		canEditValue,
    		hasSelection,
    		rootSelected,
    		refContextMenu,
    		copyDropdownItems,
    		cutDropdownItems,
    		editValueDropdownItems,
    		canInsertOrConvertValue,
    		canInsertOrConvertArray,
    		canInsertOrConvertObject,
    		canInsertOrConvertStructure,
    		insertOrConvertText,
    		canEditKey,
    		canExtract,
    		canDuplicate,
    		handleEditKey,
    		handleEditValue,
    		handleCut,
    		handleCopy,
    		handlePaste,
    		handleRemove,
    		handleDuplicate,
    		handleExtract,
    		handleInsertOrConvert,
    		handleSort,
    		handleTransform,
    		handleInsertBefore,
    		handleInsertAfter,
    		handleKeyDown,
    		json,
    		state,
    		selection,
    		onCloseContextMenu,
    		onEditKey,
    		onEditValue,
    		onToggleEnforceString,
    		onCut,
    		onCopy,
    		onPaste,
    		onRemove,
    		onDuplicate,
    		onExtract,
    		onInsertBefore,
    		onInsert,
    		onConvert,
    		onInsertAfter,
    		onSort,
    		onTransform,
    		enforceString,
    		focusValue,
    		convertMode,
    		hasJson,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		div10_binding
    	];
    }

    class ContextMenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$D,
    			create_fragment$D,
    			not_equal,
    			{
    				json: 31,
    				state: 32,
    				selection: 33,
    				showTip: 0,
    				onCloseContextMenu: 34,
    				onEditKey: 35,
    				onEditValue: 36,
    				onToggleEnforceString: 37,
    				onCut: 38,
    				onCopy: 39,
    				onPaste: 40,
    				onRemove: 41,
    				onDuplicate: 42,
    				onExtract: 43,
    				onInsertBefore: 44,
    				onInsert: 45,
    				onConvert: 46,
    				onInsertAfter: 47,
    				onSort: 48,
    				onTransform: 49
    			},
    			null,
    			[-1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ContextMenu",
    			options,
    			id: create_fragment$D.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*json*/ ctx[31] === undefined && !('json' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'json'");
    		}

    		if (/*state*/ ctx[32] === undefined && !('state' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'state'");
    		}

    		if (/*selection*/ ctx[33] === undefined && !('selection' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'selection'");
    		}

    		if (/*showTip*/ ctx[0] === undefined && !('showTip' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'showTip'");
    		}

    		if (/*onCloseContextMenu*/ ctx[34] === undefined && !('onCloseContextMenu' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onCloseContextMenu'");
    		}

    		if (/*onEditKey*/ ctx[35] === undefined && !('onEditKey' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onEditKey'");
    		}

    		if (/*onEditValue*/ ctx[36] === undefined && !('onEditValue' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onEditValue'");
    		}

    		if (/*onToggleEnforceString*/ ctx[37] === undefined && !('onToggleEnforceString' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onToggleEnforceString'");
    		}

    		if (/*onCut*/ ctx[38] === undefined && !('onCut' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onCut'");
    		}

    		if (/*onCopy*/ ctx[39] === undefined && !('onCopy' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onCopy'");
    		}

    		if (/*onPaste*/ ctx[40] === undefined && !('onPaste' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onPaste'");
    		}

    		if (/*onRemove*/ ctx[41] === undefined && !('onRemove' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onRemove'");
    		}

    		if (/*onDuplicate*/ ctx[42] === undefined && !('onDuplicate' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onDuplicate'");
    		}

    		if (/*onExtract*/ ctx[43] === undefined && !('onExtract' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onExtract'");
    		}

    		if (/*onInsertBefore*/ ctx[44] === undefined && !('onInsertBefore' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onInsertBefore'");
    		}

    		if (/*onInsert*/ ctx[45] === undefined && !('onInsert' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onInsert'");
    		}

    		if (/*onConvert*/ ctx[46] === undefined && !('onConvert' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onConvert'");
    		}

    		if (/*onInsertAfter*/ ctx[47] === undefined && !('onInsertAfter' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onInsertAfter'");
    		}

    		if (/*onSort*/ ctx[48] === undefined && !('onSort' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onSort'");
    		}

    		if (/*onTransform*/ ctx[49] === undefined && !('onTransform' in props)) {
    			console.warn("<ContextMenu> was created without expected prop 'onTransform'");
    		}
    	}

    	get json() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set json(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get state() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set state(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selection() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selection(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showTip() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showTip(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onCloseContextMenu() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onCloseContextMenu(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onEditKey() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onEditKey(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onEditValue() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onEditValue(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onToggleEnforceString() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onToggleEnforceString(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onCut() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onCut(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onCopy() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onCopy(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onPaste() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onPaste(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRemove() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRemove(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onDuplicate() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onDuplicate(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onExtract() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onExtract(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onInsertBefore() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onInsertBefore(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onInsert() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onInsert(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onConvert() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onConvert(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onInsertAfter() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onInsertAfter(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSort() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSort(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTransform() {
    		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTransform(value) {
    		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*!
      Copyright (c) 2018 Jed Watson.
      Licensed under the MIT License (MIT), see
      http://jedwatson.github.io/classnames
    */

    var classnames = createCommonjsModule(function (module) {
    /* global define */

    (function () {

    	var hasOwn = {}.hasOwnProperty;

    	function classNames() {
    		var classes = [];

    		for (var i = 0; i < arguments.length; i++) {
    			var arg = arguments[i];
    			if (!arg) continue;

    			var argType = typeof arg;

    			if (argType === 'string' || argType === 'number') {
    				classes.push(arg);
    			} else if (Array.isArray(arg)) {
    				if (arg.length) {
    					var inner = classNames.apply(null, arg);
    					if (inner) {
    						classes.push(inner);
    					}
    				}
    			} else if (argType === 'object') {
    				if (arg.toString === Object.prototype.toString) {
    					for (var key in arg) {
    						if (hasOwn.call(arg, key) && arg[key]) {
    							classes.push(key);
    						}
    					}
    				} else {
    					classes.push(arg.toString());
    				}
    			}
    		}

    		return classes.join(' ');
    	}

    	if (module.exports) {
    		classNames.default = classNames;
    		module.exports = classNames;
    	} else {
    		window.classNames = classNames;
    	}
    }());
    });

    /* node_modules/svelte-jsoneditor/components/modes/treemode/CollapsedItems.svelte generated by Svelte v3.48.0 */
    const file$y = "node_modules/svelte-jsoneditor/components/modes/treemode/CollapsedItems.svelte";

    function get_each_context$c(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    // (38:4) {#each expandItemsSections as expandItemsSection}
    function create_each_block$c(ctx) {
    	let button;
    	let t0;
    	let t1_value = /*expandItemsSection*/ ctx[12].start + "";
    	let t1;
    	let t2;
    	let t3_value = /*expandItemsSection*/ ctx[12].end + "";
    	let t3;
    	let t4;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[11](/*expandItemsSection*/ ctx[12]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text("show ");
    			t1 = text(t1_value);
    			t2 = text("-");
    			t3 = text(t3_value);
    			t4 = space();
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-expand-items svelte-1knbf5w");
    			add_location(button, file$y, 37, 53, 1379);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			append_dev(button, t2);
    			append_dev(button, t3);
    			append_dev(button, t4);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*expandItemsSections*/ 16 && t1_value !== (t1_value = /*expandItemsSection*/ ctx[12].start + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*expandItemsSections*/ 16 && t3_value !== (t3_value = /*expandItemsSection*/ ctx[12].end + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$c.name,
    		type: "each",
    		source: "(38:4) {#each expandItemsSections as expandItemsSection}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$C(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let div2_style_value;
    	let mounted;
    	let dispose;
    	let each_value = /*expandItemsSections*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text("Items ");
    			t1 = text(/*startIndex*/ ctx[3]);
    			t2 = text("-");
    			t3 = text(/*endIndex*/ ctx[2]);
    			t4 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "jse-text svelte-1knbf5w");
    			add_location(div0, file$y, 36, 4, 1268);
    			add_location(div1, file$y, 35, 2, 1258);
    			attr_dev(div2, "class", "jse-collapsed-items svelte-1knbf5w");
    			attr_dev(div2, "style", div2_style_value = getIndentationStyle$1(/*path*/ ctx[0].length + 2));
    			toggle_class(div2, "jse-selected", /*selected*/ ctx[5]);
    			add_location(div2, file$y, 29, 0, 1107);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, t0);
    			append_dev(div0, t1);
    			append_dev(div0, t2);
    			append_dev(div0, t3);
    			append_dev(div1, t4);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			if (!mounted) {
    				dispose = listen_dev(div2, "mousemove", handleMouseMove, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*startIndex*/ 8) set_data_dev(t1, /*startIndex*/ ctx[3]);
    			if (dirty & /*endIndex*/ 4) set_data_dev(t3, /*endIndex*/ ctx[2]);

    			if (dirty & /*onExpandSection, path, expandItemsSections*/ 19) {
    				each_value = /*expandItemsSections*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$c(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$c(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*path*/ 1 && div2_style_value !== (div2_style_value = getIndentationStyle$1(/*path*/ ctx[0].length + 2))) {
    				attr_dev(div2, "style", div2_style_value);
    			}

    			if (dirty & /*selected*/ 32) {
    				toggle_class(div2, "jse-selected", /*selected*/ ctx[5]);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getIndentationStyle$1(level) {
    	return `margin-left: calc(${level} * var(--jse-indent-size))`;
    }

    function handleMouseMove(event) {
    	// prevent the whole array from being selected whilst dragging over
    	// a section with collapsed items
    	event.stopPropagation();
    }

    function instance$C($$self, $$props, $$invalidate) {
    	let visibleSection;
    	let startIndex;
    	let endIndex;
    	let selected;
    	let expandItemsSections;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CollapsedItems', slots, []);
    	let { visibleSections } = $$props;
    	let { sectionIndex } = $$props;
    	let { total } = $$props;
    	let { path } = $$props;
    	let { selection } = $$props;
    	let { onExpandSection } = $$props;

    	const writable_props = [
    		'visibleSections',
    		'sectionIndex',
    		'total',
    		'path',
    		'selection',
    		'onExpandSection'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CollapsedItems> was created with unknown prop '${key}'`);
    	});

    	const click_handler = expandItemsSection => onExpandSection(path, expandItemsSection);

    	$$self.$$set = $$props => {
    		if ('visibleSections' in $$props) $$invalidate(6, visibleSections = $$props.visibleSections);
    		if ('sectionIndex' in $$props) $$invalidate(7, sectionIndex = $$props.sectionIndex);
    		if ('total' in $$props) $$invalidate(8, total = $$props.total);
    		if ('path' in $$props) $$invalidate(0, path = $$props.path);
    		if ('selection' in $$props) $$invalidate(9, selection = $$props.selection);
    		if ('onExpandSection' in $$props) $$invalidate(1, onExpandSection = $$props.onExpandSection);
    	};

    	$$self.$capture_state = () => ({
    		getExpandItemsSections,
    		compileJSONPointer: immutableJSONPatch.compileJSONPointer,
    		visibleSections,
    		sectionIndex,
    		total,
    		path,
    		selection,
    		onExpandSection,
    		getIndentationStyle: getIndentationStyle$1,
    		handleMouseMove,
    		endIndex,
    		startIndex,
    		expandItemsSections,
    		selected,
    		visibleSection
    	});

    	$$self.$inject_state = $$props => {
    		if ('visibleSections' in $$props) $$invalidate(6, visibleSections = $$props.visibleSections);
    		if ('sectionIndex' in $$props) $$invalidate(7, sectionIndex = $$props.sectionIndex);
    		if ('total' in $$props) $$invalidate(8, total = $$props.total);
    		if ('path' in $$props) $$invalidate(0, path = $$props.path);
    		if ('selection' in $$props) $$invalidate(9, selection = $$props.selection);
    		if ('onExpandSection' in $$props) $$invalidate(1, onExpandSection = $$props.onExpandSection);
    		if ('endIndex' in $$props) $$invalidate(2, endIndex = $$props.endIndex);
    		if ('startIndex' in $$props) $$invalidate(3, startIndex = $$props.startIndex);
    		if ('expandItemsSections' in $$props) $$invalidate(4, expandItemsSections = $$props.expandItemsSections);
    		if ('selected' in $$props) $$invalidate(5, selected = $$props.selected);
    		if ('visibleSection' in $$props) $$invalidate(10, visibleSection = $$props.visibleSection);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*visibleSections, sectionIndex*/ 192) {
    			$$invalidate(10, visibleSection = visibleSections[sectionIndex]);
    		}

    		if ($$self.$$.dirty & /*visibleSection*/ 1024) {
    			$$invalidate(3, startIndex = visibleSection.end);
    		}

    		if ($$self.$$.dirty & /*visibleSections, sectionIndex, total*/ 448) {
    			$$invalidate(2, endIndex = visibleSections[sectionIndex + 1]
    			? visibleSections[sectionIndex + 1].start
    			: total);
    		}

    		if ($$self.$$.dirty & /*selection, path, startIndex*/ 521) {
    			$$invalidate(5, selected = selection && selection.pathsMap
    			? selection.pathsMap[immutableJSONPatch.compileJSONPointer(path.concat(startIndex))] === true
    			: false);
    		}

    		if ($$self.$$.dirty & /*startIndex, endIndex*/ 12) {
    			$$invalidate(4, expandItemsSections = getExpandItemsSections(startIndex, endIndex));
    		}
    	};

    	return [
    		path,
    		onExpandSection,
    		endIndex,
    		startIndex,
    		expandItemsSections,
    		selected,
    		visibleSections,
    		sectionIndex,
    		total,
    		selection,
    		visibleSection,
    		click_handler
    	];
    }

    class CollapsedItems extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$C, create_fragment$C, not_equal, {
    			visibleSections: 6,
    			sectionIndex: 7,
    			total: 8,
    			path: 0,
    			selection: 9,
    			onExpandSection: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CollapsedItems",
    			options,
    			id: create_fragment$C.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*visibleSections*/ ctx[6] === undefined && !('visibleSections' in props)) {
    			console.warn("<CollapsedItems> was created without expected prop 'visibleSections'");
    		}

    		if (/*sectionIndex*/ ctx[7] === undefined && !('sectionIndex' in props)) {
    			console.warn("<CollapsedItems> was created without expected prop 'sectionIndex'");
    		}

    		if (/*total*/ ctx[8] === undefined && !('total' in props)) {
    			console.warn("<CollapsedItems> was created without expected prop 'total'");
    		}

    		if (/*path*/ ctx[0] === undefined && !('path' in props)) {
    			console.warn("<CollapsedItems> was created without expected prop 'path'");
    		}

    		if (/*selection*/ ctx[9] === undefined && !('selection' in props)) {
    			console.warn("<CollapsedItems> was created without expected prop 'selection'");
    		}

    		if (/*onExpandSection*/ ctx[1] === undefined && !('onExpandSection' in props)) {
    			console.warn("<CollapsedItems> was created without expected prop 'onExpandSection'");
    		}
    	}

    	get visibleSections() {
    		throw new Error("<CollapsedItems>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set visibleSections(value) {
    		throw new Error("<CollapsedItems>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sectionIndex() {
    		throw new Error("<CollapsedItems>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sectionIndex(value) {
    		throw new Error("<CollapsedItems>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get total() {
    		throw new Error("<CollapsedItems>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set total(value) {
    		throw new Error("<CollapsedItems>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get path() {
    		throw new Error("<CollapsedItems>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<CollapsedItems>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selection() {
    		throw new Error("<CollapsedItems>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selection(value) {
    		throw new Error("<CollapsedItems>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onExpandSection() {
    		throw new Error("<CollapsedItems>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onExpandSection(value) {
    		throw new Error("<CollapsedItems>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modes/treemode/contextmenu/ContextMenuButton.svelte generated by Svelte v3.48.0 */

    const file$x = "node_modules/svelte-jsoneditor/components/modes/treemode/contextmenu/ContextMenuButton.svelte";

    function create_fragment$B(ctx) {
    	let button;
    	let icon;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: { data: faCaretDown },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(icon.$$.fragment);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-context-menu-button svelte-dol684");
    			attr_dev(button, "title", CONTEXT_MENU_EXPLANATION);
    			toggle_class(button, "jse-selected", /*selected*/ ctx[0]);
    			add_location(button, file$x, 27, 0, 810);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(icon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleClick*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*selected*/ 1) {
    				toggle_class(button, "jse-selected", /*selected*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$B($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ContextMenuButton', slots, []);
    	let { selected } = $$props;
    	let { onContextMenu } = $$props;

    	function handleClick(event) {
    		let buttonElem = event.target;

    		while (buttonElem && buttonElem.nodeName !== 'BUTTON') {
    			buttonElem = buttonElem.parentNode;
    		}

    		if (buttonElem) {
    			onContextMenu({
    				anchor: buttonElem,
    				left: 0,
    				top: 0,
    				width: CONTEXT_MENU_WIDTH,
    				height: CONTEXT_MENU_HEIGHT,
    				offsetTop: 2,
    				offsetLeft: 0,
    				showTip: true
    			});
    		}
    	}

    	const writable_props = ['selected', 'onContextMenu'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ContextMenuButton> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
    		if ('onContextMenu' in $$props) $$invalidate(2, onContextMenu = $$props.onContextMenu);
    	};

    	$$self.$capture_state = () => ({
    		faCaretDown,
    		Icon,
    		CONTEXT_MENU_EXPLANATION,
    		CONTEXT_MENU_HEIGHT,
    		CONTEXT_MENU_WIDTH,
    		selected,
    		onContextMenu,
    		handleClick
    	});

    	$$self.$inject_state = $$props => {
    		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
    		if ('onContextMenu' in $$props) $$invalidate(2, onContextMenu = $$props.onContextMenu);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [selected, handleClick, onContextMenu];
    }

    class ContextMenuButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$B, create_fragment$B, not_equal, { selected: 0, onContextMenu: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ContextMenuButton",
    			options,
    			id: create_fragment$B.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*selected*/ ctx[0] === undefined && !('selected' in props)) {
    			console.warn("<ContextMenuButton> was created without expected prop 'selected'");
    		}

    		if (/*onContextMenu*/ ctx[2] === undefined && !('onContextMenu' in props)) {
    			console.warn("<ContextMenuButton> was created without expected prop 'onContextMenu'");
    		}
    	}

    	get selected() {
    		throw new Error("<ContextMenuButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<ContextMenuButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onContextMenu() {
    		throw new Error("<ContextMenuButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onContextMenu(value) {
    		throw new Error("<ContextMenuButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modes/treemode/highlight/SearchResultHighlighter.svelte generated by Svelte v3.48.0 */
    const file$w = "node_modules/svelte-jsoneditor/components/modes/treemode/highlight/SearchResultHighlighter.svelte";

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (11:2) {:else}
    function create_else_block$b(ctx) {
    	let span;
    	let t_value = addNewLineSuffix(/*part*/ ctx[3].text) + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(t_value);
    			attr_dev(span, "class", "jse-highlight svelte-s6kbew");
    			toggle_class(span, "jse-active", /*part*/ ctx[3].active);
    			add_location(span, file$w, 11, 4, 318);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*parts*/ 1 && t_value !== (t_value = addNewLineSuffix(/*part*/ ctx[3].text) + "")) set_data_dev(t, t_value);

    			if (dirty & /*parts*/ 1) {
    				toggle_class(span, "jse-active", /*part*/ ctx[3].active);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$b.name,
    		type: "else",
    		source: "(11:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (9:2) {#if part.type === 'normal'}
    function create_if_block$j(ctx) {
    	let t_value = /*part*/ ctx[3].text + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*parts*/ 1 && t_value !== (t_value = /*part*/ ctx[3].text + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(9:2) {#if part.type === 'normal'}",
    		ctx
    	});

    	return block;
    }

    // (8:0) {#each parts as part}
    function create_each_block$b(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*part*/ ctx[3].type === 'normal') return create_if_block$j;
    		return create_else_block$b;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(8:0) {#each parts as part}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$A(ctx) {
    	let each_1_anchor;
    	let each_value = /*parts*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*parts, addNewLineSuffix*/ 1) {
    				each_value = /*parts*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$b(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$b(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props, $$invalidate) {
    	let parts;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SearchResultHighlighter', slots, []);
    	let { text } = $$props;
    	let { searchResult } = $$props;
    	const writable_props = ['text', 'searchResult'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SearchResultHighlighter> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    		if ('searchResult' in $$props) $$invalidate(2, searchResult = $$props.searchResult);
    	};

    	$$self.$capture_state = () => ({
    		splitValue,
    		addNewLineSuffix,
    		text,
    		searchResult,
    		parts
    	});

    	$$self.$inject_state = $$props => {
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    		if ('searchResult' in $$props) $$invalidate(2, searchResult = $$props.searchResult);
    		if ('parts' in $$props) $$invalidate(0, parts = $$props.parts);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*text, searchResult*/ 6) {
    			$$invalidate(0, parts = splitValue(String(text), searchResult));
    		}
    	};

    	return [parts, text, searchResult];
    }

    class SearchResultHighlighter extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$A, create_fragment$A, safe_not_equal, { text: 1, searchResult: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SearchResultHighlighter",
    			options,
    			id: create_fragment$A.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*text*/ ctx[1] === undefined && !('text' in props)) {
    			console.warn("<SearchResultHighlighter> was created without expected prop 'text'");
    		}

    		if (/*searchResult*/ ctx[2] === undefined && !('searchResult' in props)) {
    			console.warn("<SearchResultHighlighter> was created without expected prop 'searchResult'");
    		}
    	}

    	get text() {
    		throw new Error("<SearchResultHighlighter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<SearchResultHighlighter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get searchResult() {
    		throw new Error("<SearchResultHighlighter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set searchResult(value) {
    		throw new Error("<SearchResultHighlighter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/controls/EditableDiv.svelte generated by Svelte v3.48.0 */
    const file$v = "node_modules/svelte-jsoneditor/components/controls/EditableDiv.svelte";

    function create_fragment$z(ctx) {
    	let div;
    	let div_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", div_class_value = "" + (null_to_empty(classnames('jse-editable-div', /*valueClass*/ ctx[2], { 'jse-short-text': /*shortText*/ ctx[0] })) + " svelte-rw77oa"));
    			attr_dev(div, "contenteditable", "true");
    			attr_dev(div, "spellcheck", "false");
    			add_location(div, file$v, 98, 0, 3124);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			/*div_binding*/ ctx[13](div);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "input", /*handleValueInput*/ ctx[3], false, false, false),
    					listen_dev(div, "keydown", /*handleValueKeyDown*/ ctx[4], false, false, false),
    					listen_dev(div, "paste", /*handleValuePaste*/ ctx[5], false, false, false),
    					listen_dev(div, "blur", /*handleBlur*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*valueClass, shortText*/ 5 && div_class_value !== (div_class_value = "" + (null_to_empty(classnames('jse-editable-div', /*valueClass*/ ctx[2], { 'jse-short-text': /*shortText*/ ctx[0] })) + " svelte-rw77oa"))) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[13](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditableDiv', slots, []);
    	const debug = createDebug('jsoneditor:EditableDiv');
    	let { value } = $$props;
    	let { shortText = false } = $$props;
    	let { onChange } = $$props;
    	let { onCancel } = $$props;
    	let { onFind } = $$props;
    	let { onPaste = noop$1 } = $$props;
    	let { onValueClass = () => '' } = $$props;
    	let domValue;
    	let valueClass = onValueClass(value);
    	let closed = false;

    	onMount(() => {
    		debug('onMount', { value });
    		setDomValue(value);

    		// focus
    		setTimeout(() => setCursorToEnd(domValue));
    	});

    	onDestroy(() => {
    		const newValue = getDomValue();
    		debug('onDestroy', { closed, value, newValue });

    		if (!closed && newValue !== value) {
    			onChange(newValue, UPDATE_SELECTION.NO);
    		}
    	});

    	function getDomValue() {
    		return removeNewLineSuffix(domValue.innerText);
    	}

    	function setDomValue(updatedValue) {
    		$$invalidate(1, domValue.innerText = addNewLineSuffix(updatedValue), domValue);
    	}

    	function handleValueInput() {
    		const newValue = getDomValue();

    		if (newValue === '') {
    			// immediately update to clean up any left over <br/>
    			setDomValue('');
    		}

    		// update class
    		$$invalidate(2, valueClass = onValueClass(newValue));
    	}

    	function handleValueKeyDown(event) {
    		event.stopPropagation();
    		const combo = keyComboFromEvent(event).replace(/^Command\+/, 'Ctrl+');

    		if (combo === 'Escape') {
    			// cancel changes (needed to prevent triggering a change onDestroy)
    			closed = true;

    			onCancel();
    		}

    		if (combo === 'Enter' || combo === 'Tab') {
    			// apply changes
    			closed = true;

    			const newValue = getDomValue();
    			onChange(newValue, UPDATE_SELECTION.NEXT_INSIDE);
    		}

    		if (combo === 'Ctrl+F') {
    			event.preventDefault();
    			onFind(false);
    		}

    		if (combo === 'Ctrl+H') {
    			event.preventDefault();
    			onFind(true);
    		}
    	}

    	function handleValuePaste(event) {
    		if (!onPaste) {
    			return;
    		}

    		const clipboardText = event.clipboardData.getData('text/plain');
    		onPaste(clipboardText);
    	}

    	function handleBlur() {
    		const hasFocus = document.hasFocus();
    		const newValue = getDomValue();
    		debug('handleBlur', { hasFocus, closed, value, newValue });

    		// we only want to close the editable div when the focus did go to another
    		// element on the same page, but not when the user switches to another
    		// application or browser tab to copy/paste something whilst still editing
    		// the value, hence the check for document.hasFocus()
    		if (document.hasFocus() && !closed) {
    			closed = true;

    			if (newValue !== value) {
    				onChange(newValue, UPDATE_SELECTION.SELF);
    			} else {
    				onCancel();
    			}
    		}
    	}

    	const writable_props = [
    		'value',
    		'shortText',
    		'onChange',
    		'onCancel',
    		'onFind',
    		'onPaste',
    		'onValueClass'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditableDiv> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			domValue = $$value;
    			$$invalidate(1, domValue);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(7, value = $$props.value);
    		if ('shortText' in $$props) $$invalidate(0, shortText = $$props.shortText);
    		if ('onChange' in $$props) $$invalidate(8, onChange = $$props.onChange);
    		if ('onCancel' in $$props) $$invalidate(9, onCancel = $$props.onCancel);
    		if ('onFind' in $$props) $$invalidate(10, onFind = $$props.onFind);
    		if ('onPaste' in $$props) $$invalidate(11, onPaste = $$props.onPaste);
    		if ('onValueClass' in $$props) $$invalidate(12, onValueClass = $$props.onValueClass);
    	};

    	$$self.$capture_state = () => ({
    		onDestroy,
    		onMount,
    		addNewLineSuffix,
    		removeNewLineSuffix,
    		setCursorToEnd,
    		keyComboFromEvent,
    		createDebug,
    		classnames,
    		noop: noop$1,
    		UPDATE_SELECTION,
    		debug,
    		value,
    		shortText,
    		onChange,
    		onCancel,
    		onFind,
    		onPaste,
    		onValueClass,
    		domValue,
    		valueClass,
    		closed,
    		getDomValue,
    		setDomValue,
    		handleValueInput,
    		handleValueKeyDown,
    		handleValuePaste,
    		handleBlur
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(7, value = $$props.value);
    		if ('shortText' in $$props) $$invalidate(0, shortText = $$props.shortText);
    		if ('onChange' in $$props) $$invalidate(8, onChange = $$props.onChange);
    		if ('onCancel' in $$props) $$invalidate(9, onCancel = $$props.onCancel);
    		if ('onFind' in $$props) $$invalidate(10, onFind = $$props.onFind);
    		if ('onPaste' in $$props) $$invalidate(11, onPaste = $$props.onPaste);
    		if ('onValueClass' in $$props) $$invalidate(12, onValueClass = $$props.onValueClass);
    		if ('domValue' in $$props) $$invalidate(1, domValue = $$props.domValue);
    		if ('valueClass' in $$props) $$invalidate(2, valueClass = $$props.valueClass);
    		if ('closed' in $$props) closed = $$props.closed;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		shortText,
    		domValue,
    		valueClass,
    		handleValueInput,
    		handleValueKeyDown,
    		handleValuePaste,
    		handleBlur,
    		value,
    		onChange,
    		onCancel,
    		onFind,
    		onPaste,
    		onValueClass,
    		div_binding
    	];
    }

    class EditableDiv extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$z, create_fragment$z, not_equal, {
    			value: 7,
    			shortText: 0,
    			onChange: 8,
    			onCancel: 9,
    			onFind: 10,
    			onPaste: 11,
    			onValueClass: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditableDiv",
    			options,
    			id: create_fragment$z.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*value*/ ctx[7] === undefined && !('value' in props)) {
    			console.warn("<EditableDiv> was created without expected prop 'value'");
    		}

    		if (/*onChange*/ ctx[8] === undefined && !('onChange' in props)) {
    			console.warn("<EditableDiv> was created without expected prop 'onChange'");
    		}

    		if (/*onCancel*/ ctx[9] === undefined && !('onCancel' in props)) {
    			console.warn("<EditableDiv> was created without expected prop 'onCancel'");
    		}

    		if (/*onFind*/ ctx[10] === undefined && !('onFind' in props)) {
    			console.warn("<EditableDiv> was created without expected prop 'onFind'");
    		}
    	}

    	get value() {
    		throw new Error("<EditableDiv>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<EditableDiv>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shortText() {
    		throw new Error("<EditableDiv>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shortText(value) {
    		throw new Error("<EditableDiv>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChange() {
    		throw new Error("<EditableDiv>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChange(value) {
    		throw new Error("<EditableDiv>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onCancel() {
    		throw new Error("<EditableDiv>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onCancel(value) {
    		throw new Error("<EditableDiv>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onFind() {
    		throw new Error("<EditableDiv>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onFind(value) {
    		throw new Error("<EditableDiv>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onPaste() {
    		throw new Error("<EditableDiv>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onPaste(value) {
    		throw new Error("<EditableDiv>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onValueClass() {
    		throw new Error("<EditableDiv>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onValueClass(value) {
    		throw new Error("<EditableDiv>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modes/treemode/JSONKey.svelte generated by Svelte v3.48.0 */
    const file$u = "node_modules/svelte-jsoneditor/components/modes/treemode/JSONKey.svelte";

    // (59:0) {:else}
    function create_else_block$a(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let div_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_1$7, create_else_block_1$4];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*searchResult*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "data-type", "selectable-key");
    			attr_dev(div, "class", div_class_value = "" + (null_to_empty(/*getKeyClass*/ ctx[5](/*key*/ ctx[0])) + " svelte-566egb"));
    			add_location(div, file$u, 59, 2, 1958);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "dblclick", /*handleKeyDoubleClick*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}

    			if (!current || dirty & /*key*/ 1 && div_class_value !== (div_class_value = "" + (null_to_empty(/*getKeyClass*/ ctx[5](/*key*/ ctx[0])) + " svelte-566egb"))) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$a.name,
    		type: "else",
    		source: "(59:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (51:0) {#if editKey}
    function create_if_block$i(ctx) {
    	let editablediv;
    	let current;

    	editablediv = new EditableDiv({
    			props: {
    				value: /*context*/ ctx[2].normalization.escapeValue(/*key*/ ctx[0]),
    				shortText: true,
    				onChange: /*handleChangeValue*/ ctx[6],
    				onCancel: /*handleCancelChange*/ ctx[7],
    				onFind: /*context*/ ctx[2].onFind
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(editablediv.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(editablediv, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editablediv_changes = {};
    			if (dirty & /*context, key*/ 5) editablediv_changes.value = /*context*/ ctx[2].normalization.escapeValue(/*key*/ ctx[0]);
    			if (dirty & /*context*/ 4) editablediv_changes.onFind = /*context*/ ctx[2].onFind;
    			editablediv.$set(editablediv_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editablediv.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editablediv.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(editablediv, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(51:0) {#if editKey}",
    		ctx
    	});

    	return block;
    }

    // (63:4) {:else}
    function create_else_block_1$4(ctx) {
    	let t_value = addNewLineSuffix(/*context*/ ctx[2].normalization.escapeValue(/*key*/ ctx[0])) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*context, key*/ 5 && t_value !== (t_value = addNewLineSuffix(/*context*/ ctx[2].normalization.escapeValue(/*key*/ ctx[0])) + "")) set_data_dev(t, t_value);
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$4.name,
    		type: "else",
    		source: "(63:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (61:4) {#if searchResult}
    function create_if_block_1$7(ctx) {
    	let searchresulthighlighter;
    	let current;

    	searchresulthighlighter = new SearchResultHighlighter({
    			props: {
    				text: /*context*/ ctx[2].normalization.escapeValue(/*key*/ ctx[0]),
    				searchResult: /*searchResult*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(searchresulthighlighter.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(searchresulthighlighter, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const searchresulthighlighter_changes = {};
    			if (dirty & /*context, key*/ 5) searchresulthighlighter_changes.text = /*context*/ ctx[2].normalization.escapeValue(/*key*/ ctx[0]);
    			if (dirty & /*searchResult*/ 2) searchresulthighlighter_changes.searchResult = /*searchResult*/ ctx[1];
    			searchresulthighlighter.$set(searchresulthighlighter_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchresulthighlighter.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(searchresulthighlighter.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(searchresulthighlighter, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(61:4) {#if searchResult}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$y(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$i, create_else_block$a];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*editKey*/ ctx[3]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let selectedKey;
    	let editKey;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('JSONKey', slots, []);
    	let { path } = $$props;
    	let { key } = $$props;
    	let { onUpdateKey } = $$props;
    	let { selection } = $$props;
    	let { searchResult } = $$props;
    	let { context } = $$props;

    	function handleKeyDoubleClick(event) {
    		if (!editKey && !context.readOnly) {
    			event.preventDefault();

    			context.onSelect({
    				type: SELECTION_TYPE.KEY,
    				path,
    				edit: true
    			});
    		}
    	}

    	function getKeyClass(key) {
    		return classnames('jse-key', { 'jse-empty': key === '' });
    	}

    	function handleChangeValue(newKey, updateSelection) {
    		const updatedKey = onUpdateKey(key, context.normalization.unescapeValue(newKey));
    		const updatedPath = initial(path).concat(updatedKey);

    		if (updateSelection === UPDATE_SELECTION.NEXT_INSIDE) {
    			context.onSelect({
    				type: SELECTION_TYPE.KEY,
    				path: updatedPath,
    				next: true
    			});
    		}

    		if (updateSelection === UPDATE_SELECTION.SELF) {
    			context.onSelect(
    				{
    					type: SELECTION_TYPE.KEY,
    					path: updatedPath
    				},
    				{ ensureFocus: false }
    			);
    		}
    	}

    	function handleCancelChange() {
    		context.onSelect({ type: SELECTION_TYPE.KEY, path });
    	}

    	const writable_props = ['path', 'key', 'onUpdateKey', 'selection', 'searchResult', 'context'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<JSONKey> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('path' in $$props) $$invalidate(8, path = $$props.path);
    		if ('key' in $$props) $$invalidate(0, key = $$props.key);
    		if ('onUpdateKey' in $$props) $$invalidate(9, onUpdateKey = $$props.onUpdateKey);
    		if ('selection' in $$props) $$invalidate(10, selection = $$props.selection);
    		if ('searchResult' in $$props) $$invalidate(1, searchResult = $$props.searchResult);
    		if ('context' in $$props) $$invalidate(2, context = $$props.context);
    	};

    	$$self.$capture_state = () => ({
    		classnames,
    		initial,
    		SELECTION_TYPE,
    		SearchResultHighlighter,
    		EditableDiv,
    		addNewLineSuffix,
    		UPDATE_SELECTION,
    		path,
    		key,
    		onUpdateKey,
    		selection,
    		searchResult,
    		context,
    		handleKeyDoubleClick,
    		getKeyClass,
    		handleChangeValue,
    		handleCancelChange,
    		editKey,
    		selectedKey
    	});

    	$$self.$inject_state = $$props => {
    		if ('path' in $$props) $$invalidate(8, path = $$props.path);
    		if ('key' in $$props) $$invalidate(0, key = $$props.key);
    		if ('onUpdateKey' in $$props) $$invalidate(9, onUpdateKey = $$props.onUpdateKey);
    		if ('selection' in $$props) $$invalidate(10, selection = $$props.selection);
    		if ('searchResult' in $$props) $$invalidate(1, searchResult = $$props.searchResult);
    		if ('context' in $$props) $$invalidate(2, context = $$props.context);
    		if ('editKey' in $$props) $$invalidate(3, editKey = $$props.editKey);
    		if ('selectedKey' in $$props) $$invalidate(11, selectedKey = $$props.selectedKey);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*selection*/ 1024) {
    			$$invalidate(11, selectedKey = selection && selection.type === SELECTION_TYPE.KEY);
    		}

    		if ($$self.$$.dirty & /*context, selectedKey, selection*/ 3076) {
    			$$invalidate(3, editKey = !context.readOnly && selectedKey && selection && selection['edit'] === true);
    		}
    	};

    	return [
    		key,
    		searchResult,
    		context,
    		editKey,
    		handleKeyDoubleClick,
    		getKeyClass,
    		handleChangeValue,
    		handleCancelChange,
    		path,
    		onUpdateKey,
    		selection,
    		selectedKey
    	];
    }

    class JSONKey extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$y, create_fragment$y, not_equal, {
    			path: 8,
    			key: 0,
    			onUpdateKey: 9,
    			selection: 10,
    			searchResult: 1,
    			context: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "JSONKey",
    			options,
    			id: create_fragment$y.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*path*/ ctx[8] === undefined && !('path' in props)) {
    			console.warn("<JSONKey> was created without expected prop 'path'");
    		}

    		if (/*key*/ ctx[0] === undefined && !('key' in props)) {
    			console.warn("<JSONKey> was created without expected prop 'key'");
    		}

    		if (/*onUpdateKey*/ ctx[9] === undefined && !('onUpdateKey' in props)) {
    			console.warn("<JSONKey> was created without expected prop 'onUpdateKey'");
    		}

    		if (/*selection*/ ctx[10] === undefined && !('selection' in props)) {
    			console.warn("<JSONKey> was created without expected prop 'selection'");
    		}

    		if (/*searchResult*/ ctx[1] === undefined && !('searchResult' in props)) {
    			console.warn("<JSONKey> was created without expected prop 'searchResult'");
    		}

    		if (/*context*/ ctx[2] === undefined && !('context' in props)) {
    			console.warn("<JSONKey> was created without expected prop 'context'");
    		}
    	}

    	get path() {
    		throw new Error("<JSONKey>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<JSONKey>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<JSONKey>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<JSONKey>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onUpdateKey() {
    		throw new Error("<JSONKey>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onUpdateKey(value) {
    		throw new Error("<JSONKey>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selection() {
    		throw new Error("<JSONKey>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selection(value) {
    		throw new Error("<JSONKey>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get searchResult() {
    		throw new Error("<JSONKey>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set searchResult(value) {
    		throw new Error("<JSONKey>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get context() {
    		throw new Error("<JSONKey>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set context(value) {
    		throw new Error("<JSONKey>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modes/treemode/JSONValue.svelte generated by Svelte v3.48.0 */

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (33:0) {#each renderers as renderer}
    function create_each_block$a(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*renderer*/ ctx[9].props];
    	var switch_value = /*renderer*/ ctx[9].component;

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*renderers*/ 1)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*renderer*/ ctx[9].props)])
    			: {};

    			if (switch_value !== (switch_value = /*renderer*/ ctx[9].component)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(33:0) {#each renderers as renderer}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$x(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*renderers*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*renderers*/ 1) {
    				each_value = /*renderers*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$a(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$a(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let isSelected;
    	let isEditing;
    	let renderers;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('JSONValue', slots, []);
    	let { path } = $$props;
    	let { value } = $$props;
    	let { context } = $$props;
    	let { enforceString } = $$props;
    	let { selection } = $$props;
    	let { searchResult } = $$props;
    	const writable_props = ['path', 'value', 'context', 'enforceString', 'selection', 'searchResult'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<JSONValue> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('path' in $$props) $$invalidate(1, path = $$props.path);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('context' in $$props) $$invalidate(3, context = $$props.context);
    		if ('enforceString' in $$props) $$invalidate(4, enforceString = $$props.enforceString);
    		if ('selection' in $$props) $$invalidate(5, selection = $$props.selection);
    		if ('searchResult' in $$props) $$invalidate(6, searchResult = $$props.searchResult);
    	};

    	$$self.$capture_state = () => ({
    		SELECTION_TYPE,
    		isEqual,
    		path,
    		value,
    		context,
    		enforceString,
    		selection,
    		searchResult,
    		isEditing,
    		isSelected,
    		renderers
    	});

    	$$self.$inject_state = $$props => {
    		if ('path' in $$props) $$invalidate(1, path = $$props.path);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('context' in $$props) $$invalidate(3, context = $$props.context);
    		if ('enforceString' in $$props) $$invalidate(4, enforceString = $$props.enforceString);
    		if ('selection' in $$props) $$invalidate(5, selection = $$props.selection);
    		if ('searchResult' in $$props) $$invalidate(6, searchResult = $$props.searchResult);
    		if ('isEditing' in $$props) $$invalidate(7, isEditing = $$props.isEditing);
    		if ('isSelected' in $$props) $$invalidate(8, isSelected = $$props.isSelected);
    		if ('renderers' in $$props) $$invalidate(0, renderers = $$props.renderers);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*selection, path*/ 34) {
    			$$invalidate(8, isSelected = selection && selection.type === SELECTION_TYPE.VALUE
    			? isEqual(selection.focusPath, path)
    			: false);
    		}

    		if ($$self.$$.dirty & /*context, isSelected, selection*/ 296) {
    			$$invalidate(7, isEditing = !context.readOnly && isSelected && selection && selection.edit === true);
    		}

    		if ($$self.$$.dirty & /*context, path, value, enforceString, isSelected, isEditing, selection, searchResult*/ 510) {
    			$$invalidate(0, renderers = context.onRenderValue({
    				path,
    				value,
    				readOnly: context.readOnly,
    				enforceString,
    				isSelected,
    				isEditing,
    				normalization: context.normalization,
    				selection,
    				searchResult,
    				onPatch: context.onPatch,
    				onPasteJson: context.onPasteJson,
    				onSelect: context.onSelect,
    				onFind: context.onFind
    			}));
    		}
    	};

    	return [
    		renderers,
    		path,
    		value,
    		context,
    		enforceString,
    		selection,
    		searchResult,
    		isEditing,
    		isSelected
    	];
    }

    class JSONValue extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$x, create_fragment$x, not_equal, {
    			path: 1,
    			value: 2,
    			context: 3,
    			enforceString: 4,
    			selection: 5,
    			searchResult: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "JSONValue",
    			options,
    			id: create_fragment$x.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*path*/ ctx[1] === undefined && !('path' in props)) {
    			console.warn("<JSONValue> was created without expected prop 'path'");
    		}

    		if (/*value*/ ctx[2] === undefined && !('value' in props)) {
    			console.warn("<JSONValue> was created without expected prop 'value'");
    		}

    		if (/*context*/ ctx[3] === undefined && !('context' in props)) {
    			console.warn("<JSONValue> was created without expected prop 'context'");
    		}

    		if (/*enforceString*/ ctx[4] === undefined && !('enforceString' in props)) {
    			console.warn("<JSONValue> was created without expected prop 'enforceString'");
    		}

    		if (/*selection*/ ctx[5] === undefined && !('selection' in props)) {
    			console.warn("<JSONValue> was created without expected prop 'selection'");
    		}

    		if (/*searchResult*/ ctx[6] === undefined && !('searchResult' in props)) {
    			console.warn("<JSONValue> was created without expected prop 'searchResult'");
    		}
    	}

    	get path() {
    		throw new Error("<JSONValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<JSONValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<JSONValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<JSONValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get context() {
    		throw new Error("<JSONValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set context(value) {
    		throw new Error("<JSONValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get enforceString() {
    		throw new Error("<JSONValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set enforceString(value) {
    		throw new Error("<JSONValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selection() {
    		throw new Error("<JSONValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selection(value) {
    		throw new Error("<JSONValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get searchResult() {
    		throw new Error("<JSONValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set searchResult(value) {
    		throw new Error("<JSONValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const singleton = {
        selecting: false,
        selectionAnchor: null,
        selectionAnchorType: null,
        selectionFocus: null,
        dragging: false
    };

    /* node_modules/svelte-jsoneditor/components/controls/tooltip/Tooltip.svelte generated by Svelte v3.48.0 */

    const file$t = "node_modules/svelte-jsoneditor/components/controls/tooltip/Tooltip.svelte";

    function create_fragment$w(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*text*/ ctx[0]);
    			attr_dev(div, "class", "jse-tooltip svelte-r4omvg");
    			add_location(div, file$t, 3, 0, 37);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*text*/ 1) set_data_dev(t, /*text*/ ctx[0]);
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tooltip', slots, []);
    	let { text } = $$props;
    	const writable_props = ['text'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tooltip> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    	};

    	$$self.$capture_state = () => ({ text });

    	$$self.$inject_state = $$props => {
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [text];
    }

    class Tooltip extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$w, create_fragment$w, safe_not_equal, { text: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tooltip",
    			options,
    			id: create_fragment$w.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*text*/ ctx[0] === undefined && !('text' in props)) {
    			console.warn("<Tooltip> was created without expected prop 'text'");
    		}
    	}

    	get text() {
    		throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function tooltip(node, { text, openAbsolutePopup, closeAbsolutePopup }) {
        function handleMouseOver() {
            const props = {
                text //: validationError.isChildError ? 'Contains invalid data' : validationError.message
            };
            openAbsolutePopup(Tooltip, props, {
                position: 'top',
                width: 10 * text.length,
                offsetTop: 3,
                anchor: node,
                closeOnOuterClick: true
            });
        }
        function handleMouseOut() {
            closeAbsolutePopup();
        }
        node.addEventListener('mouseover', handleMouseOver);
        node.addEventListener('mouseout', handleMouseOut);
        return {
            destroy() {
                node.removeEventListener('mouseover', handleMouseOver);
                node.removeEventListener('mouseout', handleMouseOut);
            }
        };
    }

    /* node_modules/svelte-jsoneditor/components/modes/treemode/ValidationError.svelte generated by Svelte v3.48.0 */
    const file$s = "node_modules/svelte-jsoneditor/components/modes/treemode/ValidationError.svelte";

    function create_fragment$v(ctx) {
    	let button;
    	let icon;
    	let tooltip_action;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: { data: faExclamationTriangle },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(icon.$$.fragment);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-validation-error svelte-1q62mys");
    			add_location(button, file$s, 10, 0, 432);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(icon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*onExpand*/ ctx[0])) /*onExpand*/ ctx[0].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					action_destroyer(tooltip_action = tooltip.call(null, button, {
    						text: /*text*/ ctx[1],
    						.../*absolutePopupContext*/ ctx[2]
    					}))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (tooltip_action && is_function(tooltip_action.update) && dirty & /*text*/ 2) tooltip_action.update.call(null, {
    				text: /*text*/ ctx[1],
    				.../*absolutePopupContext*/ ctx[2]
    			});
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(icon);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let text;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ValidationError', slots, []);
    	const absolutePopupContext = getContext('absolute-popup');
    	let { validationError } = $$props;
    	let { onExpand } = $$props;
    	const writable_props = ['validationError', 'onExpand'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ValidationError> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('validationError' in $$props) $$invalidate(3, validationError = $$props.validationError);
    		if ('onExpand' in $$props) $$invalidate(0, onExpand = $$props.onExpand);
    	};

    	$$self.$capture_state = () => ({
    		faExclamationTriangle,
    		Icon,
    		getContext,
    		tooltip,
    		absolutePopupContext,
    		validationError,
    		onExpand,
    		text
    	});

    	$$self.$inject_state = $$props => {
    		if ('validationError' in $$props) $$invalidate(3, validationError = $$props.validationError);
    		if ('onExpand' in $$props) $$invalidate(0, onExpand = $$props.onExpand);
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*validationError*/ 8) {
    			$$invalidate(1, text = validationError.isChildError
    			? 'Contains invalid data'
    			: validationError.message);
    		}
    	};

    	return [onExpand, text, absolutePopupContext, validationError];
    }

    class ValidationError extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$v, create_fragment$v, safe_not_equal, { validationError: 3, onExpand: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ValidationError",
    			options,
    			id: create_fragment$v.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*validationError*/ ctx[3] === undefined && !('validationError' in props)) {
    			console.warn("<ValidationError> was created without expected prop 'validationError'");
    		}

    		if (/*onExpand*/ ctx[0] === undefined && !('onExpand' in props)) {
    			console.warn("<ValidationError> was created without expected prop 'onExpand'");
    		}
    	}

    	get validationError() {
    		throw new Error("<ValidationError>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validationError(value) {
    		throw new Error("<ValidationError>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onExpand() {
    		throw new Error("<ValidationError>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onExpand(value) {
    		throw new Error("<ValidationError>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * @param {JSON} fullJson
     * @param {JSON} fullState
     * @param {Selection} fullSelection
     * @param {number} deltaY
     * @param {RenderedItem[]} items
     *
     * @returns {Object}
     * @property {JSONPatchDocument | undefined} operations
     * @property {JSON | undefined} updatedValue
     * @property {JSON | undefined} updatedState
     * @property {RecursiveSelection | undefined} updatedSelection
     * @property {Selection | undefined} updatedFullSelection
     * @property {number} indexOffset
     */
    function onMoveSelection({ fullJson, fullState, fullSelection, deltaY, items }) {
        const dragInsideAction = deltaY < 0
            ? findSwapPathUp({ fullSelection, deltaY, items })
            : findSwapPathDown({ fullSelection, deltaY, items });
        if (!dragInsideAction || dragInsideAction.indexOffset === 0) {
            return {
                operations: undefined,
                updatedValue: undefined,
                updatedState: undefined,
                updatedSelection: undefined,
                updatedFullSelection: undefined,
                indexOffset: 0
            };
        }
        const operations = moveInsideParent(fullJson, fullState, fullSelection, dragInsideAction);
        // TODO: documentStatePatch is relatively slow for large documents
        //  This is for example noticeable in a large array where we drag a few
        //  properties inside one of the nested objects. In this case we know we do
        //  not need the full document, only the nested changes. So we can optimize
        //  performance here by taking only the relative, nested json and state, and
        //  changing the operations into relative operations.
        const update = documentStatePatch(fullJson, fullState, operations);
        const path = initial(getStartPath(fullSelection));
        const value = immutableJSONPatch.getIn(fullJson, path);
        if (Array.isArray(value)) {
            const updatedFullSelection = createUpdatedArraySelection({
                items,
                fullJson,
                fullState,
                fullSelection,
                indexOffset: dragInsideAction.indexOffset
            });
            const recursiveSelection = createRecursiveSelection(fullJson, updatedFullSelection);
            const updatedRecursiveSelection = immutableJSONPatch.getIn(recursiveSelection, path);
            return {
                operations,
                updatedValue: immutableJSONPatch.getIn(update.json, path),
                updatedState: immutableJSONPatch.getIn(update.state, path),
                updatedSelection: updatedRecursiveSelection,
                updatedFullSelection: updatedFullSelection,
                indexOffset: dragInsideAction.indexOffset
            };
        }
        else {
            // object
            return {
                operations,
                updatedValue: immutableJSONPatch.getIn(update.json, path),
                updatedState: immutableJSONPatch.getIn(update.state, path),
                updatedSelection: undefined,
                updatedFullSelection: undefined,
                indexOffset: dragInsideAction.indexOffset
            };
        }
    }
    /**
     * @param {DragInsideProps} props
     * @returns {DragInsideAction | undefined}
     */
    function findSwapPathUp({ items, fullSelection, deltaY }) {
        const initialPath = getStartPath(fullSelection);
        const initialIndex = items.findIndex((item) => isEqual(item.path, initialPath));
        const prevHeight = () => { var _a; return (_a = items[index - 1]) === null || _a === void 0 ? void 0 : _a.height; };
        let index = initialIndex;
        let cumulativeHeight = 0;
        while (prevHeight() !== undefined && Math.abs(deltaY) > cumulativeHeight + prevHeight() / 2) {
            cumulativeHeight += prevHeight();
            index -= 1;
        }
        const beforePath = items[index].path;
        const indexOffset = index - initialIndex;
        return index !== initialIndex && items[index] !== undefined
            ? { beforePath, indexOffset }
            : undefined;
    }
    /**
     * @param {DragInsideProps} props
     * @returns {DragInsideAction | undefined}
     */
    function findSwapPathDown({ items, fullSelection, deltaY }) {
        var _a;
        const initialPath = getEndPath(fullSelection);
        const initialIndex = items.findIndex((item) => isEqual(item.path, initialPath));
        const nextHeight = () => { var _a; return (_a = items[index + 1]) === null || _a === void 0 ? void 0 : _a.height; };
        let cumulativeHeight = 0;
        let index = initialIndex;
        while (nextHeight() !== undefined && Math.abs(deltaY) > cumulativeHeight + nextHeight() / 2) {
            cumulativeHeight += nextHeight();
            index += 1;
        }
        const isArray = typeof last(initialPath) === 'number';
        const beforeIndex = isArray ? index : index + 1;
        const beforePath = (_a = items[beforeIndex]) === null || _a === void 0 ? void 0 : _a.path;
        const indexOffset = index - initialIndex;
        return beforePath ? { beforePath, indexOffset } : { append: true, indexOffset };
    }
    /**
     * @param {RenderedItem[]} items
     * @param {JSON} fullJson
     * @param {JSON} fullState
     * @param {Selection} fullSelection
     * @param {number} indexOffset
     * @returns {Selection}
     */
    function createUpdatedArraySelection({ items, fullJson, fullState, fullSelection, indexOffset }) {
        var _a, _b;
        const startPath = getStartPath(fullSelection);
        const endPath = getEndPath(fullSelection);
        const startIndex = items.findIndex((item) => isEqual(item.path, startPath));
        const endIndex = items.findIndex((item) => isEqual(item.path, endPath));
        const anchorPath = (_a = items[startIndex + indexOffset]) === null || _a === void 0 ? void 0 : _a.path;
        const focusPath = (_b = items[endIndex + indexOffset]) === null || _b === void 0 ? void 0 : _b.path;
        return createSelection(fullJson, fullState, {
            type: SELECTION_TYPE.MULTI,
            anchorPath,
            focusPath
        });
    }

    /* node_modules/svelte-jsoneditor/components/modes/treemode/JSONNode.svelte generated by Svelte v3.48.0 */

    const { Object: Object_1$3 } = globals;
    const file$r = "node_modules/svelte-jsoneditor/components/modes/treemode/JSONNode.svelte";
    const get_identifier_slot_changes_2 = dirty => ({});
    const get_identifier_slot_context_2 = ctx => ({});

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[57] = list[i];
    	return child_ctx;
    }

    const get_identifier_slot_changes_1 = dirty => ({});
    const get_identifier_slot_context_1 = ctx => ({});

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[51] = list[i];
    	child_ctx[53] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[54] = list[i];
    	child_ctx[56] = i;
    	return child_ctx;
    }

    const get_identifier_slot_changes = dirty => ({});
    const get_identifier_slot_context = ctx => ({});

    // (622:2) {:else}
    function create_else_block_5(ctx) {
    	let div1;
    	let div0;
    	let t0;
    	let t1;
    	let jsonvalue;
    	let t2;
    	let show_if = !/*context*/ ctx[4].readOnly && /*selectionObj*/ ctx[7] && (/*selectionObj*/ ctx[7].type === SELECTION_TYPE.VALUE || /*selectionObj*/ ctx[7].type === SELECTION_TYPE.MULTI) && !/*selectionObj*/ ctx[7].edit && isEqual(/*selectionObj*/ ctx[7].focusPath, /*path*/ ctx[1]);
    	let t3;
    	let t4;
    	let current;
    	const identifier_slot_template = /*#slots*/ ctx[39].identifier;
    	const identifier_slot = create_slot(identifier_slot_template, ctx, /*$$scope*/ ctx[40], get_identifier_slot_context_2);
    	let if_block0 = !/*root*/ ctx[10] && create_if_block_27(ctx);

    	jsonvalue = new JSONValue({
    			props: {
    				path: /*path*/ ctx[1],
    				value: /*value*/ ctx[0],
    				enforceString: /*resolvedState*/ ctx[5]
    				? /*resolvedState*/ ctx[5][STATE_ENFORCE_STRING]
    				: undefined,
    				selection: /*selectionObj*/ ctx[7],
    				searchResult: /*searchResult*/ ctx[2]
    				? /*searchResult*/ ctx[2][STATE_SEARCH_VALUE]
    				: undefined,
    				context: /*context*/ ctx[4]
    			},
    			$$inline: true
    		});

    	let if_block1 = show_if && create_if_block_26(ctx);
    	let if_block2 = /*validationError*/ ctx[15] && create_if_block_25(ctx);
    	let if_block3 = !/*root*/ ctx[10] && create_if_block_24(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (identifier_slot) identifier_slot.c();
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			create_component(jsonvalue.$$.fragment);
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			if (if_block3) if_block3.c();
    			attr_dev(div0, "class", "jse-contents svelte-uj4yd7");
    			add_location(div0, file$r, 623, 6, 25339);
    			attr_dev(div1, "class", "jse-contents-outer svelte-uj4yd7");
    			attr_dev(div1, "style", /*indentationStyle*/ ctx[13]);
    			add_location(div1, file$r, 622, 4, 25275);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (identifier_slot) {
    				identifier_slot.m(div0, null);
    			}

    			append_dev(div0, t0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t1);
    			mount_component(jsonvalue, div0, null);
    			append_dev(div0, t2);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div1, t3);
    			if (if_block2) if_block2.m(div1, null);
    			append_dev(div1, t4);
    			if (if_block3) if_block3.m(div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (identifier_slot) {
    				if (identifier_slot.p && (!current || dirty[1] & /*$$scope*/ 512)) {
    					update_slot_base(
    						identifier_slot,
    						identifier_slot_template,
    						ctx,
    						/*$$scope*/ ctx[40],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[40])
    						: get_slot_changes(identifier_slot_template, /*$$scope*/ ctx[40], dirty, get_identifier_slot_changes_2),
    						get_identifier_slot_context_2
    					);
    				}
    			}

    			if (!/*root*/ ctx[10]) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_27(ctx);
    					if_block0.c();
    					if_block0.m(div0, t1);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			const jsonvalue_changes = {};
    			if (dirty[0] & /*path*/ 2) jsonvalue_changes.path = /*path*/ ctx[1];
    			if (dirty[0] & /*value*/ 1) jsonvalue_changes.value = /*value*/ ctx[0];

    			if (dirty[0] & /*resolvedState*/ 32) jsonvalue_changes.enforceString = /*resolvedState*/ ctx[5]
    			? /*resolvedState*/ ctx[5][STATE_ENFORCE_STRING]
    			: undefined;

    			if (dirty[0] & /*selectionObj*/ 128) jsonvalue_changes.selection = /*selectionObj*/ ctx[7];

    			if (dirty[0] & /*searchResult*/ 4) jsonvalue_changes.searchResult = /*searchResult*/ ctx[2]
    			? /*searchResult*/ ctx[2][STATE_SEARCH_VALUE]
    			: undefined;

    			if (dirty[0] & /*context*/ 16) jsonvalue_changes.context = /*context*/ ctx[4];
    			jsonvalue.$set(jsonvalue_changes);
    			if (dirty[0] & /*context, selectionObj, path*/ 146) show_if = !/*context*/ ctx[4].readOnly && /*selectionObj*/ ctx[7] && (/*selectionObj*/ ctx[7].type === SELECTION_TYPE.VALUE || /*selectionObj*/ ctx[7].type === SELECTION_TYPE.MULTI) && !/*selectionObj*/ ctx[7].edit && isEqual(/*selectionObj*/ ctx[7].focusPath, /*path*/ ctx[1]);

    			if (show_if) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*context, selectionObj, path*/ 146) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_26(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div0, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*validationError*/ ctx[15]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*validationError*/ 32768) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_25(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div1, t4);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (!/*root*/ ctx[10]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_24(ctx);
    					if_block3.c();
    					if_block3.m(div1, null);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (!current || dirty[0] & /*indentationStyle*/ 8192) {
    				attr_dev(div1, "style", /*indentationStyle*/ ctx[13]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(identifier_slot, local);
    			transition_in(jsonvalue.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(identifier_slot, local);
    			transition_out(jsonvalue.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (identifier_slot) identifier_slot.d(detaching);
    			if (if_block0) if_block0.d();
    			destroy_component(jsonvalue);
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_5.name,
    		type: "else",
    		source: "(622:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (509:30) 
    function create_if_block_12(ctx) {
    	let div3;
    	let div2;
    	let button;
    	let current_block_type_index;
    	let if_block0;
    	let t0;
    	let t1;
    	let t2;
    	let div1;
    	let div0;
    	let t3;
    	let show_if = !/*context*/ ctx[4].readOnly && /*selectionObj*/ ctx[7] && (/*selectionObj*/ ctx[7].type === SELECTION_TYPE.VALUE || /*selectionObj*/ ctx[7].type === SELECTION_TYPE.MULTI) && !/*selectionObj*/ ctx[7].edit && isEqual(/*selectionObj*/ ctx[7].focusPath, /*path*/ ctx[1]);
    	let t4;
    	let t5;
    	let t6;
    	let if_block6_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_23, create_else_block_4];
    	const if_blocks = [];

    	function select_block_type_4(ctx, dirty) {
    		if (/*expanded*/ ctx[12]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_4(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const identifier_slot_template = /*#slots*/ ctx[39].identifier;
    	const identifier_slot = create_slot(identifier_slot_template, ctx, /*$$scope*/ ctx[40], get_identifier_slot_context_1);
    	let if_block1 = !/*root*/ ctx[10] && create_if_block_22(ctx);

    	function select_block_type_5(ctx, dirty) {
    		if (/*expanded*/ ctx[12]) return create_if_block_21;
    		return create_else_block_3;
    	}

    	let current_block_type = select_block_type_5(ctx);
    	let if_block2 = current_block_type(ctx);
    	let if_block3 = show_if && create_if_block_20(ctx);
    	let if_block4 = /*validationError*/ ctx[15] && (!/*expanded*/ ctx[12] || !/*validationError*/ ctx[15].isChildError) && create_if_block_19(ctx);

    	function select_block_type_6(ctx, dirty) {
    		if (/*expanded*/ ctx[12]) return create_if_block_17;
    		if (!/*root*/ ctx[10]) return create_if_block_18;
    	}

    	let current_block_type_1 = select_block_type_6(ctx);
    	let if_block5 = current_block_type_1 && current_block_type_1(ctx);
    	let if_block6 = /*expanded*/ ctx[12] && create_if_block_13(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			button = element("button");
    			if_block0.c();
    			t0 = space();
    			if (identifier_slot) identifier_slot.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			div1 = element("div");
    			div0 = element("div");
    			if_block2.c();
    			t3 = space();
    			if (if_block3) if_block3.c();
    			t4 = space();
    			if (if_block4) if_block4.c();
    			t5 = space();
    			if (if_block5) if_block5.c();
    			t6 = space();
    			if (if_block6) if_block6.c();
    			if_block6_anchor = empty$3();
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-expand svelte-uj4yd7");
    			attr_dev(button, "title", "Expand or collapse this object (Ctrl+Click to expand/collapse recursively)");
    			add_location(button, file$r, 511, 8, 20963);
    			attr_dev(div0, "class", "jse-meta-inner svelte-uj4yd7");
    			add_location(div0, file$r, 528, 10, 21503);
    			attr_dev(div1, "class", "jse-meta svelte-uj4yd7");
    			attr_dev(div1, "data-type", "selectable-value");
    			add_location(div1, file$r, 527, 8, 21441);
    			attr_dev(div2, "class", "jse-header svelte-uj4yd7");
    			add_location(div2, file$r, 510, 6, 20930);
    			attr_dev(div3, "class", "jse-header-outer svelte-uj4yd7");
    			attr_dev(div3, "style", /*indentationStyle*/ ctx[13]);
    			add_location(div3, file$r, 509, 4, 20868);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, button);
    			if_blocks[current_block_type_index].m(button, null);
    			append_dev(div2, t0);

    			if (identifier_slot) {
    				identifier_slot.m(div2, null);
    			}

    			append_dev(div2, t1);
    			if (if_block1) if_block1.m(div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			if_block2.m(div0, null);
    			append_dev(div2, t3);
    			if (if_block3) if_block3.m(div2, null);
    			append_dev(div3, t4);
    			if (if_block4) if_block4.m(div3, null);
    			append_dev(div3, t5);
    			if (if_block5) if_block5.m(div3, null);
    			insert_dev(target, t6, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, if_block6_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*toggleExpand*/ ctx[23], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_4(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(button, null);
    			}

    			if (identifier_slot) {
    				if (identifier_slot.p && (!current || dirty[1] & /*$$scope*/ 512)) {
    					update_slot_base(
    						identifier_slot,
    						identifier_slot_template,
    						ctx,
    						/*$$scope*/ ctx[40],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[40])
    						: get_slot_changes(identifier_slot_template, /*$$scope*/ ctx[40], dirty, get_identifier_slot_changes_1),
    						get_identifier_slot_context_1
    					);
    				}
    			}

    			if (!/*root*/ ctx[10]) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_22(ctx);
    					if_block1.c();
    					if_block1.m(div2, t2);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type_5(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div0, null);
    				}
    			}

    			if (dirty[0] & /*context, selectionObj, path*/ 146) show_if = !/*context*/ ctx[4].readOnly && /*selectionObj*/ ctx[7] && (/*selectionObj*/ ctx[7].type === SELECTION_TYPE.VALUE || /*selectionObj*/ ctx[7].type === SELECTION_TYPE.MULTI) && !/*selectionObj*/ ctx[7].edit && isEqual(/*selectionObj*/ ctx[7].focusPath, /*path*/ ctx[1]);

    			if (show_if) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*context, selectionObj, path*/ 146) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_20(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div2, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (/*validationError*/ ctx[15] && (!/*expanded*/ ctx[12] || !/*validationError*/ ctx[15].isChildError)) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty[0] & /*validationError, expanded*/ 36864) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_19(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div3, t5);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_6(ctx)) && if_block5) {
    				if_block5.p(ctx, dirty);
    			} else {
    				if (if_block5) if_block5.d(1);
    				if_block5 = current_block_type_1 && current_block_type_1(ctx);

    				if (if_block5) {
    					if_block5.c();
    					if_block5.m(div3, null);
    				}
    			}

    			if (!current || dirty[0] & /*indentationStyle*/ 8192) {
    				attr_dev(div3, "style", /*indentationStyle*/ ctx[13]);
    			}

    			if (/*expanded*/ ctx[12]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);

    					if (dirty[0] & /*expanded*/ 4096) {
    						transition_in(if_block6, 1);
    					}
    				} else {
    					if_block6 = create_if_block_13(ctx);
    					if_block6.c();
    					transition_in(if_block6, 1);
    					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
    				}
    			} else if (if_block6) {
    				group_outros();

    				transition_out(if_block6, 1, 1, () => {
    					if_block6 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(identifier_slot, local);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(if_block6);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(identifier_slot, local);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(if_block6);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if_blocks[current_block_type_index].d();
    			if (identifier_slot) identifier_slot.d(detaching);
    			if (if_block1) if_block1.d();
    			if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();

    			if (if_block5) {
    				if_block5.d();
    			}

    			if (detaching) detach_dev(t6);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(if_block6_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12.name,
    		type: "if",
    		source: "(509:30) ",
    		ctx
    	});

    	return block;
    }

    // (384:2) {#if type === 'array'}
    function create_if_block_1$6(ctx) {
    	let div3;
    	let div2;
    	let button;
    	let current_block_type_index;
    	let if_block0;
    	let t0;
    	let t1;
    	let t2;
    	let div1;
    	let div0;
    	let t3;
    	let show_if = !/*context*/ ctx[4].readOnly && /*selectionObj*/ ctx[7] && (/*selectionObj*/ ctx[7].type === SELECTION_TYPE.VALUE || /*selectionObj*/ ctx[7].type === SELECTION_TYPE.MULTI) && !/*selectionObj*/ ctx[7].edit && isEqual(/*selectionObj*/ ctx[7].focusPath, /*path*/ ctx[1]);
    	let t4;
    	let t5;
    	let t6;
    	let if_block6_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_11, create_else_block_2$2];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*expanded*/ ctx[12]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const identifier_slot_template = /*#slots*/ ctx[39].identifier;
    	const identifier_slot = create_slot(identifier_slot_template, ctx, /*$$scope*/ ctx[40], get_identifier_slot_context);
    	let if_block1 = !/*root*/ ctx[10] && create_if_block_10$2(ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (/*expanded*/ ctx[12]) return create_if_block_9$2;
    		return create_else_block_1$3;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block2 = current_block_type(ctx);
    	let if_block3 = show_if && create_if_block_8$2(ctx);
    	let if_block4 = /*validationError*/ ctx[15] && (!/*expanded*/ ctx[12] || !/*validationError*/ ctx[15].isChildError) && create_if_block_7$2(ctx);

    	function select_block_type_3(ctx, dirty) {
    		if (/*expanded*/ ctx[12]) return create_if_block_6$3;
    		return create_else_block$9;
    	}

    	let current_block_type_1 = select_block_type_3(ctx);
    	let if_block5 = current_block_type_1(ctx);
    	let if_block6 = /*expanded*/ ctx[12] && create_if_block_2$7(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			button = element("button");
    			if_block0.c();
    			t0 = space();
    			if (identifier_slot) identifier_slot.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			div1 = element("div");
    			div0 = element("div");
    			if_block2.c();
    			t3 = space();
    			if (if_block3) if_block3.c();
    			t4 = space();
    			if (if_block4) if_block4.c();
    			t5 = space();
    			if_block5.c();
    			t6 = space();
    			if (if_block6) if_block6.c();
    			if_block6_anchor = empty$3();
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-expand svelte-uj4yd7");
    			attr_dev(button, "title", "Expand or collapse this array (Ctrl+Click to expand/collapse recursively)");
    			add_location(button, file$r, 386, 8, 16116);
    			attr_dev(div0, "class", "jse-meta-inner svelte-uj4yd7");
    			attr_dev(div0, "data-type", "selectable-value");
    			add_location(div0, file$r, 403, 10, 16626);
    			attr_dev(div1, "class", "jse-meta svelte-uj4yd7");
    			add_location(div1, file$r, 402, 8, 16593);
    			attr_dev(div2, "class", "jse-header svelte-uj4yd7");
    			add_location(div2, file$r, 385, 6, 16083);
    			attr_dev(div3, "class", "jse-header-outer svelte-uj4yd7");
    			attr_dev(div3, "style", /*indentationStyle*/ ctx[13]);
    			add_location(div3, file$r, 384, 4, 16021);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, button);
    			if_blocks[current_block_type_index].m(button, null);
    			append_dev(div2, t0);

    			if (identifier_slot) {
    				identifier_slot.m(div2, null);
    			}

    			append_dev(div2, t1);
    			if (if_block1) if_block1.m(div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			if_block2.m(div0, null);
    			append_dev(div2, t3);
    			if (if_block3) if_block3.m(div2, null);
    			append_dev(div3, t4);
    			if (if_block4) if_block4.m(div3, null);
    			append_dev(div3, t5);
    			if_block5.m(div3, null);
    			insert_dev(target, t6, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, if_block6_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*toggleExpand*/ ctx[23], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(button, null);
    			}

    			if (identifier_slot) {
    				if (identifier_slot.p && (!current || dirty[1] & /*$$scope*/ 512)) {
    					update_slot_base(
    						identifier_slot,
    						identifier_slot_template,
    						ctx,
    						/*$$scope*/ ctx[40],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[40])
    						: get_slot_changes(identifier_slot_template, /*$$scope*/ ctx[40], dirty, get_identifier_slot_changes),
    						get_identifier_slot_context
    					);
    				}
    			}

    			if (!/*root*/ ctx[10]) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_10$2(ctx);
    					if_block1.c();
    					if_block1.m(div2, t2);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div0, null);
    				}
    			}

    			if (dirty[0] & /*context, selectionObj, path*/ 146) show_if = !/*context*/ ctx[4].readOnly && /*selectionObj*/ ctx[7] && (/*selectionObj*/ ctx[7].type === SELECTION_TYPE.VALUE || /*selectionObj*/ ctx[7].type === SELECTION_TYPE.MULTI) && !/*selectionObj*/ ctx[7].edit && isEqual(/*selectionObj*/ ctx[7].focusPath, /*path*/ ctx[1]);

    			if (show_if) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*context, selectionObj, path*/ 146) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_8$2(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div2, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (/*validationError*/ ctx[15] && (!/*expanded*/ ctx[12] || !/*validationError*/ ctx[15].isChildError)) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty[0] & /*validationError, expanded*/ 36864) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_7$2(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div3, t5);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_3(ctx)) && if_block5) {
    				if_block5.p(ctx, dirty);
    			} else {
    				if_block5.d(1);
    				if_block5 = current_block_type_1(ctx);

    				if (if_block5) {
    					if_block5.c();
    					if_block5.m(div3, null);
    				}
    			}

    			if (!current || dirty[0] & /*indentationStyle*/ 8192) {
    				attr_dev(div3, "style", /*indentationStyle*/ ctx[13]);
    			}

    			if (/*expanded*/ ctx[12]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);

    					if (dirty[0] & /*expanded*/ 4096) {
    						transition_in(if_block6, 1);
    					}
    				} else {
    					if_block6 = create_if_block_2$7(ctx);
    					if_block6.c();
    					transition_in(if_block6, 1);
    					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
    				}
    			} else if (if_block6) {
    				group_outros();

    				transition_out(if_block6, 1, 1, () => {
    					if_block6 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(identifier_slot, local);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(if_block6);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(identifier_slot, local);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(if_block6);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if_blocks[current_block_type_index].d();
    			if (identifier_slot) identifier_slot.d(detaching);
    			if (if_block1) if_block1.d();
    			if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if_block5.d();
    			if (detaching) detach_dev(t6);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(if_block6_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(384:2) {#if type === 'array'}",
    		ctx
    	});

    	return block;
    }

    // (626:8) {#if !root}
    function create_if_block_27(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = ":";
    			attr_dev(div, "class", "jse-separator svelte-uj4yd7");
    			add_location(div, file$r, 626, 10, 25431);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_27.name,
    		type: "if",
    		source: "(626:8) {#if !root}",
    		ctx
    	});

    	return block;
    }

    // (637:8) {#if !context.readOnly && selectionObj && (selectionObj.type === SELECTION_TYPE.VALUE || selectionObj.type === SELECTION_TYPE.MULTI) && !selectionObj.edit && isEqual(selectionObj.focusPath, path)}
    function create_if_block_26(ctx) {
    	let div;
    	let contextmenubutton;
    	let current;

    	contextmenubutton = new ContextMenuButton({
    			props: {
    				selected: true,
    				onContextMenu: /*context*/ ctx[4].onContextMenu
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(contextmenubutton.$$.fragment);
    			attr_dev(div, "class", "jse-context-menu-button-anchor svelte-uj4yd7");
    			add_location(div, file$r, 637, 10, 25990);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(contextmenubutton, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contextmenubutton_changes = {};
    			if (dirty[0] & /*context*/ 16) contextmenubutton_changes.onContextMenu = /*context*/ ctx[4].onContextMenu;
    			contextmenubutton.$set(contextmenubutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contextmenubutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contextmenubutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(contextmenubutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_26.name,
    		type: "if",
    		source: "(637:8) {#if !context.readOnly && selectionObj && (selectionObj.type === SELECTION_TYPE.VALUE || selectionObj.type === SELECTION_TYPE.MULTI) && !selectionObj.edit && isEqual(selectionObj.focusPath, path)}",
    		ctx
    	});

    	return block;
    }

    // (643:6) {#if validationError}
    function create_if_block_25(ctx) {
    	let validationerror;
    	let current;

    	validationerror = new ValidationError({
    			props: {
    				validationError: /*validationError*/ ctx[15],
    				onExpand: /*handleExpand*/ ctx[24]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(validationerror.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(validationerror, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const validationerror_changes = {};
    			if (dirty[0] & /*validationError*/ 32768) validationerror_changes.validationError = /*validationError*/ ctx[15];
    			validationerror.$set(validationerror_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(validationerror.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(validationerror.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(validationerror, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_25.name,
    		type: "if",
    		source: "(643:6) {#if validationError}",
    		ctx
    	});

    	return block;
    }

    // (646:6) {#if !root}
    function create_if_block_24(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "jse-insert-selection-area jse-after svelte-uj4yd7");
    			attr_dev(div, "data-type", "insert-selection-area-after");
    			add_location(div, file$r, 646, 8, 26303);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*handleInsertAfter*/ ctx[32], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24.name,
    		type: "if",
    		source: "(646:6) {#if !root}",
    		ctx
    	});

    	return block;
    }

    // (520:10) {:else}
    function create_else_block_4(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { data: faCaretRight },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4.name,
    		type: "else",
    		source: "(520:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (518:10) {#if expanded}
    function create_if_block_23(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { data: faCaretDown },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23.name,
    		type: "if",
    		source: "(518:10) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    // (525:8) {#if !root}
    function create_if_block_22(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = ":";
    			attr_dev(div, "class", "jse-separator svelte-uj4yd7");
    			add_location(div, file$r, 525, 10, 21384);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22.name,
    		type: "if",
    		source: "(525:8) {#if !root}",
    		ctx
    	});

    	return block;
    }

    // (532:12) {:else}
    function create_else_block_3(ctx) {
    	let div0;
    	let t1;
    	let button;
    	let t2_value = Object.keys(/*resolvedValue*/ ctx[6]).length + "";
    	let t2;
    	let t3;

    	let t4_value = (Object.keys(/*resolvedValue*/ ctx[6]).length === 1
    	? 'prop'
    	: 'props') + "";

    	let t4;
    	let t5;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "{";
    			t1 = space();
    			button = element("button");
    			t2 = text(t2_value);
    			t3 = space();
    			t4 = text(t4_value);
    			t5 = space();
    			div1 = element("div");
    			div1.textContent = "}";
    			attr_dev(div0, "class", "jse-bracket svelte-uj4yd7");
    			add_location(div0, file$r, 532, 14, 21660);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-tag svelte-uj4yd7");
    			add_location(button, file$r, 533, 14, 21714);
    			attr_dev(div1, "class", "jse-bracket svelte-uj4yd7");
    			add_location(div1, file$r, 537, 14, 21944);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button, anchor);
    			append_dev(button, t2);
    			append_dev(button, t3);
    			append_dev(button, t4);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleExpand*/ ctx[24], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*resolvedValue*/ 64 && t2_value !== (t2_value = Object.keys(/*resolvedValue*/ ctx[6]).length + "")) set_data_dev(t2, t2_value);

    			if (dirty[0] & /*resolvedValue*/ 64 && t4_value !== (t4_value = (Object.keys(/*resolvedValue*/ ctx[6]).length === 1
    			? 'prop'
    			: 'props') + "")) set_data_dev(t4, t4_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(button);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(532:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (530:12) {#if expanded}
    function create_if_block_21(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "{";
    			attr_dev(div, "class", "jse-bracket jse-expanded svelte-uj4yd7");
    			add_location(div, file$r, 530, 14, 21573);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21.name,
    		type: "if",
    		source: "(530:12) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    // (542:8) {#if !context.readOnly && selectionObj && (selectionObj.type === SELECTION_TYPE.VALUE || selectionObj.type === SELECTION_TYPE.MULTI) && !selectionObj.edit && isEqual(selectionObj.focusPath, path)}
    function create_if_block_20(ctx) {
    	let div;
    	let contextmenubutton;
    	let current;

    	contextmenubutton = new ContextMenuButton({
    			props: {
    				selected: true,
    				onContextMenu: /*context*/ ctx[4].onContextMenu
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(contextmenubutton.$$.fragment);
    			attr_dev(div, "class", "jse-context-menu-button-anchor svelte-uj4yd7");
    			add_location(div, file$r, 542, 10, 22249);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(contextmenubutton, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contextmenubutton_changes = {};
    			if (dirty[0] & /*context*/ 16) contextmenubutton_changes.onContextMenu = /*context*/ ctx[4].onContextMenu;
    			contextmenubutton.$set(contextmenubutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contextmenubutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contextmenubutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(contextmenubutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20.name,
    		type: "if",
    		source: "(542:8) {#if !context.readOnly && selectionObj && (selectionObj.type === SELECTION_TYPE.VALUE || selectionObj.type === SELECTION_TYPE.MULTI) && !selectionObj.edit && isEqual(selectionObj.focusPath, path)}",
    		ctx
    	});

    	return block;
    }

    // (548:6) {#if validationError && (!expanded || !validationError.isChildError)}
    function create_if_block_19(ctx) {
    	let validationerror;
    	let current;

    	validationerror = new ValidationError({
    			props: {
    				validationError: /*validationError*/ ctx[15],
    				onExpand: /*handleExpand*/ ctx[24]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(validationerror.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(validationerror, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const validationerror_changes = {};
    			if (dirty[0] & /*validationError*/ 32768) validationerror_changes.validationError = /*validationError*/ ctx[15];
    			validationerror.$set(validationerror_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(validationerror.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(validationerror.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(validationerror, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19.name,
    		type: "if",
    		source: "(548:6) {#if validationError && (!expanded || !validationError.isChildError)}",
    		ctx
    	});

    	return block;
    }

    // (557:22) 
    function create_if_block_18(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "jse-insert-selection-area jse-after svelte-uj4yd7");
    			attr_dev(div, "data-type", "insert-selection-area-after");
    			add_location(div, file$r, 557, 8, 22806);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*handleInsertAfter*/ ctx[32], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18.name,
    		type: "if",
    		source: "(557:22) ",
    		ctx
    	});

    	return block;
    }

    // (551:6) {#if expanded}
    function create_if_block_17(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "jse-insert-selection-area jse-inside svelte-uj4yd7");
    			attr_dev(div, "data-type", "insert-selection-area-inside");
    			add_location(div, file$r, 551, 8, 22613);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*handleInsertInside*/ ctx[31], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17.name,
    		type: "if",
    		source: "(551:6) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    // (565:4) {#if expanded}
    function create_if_block_13(ctx) {
    	let div0;
    	let t0;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t1;
    	let div3;
    	let div2;
    	let div1;
    	let t3;
    	let current;
    	let if_block0 = !/*context*/ ctx[4].readOnly && (/*hover*/ ctx[9] === HOVER_INSERT_INSIDE || /*selectedInside*/ ctx[19]) && create_if_block_16(ctx);
    	let each_value_2 = /*keys*/ ctx[11];
    	validate_each_argument(each_value_2);
    	const get_key = ctx => /*resolvedState*/ ctx[5][/*key*/ ctx[57]][STATE_ID];
    	validate_each_keys(ctx, each_value_2, get_each_context_2$1, get_key);

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		let child_ctx = get_each_context_2$1(ctx, each_value_2, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_2$1(key, child_ctx));
    	}

    	let if_block1 = !/*root*/ ctx[10] && create_if_block_14(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			div1.textContent = "}";
    			t3 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "class", "jse-props svelte-uj4yd7");
    			add_location(div0, file$r, 565, 6, 23013);
    			attr_dev(div1, "class", "jse-bracket svelte-uj4yd7");
    			add_location(div1, file$r, 610, 10, 24972);
    			attr_dev(div2, "data-type", "selectable-value");
    			attr_dev(div2, "class", "jse-footer svelte-uj4yd7");
    			add_location(div2, file$r, 609, 8, 24908);
    			attr_dev(div3, "class", "jse-footer-outer svelte-uj4yd7");
    			attr_dev(div3, "style", /*indentationStyle*/ ctx[13]);
    			add_location(div3, file$r, 608, 6, 24844);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			insert_dev(target, t1, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div3, t3);
    			if (if_block1) if_block1.m(div3, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!/*context*/ ctx[4].readOnly && (/*hover*/ ctx[9] === HOVER_INSERT_INSIDE || /*selectedInside*/ ctx[19])) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*context, hover, selectedInside*/ 524816) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_16(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div0, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*resolvedValue, keys, memoizePath, path, resolvedState, resolvedSelection, searchResult, validationErrors, context, handleDragSelectionStart, handleUpdateKey*/ 306186622) {
    				each_value_2 = /*keys*/ ctx[11];
    				validate_each_argument(each_value_2);
    				group_outros();
    				validate_each_keys(ctx, each_value_2, get_each_context_2$1, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_2, each_1_lookup, div0, outro_and_destroy_block, create_each_block_2$1, null, get_each_context_2$1);
    				check_outros();
    			}

    			if (!/*root*/ ctx[10]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_14(ctx);
    					if_block1.c();
    					if_block1.m(div3, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (!current || dirty[0] & /*indentationStyle*/ 8192) {
    				attr_dev(div3, "style", /*indentationStyle*/ ctx[13]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (if_block0) if_block0.d();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div3);
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13.name,
    		type: "if",
    		source: "(565:4) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    // (567:8) {#if !context.readOnly && (hover === HOVER_INSERT_INSIDE || selectedInside)}
    function create_if_block_16(ctx) {
    	let div;
    	let contextmenubutton;
    	let div_style_value;
    	let current;

    	contextmenubutton = new ContextMenuButton({
    			props: {
    				selected: /*selectedInside*/ ctx[19],
    				onContextMenu: /*handleInsertInsideOpenContextMenu*/ ctx[33]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(contextmenubutton.$$.fragment);
    			attr_dev(div, "class", "jse-insert-area jse-inside svelte-uj4yd7");
    			attr_dev(div, "data-type", "insert-selection-area-inside");
    			attr_dev(div, "style", div_style_value = getIndentationStyle(/*path*/ ctx[1].length + 1));
    			attr_dev(div, "title", INSERT_EXPLANATION);
    			toggle_class(div, "jse-hovered", /*hover*/ ctx[9] === HOVER_INSERT_INSIDE);
    			toggle_class(div, "jse-selected", /*selectedInside*/ ctx[19]);
    			add_location(div, file$r, 567, 10, 23132);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(contextmenubutton, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contextmenubutton_changes = {};
    			if (dirty[0] & /*selectedInside*/ 524288) contextmenubutton_changes.selected = /*selectedInside*/ ctx[19];
    			contextmenubutton.$set(contextmenubutton_changes);

    			if (!current || dirty[0] & /*path*/ 2 && div_style_value !== (div_style_value = getIndentationStyle(/*path*/ ctx[1].length + 1))) {
    				attr_dev(div, "style", div_style_value);
    			}

    			if (dirty[0] & /*hover*/ 512) {
    				toggle_class(div, "jse-hovered", /*hover*/ ctx[9] === HOVER_INSERT_INSIDE);
    			}

    			if (dirty[0] & /*selectedInside*/ 524288) {
    				toggle_class(div, "jse-selected", /*selectedInside*/ ctx[19]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contextmenubutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contextmenubutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(contextmenubutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16.name,
    		type: "if",
    		source: "(567:8) {#if !context.readOnly && (hover === HOVER_INSERT_INSIDE || selectedInside)}",
    		ctx
    	});

    	return block;
    }

    // (602:14) {#if !context.readOnly && keyIsSelected(path, key, resolvedSelection)}
    function create_if_block_15(ctx) {
    	let contextmenubutton;
    	let current;

    	contextmenubutton = new ContextMenuButton({
    			props: {
    				selected: true,
    				onContextMenu: /*context*/ ctx[4].onContextMenu
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(contextmenubutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(contextmenubutton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contextmenubutton_changes = {};
    			if (dirty[0] & /*context*/ 16) contextmenubutton_changes.onContextMenu = /*context*/ ctx[4].onContextMenu;
    			contextmenubutton.$set(contextmenubutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contextmenubutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contextmenubutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(contextmenubutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15.name,
    		type: "if",
    		source: "(602:14) {#if !context.readOnly && keyIsSelected(path, key, resolvedSelection)}",
    		ctx
    	});

    	return block;
    }

    // (593:12) 
    function create_identifier_slot_1(ctx) {
    	let div;
    	let jsonkey;
    	let t0;
    	let show_if = !/*context*/ ctx[4].readOnly && keyIsSelected(/*path*/ ctx[1], /*key*/ ctx[57], /*resolvedSelection*/ ctx[8]);
    	let t1;
    	let current;

    	jsonkey = new JSONKey({
    			props: {
    				path: /*memoizePath*/ ctx[22](/*path*/ ctx[1].concat(/*key*/ ctx[57])),
    				key: /*key*/ ctx[57],
    				context: /*context*/ ctx[4],
    				selection: /*resolvedSelection*/ ctx[8]?.[/*key*/ ctx[57]]?.[STATE_SELECTION],
    				searchResult: /*searchResult*/ ctx[2]?.[/*key*/ ctx[57]]?.[STATE_SEARCH_PROPERTY],
    				onUpdateKey: /*handleUpdateKey*/ ctx[25]
    			},
    			$$inline: true
    		});

    	let if_block = show_if && create_if_block_15(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(jsonkey.$$.fragment);
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			attr_dev(div, "slot", "identifier");
    			attr_dev(div, "class", "jse-identifier svelte-uj4yd7");
    			add_location(div, file$r, 592, 12, 24186);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(jsonkey, div, null);
    			append_dev(div, t0);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const jsonkey_changes = {};
    			if (dirty[0] & /*path, keys*/ 2050) jsonkey_changes.path = /*memoizePath*/ ctx[22](/*path*/ ctx[1].concat(/*key*/ ctx[57]));
    			if (dirty[0] & /*keys*/ 2048) jsonkey_changes.key = /*key*/ ctx[57];
    			if (dirty[0] & /*context*/ 16) jsonkey_changes.context = /*context*/ ctx[4];
    			if (dirty[0] & /*resolvedSelection, keys*/ 2304) jsonkey_changes.selection = /*resolvedSelection*/ ctx[8]?.[/*key*/ ctx[57]]?.[STATE_SELECTION];
    			if (dirty[0] & /*searchResult, keys*/ 2052) jsonkey_changes.searchResult = /*searchResult*/ ctx[2]?.[/*key*/ ctx[57]]?.[STATE_SEARCH_PROPERTY];
    			jsonkey.$set(jsonkey_changes);
    			if (dirty[0] & /*context, path, keys, resolvedSelection*/ 2322) show_if = !/*context*/ ctx[4].readOnly && keyIsSelected(/*path*/ ctx[1], /*key*/ ctx[57], /*resolvedSelection*/ ctx[8]);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*context, path, keys, resolvedSelection*/ 2322) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_15(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(jsonkey.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(jsonkey.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(jsonkey);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_identifier_slot_1.name,
    		type: "slot",
    		source: "(593:12) ",
    		ctx
    	});

    	return block;
    }

    // (582:8) {#each keys as key (resolvedState[key][STATE_ID])}
    function create_each_block_2$1(key_1, ctx) {
    	let first_1;
    	let jsonnode;
    	let current;

    	jsonnode = new JSONNode({
    			props: {
    				value: /*resolvedValue*/ ctx[6][/*key*/ ctx[57]],
    				path: /*memoizePath*/ ctx[22](/*path*/ ctx[1].concat(/*key*/ ctx[57])),
    				state: /*resolvedState*/ ctx[5][/*key*/ ctx[57]],
    				selection: /*resolvedSelection*/ ctx[8]
    				? /*resolvedSelection*/ ctx[8][/*key*/ ctx[57]]
    				: undefined,
    				searchResult: /*searchResult*/ ctx[2]
    				? /*searchResult*/ ctx[2][/*key*/ ctx[57]]
    				: undefined,
    				validationErrors: /*validationErrors*/ ctx[3]
    				? /*validationErrors*/ ctx[3][/*key*/ ctx[57]]
    				: undefined,
    				context: /*context*/ ctx[4],
    				onDragSelectionStart: /*handleDragSelectionStart*/ ctx[28],
    				$$slots: { identifier: [create_identifier_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first_1 = empty$3();
    			create_component(jsonnode.$$.fragment);
    			this.first = first_1;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first_1, anchor);
    			mount_component(jsonnode, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const jsonnode_changes = {};
    			if (dirty[0] & /*resolvedValue, keys*/ 2112) jsonnode_changes.value = /*resolvedValue*/ ctx[6][/*key*/ ctx[57]];
    			if (dirty[0] & /*path, keys*/ 2050) jsonnode_changes.path = /*memoizePath*/ ctx[22](/*path*/ ctx[1].concat(/*key*/ ctx[57]));
    			if (dirty[0] & /*resolvedState, keys*/ 2080) jsonnode_changes.state = /*resolvedState*/ ctx[5][/*key*/ ctx[57]];

    			if (dirty[0] & /*resolvedSelection, keys*/ 2304) jsonnode_changes.selection = /*resolvedSelection*/ ctx[8]
    			? /*resolvedSelection*/ ctx[8][/*key*/ ctx[57]]
    			: undefined;

    			if (dirty[0] & /*searchResult, keys*/ 2052) jsonnode_changes.searchResult = /*searchResult*/ ctx[2]
    			? /*searchResult*/ ctx[2][/*key*/ ctx[57]]
    			: undefined;

    			if (dirty[0] & /*validationErrors, keys*/ 2056) jsonnode_changes.validationErrors = /*validationErrors*/ ctx[3]
    			? /*validationErrors*/ ctx[3][/*key*/ ctx[57]]
    			: undefined;

    			if (dirty[0] & /*context*/ 16) jsonnode_changes.context = /*context*/ ctx[4];

    			if (dirty[0] & /*context, path, keys, resolvedSelection, searchResult*/ 2326 | dirty[1] & /*$$scope*/ 512) {
    				jsonnode_changes.$$scope = { dirty, ctx };
    			}

    			jsonnode.$set(jsonnode_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(jsonnode.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(jsonnode.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first_1);
    			destroy_component(jsonnode, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(582:8) {#each keys as key (resolvedState[key][STATE_ID])}",
    		ctx
    	});

    	return block;
    }

    // (613:8) {#if !root}
    function create_if_block_14(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "jse-insert-selection-area jse-after svelte-uj4yd7");
    			attr_dev(div, "data-type", "insert-selection-area-after");
    			add_location(div, file$r, 613, 10, 25057);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*handleInsertAfter*/ ctx[32], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14.name,
    		type: "if",
    		source: "(613:8) {#if !root}",
    		ctx
    	});

    	return block;
    }

    // (395:10) {:else}
    function create_else_block_2$2(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { data: faCaretRight },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$2.name,
    		type: "else",
    		source: "(395:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (393:10) {#if expanded}
    function create_if_block_11(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { data: faCaretDown },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(393:10) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    // (400:8) {#if !root}
    function create_if_block_10$2(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = ":";
    			attr_dev(div, "class", "jse-separator svelte-uj4yd7");
    			add_location(div, file$r, 400, 10, 16536);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$2.name,
    		type: "if",
    		source: "(400:8) {#if !root}",
    		ctx
    	});

    	return block;
    }

    // (411:12) {:else}
    function create_else_block_1$3(ctx) {
    	let div0;
    	let t1;
    	let button;
    	let t2_value = /*resolvedValue*/ ctx[6].length + "";
    	let t2;
    	let t3;
    	let t4_value = (/*resolvedValue*/ ctx[6].length === 1 ? 'item' : 'items') + "";
    	let t4;
    	let t5;
    	let div1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "[";
    			t1 = space();
    			button = element("button");
    			t2 = text(t2_value);
    			t3 = space();
    			t4 = text(t4_value);
    			t5 = space();
    			div1 = element("div");
    			div1.textContent = "]";
    			attr_dev(div0, "class", "jse-bracket svelte-uj4yd7");
    			add_location(div0, file$r, 411, 14, 16967);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-tag svelte-uj4yd7");
    			add_location(button, file$r, 412, 14, 17014);
    			attr_dev(div1, "class", "jse-bracket svelte-uj4yd7");
    			add_location(div1, file$r, 416, 14, 17218);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button, anchor);
    			append_dev(button, t2);
    			append_dev(button, t3);
    			append_dev(button, t4);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div1, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleExpand*/ ctx[24], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*resolvedValue*/ 64 && t2_value !== (t2_value = /*resolvedValue*/ ctx[6].length + "")) set_data_dev(t2, t2_value);
    			if (dirty[0] & /*resolvedValue*/ 64 && t4_value !== (t4_value = (/*resolvedValue*/ ctx[6].length === 1 ? 'item' : 'items') + "")) set_data_dev(t4, t4_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(button);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$3.name,
    		type: "else",
    		source: "(411:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (405:12) {#if expanded}
    function create_if_block_9$2(ctx) {
    	let div;
    	let t1;
    	let span;
    	let t2_value = /*resolvedValue*/ ctx[6].length + "";
    	let t2;
    	let t3;
    	let t4_value = (/*resolvedValue*/ ctx[6].length === 1 ? 'item' : 'items') + "";
    	let t4;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "[";
    			t1 = space();
    			span = element("span");
    			t2 = text(t2_value);
    			t3 = space();
    			t4 = text(t4_value);
    			attr_dev(div, "class", "jse-bracket svelte-uj4yd7");
    			add_location(div, file$r, 405, 14, 16725);
    			attr_dev(span, "class", "jse-tag jse-expanded svelte-uj4yd7");
    			add_location(span, file$r, 406, 14, 16772);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, span, anchor);
    			append_dev(span, t2);
    			append_dev(span, t3);
    			append_dev(span, t4);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*resolvedValue*/ 64 && t2_value !== (t2_value = /*resolvedValue*/ ctx[6].length + "")) set_data_dev(t2, t2_value);
    			if (dirty[0] & /*resolvedValue*/ 64 && t4_value !== (t4_value = (/*resolvedValue*/ ctx[6].length === 1 ? 'item' : 'items') + "")) set_data_dev(t4, t4_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$2.name,
    		type: "if",
    		source: "(405:12) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    // (421:8) {#if !context.readOnly && selectionObj && (selectionObj.type === SELECTION_TYPE.VALUE || selectionObj.type === SELECTION_TYPE.MULTI) && !selectionObj.edit && isEqual(selectionObj.focusPath, path)}
    function create_if_block_8$2(ctx) {
    	let div;
    	let contextmenubutton;
    	let current;

    	contextmenubutton = new ContextMenuButton({
    			props: {
    				selected: true,
    				onContextMenu: /*context*/ ctx[4].onContextMenu
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(contextmenubutton.$$.fragment);
    			attr_dev(div, "class", "jse-context-menu-button-anchor svelte-uj4yd7");
    			add_location(div, file$r, 421, 10, 17516);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(contextmenubutton, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contextmenubutton_changes = {};
    			if (dirty[0] & /*context*/ 16) contextmenubutton_changes.onContextMenu = /*context*/ ctx[4].onContextMenu;
    			contextmenubutton.$set(contextmenubutton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contextmenubutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contextmenubutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(contextmenubutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$2.name,
    		type: "if",
    		source: "(421:8) {#if !context.readOnly && selectionObj && (selectionObj.type === SELECTION_TYPE.VALUE || selectionObj.type === SELECTION_TYPE.MULTI) && !selectionObj.edit && isEqual(selectionObj.focusPath, path)}",
    		ctx
    	});

    	return block;
    }

    // (427:6) {#if validationError && (!expanded || !validationError.isChildError)}
    function create_if_block_7$2(ctx) {
    	let validationerror;
    	let current;

    	validationerror = new ValidationError({
    			props: {
    				validationError: /*validationError*/ ctx[15],
    				onExpand: /*handleExpand*/ ctx[24]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(validationerror.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(validationerror, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const validationerror_changes = {};
    			if (dirty[0] & /*validationError*/ 32768) validationerror_changes.validationError = /*validationError*/ ctx[15];
    			validationerror.$set(validationerror_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(validationerror.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(validationerror.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(validationerror, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$2.name,
    		type: "if",
    		source: "(427:6) {#if validationError && (!expanded || !validationError.isChildError)}",
    		ctx
    	});

    	return block;
    }

    // (436:6) {:else}
    function create_else_block$9(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "jse-insert-selection-area jse-after svelte-uj4yd7");
    			attr_dev(div, "data-type", "insert-selection-area-after");
    			add_location(div, file$r, 436, 8, 18064);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*handleInsertAfter*/ ctx[32], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$9.name,
    		type: "else",
    		source: "(436:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (430:6) {#if expanded}
    function create_if_block_6$3(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "jse-insert-selection-area jse-inside svelte-uj4yd7");
    			attr_dev(div, "data-type", "insert-selection-area-inside");
    			add_location(div, file$r, 430, 8, 17880);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*handleInsertInside*/ ctx[31], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$3.name,
    		type: "if",
    		source: "(430:6) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    // (444:4) {#if expanded}
    function create_if_block_2$7(ctx) {
    	let div0;
    	let t0;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t1;
    	let div2;
    	let div1;
    	let span;
    	let t3;
    	let current;
    	let if_block0 = !/*context*/ ctx[4].readOnly && (/*hover*/ ctx[9] === HOVER_INSERT_INSIDE || /*selectedInside*/ ctx[19]) && create_if_block_5$4(ctx);
    	let each_value = /*visibleSections*/ ctx[16];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*sectionIndex*/ ctx[53];
    	validate_each_keys(ctx, each_value, get_each_context$9, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$9(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$9(key, child_ctx));
    	}

    	let if_block1 = !/*root*/ ctx[10] && create_if_block_3$6(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			div2 = element("div");
    			div1 = element("div");
    			span = element("span");
    			span.textContent = "]";
    			t3 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "class", "jse-items svelte-uj4yd7");
    			add_location(div0, file$r, 444, 6, 18271);
    			attr_dev(span, "class", "jse-bracket svelte-uj4yd7");
    			add_location(span, file$r, 497, 10, 20549);
    			attr_dev(div1, "data-type", "selectable-value");
    			attr_dev(div1, "class", "jse-footer svelte-uj4yd7");
    			add_location(div1, file$r, 496, 8, 20485);
    			attr_dev(div2, "class", "jse-footer-outer svelte-uj4yd7");
    			attr_dev(div2, "style", /*indentationStyle*/ ctx[13]);
    			add_location(div2, file$r, 495, 6, 20421);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, span);
    			append_dev(div2, t3);
    			if (if_block1) if_block1.m(div2, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!/*context*/ ctx[4].readOnly && (/*hover*/ ctx[9] === HOVER_INSERT_INSIDE || /*selectedInside*/ ctx[19])) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*context, hover, selectedInside*/ 524816) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_5$4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div0, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*visibleSections, resolvedValue, path, context, selectionObj, memoizePath, resolvedState, resolvedSelection, searchResult, validationErrors, handleDragSelectionStart*/ 272695806) {
    				each_value = /*visibleSections*/ ctx[16];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$9, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, outro_and_destroy_block, create_each_block$9, null, get_each_context$9);
    				check_outros();
    			}

    			if (!/*root*/ ctx[10]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_3$6(ctx);
    					if_block1.c();
    					if_block1.m(div2, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (!current || dirty[0] & /*indentationStyle*/ 8192) {
    				attr_dev(div2, "style", /*indentationStyle*/ ctx[13]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (if_block0) if_block0.d();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(444:4) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    // (446:8) {#if !context.readOnly && (hover === HOVER_INSERT_INSIDE || selectedInside)}
    function create_if_block_5$4(ctx) {
    	let div;
    	let contextmenubutton;
    	let div_style_value;
    	let current;

    	contextmenubutton = new ContextMenuButton({
    			props: {
    				selected: /*selectedInside*/ ctx[19],
    				onContextMenu: /*handleInsertInsideOpenContextMenu*/ ctx[33]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(contextmenubutton.$$.fragment);
    			attr_dev(div, "class", "jse-insert-area jse-inside svelte-uj4yd7");
    			attr_dev(div, "data-type", "insert-selection-area-inside");
    			attr_dev(div, "style", div_style_value = getIndentationStyle(/*path*/ ctx[1].length + 1));
    			attr_dev(div, "title", INSERT_EXPLANATION);
    			toggle_class(div, "jse-hovered", /*hover*/ ctx[9] === HOVER_INSERT_INSIDE);
    			toggle_class(div, "jse-selected", /*selectedInside*/ ctx[19]);
    			add_location(div, file$r, 446, 10, 18390);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(contextmenubutton, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contextmenubutton_changes = {};
    			if (dirty[0] & /*selectedInside*/ 524288) contextmenubutton_changes.selected = /*selectedInside*/ ctx[19];
    			contextmenubutton.$set(contextmenubutton_changes);

    			if (!current || dirty[0] & /*path*/ 2 && div_style_value !== (div_style_value = getIndentationStyle(/*path*/ ctx[1].length + 1))) {
    				attr_dev(div, "style", div_style_value);
    			}

    			if (dirty[0] & /*hover*/ 512) {
    				toggle_class(div, "jse-hovered", /*hover*/ ctx[9] === HOVER_INSERT_INSIDE);
    			}

    			if (dirty[0] & /*selectedInside*/ 524288) {
    				toggle_class(div, "jse-selected", /*selectedInside*/ ctx[19]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contextmenubutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contextmenubutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(contextmenubutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$4.name,
    		type: "if",
    		source: "(446:8) {#if !context.readOnly && (hover === HOVER_INSERT_INSIDE || selectedInside)}",
    		ctx
    	});

    	return block;
    }

    // (479:14) 
    function create_identifier_slot(ctx) {
    	let div1;
    	let div0;
    	let t_value = /*visibleSection*/ ctx[51].start + /*itemIndex*/ ctx[56] + "";
    	let t;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t = text(t_value);
    			attr_dev(div0, "class", "jse-index svelte-uj4yd7");
    			add_location(div0, file$r, 479, 16, 19919);
    			attr_dev(div1, "slot", "identifier");
    			attr_dev(div1, "class", "jse-identifier svelte-uj4yd7");
    			add_location(div1, file$r, 478, 14, 19856);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*visibleSections, resolvedValue*/ 65600 && t_value !== (t_value = /*visibleSection*/ ctx[51].start + /*itemIndex*/ ctx[56] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_identifier_slot.name,
    		type: "slot",
    		source: "(479:14) ",
    		ctx
    	});

    	return block;
    }

    // (462:10) {#each resolvedValue.slice(visibleSection.start, Math.min(visibleSection.end, resolvedValue.length)) as item, itemIndex (itemIndex)}
    function create_each_block_1(key_1, ctx) {
    	let first_1;
    	let jsonnode;
    	let current;

    	jsonnode = new JSONNode({
    			props: {
    				value: /*item*/ ctx[54],
    				path: /*memoizePath*/ ctx[22](/*path*/ ctx[1].concat(/*visibleSection*/ ctx[51].start + /*itemIndex*/ ctx[56])),
    				state: /*resolvedState*/ ctx[5][/*visibleSection*/ ctx[51].start + /*itemIndex*/ ctx[56]],
    				selection: /*resolvedSelection*/ ctx[8]
    				? /*resolvedSelection*/ ctx[8][/*visibleSection*/ ctx[51].start + /*itemIndex*/ ctx[56]]
    				: undefined,
    				searchResult: /*searchResult*/ ctx[2]
    				? /*searchResult*/ ctx[2][/*visibleSection*/ ctx[51].start + /*itemIndex*/ ctx[56]]
    				: undefined,
    				validationErrors: /*validationErrors*/ ctx[3]
    				? /*validationErrors*/ ctx[3][/*visibleSection*/ ctx[51].start + /*itemIndex*/ ctx[56]]
    				: undefined,
    				context: /*context*/ ctx[4],
    				onDragSelectionStart: /*handleDragSelectionStart*/ ctx[28],
    				$$slots: { identifier: [create_identifier_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first_1 = empty$3();
    			create_component(jsonnode.$$.fragment);
    			this.first = first_1;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first_1, anchor);
    			mount_component(jsonnode, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const jsonnode_changes = {};
    			if (dirty[0] & /*resolvedValue, visibleSections*/ 65600) jsonnode_changes.value = /*item*/ ctx[54];
    			if (dirty[0] & /*path, visibleSections, resolvedValue*/ 65602) jsonnode_changes.path = /*memoizePath*/ ctx[22](/*path*/ ctx[1].concat(/*visibleSection*/ ctx[51].start + /*itemIndex*/ ctx[56]));
    			if (dirty[0] & /*resolvedState, visibleSections, resolvedValue*/ 65632) jsonnode_changes.state = /*resolvedState*/ ctx[5][/*visibleSection*/ ctx[51].start + /*itemIndex*/ ctx[56]];

    			if (dirty[0] & /*resolvedSelection, visibleSections, resolvedValue*/ 65856) jsonnode_changes.selection = /*resolvedSelection*/ ctx[8]
    			? /*resolvedSelection*/ ctx[8][/*visibleSection*/ ctx[51].start + /*itemIndex*/ ctx[56]]
    			: undefined;

    			if (dirty[0] & /*searchResult, visibleSections, resolvedValue*/ 65604) jsonnode_changes.searchResult = /*searchResult*/ ctx[2]
    			? /*searchResult*/ ctx[2][/*visibleSection*/ ctx[51].start + /*itemIndex*/ ctx[56]]
    			: undefined;

    			if (dirty[0] & /*validationErrors, visibleSections, resolvedValue*/ 65608) jsonnode_changes.validationErrors = /*validationErrors*/ ctx[3]
    			? /*validationErrors*/ ctx[3][/*visibleSection*/ ctx[51].start + /*itemIndex*/ ctx[56]]
    			: undefined;

    			if (dirty[0] & /*context*/ 16) jsonnode_changes.context = /*context*/ ctx[4];

    			if (dirty[0] & /*visibleSections, resolvedValue*/ 65600 | dirty[1] & /*$$scope*/ 512) {
    				jsonnode_changes.$$scope = { dirty, ctx };
    			}

    			jsonnode.$set(jsonnode_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(jsonnode.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(jsonnode.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first_1);
    			destroy_component(jsonnode, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(462:10) {#each resolvedValue.slice(visibleSection.start, Math.min(visibleSection.end, resolvedValue.length)) as item, itemIndex (itemIndex)}",
    		ctx
    	});

    	return block;
    }

    // (484:10) {#if visibleSection.end < resolvedValue.length}
    function create_if_block_4$4(ctx) {
    	let collapseditems;
    	let current;

    	collapseditems = new CollapsedItems({
    			props: {
    				visibleSections: /*visibleSections*/ ctx[16],
    				sectionIndex: /*sectionIndex*/ ctx[53],
    				total: /*resolvedValue*/ ctx[6].length,
    				path: /*path*/ ctx[1],
    				onExpandSection: /*context*/ ctx[4].onExpandSection,
    				selection: /*selectionObj*/ ctx[7]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(collapseditems.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(collapseditems, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const collapseditems_changes = {};
    			if (dirty[0] & /*visibleSections*/ 65536) collapseditems_changes.visibleSections = /*visibleSections*/ ctx[16];
    			if (dirty[0] & /*visibleSections*/ 65536) collapseditems_changes.sectionIndex = /*sectionIndex*/ ctx[53];
    			if (dirty[0] & /*resolvedValue*/ 64) collapseditems_changes.total = /*resolvedValue*/ ctx[6].length;
    			if (dirty[0] & /*path*/ 2) collapseditems_changes.path = /*path*/ ctx[1];
    			if (dirty[0] & /*context*/ 16) collapseditems_changes.onExpandSection = /*context*/ ctx[4].onExpandSection;
    			if (dirty[0] & /*selectionObj*/ 128) collapseditems_changes.selection = /*selectionObj*/ ctx[7];
    			collapseditems.$set(collapseditems_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(collapseditems.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(collapseditems.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(collapseditems, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$4.name,
    		type: "if",
    		source: "(484:10) {#if visibleSection.end < resolvedValue.length}",
    		ctx
    	});

    	return block;
    }

    // (461:8) {#each visibleSections as visibleSection, sectionIndex (sectionIndex)}
    function create_each_block$9(key_1, ctx) {
    	let first_1;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t;
    	let if_block_anchor;
    	let current;
    	let each_value_1 = /*resolvedValue*/ ctx[6].slice(/*visibleSection*/ ctx[51].start, Math.min(/*visibleSection*/ ctx[51].end, /*resolvedValue*/ ctx[6].length));
    	validate_each_argument(each_value_1);
    	const get_key = ctx => /*itemIndex*/ ctx[56];
    	validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		let child_ctx = get_each_context_1(ctx, each_value_1, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
    	}

    	let if_block = /*visibleSection*/ ctx[51].end < /*resolvedValue*/ ctx[6].length && create_if_block_4$4(ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first_1 = empty$3();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    			this.first = first_1;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first_1, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*resolvedValue, visibleSections, memoizePath, path, resolvedState, resolvedSelection, searchResult, validationErrors, context, handleDragSelectionStart*/ 272695678) {
    				each_value_1 = /*resolvedValue*/ ctx[6].slice(/*visibleSection*/ ctx[51].start, Math.min(/*visibleSection*/ ctx[51].end, /*resolvedValue*/ ctx[6].length));
    				validate_each_argument(each_value_1);
    				group_outros();
    				validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, t.parentNode, outro_and_destroy_block, create_each_block_1, t, get_each_context_1);
    				check_outros();
    			}

    			if (/*visibleSection*/ ctx[51].end < /*resolvedValue*/ ctx[6].length) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*visibleSections, resolvedValue*/ 65600) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_4$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first_1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(461:8) {#each visibleSections as visibleSection, sectionIndex (sectionIndex)}",
    		ctx
    	});

    	return block;
    }

    // (500:8) {#if !root}
    function create_if_block_3$6(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "jse-insert-selection-area jse-after svelte-uj4yd7");
    			attr_dev(div, "data-type", "insert-selection-area-after");
    			add_location(div, file$r, 500, 10, 20629);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*handleInsertAfter*/ ctx[32], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$6.name,
    		type: "if",
    		source: "(500:8) {#if !root}",
    		ctx
    	});

    	return block;
    }

    // (655:2) {#if !context.readOnly && (hover === HOVER_INSERT_AFTER || selectedAfter)}
    function create_if_block$h(ctx) {
    	let div;
    	let contextmenubutton;
    	let current;

    	contextmenubutton = new ContextMenuButton({
    			props: {
    				selected: /*selectedAfter*/ ctx[20],
    				onContextMenu: /*handleInsertAfterOpenContextMenu*/ ctx[34]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(contextmenubutton.$$.fragment);
    			attr_dev(div, "class", "jse-insert-area jse-after svelte-uj4yd7");
    			attr_dev(div, "data-type", "insert-selection-area-after");
    			attr_dev(div, "style", /*indentationStyle*/ ctx[13]);
    			attr_dev(div, "title", INSERT_EXPLANATION);
    			toggle_class(div, "jse-hovered", /*hover*/ ctx[9] === HOVER_INSERT_AFTER);
    			toggle_class(div, "jse-selected", /*selectedAfter*/ ctx[20]);
    			add_location(div, file$r, 655, 4, 26574);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(contextmenubutton, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contextmenubutton_changes = {};
    			if (dirty[0] & /*selectedAfter*/ 1048576) contextmenubutton_changes.selected = /*selectedAfter*/ ctx[20];
    			contextmenubutton.$set(contextmenubutton_changes);

    			if (!current || dirty[0] & /*indentationStyle*/ 8192) {
    				attr_dev(div, "style", /*indentationStyle*/ ctx[13]);
    			}

    			if (dirty[0] & /*hover*/ 512) {
    				toggle_class(div, "jse-hovered", /*hover*/ ctx[9] === HOVER_INSERT_AFTER);
    			}

    			if (dirty[0] & /*selectedAfter*/ 1048576) {
    				toggle_class(div, "jse-selected", /*selectedAfter*/ ctx[20]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contextmenubutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contextmenubutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(contextmenubutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(655:2) {#if !context.readOnly && (hover === HOVER_INSERT_AFTER || selectedAfter)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$u(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block0;
    	let t;
    	let div_class_value;
    	let div_data_path_value;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_1$6, create_if_block_12, create_else_block_5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*type*/ ctx[14] === 'array') return 0;
    		if (/*type*/ ctx[14] === 'object') return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block1 = !/*context*/ ctx[4].readOnly && (/*hover*/ ctx[9] === HOVER_INSERT_AFTER || /*selectedAfter*/ ctx[20]) && create_if_block$h(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "class", div_class_value = "" + (null_to_empty(classnames('jse-json-node', { 'jse-expanded': /*expanded*/ ctx[12] }, /*context*/ ctx[4].onClassName(/*path*/ ctx[1], /*resolvedValue*/ ctx[6]))) + " svelte-uj4yd7"));
    			attr_dev(div, "data-path", div_data_path_value = encodeDataPath(/*path*/ ctx[1]));
    			toggle_class(div, "jse-root", /*root*/ ctx[10]);
    			toggle_class(div, "jse-selected", /*selected*/ ctx[21]);
    			toggle_class(div, "jse-selected-key", /*selectedKey*/ ctx[18]);
    			toggle_class(div, "jse-selected-value", /*selectedValue*/ ctx[17]);
    			toggle_class(div, "jse-hovered", /*hover*/ ctx[9] === HOVER_COLLECTION);
    			add_location(div, file$r, 364, 0, 15462);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "mousedown", /*handleMouseDown*/ ctx[26], false, false, false),
    					listen_dev(div, "mousemove", /*handleMouseMove*/ ctx[27], false, false, false),
    					listen_dev(div, "mouseover", /*handleMouseOver*/ ctx[29], false, false, false),
    					listen_dev(div, "mouseout", /*handleMouseOut*/ ctx[30], false, false, false),
    					listen_dev(div, "focus", undefined, false, false, false),
    					listen_dev(div, "blur", undefined, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div, t);
    			}

    			if (!/*context*/ ctx[4].readOnly && (/*hover*/ ctx[9] === HOVER_INSERT_AFTER || /*selectedAfter*/ ctx[20])) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*context, hover, selectedAfter*/ 1049104) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$h(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty[0] & /*expanded, context, path, resolvedValue*/ 4178 && div_class_value !== (div_class_value = "" + (null_to_empty(classnames('jse-json-node', { 'jse-expanded': /*expanded*/ ctx[12] }, /*context*/ ctx[4].onClassName(/*path*/ ctx[1], /*resolvedValue*/ ctx[6]))) + " svelte-uj4yd7"))) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty[0] & /*path*/ 2 && div_data_path_value !== (div_data_path_value = encodeDataPath(/*path*/ ctx[1]))) {
    				attr_dev(div, "data-path", div_data_path_value);
    			}

    			if (dirty[0] & /*expanded, context, path, resolvedValue, root*/ 5202) {
    				toggle_class(div, "jse-root", /*root*/ ctx[10]);
    			}

    			if (dirty[0] & /*expanded, context, path, resolvedValue, selected*/ 2101330) {
    				toggle_class(div, "jse-selected", /*selected*/ ctx[21]);
    			}

    			if (dirty[0] & /*expanded, context, path, resolvedValue, selectedKey*/ 266322) {
    				toggle_class(div, "jse-selected-key", /*selectedKey*/ ctx[18]);
    			}

    			if (dirty[0] & /*expanded, context, path, resolvedValue, selectedValue*/ 135250) {
    				toggle_class(div, "jse-selected-value", /*selectedValue*/ ctx[17]);
    			}

    			if (dirty[0] & /*expanded, context, path, resolvedValue, hover*/ 4690) {
    				toggle_class(div, "jse-hovered", /*hover*/ ctx[9] === HOVER_COLLECTION);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getIndentationStyle(level) {
    	return `margin-left: calc(${level} * var(--jse-indent-size))`;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let resolvedValue;
    	let resolvedState;
    	let resolvedSelection;
    	let selectionObj;
    	let selected;
    	let selectedAfter;
    	let selectedInside;
    	let selectedKey;
    	let selectedValue;
    	let expanded;
    	let visibleSections;
    	let keys;
    	let validationError;
    	let root;
    	let type;
    	let indentationStyle;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('JSONNode', slots, ['identifier']);
    	let { value } = $$props;
    	let { path } = $$props;
    	let { state } = $$props;
    	let { selection } = $$props;
    	let { searchResult } = $$props;
    	let { validationErrors } = $$props;
    	let { context } = $$props;
    	let { onDragSelectionStart } = $$props;
    	const debug = createDebug('jsoneditor:JSONNode');
    	let hover = undefined;
    	let hoverTimer = undefined;
    	let dragging = undefined;

    	// important to prevent creating a new path for all children with every re-render,
    	// that would force all childs to re-render
    	const memoizePath = createMemoizePath();

    	function toggleExpand(event) {
    		event.stopPropagation();
    		const recursive = event.ctrlKey;
    		context.onExpand(path, !expanded, recursive);
    	}

    	function handleExpand(event) {
    		event.stopPropagation();
    		context.onExpand(path, true);
    	}

    	function handleUpdateKey(oldKey, newKey) {
    		const operations = rename(path, keys, oldKey, newKey);
    		context.onPatch(operations);

    		// It is possible that the applied key differs from newKey,
    		// to prevent duplicate keys. Here we figure out the actually applied key
    		const newKeyUnique = last(immutableJSONPatch.parseJSONPointer(operations[0].path));

    		return newKeyUnique;
    	}

    	function handleMouseDown(event) {
    		// check if the mouse down is not happening in the key or value input fields or on a button
    		if (isContentEditableDiv(event.target) || event.which === 1 && isChildOfNodeName(event.target, 'BUTTON')) {
    			return; // left mouse on a button
    		}

    		event.stopPropagation();
    		event.preventDefault();

    		// we attach the mousemove and mouseup event listeners to the global document,
    		// so we will not miss if the mouse events happen outside the editor
    		document.addEventListener('mousemove', handleMouseMoveGlobal, true);

    		document.addEventListener('mouseup', handleMouseUpGlobal);
    		const anchorType = getSelectionTypeFromTarget(event.target);

    		// when right-clicking inside the current selection, do nothing: context menu will open
    		// when left-clicking inside the current selection, do nothing: it can be the start of dragging
    		if (isPathInsideSelection(context.getFullSelection(), path, anchorType)) {
    			if (event.button === 0) {
    				context.focus();
    				onDragSelectionStart(event);
    			}

    			return;
    		}

    		// TODO: refactor dragging, there are now two separate mechanisms handling mouse movement: with dragging.* and with singleton.*
    		singleton.selecting = true;

    		singleton.selectionAnchor = path;
    		singleton.selectionAnchorType = anchorType;
    		singleton.selectionFocus = path;

    		if (event.shiftKey) {
    			// Shift+Click will select multiple entries
    			const fullSelection = context.getFullSelection();

    			if (fullSelection) {
    				context.onSelect({
    					type: SELECTION_TYPE.MULTI,
    					anchorPath: fullSelection.anchorPath,
    					focusPath: path
    				});
    			}
    		} else {
    			switch (anchorType) {
    				case SELECTION_TYPE.KEY:
    				case SELECTION_TYPE.VALUE:
    				case SELECTION_TYPE.AFTER:
    				case SELECTION_TYPE.INSIDE:
    					context.onSelect({ type: anchorType, path });
    					break;
    				case SELECTION_TYPE.MULTI:
    					if (root && event.target.hasAttribute('data-path')) {
    						const lastCaretPosition = last(getVisibleCaretPositions(resolvedValue, resolvedState));
    						context.onSelect(lastCaretPosition);
    					} else {
    						context.onSelect({
    							type: SELECTION_TYPE.MULTI,
    							anchorPath: path,
    							focusPath: path
    						});
    					}
    					break;
    			}
    		}
    	}

    	function handleMouseMove(event) {
    		if (singleton.selecting) {
    			event.preventDefault();
    			event.stopPropagation();

    			if (singleton.selectionFocus == null) {
    				// First move event, no selection yet.
    				// Clear the default selection of the browser
    				if (window.getSelection) {
    					window.getSelection().empty();
    				}
    			}

    			const selectionType = getSelectionTypeFromTarget(event.target);

    			if (!isEqual(path, singleton.selectionFocus) || selectionType !== singleton.selectionAnchorType) {
    				singleton.selectionFocus = path;

    				context.onSelect({
    					anchorPath: singleton.selectionAnchor,
    					focusPath: singleton.selectionFocus
    				});
    			}
    		}
    	}

    	function handleMouseMoveGlobal(event) {
    		context.onDrag(event);
    	}

    	function handleMouseUpGlobal(event) {
    		if (singleton.selecting) {
    			singleton.selecting = false;
    			event.stopPropagation();
    		}

    		context.onDragEnd();
    		document.removeEventListener('mousemove', handleMouseMoveGlobal, true);
    		document.removeEventListener('mouseup', handleMouseUpGlobal);
    	}

    	function findContentTop() {
    		var _a, _b;

    		return ((_b = (_a = context.findElement([])) === null || _a === void 0
    		? void 0
    		: _a.getBoundingClientRect()) === null || _b === void 0
    		? void 0
    		: _b.top) || 0;
    	}

    	function calculateDeltaY(dragging, event) {
    		// calculate the contentOffset, this changes when scrolling
    		const contentTop = findContentTop();

    		const contentOffset = contentTop - dragging.initialContentTop;

    		// calculate the vertical mouse movement
    		const clientOffset = event.clientY - dragging.initialClientY;

    		return clientOffset - contentOffset;
    	}

    	function handleDragSelectionStart(event) {
    		if (context.readOnly) {
    			return;
    		}

    		const fullSelection = context.getFullSelection();
    		const selectionParentPath = initial(fullSelection.focusPath);

    		if (!isEqual(path, selectionParentPath)) {
    			// pass to parent
    			onDragSelectionStart(event);

    			return;
    		}

    		// note that the returned items will be of one section only,
    		// and when the selection is spread over multiple sections,
    		// no items will be returned: this is not (yet) supported
    		const items = getVisibleItemsWithHeights(fullSelection);

    		debug('dragSelectionStart', { fullSelection, items });

    		if (!items) {
    			debug('Cannot drag the current selection (probably spread over multiple sections)');
    			return;
    		}

    		$$invalidate(38, dragging = {
    			initialTarget: event.target,
    			initialClientY: event.clientY,
    			initialContentTop: findContentTop(),
    			updatedValue: undefined,
    			updatedState: undefined,
    			updatedSelection: undefined,
    			items,
    			indexOffset: 0,
    			didMoveItems: false, // whether items have been moved during dragging or not
    			
    		});

    		singleton.dragging = true;
    		document.addEventListener('mousemove', handleDragSelection, true);
    		document.addEventListener('mouseup', handleDragSelectionEnd);
    	}

    	function handleDragSelection(event) {
    		if (dragging) {
    			const deltaY = calculateDeltaY(dragging, event);

    			const { updatedValue, updatedState, updatedSelection, indexOffset } = onMoveSelection({
    				fullJson: context.getFullJson(),
    				fullState: context.getFullState(),
    				fullSelection: context.getFullSelection(),
    				deltaY,
    				items: dragging.items
    			});

    			if (indexOffset !== dragging.indexOffset) {
    				debug('drag selection', indexOffset, deltaY, updatedSelection);

    				$$invalidate(38, dragging = {
    					...dragging,
    					updatedValue,
    					updatedState,
    					updatedSelection,
    					indexOffset,
    					didMoveItems: true
    				});
    			}
    		}
    	}

    	function handleDragSelectionEnd(event) {
    		if (dragging) {
    			const deltaY = calculateDeltaY(dragging, event);

    			const { operations, updatedFullSelection } = onMoveSelection({
    				fullJson: context.getFullJson(),
    				fullState: context.getFullState(),
    				fullSelection: context.getFullSelection(),
    				deltaY,
    				items: dragging.items
    			});

    			if (operations) {
    				context.onPatch(operations, () => ({
    					selection: updatedFullSelection || context.getFullSelection()
    				}));
    			} else {
    				// the user did click inside the selection and no contents have been dragged,
    				// select the clicked item
    				if (event.target === dragging.initialTarget && !dragging.didMoveItems) {
    					context.onSelect({
    						type: getSelectionTypeFromTarget(event.target),
    						path: getDataPathFromTarget(event.target)
    					});
    				}
    			}

    			$$invalidate(38, dragging = undefined);
    			singleton.dragging = false;
    			document.removeEventListener('mousemove', handleDragSelection, true);
    			document.removeEventListener('mouseup', handleDragSelectionEnd);
    		}
    	}

    	/**
     * Get a list with all visible items and their rendered heights inside
     * this object or array
     * @param {Selection} fullSelection
     * @returns {RenderedItem[] | null}
     */
    	function getVisibleItemsWithHeights(fullSelection) {
    		const items = [];

    		function addHeight(keyOrIndex) {
    			const itemPath = path.concat(keyOrIndex);
    			const element = context.findElement(itemPath);

    			if (element != null) {
    				items.push({
    					path: itemPath,
    					height: element.clientHeight
    				});
    			}
    		}

    		if (Array.isArray(value)) {
    			const startPath = head(fullSelection.paths) || fullSelection.focusPath;
    			const endPath = last(fullSelection.paths) || fullSelection.focusPath;
    			const startIndex = last(startPath);
    			const endIndex = last(endPath);

    			// find the section where the selection is
    			// if the selection is spread over multiple visible sections,
    			// we will not return any items, so dragging will not work there.
    			// We do this to keep things simple for now.
    			const currentSection = state[STATE_VISIBLE_SECTIONS].find(visibleSection => {
    				return startIndex >= visibleSection.start && endIndex <= visibleSection.end;
    			});

    			if (!currentSection) {
    				return null;
    			}

    			const { start, end } = currentSection;
    			forEachIndex(start, Math.min(value.length, end), addHeight);
    		} else {
    			// value is Object
    			forEachKey(state, addHeight);
    		}

    		return items;
    	}

    	function handleMouseOver(event) {
    		if (singleton.selecting || singleton.dragging) {
    			return;
    		}

    		event.stopPropagation();

    		if (isChildOfAttribute(event.target, 'data-type', 'selectable-value')) {
    			$$invalidate(9, hover = HOVER_COLLECTION);
    		} else if (isChildOfAttribute(event.target, 'data-type', 'insert-selection-area-inside')) {
    			$$invalidate(9, hover = HOVER_INSERT_INSIDE);
    		} else if (isChildOfAttribute(event.target, 'data-type', 'insert-selection-area-after')) {
    			$$invalidate(9, hover = HOVER_INSERT_AFTER);
    		}

    		clearTimeout(hoverTimer);
    	}

    	function handleMouseOut(event) {
    		event.stopPropagation();

    		// to prevent "flickering" in the hovering state when hovering on the edge
    		// of the insert area context menu button: it's visibility toggles when
    		// `hover` toggles, which will alternating mouseout and mouseover events
    		hoverTimer = setTimeout(() => $$invalidate(9, hover = undefined));
    	}

    	function handleInsertInside(event) {
    		if (!event.shiftKey) {
    			event.stopPropagation();
    			event.preventDefault();
    			context.onSelect({ type: SELECTION_TYPE.INSIDE, path });
    		}
    	}

    	function handleInsertAfter(event) {
    		if (!event.shiftKey) {
    			event.stopPropagation();
    			event.preventDefault();
    			context.onSelect({ type: SELECTION_TYPE.AFTER, path });
    		}
    	}

    	function handleInsertInsideOpenContextMenu(props) {
    		context.onSelect({ type: SELECTION_TYPE.INSIDE, path });
    		context.onContextMenu(props);
    	}

    	function handleInsertAfterOpenContextMenu(props) {
    		context.onSelect({ type: SELECTION_TYPE.AFTER, path });
    		context.onContextMenu(props);
    	}

    	const writable_props = [
    		'value',
    		'path',
    		'state',
    		'selection',
    		'searchResult',
    		'validationErrors',
    		'context',
    		'onDragSelectionStart'
    	];

    	Object_1$3.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<JSONNode> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('path' in $$props) $$invalidate(1, path = $$props.path);
    		if ('state' in $$props) $$invalidate(35, state = $$props.state);
    		if ('selection' in $$props) $$invalidate(36, selection = $$props.selection);
    		if ('searchResult' in $$props) $$invalidate(2, searchResult = $$props.searchResult);
    		if ('validationErrors' in $$props) $$invalidate(3, validationErrors = $$props.validationErrors);
    		if ('context' in $$props) $$invalidate(4, context = $$props.context);
    		if ('onDragSelectionStart' in $$props) $$invalidate(37, onDragSelectionStart = $$props.onDragSelectionStart);
    		if ('$$scope' in $$props) $$invalidate(40, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		faCaretDown,
    		faCaretRight,
    		classnames,
    		parseJSONPointer: immutableJSONPatch.parseJSONPointer,
    		first: head,
    		initial,
    		isEqual,
    		last,
    		Icon,
    		HOVER_COLLECTION,
    		HOVER_INSERT_AFTER,
    		HOVER_INSERT_INSIDE,
    		INSERT_EXPLANATION,
    		STATE_ENFORCE_STRING,
    		STATE_EXPANDED,
    		STATE_ID,
    		STATE_KEYS,
    		STATE_SEARCH_PROPERTY,
    		STATE_SEARCH_VALUE,
    		STATE_SELECTION,
    		STATE_VISIBLE_SECTIONS,
    		VALIDATION_ERROR,
    		getVisibleCaretPositions,
    		rename,
    		isPathInsideSelection,
    		SELECTION_TYPE,
    		encodeDataPath,
    		getDataPathFromTarget,
    		getSelectionTypeFromTarget,
    		isChildOfAttribute,
    		isChildOfNodeName,
    		isContentEditableDiv,
    		valueType,
    		CollapsedItems,
    		ContextMenuButton,
    		JSONKey,
    		JSONValue,
    		singleton,
    		ValidationError,
    		createDebug,
    		forEachKey,
    		onMoveSelection,
    		forEachIndex,
    		createMemoizePath,
    		keyIsSelected,
    		value,
    		path,
    		state,
    		selection,
    		searchResult,
    		validationErrors,
    		context,
    		onDragSelectionStart,
    		debug,
    		hover,
    		hoverTimer,
    		dragging,
    		getIndentationStyle,
    		memoizePath,
    		toggleExpand,
    		handleExpand,
    		handleUpdateKey,
    		handleMouseDown,
    		handleMouseMove,
    		handleMouseMoveGlobal,
    		handleMouseUpGlobal,
    		findContentTop,
    		calculateDeltaY,
    		handleDragSelectionStart,
    		handleDragSelection,
    		handleDragSelectionEnd,
    		getVisibleItemsWithHeights,
    		handleMouseOver,
    		handleMouseOut,
    		handleInsertInside,
    		handleInsertAfter,
    		handleInsertInsideOpenContextMenu,
    		handleInsertAfterOpenContextMenu,
    		resolvedState,
    		resolvedValue,
    		root,
    		keys,
    		expanded,
    		indentationStyle,
    		type,
    		validationError,
    		visibleSections,
    		selectionObj,
    		selectedValue,
    		selectedKey,
    		selectedInside,
    		selectedAfter,
    		selected,
    		resolvedSelection
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('path' in $$props) $$invalidate(1, path = $$props.path);
    		if ('state' in $$props) $$invalidate(35, state = $$props.state);
    		if ('selection' in $$props) $$invalidate(36, selection = $$props.selection);
    		if ('searchResult' in $$props) $$invalidate(2, searchResult = $$props.searchResult);
    		if ('validationErrors' in $$props) $$invalidate(3, validationErrors = $$props.validationErrors);
    		if ('context' in $$props) $$invalidate(4, context = $$props.context);
    		if ('onDragSelectionStart' in $$props) $$invalidate(37, onDragSelectionStart = $$props.onDragSelectionStart);
    		if ('hover' in $$props) $$invalidate(9, hover = $$props.hover);
    		if ('hoverTimer' in $$props) hoverTimer = $$props.hoverTimer;
    		if ('dragging' in $$props) $$invalidate(38, dragging = $$props.dragging);
    		if ('resolvedState' in $$props) $$invalidate(5, resolvedState = $$props.resolvedState);
    		if ('resolvedValue' in $$props) $$invalidate(6, resolvedValue = $$props.resolvedValue);
    		if ('root' in $$props) $$invalidate(10, root = $$props.root);
    		if ('keys' in $$props) $$invalidate(11, keys = $$props.keys);
    		if ('expanded' in $$props) $$invalidate(12, expanded = $$props.expanded);
    		if ('indentationStyle' in $$props) $$invalidate(13, indentationStyle = $$props.indentationStyle);
    		if ('type' in $$props) $$invalidate(14, type = $$props.type);
    		if ('validationError' in $$props) $$invalidate(15, validationError = $$props.validationError);
    		if ('visibleSections' in $$props) $$invalidate(16, visibleSections = $$props.visibleSections);
    		if ('selectionObj' in $$props) $$invalidate(7, selectionObj = $$props.selectionObj);
    		if ('selectedValue' in $$props) $$invalidate(17, selectedValue = $$props.selectedValue);
    		if ('selectedKey' in $$props) $$invalidate(18, selectedKey = $$props.selectedKey);
    		if ('selectedInside' in $$props) $$invalidate(19, selectedInside = $$props.selectedInside);
    		if ('selectedAfter' in $$props) $$invalidate(20, selectedAfter = $$props.selectedAfter);
    		if ('selected' in $$props) $$invalidate(21, selected = $$props.selected);
    		if ('resolvedSelection' in $$props) $$invalidate(8, resolvedSelection = $$props.resolvedSelection);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*value*/ 1 | $$self.$$.dirty[1] & /*dragging*/ 128) {
    			$$invalidate(6, resolvedValue = (dragging === null || dragging === void 0
    			? void 0
    			: dragging.updatedValue) !== undefined
    			? dragging.updatedValue
    			: value);
    		}

    		if ($$self.$$.dirty[1] & /*dragging, state*/ 144) {
    			$$invalidate(5, resolvedState = (dragging === null || dragging === void 0
    			? void 0
    			: dragging.updatedState) !== undefined
    			? dragging.updatedState
    			: state);
    		}

    		if ($$self.$$.dirty[1] & /*dragging, selection*/ 160) {
    			$$invalidate(8, resolvedSelection = (dragging === null || dragging === void 0
    			? void 0
    			: dragging.updatedSelection) != null
    			? dragging.updatedSelection
    			: selection);
    		}

    		if ($$self.$$.dirty[0] & /*resolvedSelection*/ 256) {
    			$$invalidate(7, selectionObj = resolvedSelection && resolvedSelection[STATE_SELECTION]);
    		}

    		if ($$self.$$.dirty[0] & /*selectionObj*/ 128) {
    			$$invalidate(21, selected = !!(selectionObj && selectionObj.pathsMap));
    		}

    		if ($$self.$$.dirty[0] & /*selectionObj*/ 128) {
    			$$invalidate(20, selectedAfter = !!(selectionObj && selectionObj.type === SELECTION_TYPE.AFTER));
    		}

    		if ($$self.$$.dirty[0] & /*selectionObj*/ 128) {
    			$$invalidate(19, selectedInside = !!(selectionObj && selectionObj.type === SELECTION_TYPE.INSIDE));
    		}

    		if ($$self.$$.dirty[0] & /*selectionObj*/ 128) {
    			$$invalidate(18, selectedKey = !!(selectionObj && selectionObj.type === SELECTION_TYPE.KEY));
    		}

    		if ($$self.$$.dirty[0] & /*selectionObj*/ 128) {
    			$$invalidate(17, selectedValue = !!(selectionObj && selectionObj.type === SELECTION_TYPE.VALUE));
    		}

    		if ($$self.$$.dirty[0] & /*resolvedState*/ 32) {
    			$$invalidate(12, expanded = resolvedState[STATE_EXPANDED]);
    		}

    		if ($$self.$$.dirty[0] & /*resolvedState*/ 32) {
    			$$invalidate(16, visibleSections = resolvedState[STATE_VISIBLE_SECTIONS]);
    		}

    		if ($$self.$$.dirty[0] & /*resolvedState*/ 32) {
    			$$invalidate(11, keys = resolvedState[STATE_KEYS]);
    		}

    		if ($$self.$$.dirty[0] & /*validationErrors*/ 8) {
    			$$invalidate(15, validationError = validationErrors && validationErrors[VALIDATION_ERROR]);
    		}

    		if ($$self.$$.dirty[0] & /*path*/ 2) {
    			$$invalidate(10, root = path.length === 0);
    		}

    		if ($$self.$$.dirty[0] & /*resolvedValue*/ 64) {
    			$$invalidate(14, type = valueType(resolvedValue));
    		}

    		if ($$self.$$.dirty[0] & /*path*/ 2) {
    			$$invalidate(13, indentationStyle = getIndentationStyle(path.length));
    		}
    	};

    	return [
    		value,
    		path,
    		searchResult,
    		validationErrors,
    		context,
    		resolvedState,
    		resolvedValue,
    		selectionObj,
    		resolvedSelection,
    		hover,
    		root,
    		keys,
    		expanded,
    		indentationStyle,
    		type,
    		validationError,
    		visibleSections,
    		selectedValue,
    		selectedKey,
    		selectedInside,
    		selectedAfter,
    		selected,
    		memoizePath,
    		toggleExpand,
    		handleExpand,
    		handleUpdateKey,
    		handleMouseDown,
    		handleMouseMove,
    		handleDragSelectionStart,
    		handleMouseOver,
    		handleMouseOut,
    		handleInsertInside,
    		handleInsertAfter,
    		handleInsertInsideOpenContextMenu,
    		handleInsertAfterOpenContextMenu,
    		state,
    		selection,
    		onDragSelectionStart,
    		dragging,
    		slots,
    		$$scope
    	];
    }

    class JSONNode extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$u,
    			create_fragment$u,
    			not_equal,
    			{
    				value: 0,
    				path: 1,
    				state: 35,
    				selection: 36,
    				searchResult: 2,
    				validationErrors: 3,
    				context: 4,
    				onDragSelectionStart: 37
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "JSONNode",
    			options,
    			id: create_fragment$u.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<JSONNode> was created without expected prop 'value'");
    		}

    		if (/*path*/ ctx[1] === undefined && !('path' in props)) {
    			console.warn("<JSONNode> was created without expected prop 'path'");
    		}

    		if (/*state*/ ctx[35] === undefined && !('state' in props)) {
    			console.warn("<JSONNode> was created without expected prop 'state'");
    		}

    		if (/*selection*/ ctx[36] === undefined && !('selection' in props)) {
    			console.warn("<JSONNode> was created without expected prop 'selection'");
    		}

    		if (/*searchResult*/ ctx[2] === undefined && !('searchResult' in props)) {
    			console.warn("<JSONNode> was created without expected prop 'searchResult'");
    		}

    		if (/*validationErrors*/ ctx[3] === undefined && !('validationErrors' in props)) {
    			console.warn("<JSONNode> was created without expected prop 'validationErrors'");
    		}

    		if (/*context*/ ctx[4] === undefined && !('context' in props)) {
    			console.warn("<JSONNode> was created without expected prop 'context'");
    		}

    		if (/*onDragSelectionStart*/ ctx[37] === undefined && !('onDragSelectionStart' in props)) {
    			console.warn("<JSONNode> was created without expected prop 'onDragSelectionStart'");
    		}
    	}

    	get value() {
    		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get path() {
    		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get state() {
    		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set state(value) {
    		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selection() {
    		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selection(value) {
    		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get searchResult() {
    		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set searchResult(value) {
    		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validationErrors() {
    		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validationErrors(value) {
    		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get context() {
    		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set context(value) {
    		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onDragSelectionStart() {
    		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onDragSelectionStart(value) {
    		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modes/treemode/menu/TreeMenu.svelte generated by Svelte v3.48.0 */

    function create_fragment$t(ctx) {
    	let menu;
    	let current;

    	menu = new Menu({
    			props: { items: /*items*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(menu.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(menu, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const menu_changes = {};
    			if (dirty & /*items*/ 1) menu_changes.items = /*items*/ ctx[0];
    			menu.$set(menu_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(menu, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let hasJson;
    	let hasSelection;
    	let hasSelectionContents;
    	let expandMenuItem;
    	let collapseMenuItem;
    	let searchMenuItem;
    	let defaultItems;
    	let items;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TreeMenu', slots, []);
    	let { json } = $$props;
    	let { selection } = $$props;
    	let { readOnly } = $$props;
    	let { showSearch = false } = $$props;
    	let { historyState } = $$props;
    	let { onExpandAll } = $$props;
    	let { onCollapseAll } = $$props;
    	let { onUndo } = $$props;
    	let { onRedo } = $$props;
    	let { onSort } = $$props;
    	let { onTransform } = $$props;
    	let { onContextMenu } = $$props;
    	let { onCopy } = $$props;
    	let { onRenderMenu = noop$1 } = $$props;

    	function handleToggleSearch() {
    		$$invalidate(1, showSearch = !showSearch);
    	}

    	const writable_props = [
    		'json',
    		'selection',
    		'readOnly',
    		'showSearch',
    		'historyState',
    		'onExpandAll',
    		'onCollapseAll',
    		'onUndo',
    		'onRedo',
    		'onSort',
    		'onTransform',
    		'onContextMenu',
    		'onCopy',
    		'onRenderMenu'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TreeMenu> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('json' in $$props) $$invalidate(2, json = $$props.json);
    		if ('selection' in $$props) $$invalidate(3, selection = $$props.selection);
    		if ('readOnly' in $$props) $$invalidate(4, readOnly = $$props.readOnly);
    		if ('showSearch' in $$props) $$invalidate(1, showSearch = $$props.showSearch);
    		if ('historyState' in $$props) $$invalidate(5, historyState = $$props.historyState);
    		if ('onExpandAll' in $$props) $$invalidate(6, onExpandAll = $$props.onExpandAll);
    		if ('onCollapseAll' in $$props) $$invalidate(7, onCollapseAll = $$props.onCollapseAll);
    		if ('onUndo' in $$props) $$invalidate(8, onUndo = $$props.onUndo);
    		if ('onRedo' in $$props) $$invalidate(9, onRedo = $$props.onRedo);
    		if ('onSort' in $$props) $$invalidate(10, onSort = $$props.onSort);
    		if ('onTransform' in $$props) $$invalidate(11, onTransform = $$props.onTransform);
    		if ('onContextMenu' in $$props) $$invalidate(12, onContextMenu = $$props.onContextMenu);
    		if ('onCopy' in $$props) $$invalidate(13, onCopy = $$props.onCopy);
    		if ('onRenderMenu' in $$props) $$invalidate(14, onRenderMenu = $$props.onRenderMenu);
    	};

    	$$self.$capture_state = () => ({
    		faCopy,
    		faEllipsisV,
    		faFilter,
    		faRedo,
    		faSearch,
    		faSortAmountDownAlt,
    		faUndo,
    		CONTEXT_MENU_EXPLANATION,
    		faJSONEditorCollapse,
    		faJSONEditorExpand,
    		SELECTION_TYPE,
    		isObjectOrArray,
    		Menu,
    		noop: noop$1,
    		json,
    		selection,
    		readOnly,
    		showSearch,
    		historyState,
    		onExpandAll,
    		onCollapseAll,
    		onUndo,
    		onRedo,
    		onSort,
    		onTransform,
    		onContextMenu,
    		onCopy,
    		onRenderMenu,
    		handleToggleSearch,
    		defaultItems,
    		items,
    		searchMenuItem,
    		hasSelectionContents,
    		collapseMenuItem,
    		expandMenuItem,
    		hasJson,
    		hasSelection
    	});

    	$$self.$inject_state = $$props => {
    		if ('json' in $$props) $$invalidate(2, json = $$props.json);
    		if ('selection' in $$props) $$invalidate(3, selection = $$props.selection);
    		if ('readOnly' in $$props) $$invalidate(4, readOnly = $$props.readOnly);
    		if ('showSearch' in $$props) $$invalidate(1, showSearch = $$props.showSearch);
    		if ('historyState' in $$props) $$invalidate(5, historyState = $$props.historyState);
    		if ('onExpandAll' in $$props) $$invalidate(6, onExpandAll = $$props.onExpandAll);
    		if ('onCollapseAll' in $$props) $$invalidate(7, onCollapseAll = $$props.onCollapseAll);
    		if ('onUndo' in $$props) $$invalidate(8, onUndo = $$props.onUndo);
    		if ('onRedo' in $$props) $$invalidate(9, onRedo = $$props.onRedo);
    		if ('onSort' in $$props) $$invalidate(10, onSort = $$props.onSort);
    		if ('onTransform' in $$props) $$invalidate(11, onTransform = $$props.onTransform);
    		if ('onContextMenu' in $$props) $$invalidate(12, onContextMenu = $$props.onContextMenu);
    		if ('onCopy' in $$props) $$invalidate(13, onCopy = $$props.onCopy);
    		if ('onRenderMenu' in $$props) $$invalidate(14, onRenderMenu = $$props.onRenderMenu);
    		if ('defaultItems' in $$props) $$invalidate(15, defaultItems = $$props.defaultItems);
    		if ('items' in $$props) $$invalidate(0, items = $$props.items);
    		if ('searchMenuItem' in $$props) $$invalidate(16, searchMenuItem = $$props.searchMenuItem);
    		if ('hasSelectionContents' in $$props) $$invalidate(17, hasSelectionContents = $$props.hasSelectionContents);
    		if ('collapseMenuItem' in $$props) $$invalidate(18, collapseMenuItem = $$props.collapseMenuItem);
    		if ('expandMenuItem' in $$props) $$invalidate(19, expandMenuItem = $$props.expandMenuItem);
    		if ('hasJson' in $$props) $$invalidate(20, hasJson = $$props.hasJson);
    		if ('hasSelection' in $$props) hasSelection = $$props.hasSelection;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*json*/ 4) {
    			$$invalidate(20, hasJson = json !== undefined);
    		}

    		if ($$self.$$.dirty & /*selection*/ 8) {
    			hasSelection = selection != null;
    		}

    		if ($$self.$$.dirty & /*hasJson, selection*/ 1048584) {
    			$$invalidate(17, hasSelectionContents = hasJson && selection != null && (selection.type === SELECTION_TYPE.MULTI || selection.type === SELECTION_TYPE.KEY || selection.type === SELECTION_TYPE.VALUE));
    		}

    		if ($$self.$$.dirty & /*onExpandAll, json*/ 68) {
    			$$invalidate(19, expandMenuItem = {
    				icon: faJSONEditorExpand,
    				title: 'Expand all',
    				className: 'jse-expand-all',
    				onClick: onExpandAll,
    				disabled: !isObjectOrArray(json)
    			});
    		}

    		if ($$self.$$.dirty & /*onCollapseAll, json*/ 132) {
    			$$invalidate(18, collapseMenuItem = {
    				icon: faJSONEditorCollapse,
    				title: 'Collapse all',
    				className: 'jse-collapse-all',
    				onClick: onCollapseAll,
    				disabled: !isObjectOrArray(json)
    			});
    		}

    		if ($$self.$$.dirty & /*json*/ 4) {
    			$$invalidate(16, searchMenuItem = {
    				icon: faSearch,
    				title: 'Search (Ctrl+F)',
    				className: 'jse-search',
    				onClick: handleToggleSearch,
    				disabled: json === undefined
    			});
    		}

    		if ($$self.$$.dirty & /*readOnly, expandMenuItem, collapseMenuItem, onSort, json, onTransform, searchMenuItem, onContextMenu, onUndo, historyState, onRedo, onCopy, hasSelectionContents*/ 999220) {
    			/* @type {MenuItem[]} */
    			$$invalidate(15, defaultItems = !readOnly
    			? [
    					expandMenuItem,
    					collapseMenuItem,
    					{ separator: true },
    					{
    						icon: faSortAmountDownAlt,
    						title: 'Sort',
    						className: 'jse-sort',
    						onClick: onSort,
    						disabled: readOnly || json === undefined
    					},
    					{
    						icon: faFilter,
    						title: 'Transform contents (filter, sort, project)',
    						className: 'jse-transform',
    						onClick: onTransform,
    						disabled: readOnly || json === undefined
    					},
    					searchMenuItem,
    					{
    						icon: faEllipsisV,
    						title: CONTEXT_MENU_EXPLANATION,
    						className: 'jse-contextmenu',
    						onClick: onContextMenu
    					},
    					{ separator: true },
    					{
    						icon: faUndo,
    						title: 'Undo (Ctrl+Z)',
    						className: 'jse-undo',
    						onClick: onUndo,
    						disabled: !historyState.canUndo
    					},
    					{
    						icon: faRedo,
    						title: 'Redo (Ctrl+Shift+Z)',
    						className: 'jse-redo',
    						onClick: onRedo,
    						disabled: !historyState.canRedo
    					},
    					{ space: true }
    				]
    			: [
    					expandMenuItem,
    					collapseMenuItem,
    					{ separator: true },
    					{
    						icon: faCopy,
    						title: 'Copy (Ctrl+C)',
    						className: 'jse-copy',
    						onClick: onCopy,
    						disabled: !hasSelectionContents
    					},
    					{ separator: true },
    					searchMenuItem,
    					{ space: true }
    				]);
    		}

    		if ($$self.$$.dirty & /*onRenderMenu, defaultItems*/ 49152) {
    			$$invalidate(0, items = onRenderMenu('tree', defaultItems) || defaultItems);
    		}
    	};

    	return [
    		items,
    		showSearch,
    		json,
    		selection,
    		readOnly,
    		historyState,
    		onExpandAll,
    		onCollapseAll,
    		onUndo,
    		onRedo,
    		onSort,
    		onTransform,
    		onContextMenu,
    		onCopy,
    		onRenderMenu,
    		defaultItems,
    		searchMenuItem,
    		hasSelectionContents,
    		collapseMenuItem,
    		expandMenuItem,
    		hasJson
    	];
    }

    class TreeMenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$t, create_fragment$t, not_equal, {
    			json: 2,
    			selection: 3,
    			readOnly: 4,
    			showSearch: 1,
    			historyState: 5,
    			onExpandAll: 6,
    			onCollapseAll: 7,
    			onUndo: 8,
    			onRedo: 9,
    			onSort: 10,
    			onTransform: 11,
    			onContextMenu: 12,
    			onCopy: 13,
    			onRenderMenu: 14
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TreeMenu",
    			options,
    			id: create_fragment$t.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*json*/ ctx[2] === undefined && !('json' in props)) {
    			console.warn("<TreeMenu> was created without expected prop 'json'");
    		}

    		if (/*selection*/ ctx[3] === undefined && !('selection' in props)) {
    			console.warn("<TreeMenu> was created without expected prop 'selection'");
    		}

    		if (/*readOnly*/ ctx[4] === undefined && !('readOnly' in props)) {
    			console.warn("<TreeMenu> was created without expected prop 'readOnly'");
    		}

    		if (/*historyState*/ ctx[5] === undefined && !('historyState' in props)) {
    			console.warn("<TreeMenu> was created without expected prop 'historyState'");
    		}

    		if (/*onExpandAll*/ ctx[6] === undefined && !('onExpandAll' in props)) {
    			console.warn("<TreeMenu> was created without expected prop 'onExpandAll'");
    		}

    		if (/*onCollapseAll*/ ctx[7] === undefined && !('onCollapseAll' in props)) {
    			console.warn("<TreeMenu> was created without expected prop 'onCollapseAll'");
    		}

    		if (/*onUndo*/ ctx[8] === undefined && !('onUndo' in props)) {
    			console.warn("<TreeMenu> was created without expected prop 'onUndo'");
    		}

    		if (/*onRedo*/ ctx[9] === undefined && !('onRedo' in props)) {
    			console.warn("<TreeMenu> was created without expected prop 'onRedo'");
    		}

    		if (/*onSort*/ ctx[10] === undefined && !('onSort' in props)) {
    			console.warn("<TreeMenu> was created without expected prop 'onSort'");
    		}

    		if (/*onTransform*/ ctx[11] === undefined && !('onTransform' in props)) {
    			console.warn("<TreeMenu> was created without expected prop 'onTransform'");
    		}

    		if (/*onContextMenu*/ ctx[12] === undefined && !('onContextMenu' in props)) {
    			console.warn("<TreeMenu> was created without expected prop 'onContextMenu'");
    		}

    		if (/*onCopy*/ ctx[13] === undefined && !('onCopy' in props)) {
    			console.warn("<TreeMenu> was created without expected prop 'onCopy'");
    		}
    	}

    	get json() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set json(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selection() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selection(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readOnly() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readOnly(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showSearch() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showSearch(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get historyState() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set historyState(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onExpandAll() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onExpandAll(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onCollapseAll() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onCollapseAll(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onUndo() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onUndo(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRedo() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRedo(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSort() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSort(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTransform() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTransform(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onContextMenu() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onContextMenu(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onCopy() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onCopy(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRenderMenu() {
    		throw new Error("<TreeMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRenderMenu(value) {
    		throw new Error("<TreeMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modes/treemode/Welcome.svelte generated by Svelte v3.48.0 */

    const file$q = "node_modules/svelte-jsoneditor/components/modes/treemode/Welcome.svelte";

    // (10:4) {#if !readOnly}
    function create_if_block$g(ctx) {
    	let ul;
    	let li0;
    	let t1;
    	let li1;
    	let t2;
    	let span0;
    	let t4;
    	let li2;
    	let t5;
    	let span1;
    	let t7;
    	let li3;
    	let t8;
    	let span2;

    	const block = {
    		c: function create() {
    			ul = element("ul");
    			li0 = element("li");
    			li0.textContent = "Click inside the editor";
    			t1 = space();
    			li1 = element("li");
    			t2 = text("Paste clipboard data using ");
    			span0 = element("span");
    			span0.textContent = "Ctrl+V";
    			t4 = space();
    			li2 = element("li");
    			t5 = text("Create a new object by typing ");
    			span1 = element("span");
    			span1.textContent = "{";
    			t7 = space();
    			li3 = element("li");
    			t8 = text("Create a new array by typing ");
    			span2 = element("span");
    			span2.textContent = "[";
    			attr_dev(li0, "class", "svelte-1q2qkk2");
    			add_location(li0, file$q, 11, 8, 230);
    			attr_dev(span0, "class", "jse-bold svelte-1q2qkk2");
    			add_location(span0, file$q, 12, 39, 302);
    			attr_dev(li1, "class", "svelte-1q2qkk2");
    			add_location(li1, file$q, 12, 8, 271);
    			attr_dev(span1, "class", "jse-bold svelte-1q2qkk2");
    			add_location(span1, file$q, 13, 42, 386);
    			attr_dev(li2, "class", "svelte-1q2qkk2");
    			add_location(li2, file$q, 13, 8, 352);
    			attr_dev(span2, "class", "jse-bold svelte-1q2qkk2");
    			add_location(span2, file$q, 14, 41, 471);
    			attr_dev(li3, "class", "svelte-1q2qkk2");
    			add_location(li3, file$q, 14, 8, 438);
    			attr_dev(ul, "class", "svelte-1q2qkk2");
    			add_location(ul, file$q, 10, 6, 217);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);
    			append_dev(ul, li0);
    			append_dev(ul, t1);
    			append_dev(ul, li1);
    			append_dev(li1, t2);
    			append_dev(li1, span0);
    			append_dev(ul, t4);
    			append_dev(ul, li2);
    			append_dev(li2, t5);
    			append_dev(li2, span1);
    			append_dev(ul, t7);
    			append_dev(ul, li3);
    			append_dev(li3, t8);
    			append_dev(li3, span2);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(10:4) {#if !readOnly}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let div3;
    	let div0;
    	let t0;
    	let div1;
    	let t1;
    	let t2;
    	let div2;
    	let if_block = !/*readOnly*/ ctx[0] && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = text("Empty document\n    ");
    			if (if_block) if_block.c();
    			t2 = space();
    			div2 = element("div");
    			attr_dev(div0, "class", "jse-space jse-before svelte-1q2qkk2");
    			add_location(div0, file$q, 6, 2, 106);
    			attr_dev(div1, "class", "jse-contents svelte-1q2qkk2");
    			add_location(div1, file$q, 7, 2, 145);
    			attr_dev(div2, "class", "jse-space jse-after svelte-1q2qkk2");
    			add_location(div2, file$q, 18, 2, 541);
    			attr_dev(div3, "class", "jse-welcome svelte-1q2qkk2");
    			add_location(div3, file$q, 5, 0, 78);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t0);
    			append_dev(div3, div1);
    			append_dev(div1, t1);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*readOnly*/ ctx[0]) {
    				if (if_block) ; else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Welcome', slots, []);
    	let { readOnly } = $$props;
    	const writable_props = ['readOnly'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Welcome> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('readOnly' in $$props) $$invalidate(0, readOnly = $$props.readOnly);
    	};

    	$$self.$capture_state = () => ({ readOnly });

    	$$self.$inject_state = $$props => {
    		if ('readOnly' in $$props) $$invalidate(0, readOnly = $$props.readOnly);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [readOnly];
    }

    class Welcome extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$s, create_fragment$s, not_equal, { readOnly: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Welcome",
    			options,
    			id: create_fragment$s.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*readOnly*/ ctx[0] === undefined && !('readOnly' in props)) {
    			console.warn("<Welcome> was created without expected prop 'readOnly'");
    		}
    	}

    	get readOnly() {
    		throw new Error("<Welcome>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readOnly(value) {
    		throw new Error("<Welcome>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/controls/navigationBar/NavigationBarDropdown.svelte generated by Svelte v3.48.0 */
    const file$p = "node_modules/svelte-jsoneditor/components/controls/navigationBar/NavigationBarDropdown.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    // (13:2) {#each limit(items, MAX_ITEMS) as item (item)}
    function create_each_block$8(key_1, ctx) {
    	let button;
    	let t_value = truncate(/*item*/ ctx[4], MAX_ITEM_CHARACTERS) + "";
    	let t;
    	let button_title_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[3](/*item*/ ctx[4]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-navigation-bar-dropdown-item svelte-6hb2gf");
    			attr_dev(button, "title", button_title_value = /*item*/ ctx[4]);
    			toggle_class(button, "jse-selected", /*item*/ ctx[4] === /*selectedItem*/ ctx[1]);
    			add_location(button, file$p, 13, 4, 383);
    			this.first = button;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", stop_propagation(click_handler), false, false, true);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*items*/ 1 && t_value !== (t_value = truncate(/*item*/ ctx[4], MAX_ITEM_CHARACTERS) + "")) set_data_dev(t, t_value);

    			if (dirty & /*items*/ 1 && button_title_value !== (button_title_value = /*item*/ ctx[4])) {
    				attr_dev(button, "title", button_title_value);
    			}

    			if (dirty & /*limit, items, MAX_ITEMS, selectedItem*/ 3) {
    				toggle_class(button, "jse-selected", /*item*/ ctx[4] === /*selectedItem*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(13:2) {#each limit(items, MAX_ITEMS) as item (item)}",
    		ctx
    	});

    	return block;
    }

    // (24:2) {#if items.length > MAX_ITEMS}
    function create_if_block$f(ctx) {
    	let button;
    	let t;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text("...");
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-navigation-bar-dropdown-item svelte-6hb2gf");
    			attr_dev(button, "title", "Limited to " + MAX_ITEMS + " items");
    			add_location(button, file$p, 24, 4, 691);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(24:2) {#if items.length > MAX_ITEMS}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t;
    	let each_value = limit(/*items*/ ctx[0], MAX_ITEMS);
    	validate_each_argument(each_value);
    	const get_key = ctx => /*item*/ ctx[4];
    	validate_each_keys(ctx, each_value, get_each_context$8, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$8(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$8(key, child_ctx));
    	}

    	let if_block = /*items*/ ctx[0].length > MAX_ITEMS && create_if_block$f(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "jse-navigation-bar-dropdown svelte-6hb2gf");
    			add_location(div, file$p, 11, 0, 288);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*limit, items, MAX_ITEMS, selectedItem, onSelect, truncate, MAX_ITEM_CHARACTERS*/ 7) {
    				each_value = limit(/*items*/ ctx[0], MAX_ITEMS);
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context$8, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, destroy_block, create_each_block$8, t, get_each_context$8);
    			}

    			if (/*items*/ ctx[0].length > MAX_ITEMS) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$f(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const MAX_ITEMS = 100;
    const MAX_ITEM_CHARACTERS = 30;

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavigationBarDropdown', slots, []);
    	let { items } = $$props;
    	let { selectedItem } = $$props;
    	let { onSelect } = $$props;
    	const writable_props = ['items', 'selectedItem', 'onSelect'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavigationBarDropdown> was created with unknown prop '${key}'`);
    	});

    	const click_handler = item => onSelect(item);

    	$$self.$$set = $$props => {
    		if ('items' in $$props) $$invalidate(0, items = $$props.items);
    		if ('selectedItem' in $$props) $$invalidate(1, selectedItem = $$props.selectedItem);
    		if ('onSelect' in $$props) $$invalidate(2, onSelect = $$props.onSelect);
    	};

    	$$self.$capture_state = () => ({
    		limit,
    		truncate,
    		items,
    		selectedItem,
    		onSelect,
    		MAX_ITEMS,
    		MAX_ITEM_CHARACTERS
    	});

    	$$self.$inject_state = $$props => {
    		if ('items' in $$props) $$invalidate(0, items = $$props.items);
    		if ('selectedItem' in $$props) $$invalidate(1, selectedItem = $$props.selectedItem);
    		if ('onSelect' in $$props) $$invalidate(2, onSelect = $$props.onSelect);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [items, selectedItem, onSelect, click_handler];
    }

    class NavigationBarDropdown extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$r, create_fragment$r, not_equal, { items: 0, selectedItem: 1, onSelect: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavigationBarDropdown",
    			options,
    			id: create_fragment$r.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*items*/ ctx[0] === undefined && !('items' in props)) {
    			console.warn("<NavigationBarDropdown> was created without expected prop 'items'");
    		}

    		if (/*selectedItem*/ ctx[1] === undefined && !('selectedItem' in props)) {
    			console.warn("<NavigationBarDropdown> was created without expected prop 'selectedItem'");
    		}

    		if (/*onSelect*/ ctx[2] === undefined && !('onSelect' in props)) {
    			console.warn("<NavigationBarDropdown> was created without expected prop 'onSelect'");
    		}
    	}

    	get items() {
    		throw new Error("<NavigationBarDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<NavigationBarDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedItem() {
    		throw new Error("<NavigationBarDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedItem(value) {
    		throw new Error("<NavigationBarDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<NavigationBarDropdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<NavigationBarDropdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/controls/navigationBar/NavigationBarItem.svelte generated by Svelte v3.48.0 */
    const file$o = "node_modules/svelte-jsoneditor/components/controls/navigationBar/NavigationBarItem.svelte";

    // (48:2) {#if selectedItem !== undefined}
    function create_if_block$e(ctx) {
    	let button;
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(/*selectedItem*/ ctx[2]);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-navigation-bar-button svelte-1r1k9th");
    			add_location(button, file$o, 48, 4, 1456);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[9], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectedItem*/ 4) set_data_dev(t, /*selectedItem*/ ctx[2]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(48:2) {#if selectedItem !== undefined}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let div;
    	let button;
    	let icon;
    	let t;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: { data: faAngleRight },
    			$$inline: true
    		});

    	let if_block = /*selectedItem*/ ctx[2] !== undefined && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			button = element("button");
    			create_component(icon.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-navigation-bar-button jse-navigation-bar-arrow svelte-1r1k9th");
    			toggle_class(button, "jse-open", /*open*/ ctx[1]);
    			add_location(button, file$o, 39, 2, 1225);
    			attr_dev(div, "class", "jse-navigation-bar-item svelte-1r1k9th");
    			add_location(div, file$o, 38, 0, 1152);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button);
    			mount_component(icon, button, null);
    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    			/*div_binding*/ ctx[10](div);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*openDropdown*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*open*/ 2) {
    				toggle_class(button, "jse-open", /*open*/ ctx[1]);
    			}

    			if (/*selectedItem*/ ctx[2] !== undefined) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(icon);
    			if (if_block) if_block.d();
    			/*div_binding*/ ctx[10](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let itemPath;
    	let selectedItem;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavigationBarItem', slots, []);
    	const { openAbsolutePopup, closeAbsolutePopup } = getContext('absolute-popup');
    	let { path } = $$props;
    	let { index } = $$props;
    	let { onSelect } = $$props;
    	let { getItems } = $$props;
    	let refNavigationBarItem;
    	let open = false;

    	function handleSelectItem(item) {
    		closeAbsolutePopup();
    		onSelect(itemPath.concat(item));
    	}

    	function openDropdown() {
    		if (refNavigationBarItem) {
    			$$invalidate(1, open = true);

    			const props = {
    				items: getItems(itemPath),
    				selectedItem,
    				onSelect: handleSelectItem
    			};

    			openAbsolutePopup(NavigationBarDropdown, props, {
    				anchor: refNavigationBarItem,
    				closeOnOuterClick: true,
    				onClose: () => {
    					$$invalidate(1, open = false);
    				}
    			});
    		}
    	}

    	const writable_props = ['path', 'index', 'onSelect', 'getItems'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavigationBarItem> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => handleSelectItem(selectedItem);

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refNavigationBarItem = $$value;
    			$$invalidate(0, refNavigationBarItem);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('path' in $$props) $$invalidate(5, path = $$props.path);
    		if ('index' in $$props) $$invalidate(6, index = $$props.index);
    		if ('onSelect' in $$props) $$invalidate(7, onSelect = $$props.onSelect);
    		if ('getItems' in $$props) $$invalidate(8, getItems = $$props.getItems);
    	};

    	$$self.$capture_state = () => ({
    		Icon,
    		faAngleRight,
    		NavigationBarDropdown,
    		getContext,
    		openAbsolutePopup,
    		closeAbsolutePopup,
    		path,
    		index,
    		onSelect,
    		getItems,
    		refNavigationBarItem,
    		open,
    		handleSelectItem,
    		openDropdown,
    		selectedItem,
    		itemPath
    	});

    	$$self.$inject_state = $$props => {
    		if ('path' in $$props) $$invalidate(5, path = $$props.path);
    		if ('index' in $$props) $$invalidate(6, index = $$props.index);
    		if ('onSelect' in $$props) $$invalidate(7, onSelect = $$props.onSelect);
    		if ('getItems' in $$props) $$invalidate(8, getItems = $$props.getItems);
    		if ('refNavigationBarItem' in $$props) $$invalidate(0, refNavigationBarItem = $$props.refNavigationBarItem);
    		if ('open' in $$props) $$invalidate(1, open = $$props.open);
    		if ('selectedItem' in $$props) $$invalidate(2, selectedItem = $$props.selectedItem);
    		if ('itemPath' in $$props) itemPath = $$props.itemPath;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*path, index*/ 96) {
    			itemPath = path.slice(0, index);
    		}

    		if ($$self.$$.dirty & /*path, index*/ 96) {
    			$$invalidate(2, selectedItem = path[index]);
    		}
    	};

    	return [
    		refNavigationBarItem,
    		open,
    		selectedItem,
    		handleSelectItem,
    		openDropdown,
    		path,
    		index,
    		onSelect,
    		getItems,
    		click_handler,
    		div_binding
    	];
    }

    class NavigationBarItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$q, create_fragment$q, not_equal, {
    			path: 5,
    			index: 6,
    			onSelect: 7,
    			getItems: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavigationBarItem",
    			options,
    			id: create_fragment$q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*path*/ ctx[5] === undefined && !('path' in props)) {
    			console.warn("<NavigationBarItem> was created without expected prop 'path'");
    		}

    		if (/*index*/ ctx[6] === undefined && !('index' in props)) {
    			console.warn("<NavigationBarItem> was created without expected prop 'index'");
    		}

    		if (/*onSelect*/ ctx[7] === undefined && !('onSelect' in props)) {
    			console.warn("<NavigationBarItem> was created without expected prop 'onSelect'");
    		}

    		if (/*getItems*/ ctx[8] === undefined && !('getItems' in props)) {
    			console.warn("<NavigationBarItem> was created without expected prop 'getItems'");
    		}
    	}

    	get path() {
    		throw new Error("<NavigationBarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<NavigationBarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<NavigationBarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<NavigationBarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<NavigationBarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<NavigationBarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getItems() {
    		throw new Error("<NavigationBarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getItems(value) {
    		throw new Error("<NavigationBarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var naturalCompareLite = createCommonjsModule(function (module) {
    /*
     * @version    1.4.0
     * @date       2015-10-26
     * @stability  3 - Stable
     * @author     Lauri Rooden (https://github.com/litejs/natural-compare-lite)
     * @license    MIT License
     */


    var naturalCompare = function(a, b) {
    	var i, codeA
    	, codeB = 1
    	, posA = 0
    	, posB = 0
    	, alphabet = String.alphabet;

    	function getCode(str, pos, code) {
    		if (code) {
    			for (i = pos; code = getCode(str, i), code < 76 && code > 65;) ++i;
    			return +str.slice(pos - 1, i)
    		}
    		code = alphabet && alphabet.indexOf(str.charAt(pos));
    		return code > -1 ? code + 76 : ((code = str.charCodeAt(pos) || 0), code < 45 || code > 127) ? code
    			: code < 46 ? 65               // -
    			: code < 48 ? code - 1
    			: code < 58 ? code + 18        // 0-9
    			: code < 65 ? code - 11
    			: code < 91 ? code + 11        // A-Z
    			: code < 97 ? code - 37
    			: code < 123 ? code + 5        // a-z
    			: code - 63
    	}


    	if ((a+="") != (b+="")) for (;codeB;) {
    		codeA = getCode(a, posA++);
    		codeB = getCode(b, posB++);

    		if (codeA < 76 && codeB < 76 && codeA > 66 && codeB > 66) {
    			codeA = getCode(a, posA, posA);
    			codeB = getCode(b, posB, posA = i);
    			posB = i;
    		}

    		if (codeA != codeB) return (codeA < codeB) ? -1 : 1
    	}
    	return 0
    };

    try {
    	module.exports = naturalCompare;
    } catch (e) {
    	String.naturalCompare = naturalCompare;
    }
    });

    function caseInsensitiveNaturalCompare(a, b) {
        const aLower = typeof a === 'string' ? a.toLowerCase() : a;
        const bLower = typeof b === 'string' ? b.toLowerCase() : b;
        return naturalCompareLite(aLower, bLower);
    }
    /**
     * Sort the keys of an object
     * @param {JSON} json             The the JSON containg the (optionally nested)
     *                                object to be sorted
     * @param {Path} [rootPath=[]]    Relative path when the array was located
     * @param {1 | -1} [direction=1]  Pass 1 to sort ascending, -1 to sort descending
     * @return {JSONPatchDocument}    Returns a JSONPatch document with move operation
     *                                to get the array sorted.
     */
    function sortObjectKeys(json, rootPath = [], direction = 1) {
        const object = immutableJSONPatch.getIn(json, rootPath);
        const keys = Object.keys(object);
        const sortedKeys = keys.slice();
        sortedKeys.sort((keyA, keyB) => {
            return direction * caseInsensitiveNaturalCompare(keyA, keyB);
        });
        // TODO: can we make this more efficient? check if the first couple of keys are already in order and if so ignore them
        const operations = [];
        for (let i = 0; i < sortedKeys.length; i++) {
            const key = sortedKeys[i];
            const path = immutableJSONPatch.compileJSONPointer(rootPath.concat(key));
            operations.push({
                op: 'move',
                from: path,
                path
            });
        }
        return operations;
    }
    /**
     * Sort the items of an array
     * @param {JSON} json                The document containing (optionally nested)
     *                                  the array to be sorted.
     * @param {Path} [rootPath=[]]      Relative path when the array was located
     * @param {Path} [propertyPath=[]]  Nested path to the property on which to sort the contents
     * @param {1 | -1} [direction=1]    Pass 1 to sort ascending, -1 to sort descending
     * @return {JSONPatchDocument}      Returns a JSONPatch document with move operation
     *                                  to get the array sorted.
     */
    function sortArray(json, rootPath = [], propertyPath = [], direction = 1) {
        const comparator = createObjectComparator(propertyPath, direction);
        // TODO: make the mechanism to sort configurable? Like use sortOperationsMove and sortOperationsMoveAdvanced
        const array = immutableJSONPatch.getIn(json, rootPath);
        return [
            {
                op: 'replace',
                path: immutableJSONPatch.compileJSONPointer(rootPath),
                value: array.slice(0).sort(comparator)
            }
        ];
    }
    /**
     * Create a comparator function to compare nested properties in an array
     * @param {Path} propertyPath
     * @param {1 | -1} direction
     */
    function createObjectComparator(propertyPath, direction) {
        return function comparator(a, b) {
            const valueA = immutableJSONPatch.getIn(a, propertyPath);
            const valueB = immutableJSONPatch.getIn(b, propertyPath);
            if (valueA === undefined) {
                return direction;
            }
            if (valueB === undefined) {
                return -direction;
            }
            if (typeof valueA !== 'string' && typeof valueB !== 'string') {
                // both values are a number, boolean, or null -> use simple, fast sorting
                return valueA > valueB ? direction : valueA < valueB ? -direction : 0;
            }
            return direction * caseInsensitiveNaturalCompare(valueA, valueB);
        };
    }

    /* node_modules/svelte-jsoneditor/components/controls/navigationBar/NavigationBar.svelte generated by Svelte v3.48.0 */

    const { Object: Object_1$2 } = globals;
    const file$n = "node_modules/svelte-jsoneditor/components/controls/navigationBar/NavigationBar.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	child_ctx[14] = i;
    	return child_ctx;
    }

    // (61:2) {#each path as item, index (index)}
    function create_each_block$7(key_1, ctx) {
    	let first;
    	let navigationbaritem;
    	let current;

    	navigationbaritem = new NavigationBarItem({
    			props: {
    				getItems: /*getItems*/ ctx[4],
    				path: /*path*/ ctx[1],
    				index: /*index*/ ctx[14],
    				onSelect: /*handleSelect*/ ctx[5]
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty$3();
    			create_component(navigationbaritem.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(navigationbaritem, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const navigationbaritem_changes = {};
    			if (dirty & /*path*/ 2) navigationbaritem_changes.path = /*path*/ ctx[1];
    			if (dirty & /*path*/ 2) navigationbaritem_changes.index = /*index*/ ctx[14];
    			navigationbaritem.$set(navigationbaritem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navigationbaritem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navigationbaritem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(navigationbaritem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(61:2) {#each path as item, index (index)}",
    		ctx
    	});

    	return block;
    }

    // (64:2) {#if hasNextItem}
    function create_if_block$d(ctx) {
    	let navigationbaritem;
    	let current;

    	navigationbaritem = new NavigationBarItem({
    			props: {
    				getItems: /*getItems*/ ctx[4],
    				path: /*path*/ ctx[1],
    				index: undefined,
    				onSelect: /*handleSelect*/ ctx[5]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navigationbaritem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navigationbaritem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navigationbaritem_changes = {};
    			if (dirty & /*path*/ 2) navigationbaritem_changes.path = /*path*/ ctx[1];
    			navigationbaritem.$set(navigationbaritem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navigationbaritem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navigationbaritem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navigationbaritem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(64:2) {#if hasNextItem}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let div1;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t0;
    	let t1;
    	let div0;

    	let t2_value = (!isObjectOrArray(/*json*/ ctx[0])
    	? 'Navigation bar'
    	: '\u00A0') + "";

    	let t2;
    	let current;
    	let each_value = /*path*/ ctx[1];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*index*/ ctx[14];
    	validate_each_keys(ctx, each_value, get_each_context$7, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$7(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$7(key, child_ctx));
    	}

    	let if_block = /*hasNextItem*/ ctx[3] && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			div0 = element("div");
    			t2 = text(t2_value);
    			attr_dev(div0, "class", "jse-navigation-bar-space svelte-5lwyke");
    			add_location(div0, file$n, 66, 2, 2386);
    			attr_dev(div1, "class", "jse-navigation-bar svelte-5lwyke");
    			add_location(div1, file$n, 59, 0, 2084);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div1, t0);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, t2);
    			/*div1_binding*/ ctx[9](div1);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*getItems, path, handleSelect*/ 50) {
    				each_value = /*path*/ ctx[1];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$7, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, outro_and_destroy_block, create_each_block$7, t0, get_each_context$7);
    				check_outros();
    			}

    			if (/*hasNextItem*/ ctx[3]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*hasNextItem*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$d(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*json*/ 1) && t2_value !== (t2_value = (!isObjectOrArray(/*json*/ ctx[0])
    			? 'Navigation bar'
    			: '\u00A0') + "")) set_data_dev(t2, t2_value);
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			if (if_block) if_block.d();
    			/*div1_binding*/ ctx[9](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let path;
    	let hasNextItem;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavigationBar', slots, []);
    	const debug = createDebug('jsoneditor:NavigationBar');
    	let { json } = $$props;
    	let { state } = $$props;
    	let { selection } = $$props;
    	let { onSelect } = $$props;
    	let refNavigationBar;

    	function scrollToLastItem() {
    		setTimeout(() => {
    			if (refNavigationBar && refNavigationBar.scrollTo) {
    				const left = refNavigationBar.scrollWidth - refNavigationBar.clientWidth;

    				if (left > 0) {
    					debug('scrollTo ', left);
    					refNavigationBar.scrollTo({ left, behavior: 'smooth' });
    				}
    			}
    		});
    	}

    	function getItems(path) {
    		debug('get items for path', path);
    		const node = immutableJSONPatch.getIn(json, path);

    		if (Array.isArray(node)) {
    			return range$1(0, node.length);
    		} else if (isObject$1(node)) {
    			const keys = immutableJSONPatch.getIn(state, path.concat(STATE_KEYS)) || Object.keys(node);
    			const sortedKeys = keys.slice(0);
    			sortedKeys.sort(caseInsensitiveNaturalCompare);
    			return sortedKeys;
    		} else {
    			// never happens but just for robustness...
    			return [];
    		}
    	}

    	function handleSelect(path) {
    		debug('select path', JSON.stringify(path));

    		const newSelection = createSelection(json, state, {
    			type: SELECTION_TYPE.MULTI,
    			anchorPath: path,
    			focusPath: path
    		});

    		onSelect(newSelection);
    	}

    	const writable_props = ['json', 'state', 'selection', 'onSelect'];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavigationBar> was created with unknown prop '${key}'`);
    	});

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refNavigationBar = $$value;
    			$$invalidate(2, refNavigationBar);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('json' in $$props) $$invalidate(0, json = $$props.json);
    		if ('state' in $$props) $$invalidate(6, state = $$props.state);
    		if ('selection' in $$props) $$invalidate(7, selection = $$props.selection);
    		if ('onSelect' in $$props) $$invalidate(8, onSelect = $$props.onSelect);
    	};

    	$$self.$capture_state = () => ({
    		getIn: immutableJSONPatch.getIn,
    		range: range$1,
    		isObject: isObject$1,
    		isObjectOrArray,
    		STATE_KEYS,
    		createSelection,
    		SELECTION_TYPE,
    		createDebug,
    		NavigationBarItem,
    		caseInsensitiveNaturalCompare,
    		debug,
    		json,
    		state,
    		selection,
    		onSelect,
    		refNavigationBar,
    		scrollToLastItem,
    		getItems,
    		handleSelect,
    		path,
    		hasNextItem
    	});

    	$$self.$inject_state = $$props => {
    		if ('json' in $$props) $$invalidate(0, json = $$props.json);
    		if ('state' in $$props) $$invalidate(6, state = $$props.state);
    		if ('selection' in $$props) $$invalidate(7, selection = $$props.selection);
    		if ('onSelect' in $$props) $$invalidate(8, onSelect = $$props.onSelect);
    		if ('refNavigationBar' in $$props) $$invalidate(2, refNavigationBar = $$props.refNavigationBar);
    		if ('path' in $$props) $$invalidate(1, path = $$props.path);
    		if ('hasNextItem' in $$props) $$invalidate(3, hasNextItem = $$props.hasNextItem);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*selection*/ 128) {
    			$$invalidate(1, path = selection ? selection.focusPath : []);
    		}

    		if ($$self.$$.dirty & /*json, path*/ 3) {
    			$$invalidate(3, hasNextItem = isObjectOrArray(immutableJSONPatch.getIn(json, path)));
    		}

    		if ($$self.$$.dirty & /*path*/ 2) {
    			// trigger scrollToLastItem when path changes
    			scrollToLastItem();
    		}
    	};

    	return [
    		json,
    		path,
    		refNavigationBar,
    		hasNextItem,
    		getItems,
    		handleSelect,
    		state,
    		selection,
    		onSelect,
    		div1_binding
    	];
    }

    class NavigationBar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$p, create_fragment$p, not_equal, {
    			json: 0,
    			state: 6,
    			selection: 7,
    			onSelect: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavigationBar",
    			options,
    			id: create_fragment$p.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*json*/ ctx[0] === undefined && !('json' in props)) {
    			console.warn("<NavigationBar> was created without expected prop 'json'");
    		}

    		if (/*state*/ ctx[6] === undefined && !('state' in props)) {
    			console.warn("<NavigationBar> was created without expected prop 'state'");
    		}

    		if (/*selection*/ ctx[7] === undefined && !('selection' in props)) {
    			console.warn("<NavigationBar> was created without expected prop 'selection'");
    		}

    		if (/*onSelect*/ ctx[8] === undefined && !('onSelect' in props)) {
    			console.warn("<NavigationBar> was created without expected prop 'onSelect'");
    		}
    	}

    	get json() {
    		throw new Error("<NavigationBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set json(value) {
    		throw new Error("<NavigationBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get state() {
    		throw new Error("<NavigationBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set state(value) {
    		throw new Error("<NavigationBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selection() {
    		throw new Error("<NavigationBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selection(value) {
    		throw new Error("<NavigationBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<NavigationBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<NavigationBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modes/treemode/menu/SearchBox.svelte generated by Svelte v3.48.0 */
    const file$m = "node_modules/svelte-jsoneditor/components/modes/treemode/menu/SearchBox.svelte";

    // (99:0) {#if show}
    function create_if_block$c(ctx) {
    	let div4;
    	let form;
    	let t0;
    	let div3;
    	let div2;
    	let div0;
    	let current_block_type_index;
    	let if_block1;
    	let t1;
    	let label;
    	let input;
    	let t2;
    	let div1;

    	let t3_value = (/*activeIndex*/ ctx[3] !== -1
    	? `${/*activeIndex*/ ctx[3] + 1}/`
    	: '') + "";

    	let t3;
    	let t4;
    	let t5;
    	let button0;
    	let icon0;
    	let t6;
    	let button1;
    	let icon1;
    	let t7;
    	let button2;
    	let icon2;
    	let t8;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = !/*readOnly*/ ctx[4] && create_if_block_3$5(ctx);
    	const if_block_creators = [create_if_block_2$6, create_else_block$8];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*searching*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	icon0 = new Icon({
    			props: { data: faChevronDown },
    			$$inline: true
    		});

    	icon1 = new Icon({
    			props: { data: faChevronUp },
    			$$inline: true
    		});

    	icon2 = new Icon({ props: { data: faTimes }, $$inline: true });
    	let if_block2 = /*showReplace*/ ctx[0] && !/*readOnly*/ ctx[4] && create_if_block_1$5(ctx);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			form = element("form");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			if_block1.c();
    			t1 = space();
    			label = element("label");
    			input = element("input");
    			t2 = space();
    			div1 = element("div");
    			t3 = text(t3_value);
    			t4 = text(/*formattedResultCount*/ ctx[10]);
    			t5 = space();
    			button0 = element("button");
    			create_component(icon0.$$.fragment);
    			t6 = space();
    			button1 = element("button");
    			create_component(icon1.$$.fragment);
    			t7 = space();
    			button2 = element("button");
    			create_component(icon2.$$.fragment);
    			t8 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div0, "class", "jse-search-icon svelte-18vllqh");
    			add_location(div0, file$m, 113, 10, 3214);
    			attr_dev(input, "class", "jse-search-input svelte-18vllqh");
    			attr_dev(input, "title", "Enter text to search");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Find");
    			add_location(input, file$m, 121, 12, 3501);
    			attr_dev(label, "class", "jse-search-input-label svelte-18vllqh");
    			attr_dev(label, "about", "jse-search input");
    			add_location(label, file$m, 120, 10, 3425);
    			attr_dev(div1, "class", "jse-search-count svelte-18vllqh");
    			toggle_class(div1, "jse-visible", /*text*/ ctx[8] !== '');
    			add_location(div1, file$m, 130, 10, 3759);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "jse-search-next svelte-18vllqh");
    			attr_dev(button0, "title", "Go to next search result (Enter)");
    			add_location(button0, file$m, 133, 10, 3933);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "jse-search-previous svelte-18vllqh");
    			attr_dev(button1, "title", "Go to previous search result (Shift+Enter)");
    			add_location(button1, file$m, 141, 10, 4178);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "jse-search-clear svelte-18vllqh");
    			attr_dev(button2, "title", "Close search box (Esc)");
    			add_location(button2, file$m, 149, 10, 4439);
    			attr_dev(div2, "class", "jse-search-section svelte-18vllqh");
    			add_location(div2, file$m, 112, 8, 3171);
    			attr_dev(div3, "class", "jse-search-contents svelte-18vllqh");
    			add_location(div3, file$m, 111, 6, 3129);
    			attr_dev(form, "class", "jse-search-form svelte-18vllqh");
    			add_location(form, file$m, 100, 4, 2731);
    			attr_dev(div4, "class", "jse-search-box svelte-18vllqh");
    			add_location(div4, file$m, 99, 2, 2698);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, form);
    			if (if_block0) if_block0.m(form, null);
    			append_dev(form, t0);
    			append_dev(form, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			if_blocks[current_block_type_index].m(div0, null);
    			append_dev(div2, t1);
    			append_dev(div2, label);
    			append_dev(label, input);
    			set_input_value(input, /*text*/ ctx[8]);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, t3);
    			append_dev(div1, t4);
    			append_dev(div2, t5);
    			append_dev(div2, button0);
    			mount_component(icon0, button0, null);
    			append_dev(div2, t6);
    			append_dev(div2, button1);
    			mount_component(icon1, button1, null);
    			append_dev(div2, t7);
    			append_dev(div2, button2);
    			mount_component(icon2, button2, null);
    			append_dev(div3, t8);
    			if (if_block2) if_block2.m(div3, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[21]),
    					action_destroyer(initSearchInput.call(null, input)),
    					listen_dev(button0, "click", /*click_handler*/ ctx[22], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[23], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[24], false, false, false),
    					listen_dev(form, "submit", /*handleSubmit*/ ctx[12], false, false, false),
    					listen_dev(form, "keydown", /*handleKeyDown*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!/*readOnly*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*readOnly*/ 16) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_3$5(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(form, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				} else {
    					if_block1.p(ctx, dirty);
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(div0, null);
    			}

    			if (dirty & /*text*/ 256 && input.value !== /*text*/ ctx[8]) {
    				set_input_value(input, /*text*/ ctx[8]);
    			}

    			if ((!current || dirty & /*activeIndex*/ 8) && t3_value !== (t3_value = (/*activeIndex*/ ctx[3] !== -1
    			? `${/*activeIndex*/ ctx[3] + 1}/`
    			: '') + "")) set_data_dev(t3, t3_value);

    			if (!current || dirty & /*formattedResultCount*/ 1024) set_data_dev(t4, /*formattedResultCount*/ ctx[10]);

    			if (dirty & /*text*/ 256) {
    				toggle_class(div1, "jse-visible", /*text*/ ctx[8] !== '');
    			}

    			if (/*showReplace*/ ctx[0] && !/*readOnly*/ ctx[4]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_1$5(ctx);
    					if_block2.c();
    					if_block2.m(div3, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(icon0.$$.fragment, local);
    			transition_in(icon1.$$.fragment, local);
    			transition_in(icon2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(icon0.$$.fragment, local);
    			transition_out(icon1.$$.fragment, local);
    			transition_out(icon2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			if (if_block0) if_block0.d();
    			if_blocks[current_block_type_index].d();
    			destroy_component(icon0);
    			destroy_component(icon1);
    			destroy_component(icon2);
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(99:0) {#if show}",
    		ctx
    	});

    	return block;
    }

    // (102:6) {#if !readOnly}
    function create_if_block_3$5(ctx) {
    	let button;
    	let icon;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: {
    				data: /*showReplace*/ ctx[0] ? faCaretDown : faCaretRight
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(icon.$$.fragment);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-replace-toggle svelte-18vllqh");
    			attr_dev(button, "title", "Toggle visibility of replace options (Ctrl+H)");
    			add_location(button, file$m, 102, 8, 2844);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(icon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*toggleShowReplace*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty & /*showReplace*/ 1) icon_changes.data = /*showReplace*/ ctx[0] ? faCaretDown : faCaretRight;
    			icon.$set(icon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(102:6) {#if !readOnly}",
    		ctx
    	});

    	return block;
    }

    // (117:12) {:else}
    function create_else_block$8(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { data: faSearch },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(117:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (115:12) {#if searching}
    function create_if_block_2$6(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { data: faCircleNotch, spin: true },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(115:12) {#if searching}",
    		ctx
    	});

    	return block;
    }

    // (159:8) {#if showReplace && !readOnly}
    function create_if_block_1$5(ctx) {
    	let div;
    	let input;
    	let t0;
    	let button0;
    	let t2;
    	let button1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			input = element("input");
    			t0 = space();
    			button0 = element("button");
    			button0.textContent = "Replace";
    			t2 = space();
    			button1 = element("button");
    			button1.textContent = "All";
    			attr_dev(input, "class", "jse-replace-input svelte-18vllqh");
    			attr_dev(input, "title", "Enter replacement text");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Replace");
    			add_location(input, file$m, 160, 12, 4770);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "title", "Replace current occurrence (Ctrl+Enter)");
    			attr_dev(button0, "class", "svelte-18vllqh");
    			add_location(button0, file$m, 167, 12, 4990);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "title", "Replace all occurrences");
    			attr_dev(button1, "class", "svelte-18vllqh");
    			add_location(button1, file$m, 172, 12, 5169);
    			attr_dev(div, "class", "jse-replace-section svelte-18vllqh");
    			add_location(div, file$m, 159, 10, 4724);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input);
    			set_input_value(input, /*replaceText*/ ctx[9]);
    			append_dev(div, t0);
    			append_dev(div, button0);
    			append_dev(div, t2);
    			append_dev(div, button1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler_1*/ ctx[25]),
    					listen_dev(button0, "click", /*handleReplace*/ ctx[14], false, false, false),
    					listen_dev(button1, "click", /*handleReplaceAll*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*replaceText*/ 512 && input.value !== /*replaceText*/ ctx[9]) {
    				set_input_value(input, /*replaceText*/ ctx[9]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(159:8) {#if showReplace && !readOnly}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*show*/ ctx[1] && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*show*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*show*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$c(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function initSearchInput(element) {
    	element.select();
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let formattedResultCount;
    	let onChangeDebounced;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SearchBox', slots, []);
    	let { show = false } = $$props;
    	let { searching } = $$props;
    	let { resultCount = 0 } = $$props;
    	let { activeIndex = 0 } = $$props;
    	let { showReplace = false } = $$props;
    	let { readOnly = false } = $$props;
    	let { onChange = noop$1 } = $$props;
    	let { onPrevious = noop$1 } = $$props;
    	let { onNext = noop$1 } = $$props;
    	let { onReplace = noop$1 } = $$props;
    	let { onReplaceAll = noop$1 } = $$props;
    	let { onClose = noop$1 } = $$props;
    	let text = '';
    	let previousText = '';
    	let replaceText = '';

    	function initShow() {
    		if (text !== '') {
    			onChange(text);
    		}
    	}

    	function toggleShowReplace() {
    		$$invalidate(0, showReplace = !showReplace && !readOnly);
    	}

    	function handleSubmit(event) {
    		event.preventDefault();
    		const pendingChanges = text !== previousText;

    		if (pendingChanges) {
    			previousText = text;
    			onChangeDebounced.cancel();
    			onChange(text);
    		} else {
    			onNext();
    		}
    	}

    	function handleKeyDown(event) {
    		// key events must not be handled by the generic keydown handler of the
    		// whole JSONEditor.
    		event.stopPropagation();

    		const combo = keyComboFromEvent(event);

    		if (combo === 'Enter') {
    			event.preventDefault();
    			onNext();
    		}

    		if (combo === 'Shift+Enter') {
    			event.preventDefault();
    			onPrevious();
    		}

    		if (combo === 'Ctrl+Enter' || combo === 'Command+Enter') {
    			event.preventDefault();

    			if (showReplace) {
    				handleReplace();
    			} else {
    				onNext();
    			} // TODO: move focus to the active element
    		}

    		if (combo === 'Ctrl+H') {
    			event.preventDefault();
    			toggleShowReplace();
    		}

    		if (combo === 'Escape') {
    			event.preventDefault();
    			onClose();
    		}
    	}

    	function handleReplace() {
    		if (readOnly) {
    			return;
    		}

    		onReplace(text, replaceText);
    	}

    	function handleReplaceAll() {
    		if (readOnly) {
    			return;
    		}

    		onReplaceAll(text, replaceText);
    	}

    	const writable_props = [
    		'show',
    		'searching',
    		'resultCount',
    		'activeIndex',
    		'showReplace',
    		'readOnly',
    		'onChange',
    		'onPrevious',
    		'onNext',
    		'onReplace',
    		'onReplaceAll',
    		'onClose'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SearchBox> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		text = this.value;
    		$$invalidate(8, text);
    	}

    	const click_handler = () => onNext();
    	const click_handler_1 = () => onPrevious();
    	const click_handler_2 = () => onClose();

    	function input_input_handler_1() {
    		replaceText = this.value;
    		$$invalidate(9, replaceText);
    	}

    	$$self.$$set = $$props => {
    		if ('show' in $$props) $$invalidate(1, show = $$props.show);
    		if ('searching' in $$props) $$invalidate(2, searching = $$props.searching);
    		if ('resultCount' in $$props) $$invalidate(16, resultCount = $$props.resultCount);
    		if ('activeIndex' in $$props) $$invalidate(3, activeIndex = $$props.activeIndex);
    		if ('showReplace' in $$props) $$invalidate(0, showReplace = $$props.showReplace);
    		if ('readOnly' in $$props) $$invalidate(4, readOnly = $$props.readOnly);
    		if ('onChange' in $$props) $$invalidate(17, onChange = $$props.onChange);
    		if ('onPrevious' in $$props) $$invalidate(5, onPrevious = $$props.onPrevious);
    		if ('onNext' in $$props) $$invalidate(6, onNext = $$props.onNext);
    		if ('onReplace' in $$props) $$invalidate(18, onReplace = $$props.onReplace);
    		if ('onReplaceAll' in $$props) $$invalidate(19, onReplaceAll = $$props.onReplaceAll);
    		if ('onClose' in $$props) $$invalidate(7, onClose = $$props.onClose);
    	};

    	$$self.$capture_state = () => ({
    		debounce: debounce$1,
    		noop: noop$1,
    		Icon,
    		faCaretDown,
    		faCaretRight,
    		faChevronDown,
    		faChevronUp,
    		faCircleNotch,
    		faSearch,
    		faTimes,
    		DEBOUNCE_DELAY,
    		MAX_SEARCH_RESULTS,
    		keyComboFromEvent,
    		show,
    		searching,
    		resultCount,
    		activeIndex,
    		showReplace,
    		readOnly,
    		onChange,
    		onPrevious,
    		onNext,
    		onReplace,
    		onReplaceAll,
    		onClose,
    		text,
    		previousText,
    		replaceText,
    		initShow,
    		toggleShowReplace,
    		handleSubmit,
    		handleKeyDown,
    		handleReplace,
    		handleReplaceAll,
    		initSearchInput,
    		onChangeDebounced,
    		formattedResultCount
    	});

    	$$self.$inject_state = $$props => {
    		if ('show' in $$props) $$invalidate(1, show = $$props.show);
    		if ('searching' in $$props) $$invalidate(2, searching = $$props.searching);
    		if ('resultCount' in $$props) $$invalidate(16, resultCount = $$props.resultCount);
    		if ('activeIndex' in $$props) $$invalidate(3, activeIndex = $$props.activeIndex);
    		if ('showReplace' in $$props) $$invalidate(0, showReplace = $$props.showReplace);
    		if ('readOnly' in $$props) $$invalidate(4, readOnly = $$props.readOnly);
    		if ('onChange' in $$props) $$invalidate(17, onChange = $$props.onChange);
    		if ('onPrevious' in $$props) $$invalidate(5, onPrevious = $$props.onPrevious);
    		if ('onNext' in $$props) $$invalidate(6, onNext = $$props.onNext);
    		if ('onReplace' in $$props) $$invalidate(18, onReplace = $$props.onReplace);
    		if ('onReplaceAll' in $$props) $$invalidate(19, onReplaceAll = $$props.onReplaceAll);
    		if ('onClose' in $$props) $$invalidate(7, onClose = $$props.onClose);
    		if ('text' in $$props) $$invalidate(8, text = $$props.text);
    		if ('previousText' in $$props) previousText = $$props.previousText;
    		if ('replaceText' in $$props) $$invalidate(9, replaceText = $$props.replaceText);
    		if ('onChangeDebounced' in $$props) $$invalidate(20, onChangeDebounced = $$props.onChangeDebounced);
    		if ('formattedResultCount' in $$props) $$invalidate(10, formattedResultCount = $$props.formattedResultCount);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*resultCount*/ 65536) {
    			$$invalidate(10, formattedResultCount = resultCount >= MAX_SEARCH_RESULTS
    			? `${MAX_SEARCH_RESULTS - 1}+`
    			: String(resultCount));
    		}

    		if ($$self.$$.dirty & /*onChange*/ 131072) {
    			$$invalidate(20, onChangeDebounced = debounce$1(onChange, DEBOUNCE_DELAY));
    		}

    		if ($$self.$$.dirty & /*onChangeDebounced, text*/ 1048832) {
    			onChangeDebounced(text);
    		}

    		if ($$self.$$.dirty & /*show*/ 2) {
    			if (show) {
    				initShow();
    			}
    		}
    	};

    	return [
    		showReplace,
    		show,
    		searching,
    		activeIndex,
    		readOnly,
    		onPrevious,
    		onNext,
    		onClose,
    		text,
    		replaceText,
    		formattedResultCount,
    		toggleShowReplace,
    		handleSubmit,
    		handleKeyDown,
    		handleReplace,
    		handleReplaceAll,
    		resultCount,
    		onChange,
    		onReplace,
    		onReplaceAll,
    		onChangeDebounced,
    		input_input_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		input_input_handler_1
    	];
    }

    class SearchBox extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$o, create_fragment$o, not_equal, {
    			show: 1,
    			searching: 2,
    			resultCount: 16,
    			activeIndex: 3,
    			showReplace: 0,
    			readOnly: 4,
    			onChange: 17,
    			onPrevious: 5,
    			onNext: 6,
    			onReplace: 18,
    			onReplaceAll: 19,
    			onClose: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SearchBox",
    			options,
    			id: create_fragment$o.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*searching*/ ctx[2] === undefined && !('searching' in props)) {
    			console.warn("<SearchBox> was created without expected prop 'searching'");
    		}
    	}

    	get show() {
    		throw new Error("<SearchBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set show(value) {
    		throw new Error("<SearchBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get searching() {
    		throw new Error("<SearchBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set searching(value) {
    		throw new Error("<SearchBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get resultCount() {
    		throw new Error("<SearchBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set resultCount(value) {
    		throw new Error("<SearchBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeIndex() {
    		throw new Error("<SearchBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeIndex(value) {
    		throw new Error("<SearchBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showReplace() {
    		throw new Error("<SearchBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showReplace(value) {
    		throw new Error("<SearchBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readOnly() {
    		throw new Error("<SearchBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readOnly(value) {
    		throw new Error("<SearchBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChange() {
    		throw new Error("<SearchBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChange(value) {
    		throw new Error("<SearchBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onPrevious() {
    		throw new Error("<SearchBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onPrevious(value) {
    		throw new Error("<SearchBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onNext() {
    		throw new Error("<SearchBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onNext(value) {
    		throw new Error("<SearchBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onReplace() {
    		throw new Error("<SearchBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onReplace(value) {
    		throw new Error("<SearchBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onReplaceAll() {
    		throw new Error("<SearchBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onReplaceAll(value) {
    		throw new Error("<SearchBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClose() {
    		throw new Error("<SearchBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClose(value) {
    		throw new Error("<SearchBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modes/treemode/TreeMode.svelte generated by Svelte v3.48.0 */

    const { Error: Error_1$1, window: window_1 } = globals;
    const file$l = "node_modules/svelte-jsoneditor/components/modes/treemode/TreeMode.svelte";

    // (1707:2) {#if mainMenuBar}
    function create_if_block_6$2(ctx) {
    	let treemenu;
    	let updating_showSearch;
    	let current;

    	function treemenu_showSearch_binding(value) {
    		/*treemenu_showSearch_binding*/ ctx[72](value);
    	}

    	let treemenu_props = {
    		json: /*json*/ ctx[7],
    		selection: /*selection*/ ctx[9],
    		readOnly: /*readOnly*/ ctx[0],
    		historyState: /*historyState*/ ctx[20],
    		onExpandAll: /*handleExpandAll*/ ctx[39],
    		onCollapseAll: /*handleCollapseAll*/ ctx[40],
    		onUndo: /*handleUndo*/ ctx[35],
    		onRedo: /*handleRedo*/ ctx[36],
    		onSort: /*handleSortAll*/ ctx[37],
    		onTransform: /*handleTransformAll*/ ctx[38],
    		onContextMenu: /*handleContextMenuFromTreeMenu*/ ctx[44],
    		onCopy: /*handleCopy*/ ctx[33],
    		onRenderMenu: /*onRenderMenu*/ ctx[4]
    	};

    	if (/*showSearch*/ ctx[16] !== void 0) {
    		treemenu_props.showSearch = /*showSearch*/ ctx[16];
    	}

    	treemenu = new TreeMenu({ props: treemenu_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(treemenu, 'showSearch', treemenu_showSearch_binding));

    	const block = {
    		c: function create() {
    			create_component(treemenu.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(treemenu, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const treemenu_changes = {};
    			if (dirty[0] & /*json*/ 128) treemenu_changes.json = /*json*/ ctx[7];
    			if (dirty[0] & /*selection*/ 512) treemenu_changes.selection = /*selection*/ ctx[9];
    			if (dirty[0] & /*readOnly*/ 1) treemenu_changes.readOnly = /*readOnly*/ ctx[0];
    			if (dirty[0] & /*historyState*/ 1048576) treemenu_changes.historyState = /*historyState*/ ctx[20];
    			if (dirty[0] & /*onRenderMenu*/ 16) treemenu_changes.onRenderMenu = /*onRenderMenu*/ ctx[4];

    			if (!updating_showSearch && dirty[0] & /*showSearch*/ 65536) {
    				updating_showSearch = true;
    				treemenu_changes.showSearch = /*showSearch*/ ctx[16];
    				add_flush_callback(() => updating_showSearch = false);
    			}

    			treemenu.$set(treemenu_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(treemenu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(treemenu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(treemenu, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$2.name,
    		type: "if",
    		source: "(1707:2) {#if mainMenuBar}",
    		ctx
    	});

    	return block;
    }

    // (1726:2) {#if navigationBar}
    function create_if_block_5$3(ctx) {
    	let navigationbar;
    	let current;

    	navigationbar = new NavigationBar({
    			props: {
    				json: /*json*/ ctx[7],
    				state: /*state*/ ctx[14],
    				selection: /*selection*/ ctx[9],
    				onSelect: /*handleNavigationBarSelect*/ ctx[47]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navigationbar.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navigationbar, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navigationbar_changes = {};
    			if (dirty[0] & /*json*/ 128) navigationbar_changes.json = /*json*/ ctx[7];
    			if (dirty[0] & /*state*/ 16384) navigationbar_changes.state = /*state*/ ctx[14];
    			if (dirty[0] & /*selection*/ 512) navigationbar_changes.selection = /*selection*/ ctx[9];
    			navigationbar.$set(navigationbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navigationbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navigationbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navigationbar, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$3.name,
    		type: "if",
    		source: "(1726:2) {#if navigationBar}",
    		ctx
    	});

    	return block;
    }

    // (1837:2) {:else}
    function create_else_block_2$1(ctx) {
    	let div2;
    	let div0;
    	let t0;
    	let div1;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			div1.textContent = "loading...";
    			attr_dev(div0, "class", "jse-loading-space svelte-1wno2xw");
    			add_location(div0, file$l, 1838, 6, 64816);
    			attr_dev(div1, "class", "jse-loading svelte-1wno2xw");
    			add_location(div1, file$l, 1839, 6, 64856);
    			attr_dev(div2, "class", "jse-contents svelte-1wno2xw");
    			add_location(div2, file$l, 1837, 4, 64783);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(1837:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (1730:2) {#if !isSSR}
    function create_if_block$b(ctx) {
    	let label;
    	let input;
    	let t;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_1$4, create_else_block_1$2];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*json*/ ctx[7] === undefined) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			label = element("label");
    			input = element("input");
    			t = space();
    			if_block.c();
    			if_block_anchor = empty$3();
    			attr_dev(input, "class", "jse-hidden-input svelte-1wno2xw");
    			attr_dev(input, "tabindex", "-1");
    			add_location(input, file$l, 1731, 6, 61561);
    			attr_dev(label, "class", "jse-hidden-input-label svelte-1wno2xw");
    			add_location(label, file$l, 1730, 4, 61516);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, input);
    			/*input_binding*/ ctx[73](input);
    			insert_dev(target, t, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(input, "paste", /*handlePaste*/ ctx[34], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			/*input_binding*/ ctx[73](null);
    			if (detaching) detach_dev(t);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(1730:2) {#if !isSSR}",
    		ctx
    	});

    	return block;
    }

    // (1760:4) {:else}
    function create_else_block_1$2(ctx) {
    	let div0;
    	let searchbox;
    	let t0;
    	let div1;
    	let jsonnode;
    	let t1;
    	let t2;
    	let t3;
    	let validationerrorsoverview;
    	let current;

    	searchbox = new SearchBox({
    			props: {
    				show: /*showSearch*/ ctx[16],
    				resultCount: /*searchResult*/ ctx[19]
    				? /*searchResult*/ ctx[19].count
    				: 0,
    				activeIndex: /*searchResult*/ ctx[19]
    				? /*searchResult*/ ctx[19].activeIndex
    				: 0,
    				showReplace: /*showReplace*/ ctx[17],
    				searching: /*searching*/ ctx[18],
    				readOnly: /*readOnly*/ ctx[0],
    				onChange: /*handleSearchText*/ ctx[26],
    				onNext: /*handleNextSearchResult*/ ctx[27],
    				onPrevious: /*handlePreviousSearchResult*/ ctx[28],
    				onReplace: /*handleReplace*/ ctx[29],
    				onReplaceAll: /*handleReplaceAll*/ ctx[30],
    				onClose: /*clearSearchResult*/ ctx[31]
    			},
    			$$inline: true
    		});

    	jsonnode = new JSONNode({
    			props: {
    				value: /*json*/ ctx[7],
    				path: /*rootPath*/ ctx[25],
    				state: /*state*/ ctx[14],
    				selection: /*recursiveSelection*/ ctx[23],
    				searchResult: /*searchResult*/ ctx[19] && /*searchResult*/ ctx[19].itemsWithActive,
    				validationErrors: /*validationErrorsMap*/ ctx[22],
    				context: /*context*/ ctx[10],
    				onDragSelectionStart: noop$1
    			},
    			$$inline: true
    		});

    	let if_block0 = /*pastedJson*/ ctx[15] && create_if_block_4$3(ctx);
    	let if_block1 = /*textIsRepaired*/ ctx[21] && create_if_block_3$4(ctx);

    	validationerrorsoverview = new ValidationErrorsOverview({
    			props: {
    				validationErrors: /*validationErrors*/ ctx[11],
    				selectError: /*handleSelectValidationError*/ ctx[32]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			create_component(searchbox.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(jsonnode.$$.fragment);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			create_component(validationerrorsoverview.$$.fragment);
    			attr_dev(div0, "class", "jse-search-box-container svelte-1wno2xw");
    			add_location(div0, file$l, 1760, 6, 62308);
    			attr_dev(div1, "class", "jse-contents svelte-1wno2xw");
    			attr_dev(div1, "data-jsoneditor-scrollable-contents", true);
    			add_location(div1, file$l, 1776, 6, 62867);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			mount_component(searchbox, div0, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			mount_component(jsonnode, div1, null);
    			/*div1_binding*/ ctx[74](div1);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(validationerrorsoverview, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const searchbox_changes = {};
    			if (dirty[0] & /*showSearch*/ 65536) searchbox_changes.show = /*showSearch*/ ctx[16];

    			if (dirty[0] & /*searchResult*/ 524288) searchbox_changes.resultCount = /*searchResult*/ ctx[19]
    			? /*searchResult*/ ctx[19].count
    			: 0;

    			if (dirty[0] & /*searchResult*/ 524288) searchbox_changes.activeIndex = /*searchResult*/ ctx[19]
    			? /*searchResult*/ ctx[19].activeIndex
    			: 0;

    			if (dirty[0] & /*showReplace*/ 131072) searchbox_changes.showReplace = /*showReplace*/ ctx[17];
    			if (dirty[0] & /*searching*/ 262144) searchbox_changes.searching = /*searching*/ ctx[18];
    			if (dirty[0] & /*readOnly*/ 1) searchbox_changes.readOnly = /*readOnly*/ ctx[0];
    			searchbox.$set(searchbox_changes);
    			const jsonnode_changes = {};
    			if (dirty[0] & /*json*/ 128) jsonnode_changes.value = /*json*/ ctx[7];
    			if (dirty[0] & /*state*/ 16384) jsonnode_changes.state = /*state*/ ctx[14];
    			if (dirty[0] & /*recursiveSelection*/ 8388608) jsonnode_changes.selection = /*recursiveSelection*/ ctx[23];
    			if (dirty[0] & /*searchResult*/ 524288) jsonnode_changes.searchResult = /*searchResult*/ ctx[19] && /*searchResult*/ ctx[19].itemsWithActive;
    			if (dirty[0] & /*validationErrorsMap*/ 4194304) jsonnode_changes.validationErrors = /*validationErrorsMap*/ ctx[22];
    			if (dirty[0] & /*context*/ 1024) jsonnode_changes.context = /*context*/ ctx[10];
    			jsonnode.$set(jsonnode_changes);

    			if (/*pastedJson*/ ctx[15]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*pastedJson*/ 32768) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_4$3(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*textIsRepaired*/ ctx[21]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*textIsRepaired*/ 2097152) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_3$4(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			const validationerrorsoverview_changes = {};
    			if (dirty[0] & /*validationErrors*/ 2048) validationerrorsoverview_changes.validationErrors = /*validationErrors*/ ctx[11];
    			validationerrorsoverview.$set(validationerrorsoverview_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchbox.$$.fragment, local);
    			transition_in(jsonnode.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(validationerrorsoverview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(searchbox.$$.fragment, local);
    			transition_out(jsonnode.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(validationerrorsoverview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_component(searchbox);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			destroy_component(jsonnode);
    			/*div1_binding*/ ctx[74](null);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(validationerrorsoverview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(1760:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (1739:4) {#if json === undefined}
    function create_if_block_1$4(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_2$5, create_else_block$7];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*text*/ ctx[8] === '' || /*text*/ ctx[8] === undefined) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_2(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(1739:4) {#if json === undefined}",
    		ctx
    	});

    	return block;
    }

    // (1790:6) {#if pastedJson}
    function create_if_block_4$3(ctx) {
    	let message;
    	let current;

    	message = new Message({
    			props: {
    				type: "info",
    				message: `You pasted a JSON ${Array.isArray(/*pastedJson*/ ctx[15].contents)
				? 'array'
				: 'object'} as text`,
    				actions: [
    					{
    						icon: faWrench,
    						text: 'Paste as JSON instead',
    						// We use mousedown here instead of click: this message pops up
    						// whilst the user is editing a value. When clicking this button,
    						// the actual value is applied and the event is not propagated
    						// and an onClick on this button never happens.
    						onMouseDown: /*handleParsePastedJson*/ ctx[45]
    					},
    					{
    						text: 'Leave as is',
    						onClick: /*handleClearPastedJson*/ ctx[46]
    					}
    				]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(message.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(message, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const message_changes = {};

    			if (dirty[0] & /*pastedJson*/ 32768) message_changes.message = `You pasted a JSON ${Array.isArray(/*pastedJson*/ ctx[15].contents)
			? 'array'
			: 'object'} as text`;

    			message.$set(message_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(message.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(message.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(message, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(1790:6) {#if pastedJson}",
    		ctx
    	});

    	return block;
    }

    // (1814:6) {#if textIsRepaired}
    function create_if_block_3$4(ctx) {
    	let message;
    	let current;

    	message = new Message({
    			props: {
    				type: "success",
    				message: "The loaded JSON document was invalid but is successfully repaired.",
    				actions: !/*readOnly*/ ctx[0]
    				? [
    						{
    							icon: faCheck,
    							text: 'Ok',
    							onClick: /*acceptAutoRepair*/ ctx[5]
    						},
    						{
    							icon: faCode,
    							text: 'Repair manually instead',
    							onClick: /*onRequestRepair*/ ctx[3]
    						}
    					]
    				: []
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(message.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(message, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const message_changes = {};

    			if (dirty[0] & /*readOnly, onRequestRepair*/ 9) message_changes.actions = !/*readOnly*/ ctx[0]
    			? [
    					{
    						icon: faCheck,
    						text: 'Ok',
    						onClick: /*acceptAutoRepair*/ ctx[5]
    					},
    					{
    						icon: faCode,
    						text: 'Repair manually instead',
    						onClick: /*onRequestRepair*/ ctx[3]
    					}
    				]
    			: [];

    			message.$set(message_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(message.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(message.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(message, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(1814:6) {#if textIsRepaired}",
    		ctx
    	});

    	return block;
    }

    // (1742:6) {:else}
    function create_else_block$7(ctx) {
    	let message;
    	let t0;
    	let div;
    	let t1;
    	let current;

    	message = new Message({
    			props: {
    				type: "error",
    				message: "The loaded JSON document is invalid and could not be repaired automatically.",
    				actions: !/*readOnly*/ ctx[0]
    				? [
    						{
    							icon: faCode,
    							text: 'Repair manually',
    							onClick: /*onRequestRepair*/ ctx[3]
    						}
    					]
    				: []
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(message.$$.fragment);
    			t0 = space();
    			div = element("div");
    			t1 = text(/*text*/ ctx[8]);
    			attr_dev(div, "class", "jse-preview svelte-1wno2xw");
    			add_location(div, file$l, 1755, 8, 62220);
    		},
    		m: function mount(target, anchor) {
    			mount_component(message, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const message_changes = {};

    			if (dirty[0] & /*readOnly, onRequestRepair*/ 9) message_changes.actions = !/*readOnly*/ ctx[0]
    			? [
    					{
    						icon: faCode,
    						text: 'Repair manually',
    						onClick: /*onRequestRepair*/ ctx[3]
    					}
    				]
    			: [];

    			message.$set(message_changes);
    			if (!current || dirty[0] & /*text*/ 256) set_data_dev(t1, /*text*/ ctx[8]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(message.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(message.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(message, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(1742:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (1740:6) {#if text === '' || text === undefined}
    function create_if_block_2$5(ctx) {
    	let welcome;
    	let current;

    	welcome = new Welcome({
    			props: { readOnly: /*readOnly*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(welcome.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(welcome, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const welcome_changes = {};
    			if (dirty[0] & /*readOnly*/ 1) welcome_changes.readOnly = /*readOnly*/ ctx[0];
    			welcome.$set(welcome_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(welcome.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(welcome.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(welcome, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(1740:6) {#if text === '' || text === undefined}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let current_block_type_index;
    	let if_block2;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*mainMenuBar*/ ctx[1] && create_if_block_6$2(ctx);
    	let if_block1 = /*navigationBar*/ ctx[2] && create_if_block_5$3(ctx);
    	const if_block_creators = [create_if_block$b, create_else_block_2$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*isSSR*/ ctx[24]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if_block2.c();
    			attr_dev(div, "class", "jse-tree-mode svelte-1wno2xw");
    			toggle_class(div, "no-main-menu", !/*mainMenuBar*/ ctx[1]);
    			add_location(div, file$l, 1698, 0, 60750);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if_blocks[current_block_type_index].m(div, null);
    			/*div_binding*/ ctx[75](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window_1, "mousedown", /*handleWindowMouseDown*/ ctx[48], false, false, false),
    					listen_dev(div, "keydown", /*handleKeyDown*/ ctx[41], false, false, false),
    					listen_dev(div, "mousedown", /*handleMouseDown*/ ctx[42], false, false, false),
    					listen_dev(div, "contextmenu", /*handleContextMenu*/ ctx[43], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*mainMenuBar*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*mainMenuBar*/ 2) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_6$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*navigationBar*/ ctx[2]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*navigationBar*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_5$3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if_block2.p(ctx, dirty);

    			if (dirty[0] & /*mainMenuBar*/ 2) {
    				toggle_class(div, "no-main-menu", !/*mainMenuBar*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if_blocks[current_block_type_index].d();
    			/*div_binding*/ ctx[75](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function expandMinimal(path) {
    	return path.length < 1
    	? true
    	: path.length === 1 && path[0] === 0; // first item of an array
    }

    function expandAll() {
    	return true;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let normalization;
    	let recursiveSelection;
    	let textIsUnrepairable;
    	let validationErrors;
    	let validationErrorsMap;
    	let context;
    	let autoScrollHandler;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TreeMode', slots, []);
    	const debug = createDebug('jsoneditor:TreeMode');
    	const isSSR = typeof window === 'undefined';
    	debug('isSSR:', isSSR);
    	const { open } = getContext('simple-modal');
    	const sortModalId = uniqueId();
    	const transformModalId = uniqueId();
    	const { openAbsolutePopup, closeAbsolutePopup } = getContext('absolute-popup');
    	let refContents;
    	let refHiddenInput;
    	let refJsonEditor;
    	let hasFocus = false;
    	const jump = createJump();
    	let { readOnly = false } = $$props;
    	let { externalContent } = $$props;
    	let { mainMenuBar = true } = $$props;
    	let { navigationBar = true } = $$props;
    	let { escapeControlCharacters = false } = $$props;
    	let { escapeUnicodeCharacters = false } = $$props;
    	let { validator = null } = $$props;
    	let { indentation = 2 } = $$props;
    	let { onError } = $$props;
    	let { onChange } = $$props;
    	let { onRenderValue } = $$props;
    	let { onRequestRepair = noop$1 } = $$props;
    	let { onRenderMenu = noop$1 } = $$props;
    	let { onClassName } = $$props;
    	let { onFocus } = $$props;
    	let { onBlur } = $$props;
    	let { onSortModal } = $$props;
    	let { onTransformModal } = $$props;

    	// modalOpen is true when one of the modals is open.
    	// This is used to track whether the editor still has focus
    	let modalOpen = false;

    	createFocusTracker({
    		onMount,
    		onDestroy,
    		getWindow: () => getWindow(refJsonEditor),
    		hasFocus: () => modalOpen && document.hasFocus() || activeElementIsChildOf(refJsonEditor),
    		onFocus: () => {
    			hasFocus = true;

    			if (onFocus) {
    				onFocus();
    			}
    		},
    		onBlur: () => {
    			hasFocus = false;

    			if (onBlur) {
    				onBlur();
    			}
    		}
    	});

    	let json;
    	let text;
    	let state = syncState({}, undefined, [], expandMinimal);
    	const rootPath = []; // create the array only once
    	let selection = null;
    	let pastedJson;

    	function getDefaultExpand(json) {
    		return isLargeContent({ json }, MAX_DOCUMENT_SIZE_EXPAND_ALL)
    		? expandMinimal
    		: expandAll;
    	}

    	let showSearch = false;
    	let showReplace = false;
    	let searching = false;
    	let searchText = '';
    	let searchResult;

    	async function handleSearchText(text) {
    		debug('search text updated', text);
    		$$invalidate(69, searchText = text);
    		await tick(); // await for the search results to be updated
    		await focusActiveSearchResult(searchResult && searchResult.activeItem);
    	}

    	async function handleNextSearchResult() {
    		$$invalidate(19, searchResult = searchResult ? searchNext(searchResult) : searchResult);
    		await focusActiveSearchResult(searchResult && searchResult.activeItem);
    	}

    	async function handlePreviousSearchResult() {
    		$$invalidate(19, searchResult = searchResult
    		? searchPrevious(searchResult)
    		: searchResult);

    		await focusActiveSearchResult(searchResult && searchResult.activeItem);
    	}

    	async function handleReplace(text, replacementText) {
    		const activeItem = searchResult.activeItem;
    		debug('handleReplace', { replacementText, activeItem });

    		if (!searchResult || !activeItem) {
    			return;
    		}

    		const { operations, newSelection } = createSearchAndReplaceOperations(json, state, replacementText, activeItem);
    		handlePatch(operations, () => ({ selection: newSelection }));
    		await tick();
    		await focusActiveSearchResult(searchResult && searchResult.activeItem);
    	}

    	async function handleReplaceAll(text, replacementText) {
    		debug('handleReplaceAll', { text, replacementText });
    		const { operations, newSelection } = createSearchAndReplaceAllOperations(json, state, text, replacementText);
    		handlePatch(operations, () => ({ selection: newSelection }));
    		await tick();
    		await focusActiveSearchResult(searchResult && searchResult.activeItem);
    	}

    	function clearSearchResult() {
    		$$invalidate(16, showSearch = false);
    		$$invalidate(17, showReplace = false);
    		handleSearchText('');
    		focus();
    	}

    	async function focusActiveSearchResult(activeItem) {
    		if (activeItem) {
    			const path = activeItem.path;
    			$$invalidate(14, state = expandPath(json, state, path));
    			$$invalidate(9, selection = null); // navigation path of current selection would be confusing
    			await tick();
    			await scrollTo(path);
    		}
    	}

    	function applySearch() {
    		if (searchText === '') {
    			$$invalidate(19, searchResult = undefined);
    			return;
    		}

    		$$invalidate(18, searching = true);

    		// setTimeout is to wait until the search icon has been rendered
    		setTimeout(() => {
    			debug('searching...', searchText);

    			// console.time('search') // TODO: cleanup
    			const flatResults = search(searchText, json, state, MAX_SEARCH_RESULTS);

    			$$invalidate(19, searchResult = updateSearchResult(json, flatResults, searchResult));

    			// console.timeEnd('search') // TODO: cleanup
    			$$invalidate(18, searching = false);
    		});
    	}

    	const applySearchThrottled = throttle(applySearch, SEARCH_UPDATE_THROTTLE);

    	/**
     * @param {ValidationError} error
     **/
    	function handleSelectValidationError(error) {
    		debug('select validation error', error);

    		$$invalidate(9, selection = createSelection(json, state, {
    			type: SELECTION_TYPE.VALUE,
    			path: error.path
    		}));

    		scrollTo(error.path);
    		focus();
    	}

    	const history = createHistory({
    		onChange: state => {
    			$$invalidate(20, historyState = state);
    		}
    	});

    	let historyState = history.getState();

    	function expand(callback = () => true) {
    		$$invalidate(14, state = syncState(json, state, [], callback, true));
    	}

    	let textIsRepaired = false;

    	function get() {
    		return json;
    	}

    	function applyExternalContent(updatedContent) {
    		if (updatedContent.json !== undefined) {
    			applyExternalJson(updatedContent.json);
    		}

    		if (updatedContent.text !== undefined) {
    			applyExternalText(updatedContent.text);
    		}
    	}

    	function applyExternalJson(updatedJson) {
    		if (updatedJson === undefined) {
    			return;
    		}

    		// TODO: this is inefficient. Make an optional flag promising that the updates are immutable so we don't have to do a deep equality check? First do some profiling!
    		const isChanged = !isEqual(json, updatedJson);

    		const isText = json === undefined;
    		debug('update external json', { isChanged, isText });

    		if (!isChanged) {
    			// no actual change, don't do anything
    			return;
    		}

    		const previousState = state;
    		const previousJson = json;
    		const previousText = text;
    		const previousTextIsRepaired = textIsRepaired;
    		const previousSelection = selection;
    		$$invalidate(7, json = updatedJson);
    		$$invalidate(14, state = syncState(json, previousState, [], getDefaultExpand(json), false));
    		$$invalidate(8, text = undefined);
    		$$invalidate(21, textIsRepaired = false);
    		$$invalidate(9, selection = clearSelectionWhenNotExisting(selection, json));

    		addHistoryItem({
    			previousJson,
    			previousState,
    			previousText,
    			previousTextIsRepaired,
    			previousSelection
    		});

    		// TODO: triggering applySearchThrottled() here should not be needed
    		applySearchThrottled();
    	}

    	function applyExternalText(updatedText) {
    		if (updatedText === undefined || externalContent.json !== undefined) {
    			return;
    		}

    		if (updatedText === text) {
    			// no actual change, don't do anything
    			return;
    		}

    		debug('update external text');
    		const previousJson = json;
    		const previousState = state;
    		const previousText = text;
    		const previousTextIsRepaired = textIsRepaired;
    		const previousSelection = selection;

    		try {
    			$$invalidate(7, json = JSON.parse(updatedText));
    			$$invalidate(14, state = syncState(json, previousState, [], getDefaultExpand(json), false));
    			$$invalidate(8, text = updatedText);
    			$$invalidate(21, textIsRepaired = false);
    			$$invalidate(9, selection = clearSelectionWhenNotExisting(selection, json));
    		} catch(err) {
    			try {
    				$$invalidate(7, json = JSON.parse(jsonrepair_min(updatedText)));
    				$$invalidate(14, state = syncState(json, previousState, [], getDefaultExpand(json), false));
    				$$invalidate(8, text = updatedText);
    				$$invalidate(21, textIsRepaired = true);
    				$$invalidate(9, selection = clearSelectionWhenNotExisting(selection, json));
    			} catch(err) {
    				// no valid JSON, will show empty document or invalid json
    				$$invalidate(7, json = undefined);

    				$$invalidate(14, state = undefined);
    				$$invalidate(8, text = externalContent.text);
    				$$invalidate(21, textIsRepaired = false);
    				$$invalidate(9, selection = clearSelectionWhenNotExisting(selection, json));
    			}
    		}

    		if (!selection && json === undefined && (text === '' || text === undefined)) {
    			// make sure there is a selection,
    			// else we cannot paste or insert in case of an empty document
    			$$invalidate(9, selection = createDefaultSelection());
    		}

    		addHistoryItem({
    			previousJson,
    			previousState,
    			previousText,
    			previousTextIsRepaired,
    			previousSelection
    		});

    		// TODO: triggering applySearchThrottled() here should not be needed
    		applySearchThrottled();
    	}

    	function clearSelectionWhenNotExisting(selection, json) {
    		if (selection && immutableJSONPatch.existsIn(json, selection.anchorPath) && immutableJSONPatch.existsIn(json, selection.focusPath)) {
    			return selection;
    		}

    		debug('clearing selection: path does not exist anymore');
    		return null;
    	}

    	function addHistoryItem(
    		{ previousJson, previousState, previousText, previousTextIsRepaired, previousSelection }
    	) {
    		if (previousJson === undefined && previousText === undefined) {
    			// initialization -> do not create a history item
    			return;
    		}

    		if (json !== undefined) {
    			if (previousJson !== undefined) {
    				// regular undo/redo with JSON patch
    				history.add({
    					undo: {
    						patch: [
    							{
    								op: 'replace',
    								path: '',
    								value: previousJson
    							}
    						],
    						state: previousState,
    						text: previousText,
    						textIsRepaired: previousTextIsRepaired,
    						selection: removeEditModeFromSelection(previousSelection)
    					},
    					redo: {
    						patch: [{ op: 'replace', path: '', value: json }],
    						state,
    						text,
    						textIsRepaired,
    						selection: removeEditModeFromSelection(selection)
    					}
    				});
    			} else {
    				history.add({
    					undo: {
    						state: previousState,
    						text: previousText,
    						textIsRepaired: previousTextIsRepaired,
    						selection: removeEditModeFromSelection(previousSelection)
    					},
    					redo: {
    						json,
    						state,
    						text,
    						textIsRepaired,
    						selection: removeEditModeFromSelection(selection)
    					}
    				});
    			}
    		} else {
    			if (previousJson !== undefined) {
    				history.add({
    					undo: {
    						json: previousJson,
    						state: previousState,
    						text: previousText,
    						textIsRepaired: previousTextIsRepaired,
    						selection: removeEditModeFromSelection(previousSelection)
    					},
    					redo: {
    						text,
    						textIsRepaired,
    						state,
    						selection: removeEditModeFromSelection(selection)
    					}
    				});
    			} // this cannot happen. Nothing to do, no change
    		}
    	}

    	function createDefaultSelection() {
    		return createSelection(json || {}, state, {
    			type: SELECTION_TYPE.MULTI,
    			anchorPath: [],
    			focusPath: []
    		});
    	}

    	function patch(operations, afterPatch) {
    		if (json === undefined) {
    			throw new Error('Cannot apply patch: no JSON');
    		}

    		const previousJson = json;
    		const previousState = state;
    		const previousText = text;
    		const previousTextIsRepaired = textIsRepaired;
    		const previousSelection = selection;
    		debug('patch', operations, afterPatch);
    		const undo = immutableJSONPatch.revertJSONPatch(json, operations);
    		const patched = documentStatePatch(json, state, operations);

    		const callback = typeof afterPatch === 'function'
    		? afterPatch(patched.json, patched.state, selection)
    		: undefined;

    		$$invalidate(7, json = callback && callback.json !== undefined
    		? callback.json
    		: patched.json);

    		$$invalidate(14, state = callback && callback.state !== undefined
    		? callback.state
    		: patched.state);

    		$$invalidate(8, text = undefined);
    		$$invalidate(21, textIsRepaired = false);

    		$$invalidate(9, selection = callback && callback.selection
    		? callback.selection
    		: createSelectionFromOperations(previousJson, previousState, operations));

    		// ensure the selection is valid
    		$$invalidate(9, selection = clearSelectionWhenNotExisting(selection, json));

    		history.add({
    			undo: {
    				patch: undo,
    				state: previousState,
    				text: previousText,
    				textIsRepaired: previousTextIsRepaired,
    				selection: removeEditModeFromSelection(previousSelection)
    			},
    			redo: {
    				patch: operations,
    				state,
    				text,
    				textIsRepaired,
    				selection: removeEditModeFromSelection(selection)
    			}
    		});

    		return {
    			json,
    			previousJson,
    			undo,
    			redo: operations
    		};
    	}

    	// TODO: cleanup logging
    	// $: debug('json', json)
    	// $: debug('state', state)
    	// $: debug('selection', selection)
    	function hasSelectionContents() {
    		return selection && (selection.type === SELECTION_TYPE.MULTI || selection.type === SELECTION_TYPE.KEY || selection.type === SELECTION_TYPE.VALUE);
    	}

    	function handleEditKey() {
    		if (readOnly || !selection) {
    			return;
    		}

    		$$invalidate(9, selection = createSelection(json, state, {
    			type: SELECTION_TYPE.KEY,
    			path: selection.focusPath,
    			edit: true
    		}));
    	}

    	function handleEditValue() {
    		if (readOnly || !selection) {
    			return;
    		}

    		$$invalidate(9, selection = createSelection(json, state, {
    			type: SELECTION_TYPE.VALUE,
    			path: selection.focusPath,
    			edit: true
    		}));
    	}

    	function handleToggleEnforceString() {
    		if (readOnly || !selection || selection.type !== SELECTION_TYPE.VALUE) {
    			return;
    		}

    		const path = selection.focusPath;
    		const statePath = path.concat(STATE_ENFORCE_STRING);
    		const enforceString = !immutableJSONPatch.getIn(state, statePath);
    		$$invalidate(14, state = immutableJSONPatch.setIn(state, statePath, enforceString, true));
    		const value = immutableJSONPatch.getIn(json, path);
    		const updatedValue = enforceString ? String(value) : stringConvert(value);

    		if (updatedValue !== value) {
    			handlePatch([
    				{
    					op: 'replace',
    					path: immutableJSONPatch.compileJSONPointer(path),
    					value: updatedValue
    				}
    			]);
    		}
    	}

    	function acceptAutoRepair() {
    		if (textIsRepaired && json !== undefined) {
    			handleChangeJson(json);
    		}

    		return { json, text };
    	}

    	async function handleCut(indent = true) {
    		if (readOnly || !hasSelectionContents()) {
    			return;
    		}

    		const cutIndentation = indent ? indentation : null;
    		const clipboard = selectionToPartialJson(json, selection, cutIndentation);

    		if (clipboard == null) {
    			return;
    		}

    		debug('cut', { selection, clipboard, indent });

    		try {
    			await navigator.clipboard.writeText(clipboard);
    		} catch(err) {
    			onError(err);
    		}

    		const { operations, newSelection } = createRemoveOperations(json, state, selection);
    		handlePatch(operations, () => ({ selection: newSelection }));
    	}

    	async function handleCopy(indent = true) {
    		const copyIndentation = indent ? indentation : null;
    		const clipboard = selectionToPartialJson(json, selection, copyIndentation);

    		if (clipboard == null) {
    			return;
    		}

    		debug('copy', { clipboard, indent });

    		try {
    			await navigator.clipboard.writeText(clipboard);
    		} catch(err) {
    			onError(err);
    		}
    	}

    	function handlePaste(event) {
    		event.preventDefault();

    		if (readOnly) {
    			return;
    		}

    		const clipboardText = event.clipboardData.getData('text/plain');

    		try {
    			doPaste(clipboardText);
    		} catch(err) {
    			openRepairModal(clipboardText, repairedText => {
    				debug('repaired pasted text: ', repairedText);
    				doPaste(repairedText);
    			});
    		}
    	}

    	function handlePasteFromMenu() {
    		open(
    			CopyPasteModal,
    			{},
    			{
    				...SIMPLE_MODAL_OPTIONS,
    				styleWindow: {
    					...SIMPLE_MODAL_OPTIONS.styleWindow,
    					width: '450px'
    				}
    			},
    			{ onClose: () => setTimeout(onFocus) }
    		);
    	}

    	function doPaste(clipboardText) {
    		if (json !== undefined) {
    			const selectionOrDefault = selection || createDefaultSelection();
    			const operations = insert(json, state, selectionOrDefault, clipboardText);

    			debug('paste', {
    				clipboardText,
    				operations,
    				selectionOrDefault
    			});

    			handlePatch(operations, (patchedJson, patchedState) => {
    				let updatedState = patchedState;

    				// expand newly inserted object/array
    				operations.filter(operation => isObjectOrArray(operation.value)).forEach(operation => {
    					const path = parseJSONPointerWithArrayIndices(json, operation.path);
    					updatedState = expandRecursive(patchedJson, updatedState, path);
    				});

    				return { state: updatedState };
    			});
    		} else {
    			debug('paste text', { clipboardText });

    			handleChangeText(clipboardText, (patchedJson, patchedState) => {
    				if (patchedJson) {
    					const path = [];

    					return {
    						state: expandRecursive(patchedJson, patchedState, path)
    					};
    				}
    			});
    		}
    	}

    	function openRepairModal(text, onApply) {
    		open(
    			JSONRepairModal,
    			{
    				text,
    				onParse: parsePartialJson,
    				onRepair: repairPartialJson,
    				onApply,
    				onRenderMenu,
    				onFocus,
    				onBlur
    			},
    			{
    				...SIMPLE_MODAL_OPTIONS,
    				styleWindow: {
    					...SIMPLE_MODAL_OPTIONS.styleWindow,
    					width: '600px',
    					height: '500px'
    				},
    				styleContent: { padding: 0, height: '100%' }
    			},
    			{ onClose: () => focus() }
    		);
    	}

    	function handleRemove() {
    		if (readOnly || !selection) {
    			return;
    		}

    		// in case of a selected key or value, we change the selection to the whole
    		// entry to remove this, we do not want to clear a key or value only.
    		const removeSelection = selection.type === SELECTION_TYPE.KEY || selection.type === SELECTION_TYPE.VALUE
    		? createSelection(json, state, {
    				type: SELECTION_TYPE.MULTI,
    				anchorPath: selection.anchorPath,
    				focusPath: selection.focusPath
    			})
    		: selection;

    		if (isEmpty(selection.focusPath)) {
    			// root selected -> clear complete document
    			debug('remove root', { selection });

    			const patchResult = null;
    			onChange({ text: '', json: undefined }, { text, json }, patchResult);
    		} else {
    			// remove selection
    			const { operations, newSelection } = createRemoveOperations(json, state, removeSelection);

    			debug('remove', { operations, selection, newSelection });
    			handlePatch(operations, () => ({ selection: newSelection }));
    		}
    	}

    	function handleDuplicate() {
    		if (readOnly || !hasSelectionContents() || isEmpty(selection.focusPath)) {
    			return; // root selected, cannot duplicate
    		}

    		debug('duplicate', { selection });
    		const operations = duplicate(json, state, selection.paths || [selection.focusPath]);
    		handlePatch(operations);
    	}

    	function handleExtract() {
    		if (readOnly || !selection || selection.type !== SELECTION_TYPE.MULTI && selection.type !== SELECTION_TYPE.VALUE || isEmpty(selection.focusPath)) {
    			return; // root selected, cannot extract
    		}

    		debug('extract', { selection });
    		const operations = extract(json, state, selection);

    		handlePatch(operations, (patchedJson, patchedState) => {
    			if (isObjectOrArray(patchedJson)) {
    				// expand extracted object/array
    				const path = [];

    				return {
    					state: expandRecursive(patchedJson, patchedState, path)
    				};
    			}
    		});

    		focus(); // TODO: find a more robust way to keep focus than sprinkling focus() everywhere
    	}

    	/**
     * @param {InsertType} type
     */
    	function handleInsert(type) {
    		if (readOnly || !selection) {
    			return;
    		}

    		const newValue = createNewValue(json, selection, type);

    		if (json !== undefined) {
    			const data = JSON.stringify(newValue);
    			const operations = insert(json, state, selection, data);
    			debug('handleInsert', { type, operations, newValue, data });
    			const operation = last(operations.filter(operation => operation.op === 'add' || operation.op === 'replace'));

    			handlePatch(operations, (patchedJson, patchedState) => {
    				// TODO: extract determining the newSelection in a separate function
    				if (operation) {
    					const path = parseJSONPointerWithArrayIndices(patchedJson, operation.path);

    					if (isObjectOrArray(newValue)) {
    						return {
    							state: expandWithCallback(patchedJson, patchedState, path, expandAll),
    							selection: createSelection(patchedJson || {}, patchedState, { type: SELECTION_TYPE.INSIDE, path })
    						};
    					}

    					if (newValue === '') {
    						// open the newly inserted value in edit mode
    						const parent = !isEmpty(path)
    						? immutableJSONPatch.getIn(patchedJson, initial(path))
    						: null;

    						return {
    							selection: createSelection(patchedJson, patchedState, {
    								type: isObject$1(parent)
    								? SELECTION_TYPE.KEY
    								: SELECTION_TYPE.VALUE,
    								path,
    								edit: true
    							})
    						};
    					}

    					return undefined;
    				}
    			});

    			if (operation) {
    				focus(); // TODO: find a more robust way to keep focus than sprinkling focus() everywhere

    				if (newValue === '') {
    					// open the newly inserted value in edit mode
    					tick().then(() => {
    						setTimeout(() => insertActiveElementContents('', true));
    					});
    				}
    			}
    		} else {
    			// document is empty or invalid (in that case it has text but no json)
    			debug('handleInsert', { type, newValue });

    			const path = [];

    			handleChangeJson(newValue, (patchedJson, patchedState) => ({
    				state: expandRecursive(patchedJson, patchedState, path),
    				selection: createSelection(patchedJson, patchedState, { type: SELECTION_TYPE.INSIDE, path })
    			}));

    			focus(); // TODO: find a more robust way to keep focus than sprinkling focus() everywhere
    		}
    	}

    	/**
     * @param {'value' | 'object' | 'array' | 'structure'} type
     */
    	function handleInsertFromContextMenu(type) {
    		if (selection.type === SELECTION_TYPE.KEY) {
    			// in this case, we do not want to rename the key, but replace the property
    			$$invalidate(9, selection = createSelection(json, state, {
    				type: SELECTION_TYPE.VALUE,
    				path: selection.focusPath
    			}));
    		}

    		handleInsert(type);
    	}

    	/**
     * @param {'value' | 'object' | 'array'} type
     */
    	function handleConvert(type) {
    		if (readOnly || !selection) {
    			return;
    		}

    		if (!canConvert(selection)) {
    			onError(new Error(`Cannot convert current selection to ${type}`));
    			return;
    		}

    		try {
    			const path = selection.anchorPath;
    			const currentValue = immutableJSONPatch.getIn(json, path);
    			const convertedValue = convertValue(currentValue, type);

    			if (convertedValue === currentValue) {
    				// no change, do nothing
    				return;
    			}

    			const operations = [
    				{
    					op: 'replace',
    					path: immutableJSONPatch.compileJSONPointer(path),
    					value: convertedValue
    				}
    			];

    			debug('handleConvert', { selection, path, type, operations });

    			handlePatch(operations, (patchedJson, patchedState) => {
    				// expand converted object/array
    				return {
    					state: expandRecursive(patchedJson, patchedState, selection.focusPath)
    				};
    			});

    			focus(); // TODO: find a more robust way to keep focus than sprinkling focus() everywhere
    		} catch(err) {
    			onError(err);
    		}
    	}

    	function handleInsertBefore() {
    		const selectionBefore = getSelectionUp(json, state, selection, false);
    		const parentPath = initial(selection.focusPath);

    		if (!isEmpty(selectionBefore.focusPath) && isEqual(parentPath, initial(selectionBefore.focusPath))) {
    			$$invalidate(9, selection = createSelection(json, state, {
    				type: SELECTION_TYPE.AFTER,
    				path: selectionBefore.focusPath
    			}));
    		} else {
    			$$invalidate(9, selection = createSelection(json, state, {
    				type: SELECTION_TYPE.INSIDE,
    				path: parentPath
    			}));
    		}

    		debug('insert before', { selection, selectionBefore, parentPath });
    		tick().then(handleContextMenu);
    	}

    	function handleInsertAfter() {
    		const path = selection.paths
    		? last(selection.paths)
    		: selection.focusPath;

    		debug('insert after', path);
    		$$invalidate(9, selection = createSelection(json, state, { type: SELECTION_TYPE.AFTER, path }));
    		tick().then(handleContextMenu);
    	}

    	/**
     * Insert (append or replace) the text contents of the current active element
     * @param {string} char
     * @param {boolean} replaceContents
     */
    	function insertActiveElementContents(char, replaceContents) {
    		const activeElement = getWindow(refJsonEditor).document.activeElement;

    		if (activeElement.isContentEditable) {
    			activeElement.textContent = replaceContents
    			? char
    			: activeElement.textContent + char;

    			setCursorToEnd(activeElement);
    		} // FIXME: should trigger an oninput, else the component will not update it's newKey/newValue variable
    	}

    	async function handleInsertCharacter(char) {
    		// a regular key like a, A, _, etc is entered.
    		// Replace selected contents with a new value having this first character as text
    		if (readOnly || !selection) {
    			return;
    		}

    		if (selection.type === SELECTION_TYPE.KEY) {
    			// only replace contents when not yet in edit mode (can happen when entering
    			// multiple characters very quickly after each other due to the async handling)
    			const replaceContents = !selection.edit;

    			$$invalidate(9, selection = { ...selection, edit: true });
    			await tick();
    			setTimeout(() => insertActiveElementContents(char, replaceContents));
    			return;
    		}

    		if (char === '{') {
    			handleInsert('object');
    		} else if (char === '[') {
    			handleInsert('array');
    		} else {
    			if (selection.type === SELECTION_TYPE.VALUE) {
    				if (!isObjectOrArray(immutableJSONPatch.getIn(json, selection.focusPath))) {
    					// only replace contents when not yet in edit mode (can happen when entering
    					// multiple characters very quickly after each other due to the async handling)
    					const replaceContents = !selection.edit;

    					$$invalidate(9, selection = { ...selection, edit: true });
    					await tick();
    					setTimeout(() => insertActiveElementContents(char, replaceContents));
    				} // TODO: replace the object/array with editing a text in edit mode?
    				//  (Ideally this this should not create an entry in history though,
    			} else //  a patch to change the object/array into a value)
    			{
    				await handleInsertValueWithCharacter(char); //  which isn't really possible right now since we have to apply
    			}
    		}
    	}

    	async function handleInsertValueWithCharacter(char) {
    		if (readOnly || !selection) {
    			return;
    		}

    		// first insert a new value
    		handleInsert('value');

    		// only replace contents when not yet in edit mode (can happen when entering
    		// multiple characters very quickly after each other due to the async handling)
    		const replaceContents = !selection.edit;

    		// next, open the new value in edit mode and apply the current character
    		const path = selection.focusPath;

    		const parent = immutableJSONPatch.getIn(json, initial(path));

    		$$invalidate(9, selection = createSelection(json, state, {
    			type: Array.isArray(parent) || !parent || selection.type === SELECTION_TYPE.VALUE
    			? SELECTION_TYPE.VALUE
    			: SELECTION_TYPE.KEY,
    			path,
    			edit: true
    		}));

    		await tick();
    		setTimeout(() => insertActiveElementContents(char, replaceContents));
    	}

    	function handleUndo() {
    		if (readOnly) {
    			return;
    		}

    		if (!history.getState().canUndo) {
    			return;
    		}

    		const item = history.undo();

    		if (!item) {
    			return;
    		}

    		const previousContent = { json, text };
    		$$invalidate(9, selection = item.undo.selection);

    		$$invalidate(7, json = item.undo.patch
    		? immutableJSONPatch.immutableJSONPatch(json, item.undo.patch)
    		: item.undo.json);

    		$$invalidate(14, state = item.undo.state);
    		$$invalidate(8, text = item.undo.text);
    		$$invalidate(21, textIsRepaired = item.undo.textIsRepaired);
    		debug('undo', { item, json, state, selection });

    		const patchResult = {
    			json,
    			previousJson: previousContent.json,
    			redo: item.undo.patch,
    			undo: item.redo.patch
    		};

    		emitOnChange(previousContent, patchResult);
    		focus();

    		if (selection) {
    			scrollTo(selection.focusPath);
    		}
    	}

    	function handleRedo() {
    		if (readOnly) {
    			return;
    		}

    		if (!history.getState().canRedo) {
    			return;
    		}

    		const item = history.redo();

    		if (!item) {
    			return;
    		}

    		const previousContent = { json, text };
    		$$invalidate(9, selection = item.redo.selection);

    		$$invalidate(7, json = item.redo.patch
    		? immutableJSONPatch.immutableJSONPatch(json, item.redo.patch)
    		: item.redo.json);

    		$$invalidate(14, state = item.redo.state);
    		$$invalidate(8, text = item.redo.text);
    		$$invalidate(21, textIsRepaired = item.redo.textIsRepaired);
    		debug('redo', { item, json, state, selection });

    		const patchResult = {
    			json,
    			previousJson: previousContent.json,
    			redo: item.redo.patch,
    			undo: item.undo.patch
    		};

    		emitOnChange(previousContent, patchResult);
    		focus();

    		if (selection) {
    			scrollTo(selection.focusPath);
    		}
    	}

    	function openSortModal(selectedPath) {
    		if (readOnly) {
    			return;
    		}

    		modalOpen = true;

    		onSortModal({
    			id: sortModalId,
    			json,
    			selectedPath,
    			onSort: async operations => {
    				debug('onSort', selectedPath, operations);

    				handlePatch(operations, (patchedJson, patchedState) => ({
    					// expand the newly replaced array and select it
    					state: expandRecursive(patchedJson, patchedState, selectedPath),
    					selection: createSelection(patchedJson, patchedState, {
    						type: SELECTION_TYPE.VALUE,
    						path: selectedPath
    					})
    				}));
    			},
    			onClose: () => {
    				modalOpen = false;
    				focus();
    			}
    		});
    	}

    	function handleSortSelection() {
    		if (!selection) {
    			return;
    		}

    		const selectedPath = findRootPath(json, selection);
    		openSortModal(selectedPath);
    	}

    	function handleSortAll() {
    		const selectedPath = [];
    		openSortModal(selectedPath);
    	}

    	function openTransformModal({ id, selectedPath, onTransform, onClose }) {
    		modalOpen = true;

    		onTransformModal({
    			id: id || transformModalId,
    			json,
    			selectedPath,
    			onTransform: onTransform
    			? operations => {
    					onTransform({
    						operations,
    						json,
    						transformedJson: immutableJSONPatch.immutableJSONPatch(json, operations)
    					});
    				}
    			: operations => {
    					debug('onTransform', selectedPath, operations);

    					handlePatch(operations, (patchedJson, patchedState) => ({
    						// expand the newly replaced array and select it
    						state: expandRecursive(patchedJson, patchedState, selectedPath),
    						selection: createSelection(patchedJson, patchedState, {
    							type: SELECTION_TYPE.VALUE,
    							path: selectedPath
    						})
    					}));
    				},
    			onClose: () => {
    				modalOpen = false;
    				focus();

    				if (onClose) {
    					onClose();
    				}
    			}
    		});
    	}

    	function handleTransformSelection() {
    		if (!selection) {
    			return;
    		}

    		const selectedPath = findRootPath(json, selection);
    		openTransformModal({ selectedPath });
    	}

    	function handleTransformAll() {
    		openTransformModal({ selectedPath: [] });
    	}

    	async function scrollTo(path) {
    		$$invalidate(14, state = expandPath(json, state, path));
    		await tick();
    		const elem = findElement(path);

    		if (elem) {
    			debug('scrollTo', { path, elem, refContents });
    			const offset = -(refContents.getBoundingClientRect().height / 4);

    			jump(elem, {
    				container: refContents,
    				offset,
    				duration: SCROLL_DURATION
    			});
    		}
    	}

    	function findElement(path) {
    		return refContents
    		? refContents.querySelector(`div[data-path="${encodeDataPath(path)}"]`)
    		: null;
    	}

    	/**
     * If given path is outside of the visible viewport, scroll up/down.
     * When the path is already in view, nothing is done
     * @param {Path} path
     */
    	function scrollIntoView(path) {
    		const elem = findElement(path);

    		if (!elem || !refContents) {
    			return;
    		}

    		const viewPortRect = refContents.getBoundingClientRect();
    		const elemRect = elem.getBoundingClientRect();
    		const margin = 20;

    		const elemHeight = isObjectOrArray(immutableJSONPatch.getIn(json, path))
    		? margin
    		: elemRect.height; // do not use real height when array or object

    		if (elemRect.top < viewPortRect.top + margin) {
    			// scroll down
    			jump(elem, {
    				container: refContents,
    				offset: -margin,
    				duration: 0
    			});
    		} else if (elemRect.top + elemHeight > viewPortRect.bottom - margin) {
    			// scroll up
    			jump(elem, {
    				container: refContents,
    				offset: -(viewPortRect.height - elemHeight - margin),
    				duration: 0
    			});
    		}
    	}

    	/**
     * @param {Content} previousContent
     * @param {JSONPatchResult | null} patchResult
     */
    	function emitOnChange(previousContent, patchResult) {
    		// make sure we cannot send an invalid contents like having both
    		// json and text defined, or having none defined
    		if (text !== undefined) {
    			onChange({ text, json: undefined }, previousContent, patchResult);
    		} else if (json !== undefined) {
    			onChange({ text: undefined, json }, previousContent, patchResult);
    		}
    	}

    	/**
     * @param {JSONPatchDocument} operations
     * @param {AfterPatchCallback} [afterPatch]
     */
    	function handlePatch(operations, afterPatch) {
    		if (readOnly) {
    			return;
    		}

    		debug('handlePatch', operations, afterPatch);
    		const previousContent = { json, text };
    		const patchResult = patch(operations, afterPatch);
    		$$invalidate(15, pastedJson = undefined);
    		emitOnChange(previousContent, patchResult);
    		return patchResult;
    	}

    	/**
     * @param {JSONData} updatedJson
     * @param {AfterPatchCallback} [afterPatch]
     */
    	function handleChangeJson(updatedJson, afterPatch) {
    		const previousState = state;
    		const previousJson = json;
    		const previousText = text;
    		const previousContent = { json, text };
    		const previousTextIsRepaired = textIsRepaired;
    		const previousSelection = selection;
    		const updatedState = syncState(updatedJson, previousState, [], expandMinimal);

    		const callback = typeof afterPatch === 'function'
    		? afterPatch(updatedJson, updatedState, selection)
    		: undefined;

    		$$invalidate(7, json = callback && callback.json !== undefined
    		? callback.json
    		: updatedJson);

    		$$invalidate(14, state = callback && callback.state !== undefined
    		? callback.state
    		: updatedState);

    		$$invalidate(8, text = undefined);
    		$$invalidate(21, textIsRepaired = false);

    		$$invalidate(9, selection = callback && callback.selection
    		? callback.selection
    		: selection);

    		// make sure the selection is valid
    		$$invalidate(9, selection = clearSelectionWhenNotExisting(selection, json));

    		addHistoryItem({
    			previousJson,
    			previousState,
    			previousText,
    			previousTextIsRepaired,
    			previousSelection
    		});

    		// TODO: work out the patchResult when fully replacing json (is just a replace of the root)
    		const patchResult = null;

    		emitOnChange(previousContent, patchResult);
    	}

    	/**
     * @param {string} updatedText
     * @param {AfterPatchCallback} [afterPatch]
     */
    	function handleChangeText(updatedText, afterPatch) {
    		const previousState = state;
    		const previousJson = json;
    		const previousText = text;
    		const previousContent = { json, text };
    		const previousTextIsRepaired = textIsRepaired;
    		const previousSelection = selection;

    		try {
    			$$invalidate(7, json = JSON.parse(updatedText));
    			$$invalidate(14, state = syncState(json, previousState, [], expandMinimal));
    			$$invalidate(8, text = undefined);
    			$$invalidate(21, textIsRepaired = false);
    		} catch(err) {
    			try {
    				$$invalidate(7, json = JSON.parse(jsonrepair_min(updatedText)));
    				$$invalidate(14, state = syncState(json, previousState, [], expandMinimal));
    				$$invalidate(8, text = updatedText);
    				$$invalidate(21, textIsRepaired = true);
    			} catch(err) {
    				// no valid JSON, will show empty document or invalid json
    				$$invalidate(7, json = undefined);

    				$$invalidate(14, state = syncState(json, createState(json), [], expandMinimal));
    				$$invalidate(8, text = updatedText);
    				$$invalidate(21, textIsRepaired = false);
    			}
    		}

    		if (typeof afterPatch === 'function') {
    			const callback = afterPatch(json, state, selection);
    			$$invalidate(7, json = callback && callback.json ? callback.json : json);
    			$$invalidate(14, state = callback && callback.state ? callback.state : state);

    			$$invalidate(9, selection = callback && callback.selection
    			? callback.selection
    			: selection);
    		}

    		// ensure the selection is valid
    		$$invalidate(9, selection = clearSelectionWhenNotExisting(selection, json));

    		addHistoryItem({
    			previousJson,
    			previousState,
    			previousText,
    			previousTextIsRepaired,
    			previousSelection
    		});

    		// no JSON patch actions available in text mode
    		const patchResult = null;

    		emitOnChange(previousContent, patchResult);
    	}

    	/**
     * Expand recursively when the expanded contents is small enough,
     * else expand in a minimalistic way
     * @param json
     * @param state
     * @param path
     * @returns {JSONData}
     */
    	function expandRecursive(json, state, path) {
    		const expandContents = immutableJSONPatch.getIn(json, path);
    		const expandAllRecursive = !isLargeContent({ json: expandContents }, MAX_DOCUMENT_SIZE_EXPAND_ALL);
    		const expandCallback = expandAllRecursive ? expandAll : expandMinimal;
    		return expandWithCallback(json, state, path, expandCallback);
    	}

    	/**
     * Toggle expanded state of a node
     * @param {Path} path
     * @param {boolean} expanded  True to expand, false to collapse
     * @param {boolean} [recursive=false]  Only applicable when expanding
     */
    	function handleExpand(path, expanded, recursive = false) {
    		if (expanded) {
    			$$invalidate(14, state = expandWithCallback(json, state, path, recursive ? expandAll : expandMinimal));
    		} else {
    			$$invalidate(14, state = collapse(json, state, path));
    		}

    		if (selection && !expanded) {
    			// check whether the selection is still visible and not collapsed
    			if (isSelectionInsidePath(selection, path)) {
    				// remove selection when not visible anymore
    				$$invalidate(9, selection = null);
    			}
    		}

    		// set focus to the hidden input, so we can capture quick keys like Ctrl+X, Ctrl+C, Ctrl+V
    		setTimeout(() => {
    			if (!activeElementIsChildOf(refJsonEditor)) {
    				focus();
    			}
    		});
    	}

    	function handleExpandAll() {
    		handleExpand([], true, true);
    	}

    	function handleCollapseAll() {
    		handleExpand([], false, true);
    	}

    	/**
     * @param {SelectionSchema} selectionSchema
     * @param {{ ensureFocus?: boolean }} options
     */
    	function handleSelect(selectionSchema, options) {
    		if (selectionSchema) {
    			$$invalidate(9, selection = createSelection(json, state, selectionSchema));
    		} else {
    			$$invalidate(9, selection = null);
    		}

    		// set focus to the hidden input, so we can capture quick keys like Ctrl+X, Ctrl+C, Ctrl+V
    		// we do this after a setTimeout in case the selection was made by clicking a button
    		if ((options === null || options === void 0
    		? void 0
    		: options.ensureFocus) !== false) {
    			setTimeout(() => focus());
    		}
    	}

    	/**
     * @param {boolean} findAndReplace
     */
    	function openFind(findAndReplace) {
    		debug('openFind', { findAndReplace });
    		$$invalidate(16, showSearch = false);
    		$$invalidate(17, showReplace = false);

    		tick().then(() => {
    			// trick to make sure the focus goes to the search box
    			$$invalidate(16, showSearch = true);

    			$$invalidate(17, showReplace = findAndReplace);
    		});
    	}

    	function handleExpandSection(path, section) {
    		debug('handleExpandSection', path, section);
    		$$invalidate(14, state = expandSection(json, state, path, section));
    	}

    	function handlePasteJson(newPastedJson) {
    		debug('pasted json as text', newPastedJson);
    		$$invalidate(15, pastedJson = newPastedJson);
    	}

    	function handleKeyDown(event) {
    		// get key combo, and normalize key combo from Mac: replace "Command+X" with "Ctrl+X" etc
    		const combo = keyComboFromEvent(event).replace(/^Command\+/, 'Ctrl+');

    		const keepAnchorPath = event.shiftKey;

    		if (combo === 'Ctrl+X') {
    			// cut formatted
    			event.preventDefault();

    			handleCut(true);
    		}

    		if (combo === 'Ctrl+Shift+X') {
    			// cut compact
    			event.preventDefault();

    			handleCut(false);
    		}

    		if (combo === 'Ctrl+C') {
    			// copy formatted
    			event.preventDefault();

    			handleCopy(true);
    		}

    		if (combo === 'Ctrl+Shift+C') {
    			// copy compact
    			event.preventDefault();

    			handleCopy(false);
    		}

    		// Ctrl+V (paste) is handled by the on:paste event
    		if (combo === 'Ctrl+D') {
    			event.preventDefault();
    			handleDuplicate();
    		}

    		if (combo === 'Delete' || combo === 'Backspace') {
    			event.preventDefault();
    			handleRemove();
    		}

    		if (combo === 'Insert') {
    			event.preventDefault();
    			handleInsert('structure');
    		}

    		if (combo === 'Ctrl+A') {
    			event.preventDefault();
    			$$invalidate(9, selection = selectAll$1());
    		}

    		if (combo === 'Ctrl+Q') {
    			handleContextMenu(event);
    		}

    		if (combo === 'Up' || combo === 'Shift+Up') {
    			event.preventDefault();

    			$$invalidate(9, selection = selection
    			? getSelectionUp(json, state, selection, keepAnchorPath, true) || selection
    			: getInitialSelection(json, state));

    			scrollIntoView(selection.focusPath);
    		}

    		if (combo === 'Down' || combo === 'Shift+Down') {
    			event.preventDefault();

    			$$invalidate(9, selection = selection
    			? getSelectionDown(json, state, selection, keepAnchorPath, true) || selection
    			: getInitialSelection(json, state));

    			scrollIntoView(selection.focusPath);
    		}

    		if (combo === 'Left' || combo === 'Shift+Left') {
    			event.preventDefault();

    			$$invalidate(9, selection = selection
    			? getSelectionLeft(json, state, selection, keepAnchorPath, !readOnly) || selection
    			: getInitialSelection(json, state));

    			scrollIntoView(selection.focusPath);
    		}

    		if (combo === 'Right' || combo === 'Shift+Right') {
    			event.preventDefault();

    			$$invalidate(9, selection = selection
    			? getSelectionRight(json, state, selection, keepAnchorPath, !readOnly) || selection
    			: getInitialSelection(json, state));

    			scrollIntoView(selection.focusPath);
    		}

    		if (combo === 'Enter' && selection) {
    			// when the selection consists of a single Array item, change selection to editing its value
    			if (!readOnly && selection.type === SELECTION_TYPE.MULTI && selection.paths.length === 1) {
    				const path = selection.focusPath;
    				const parent = immutableJSONPatch.getIn(json, initial(path));

    				if (Array.isArray(parent)) {
    					// change into selection of the value
    					$$invalidate(9, selection = createSelection(json, state, { type: SELECTION_TYPE.VALUE, path }));
    				}
    			}

    			if (!readOnly && selection.type === SELECTION_TYPE.KEY) {
    				// go to key edit mode
    				event.preventDefault();

    				$$invalidate(9, selection = { ...selection, edit: true });
    			}

    			if (selection.type === SELECTION_TYPE.VALUE) {
    				event.preventDefault();
    				const value = immutableJSONPatch.getIn(json, selection.focusPath);

    				if (isObjectOrArray(value)) {
    					// expand object/array
    					handleExpand(selection.focusPath, true);
    				} else {
    					if (!readOnly) {
    						// go to value edit mode
    						$$invalidate(9, selection = { ...selection, edit: true });
    					}
    				}
    			}
    		}

    		if (combo.length === (combo.startsWith('Shift+') ? 7 : 1) && selection) {
    			// a regular key like a, A, _, etc is entered.
    			// Replace selected contents with a new value having this first character as text
    			event.preventDefault();

    			handleInsertCharacter(event.key);
    			return;
    		}

    		if (combo === 'Enter' && (selection.type === SELECTION_TYPE.AFTER || selection.type === SELECTION_TYPE.INSIDE)) {
    			// Enter on an insert area -> open the area in edit mode
    			event.preventDefault();

    			handleInsertCharacter('');
    			return;
    		}

    		if (combo === 'Ctrl+Enter' && selection && selection.type === SELECTION_TYPE.VALUE) {
    			const value = immutableJSONPatch.getIn(json, selection.focusPath);

    			if (isUrl(value)) {
    				// open url in new page
    				window.open(value, '_blank');
    			}
    		}

    		if (combo === 'Escape' && selection) {
    			event.preventDefault();
    			$$invalidate(9, selection = null);
    		}

    		if (combo === 'Ctrl+F') {
    			event.preventDefault();
    			openFind(false);
    		}

    		if (combo === 'Ctrl+H') {
    			event.preventDefault();
    			openFind(true);
    		}

    		if (combo === 'Ctrl+Z') {
    			event.preventDefault();

    			// TODO: find a better way to restore focus
    			const activeElement = document.activeElement;

    			if (activeElement && activeElement.blur && activeElement.focus) {
    				activeElement.blur();

    				setTimeout(() => {
    					handleUndo();
    					setTimeout(() => activeElement.select());
    				});
    			} else {
    				handleUndo();
    			}
    		}

    		if (combo === 'Ctrl+Shift+Z') {
    			event.preventDefault();

    			// TODO: find a better way to restore focus
    			const activeElement = document.activeElement;

    			if (activeElement && activeElement.blur && activeElement.focus) {
    				activeElement.blur();

    				setTimeout(() => {
    					handleRedo();
    					setTimeout(() => activeElement.select());
    				});
    			} else {
    				handleRedo();
    			}
    		}
    	}

    	function handleMouseDown(event) {
    		debug('handleMouseDown', event);

    		// TODO: ugly to have to have two setTimeout here. Without it, hiddenInput will blur
    		setTimeout(() => {
    			setTimeout(() => {
    				if (!hasFocus && !isChildOfNodeName(event.target, 'BUTTON')) {
    					// for example when clicking on the empty area in the main menu
    					focus();

    					if (!selection && json === undefined && (text === '' || text === undefined)) {
    						$$invalidate(9, selection = createDefaultSelection());
    					}
    				}
    			});
    		});
    	}

    	/**
     * @param {ContextMenuProps} contextMenuProps
     */
    	function openContextMenu({ anchor, left, top, width, height, offsetTop, offsetLeft, showTip }) {
    		const props = {
    			json,
    			state,
    			selection,
    			showTip,
    			onEditKey: handleEditKey,
    			onEditValue: handleEditValue,
    			onToggleEnforceString: handleToggleEnforceString,
    			onCut: handleCut,
    			onCopy: handleCopy,
    			onPaste: handlePasteFromMenu,
    			onRemove: handleRemove,
    			onDuplicate: handleDuplicate,
    			onExtract: handleExtract,
    			onInsertBefore: handleInsertBefore,
    			onInsert: handleInsertFromContextMenu,
    			onConvert: handleConvert,
    			onInsertAfter: handleInsertAfter,
    			onSort: handleSortSelection,
    			onTransform: handleTransformSelection,
    			onCloseContextMenu() {
    				closeAbsolutePopup();
    				focus();
    			}
    		};

    		modalOpen = true;

    		openAbsolutePopup(ContextMenu, props, {
    			left,
    			top,
    			offsetTop,
    			offsetLeft,
    			width,
    			height,
    			anchor,
    			closeOnOuterClick: true,
    			onClose: () => {
    				modalOpen = false;
    				focus();
    			}
    		});
    	}

    	function handleContextMenu(event) {
    		if (readOnly || (selection === null || selection === void 0
    		? void 0
    		: selection.edit)) {
    			return;
    		}

    		if (event) {
    			event.stopPropagation();
    			event.preventDefault();
    		}

    		if (event && event.type === 'contextmenu' && event.target !== refHiddenInput) {
    			// right mouse click to open context menu
    			openContextMenu({
    				left: event.clientX,
    				top: event.clientY,
    				width: CONTEXT_MENU_WIDTH,
    				height: CONTEXT_MENU_HEIGHT,
    				showTip: false
    			});
    		} else {
    			// type === 'keydown' (from the quick key Ctrl+Q)
    			// or target is hidden input -> context menu button on keyboard
    			const anchor = refContents === null || refContents === void 0
    			? void 0
    			: refContents.querySelector('.jse-context-menu-button.jse-selected');

    			if (anchor) {
    				openContextMenu({
    					anchor,
    					offsetTop: 2,
    					width: CONTEXT_MENU_WIDTH,
    					height: CONTEXT_MENU_HEIGHT,
    					showTip: false
    				});
    			} else {
    				// fallback on just displaying the ContextMenu top left
    				const rect = refContents === null || refContents === void 0
    				? void 0
    				: refContents.getBoundingClientRect();

    				if (rect) {
    					openContextMenu({
    						top: rect.top + 2,
    						left: rect.left + 2,
    						width: CONTEXT_MENU_WIDTH,
    						height: CONTEXT_MENU_HEIGHT,
    						showTip: false
    					});
    				}
    			}
    		}

    		return false;
    	}

    	function handleContextMenuFromTreeMenu(event) {
    		if (readOnly) {
    			return;
    		}

    		openContextMenu({
    			anchor: findParentWithNodeName(event.target, 'BUTTON'),
    			offsetTop: 0,
    			width: CONTEXT_MENU_WIDTH,
    			height: CONTEXT_MENU_HEIGHT,
    			showTip: true
    		});
    	}

    	async function handleParsePastedJson() {
    		debug('apply pasted json', pastedJson);
    		const { path, contents } = pastedJson;

    		// exit edit mode
    		$$invalidate(9, selection = createSelection(json, state, { type: SELECTION_TYPE.VALUE, path }));

    		await tick();

    		// replace the value with the JSON object/array
    		const operations = [
    			{
    				op: 'replace',
    				path: immutableJSONPatch.compileJSONPointer(path),
    				value: contents
    			}
    		];

    		handlePatch(operations, (patchedJson, patchedState) => {
    			return {
    				state: expandRecursive(patchedJson, patchedState, path)
    			};
    		});
    	}

    	function handleClearPastedJson() {
    		debug('clear pasted json');
    		$$invalidate(15, pastedJson = undefined);
    	}

    	function handleNavigationBarSelect(newSelection) {
    		$$invalidate(9, selection = newSelection);
    		focus();
    		scrollTo(newSelection.focusPath);
    	}

    	function focus() {
    		// with just .focus(), sometimes the input doesn't react on onpaste events
    		// in Chrome when having a large document open and then doing cut/paste.
    		// Calling both .focus() and .select() did solve this issue.
    		if (refHiddenInput) {
    			refHiddenInput.focus();
    			refHiddenInput.select();
    		}
    	}

    	function handleWindowMouseDown(event) {
    		const outsideEditor = !isChildOf(event.target, element => element === refJsonEditor);

    		if (outsideEditor) {
    			if (selection && selection.edit) {
    				debug('click outside the editor, stop edit mode');
    				$$invalidate(9, selection = { ...selection, edit: false });

    				if (hasFocus && refHiddenInput) {
    					refHiddenInput.focus();
    					refHiddenInput.blur();
    				}

    				// This is ugly: we need to wait until the EditableDiv has triggered onSelect,
    				//  and have onSelect call refHiddenInput.focus(). After that we can call blur()
    				//  to remove the focus.
    				// TODO: find a better solution
    				tick().then(() => {
    					setTimeout(() => {
    						if (refHiddenInput) {
    							refHiddenInput.blur();
    						}
    					});
    				});
    			}
    		}
    	}

    	function getFullJson() {
    		return json;
    	}

    	function getFullState() {
    		return state;
    	}

    	function getFullSelection() {
    		return selection;
    	}

    	const writable_props = [
    		'readOnly',
    		'externalContent',
    		'mainMenuBar',
    		'navigationBar',
    		'escapeControlCharacters',
    		'escapeUnicodeCharacters',
    		'validator',
    		'indentation',
    		'onError',
    		'onChange',
    		'onRenderValue',
    		'onRequestRepair',
    		'onRenderMenu',
    		'onClassName',
    		'onFocus',
    		'onBlur',
    		'onSortModal',
    		'onTransformModal'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TreeMode> was created with unknown prop '${key}'`);
    	});

    	function treemenu_showSearch_binding(value) {
    		showSearch = value;
    		$$invalidate(16, showSearch);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refHiddenInput = $$value;
    			$$invalidate(12, refHiddenInput);
    		});
    	}

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refContents = $$value;
    			$$invalidate(6, refContents);
    		});
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refJsonEditor = $$value;
    			$$invalidate(13, refJsonEditor);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('readOnly' in $$props) $$invalidate(0, readOnly = $$props.readOnly);
    		if ('externalContent' in $$props) $$invalidate(49, externalContent = $$props.externalContent);
    		if ('mainMenuBar' in $$props) $$invalidate(1, mainMenuBar = $$props.mainMenuBar);
    		if ('navigationBar' in $$props) $$invalidate(2, navigationBar = $$props.navigationBar);
    		if ('escapeControlCharacters' in $$props) $$invalidate(50, escapeControlCharacters = $$props.escapeControlCharacters);
    		if ('escapeUnicodeCharacters' in $$props) $$invalidate(51, escapeUnicodeCharacters = $$props.escapeUnicodeCharacters);
    		if ('validator' in $$props) $$invalidate(52, validator = $$props.validator);
    		if ('indentation' in $$props) $$invalidate(53, indentation = $$props.indentation);
    		if ('onError' in $$props) $$invalidate(54, onError = $$props.onError);
    		if ('onChange' in $$props) $$invalidate(55, onChange = $$props.onChange);
    		if ('onRenderValue' in $$props) $$invalidate(56, onRenderValue = $$props.onRenderValue);
    		if ('onRequestRepair' in $$props) $$invalidate(3, onRequestRepair = $$props.onRequestRepair);
    		if ('onRenderMenu' in $$props) $$invalidate(4, onRenderMenu = $$props.onRenderMenu);
    		if ('onClassName' in $$props) $$invalidate(57, onClassName = $$props.onClassName);
    		if ('onFocus' in $$props) $$invalidate(58, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(59, onBlur = $$props.onBlur);
    		if ('onSortModal' in $$props) $$invalidate(60, onSortModal = $$props.onSortModal);
    		if ('onTransformModal' in $$props) $$invalidate(61, onTransformModal = $$props.onTransformModal);
    	};

    	$$self.$capture_state = () => ({
    		createAutoScrollHandler,
    		faCheck,
    		faCode,
    		faWrench,
    		createDebug,
    		compileJSONPointer: immutableJSONPatch.compileJSONPointer,
    		existsIn: immutableJSONPatch.existsIn,
    		getIn: immutableJSONPatch.getIn,
    		immutableJSONPatch: immutableJSONPatch.immutableJSONPatch,
    		revertJSONPatch: immutableJSONPatch.revertJSONPatch,
    		setIn: immutableJSONPatch.setIn,
    		jsonrepair: jsonrepair_min,
    		initial,
    		isEmpty,
    		isEqual,
    		last,
    		noop: noop$1,
    		throttle,
    		uniqueId,
    		getContext,
    		onDestroy,
    		onMount,
    		tick,
    		createJump,
    		CONTEXT_MENU_HEIGHT,
    		CONTEXT_MENU_WIDTH,
    		MAX_SEARCH_RESULTS,
    		SCROLL_DURATION,
    		SEARCH_UPDATE_THROTTLE,
    		SIMPLE_MODAL_OPTIONS,
    		STATE_ENFORCE_STRING,
    		createState,
    		documentStatePatch,
    		expandPath,
    		expandSection,
    		syncState,
    		createHistory,
    		createNewValue,
    		createRemoveOperations,
    		duplicate,
    		extract,
    		insert,
    		createSearchAndReplaceAllOperations,
    		createSearchAndReplaceOperations,
    		search,
    		searchNext,
    		searchPrevious,
    		updateSearchResult,
    		createRecursiveSelection,
    		createSelection,
    		findRootPath,
    		getInitialSelection,
    		getSelectionDown,
    		getSelectionLeft,
    		getSelectionRight,
    		getSelectionUp,
    		isSelectionInsidePath,
    		removeEditModeFromSelection,
    		selectAll: selectAll$1,
    		SELECTION_TYPE,
    		selectionToPartialJson,
    		mapValidationErrors,
    		activeElementIsChildOf,
    		createNormalizationFunctions,
    		encodeDataPath,
    		findParentWithNodeName,
    		getWindow,
    		isChildOf,
    		isChildOfNodeName,
    		setCursorToEnd,
    		parseJSONPointerWithArrayIndices,
    		parsePartialJson,
    		repairPartialJson,
    		keyComboFromEvent,
    		isObject: isObject$1,
    		isObjectOrArray,
    		isUrl,
    		stringConvert,
    		createFocusTracker,
    		Message,
    		ValidationErrorsOverview,
    		CopyPasteModal,
    		JSONRepairModal,
    		ContextMenu,
    		JSONNode,
    		TreeMenu,
    		Welcome,
    		NavigationBar,
    		SearchBox,
    		convertValue,
    		isLargeContent,
    		MAX_DOCUMENT_SIZE_EXPAND_ALL,
    		canConvert,
    		createSelectionFromOperations,
    		collapse,
    		expandWithCallback,
    		debug,
    		isSSR,
    		open,
    		sortModalId,
    		transformModalId,
    		openAbsolutePopup,
    		closeAbsolutePopup,
    		refContents,
    		refHiddenInput,
    		refJsonEditor,
    		hasFocus,
    		jump,
    		readOnly,
    		externalContent,
    		mainMenuBar,
    		navigationBar,
    		escapeControlCharacters,
    		escapeUnicodeCharacters,
    		validator,
    		indentation,
    		onError,
    		onChange,
    		onRenderValue,
    		onRequestRepair,
    		onRenderMenu,
    		onClassName,
    		onFocus,
    		onBlur,
    		onSortModal,
    		onTransformModal,
    		modalOpen,
    		json,
    		text,
    		state,
    		rootPath,
    		selection,
    		pastedJson,
    		expandMinimal,
    		expandAll,
    		getDefaultExpand,
    		showSearch,
    		showReplace,
    		searching,
    		searchText,
    		searchResult,
    		handleSearchText,
    		handleNextSearchResult,
    		handlePreviousSearchResult,
    		handleReplace,
    		handleReplaceAll,
    		clearSearchResult,
    		focusActiveSearchResult,
    		applySearch,
    		applySearchThrottled,
    		handleSelectValidationError,
    		history,
    		historyState,
    		expand,
    		textIsRepaired,
    		get,
    		applyExternalContent,
    		applyExternalJson,
    		applyExternalText,
    		clearSelectionWhenNotExisting,
    		addHistoryItem,
    		createDefaultSelection,
    		patch,
    		hasSelectionContents,
    		handleEditKey,
    		handleEditValue,
    		handleToggleEnforceString,
    		acceptAutoRepair,
    		handleCut,
    		handleCopy,
    		handlePaste,
    		handlePasteFromMenu,
    		doPaste,
    		openRepairModal,
    		handleRemove,
    		handleDuplicate,
    		handleExtract,
    		handleInsert,
    		handleInsertFromContextMenu,
    		handleConvert,
    		handleInsertBefore,
    		handleInsertAfter,
    		insertActiveElementContents,
    		handleInsertCharacter,
    		handleInsertValueWithCharacter,
    		handleUndo,
    		handleRedo,
    		openSortModal,
    		handleSortSelection,
    		handleSortAll,
    		openTransformModal,
    		handleTransformSelection,
    		handleTransformAll,
    		scrollTo,
    		findElement,
    		scrollIntoView,
    		emitOnChange,
    		handlePatch,
    		handleChangeJson,
    		handleChangeText,
    		expandRecursive,
    		handleExpand,
    		handleExpandAll,
    		handleCollapseAll,
    		handleSelect,
    		openFind,
    		handleExpandSection,
    		handlePasteJson,
    		handleKeyDown,
    		handleMouseDown,
    		openContextMenu,
    		handleContextMenu,
    		handleContextMenuFromTreeMenu,
    		handleParsePastedJson,
    		handleClearPastedJson,
    		handleNavigationBarSelect,
    		focus,
    		handleWindowMouseDown,
    		getFullJson,
    		getFullState,
    		getFullSelection,
    		autoScrollHandler,
    		context,
    		normalization,
    		validationErrors,
    		validationErrorsMap,
    		textIsUnrepairable,
    		recursiveSelection
    	});

    	$$self.$inject_state = $$props => {
    		if ('refContents' in $$props) $$invalidate(6, refContents = $$props.refContents);
    		if ('refHiddenInput' in $$props) $$invalidate(12, refHiddenInput = $$props.refHiddenInput);
    		if ('refJsonEditor' in $$props) $$invalidate(13, refJsonEditor = $$props.refJsonEditor);
    		if ('hasFocus' in $$props) hasFocus = $$props.hasFocus;
    		if ('readOnly' in $$props) $$invalidate(0, readOnly = $$props.readOnly);
    		if ('externalContent' in $$props) $$invalidate(49, externalContent = $$props.externalContent);
    		if ('mainMenuBar' in $$props) $$invalidate(1, mainMenuBar = $$props.mainMenuBar);
    		if ('navigationBar' in $$props) $$invalidate(2, navigationBar = $$props.navigationBar);
    		if ('escapeControlCharacters' in $$props) $$invalidate(50, escapeControlCharacters = $$props.escapeControlCharacters);
    		if ('escapeUnicodeCharacters' in $$props) $$invalidate(51, escapeUnicodeCharacters = $$props.escapeUnicodeCharacters);
    		if ('validator' in $$props) $$invalidate(52, validator = $$props.validator);
    		if ('indentation' in $$props) $$invalidate(53, indentation = $$props.indentation);
    		if ('onError' in $$props) $$invalidate(54, onError = $$props.onError);
    		if ('onChange' in $$props) $$invalidate(55, onChange = $$props.onChange);
    		if ('onRenderValue' in $$props) $$invalidate(56, onRenderValue = $$props.onRenderValue);
    		if ('onRequestRepair' in $$props) $$invalidate(3, onRequestRepair = $$props.onRequestRepair);
    		if ('onRenderMenu' in $$props) $$invalidate(4, onRenderMenu = $$props.onRenderMenu);
    		if ('onClassName' in $$props) $$invalidate(57, onClassName = $$props.onClassName);
    		if ('onFocus' in $$props) $$invalidate(58, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(59, onBlur = $$props.onBlur);
    		if ('onSortModal' in $$props) $$invalidate(60, onSortModal = $$props.onSortModal);
    		if ('onTransformModal' in $$props) $$invalidate(61, onTransformModal = $$props.onTransformModal);
    		if ('modalOpen' in $$props) modalOpen = $$props.modalOpen;
    		if ('json' in $$props) $$invalidate(7, json = $$props.json);
    		if ('text' in $$props) $$invalidate(8, text = $$props.text);
    		if ('state' in $$props) $$invalidate(14, state = $$props.state);
    		if ('selection' in $$props) $$invalidate(9, selection = $$props.selection);
    		if ('pastedJson' in $$props) $$invalidate(15, pastedJson = $$props.pastedJson);
    		if ('showSearch' in $$props) $$invalidate(16, showSearch = $$props.showSearch);
    		if ('showReplace' in $$props) $$invalidate(17, showReplace = $$props.showReplace);
    		if ('searching' in $$props) $$invalidate(18, searching = $$props.searching);
    		if ('searchText' in $$props) $$invalidate(69, searchText = $$props.searchText);
    		if ('searchResult' in $$props) $$invalidate(19, searchResult = $$props.searchResult);
    		if ('historyState' in $$props) $$invalidate(20, historyState = $$props.historyState);
    		if ('textIsRepaired' in $$props) $$invalidate(21, textIsRepaired = $$props.textIsRepaired);
    		if ('autoScrollHandler' in $$props) $$invalidate(70, autoScrollHandler = $$props.autoScrollHandler);
    		if ('context' in $$props) $$invalidate(10, context = $$props.context);
    		if ('normalization' in $$props) $$invalidate(71, normalization = $$props.normalization);
    		if ('validationErrors' in $$props) $$invalidate(11, validationErrors = $$props.validationErrors);
    		if ('validationErrorsMap' in $$props) $$invalidate(22, validationErrorsMap = $$props.validationErrorsMap);
    		if ('textIsUnrepairable' in $$props) textIsUnrepairable = $$props.textIsUnrepairable;
    		if ('recursiveSelection' in $$props) $$invalidate(23, recursiveSelection = $$props.recursiveSelection);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[1] & /*escapeControlCharacters, escapeUnicodeCharacters*/ 1572864) {
    			$$invalidate(71, normalization = createNormalizationFunctions({
    				escapeControlCharacters,
    				escapeUnicodeCharacters
    			}));
    		}

    		if ($$self.$$.dirty[0] & /*json, selection*/ 640) {
    			$$invalidate(23, recursiveSelection = createRecursiveSelection(json, selection));
    		}

    		if ($$self.$$.dirty[0] & /*json*/ 128 | $$self.$$.dirty[2] & /*searchText*/ 128) {
    			// we pass non-used arguments searchText and json to trigger search when these variables change
    			applySearchThrottled(searchText, json);
    		}

    		if ($$self.$$.dirty[1] & /*externalContent*/ 262144) {
    			// two-way binding of externalContent and internal json and text (
    			// when receiving an updated prop, we have to update state for example
    			applyExternalContent(externalContent);
    		}

    		if ($$self.$$.dirty[0] & /*text, json*/ 384) {
    			textIsUnrepairable = text !== undefined && json === undefined;
    		}

    		if ($$self.$$.dirty[0] & /*json*/ 128 | $$self.$$.dirty[1] & /*validator*/ 2097152) {
    			// TODO: debounce JSON schema validation
    			/** @type{ValidationError[]} */
    			$$invalidate(11, validationErrors = validator ? validator(json) : []);
    		}

    		if ($$self.$$.dirty[0] & /*validationErrors*/ 2048) {
    			$$invalidate(22, validationErrorsMap = mapValidationErrors(validationErrors));
    		}

    		if ($$self.$$.dirty[0] & /*refContents*/ 64) {
    			$$invalidate(70, autoScrollHandler = createAutoScrollHandler(refContents));
    		}

    		if ($$self.$$.dirty[0] & /*readOnly*/ 1 | $$self.$$.dirty[1] & /*onRenderValue, onClassName*/ 100663296 | $$self.$$.dirty[2] & /*normalization, autoScrollHandler*/ 768) {
    			$$invalidate(10, context = {
    				readOnly,
    				normalization,
    				getFullJson,
    				getFullState,
    				getFullSelection,
    				findElement,
    				focus,
    				onPatch: handlePatch,
    				onInsert: handleInsert,
    				onExpand: handleExpand,
    				onSelect: handleSelect,
    				onFind: openFind,
    				onPasteJson: handlePasteJson,
    				onExpandSection: handleExpandSection,
    				onRenderValue,
    				onContextMenu: openContextMenu,
    				onClassName: onClassName || noop$1,
    				onDrag: autoScrollHandler.onDrag,
    				onDragEnd: autoScrollHandler.onDragEnd
    			});
    		}

    		if ($$self.$$.dirty[0] & /*context*/ 1024) {
    			debug('context changed', context);
    		}
    	};

    	return [
    		readOnly,
    		mainMenuBar,
    		navigationBar,
    		onRequestRepair,
    		onRenderMenu,
    		acceptAutoRepair,
    		refContents,
    		json,
    		text,
    		selection,
    		context,
    		validationErrors,
    		refHiddenInput,
    		refJsonEditor,
    		state,
    		pastedJson,
    		showSearch,
    		showReplace,
    		searching,
    		searchResult,
    		historyState,
    		textIsRepaired,
    		validationErrorsMap,
    		recursiveSelection,
    		isSSR,
    		rootPath,
    		handleSearchText,
    		handleNextSearchResult,
    		handlePreviousSearchResult,
    		handleReplace,
    		handleReplaceAll,
    		clearSearchResult,
    		handleSelectValidationError,
    		handleCopy,
    		handlePaste,
    		handleUndo,
    		handleRedo,
    		handleSortAll,
    		handleTransformAll,
    		handleExpandAll,
    		handleCollapseAll,
    		handleKeyDown,
    		handleMouseDown,
    		handleContextMenu,
    		handleContextMenuFromTreeMenu,
    		handleParsePastedJson,
    		handleClearPastedJson,
    		handleNavigationBarSelect,
    		handleWindowMouseDown,
    		externalContent,
    		escapeControlCharacters,
    		escapeUnicodeCharacters,
    		validator,
    		indentation,
    		onError,
    		onChange,
    		onRenderValue,
    		onClassName,
    		onFocus,
    		onBlur,
    		onSortModal,
    		onTransformModal,
    		expand,
    		get,
    		patch,
    		openTransformModal,
    		scrollTo,
    		findElement,
    		focus,
    		searchText,
    		autoScrollHandler,
    		normalization,
    		treemenu_showSearch_binding,
    		input_binding,
    		div1_binding,
    		div_binding
    	];
    }

    class TreeMode extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$n,
    			create_fragment$n,
    			not_equal,
    			{
    				readOnly: 0,
    				externalContent: 49,
    				mainMenuBar: 1,
    				navigationBar: 2,
    				escapeControlCharacters: 50,
    				escapeUnicodeCharacters: 51,
    				validator: 52,
    				indentation: 53,
    				onError: 54,
    				onChange: 55,
    				onRenderValue: 56,
    				onRequestRepair: 3,
    				onRenderMenu: 4,
    				onClassName: 57,
    				onFocus: 58,
    				onBlur: 59,
    				onSortModal: 60,
    				onTransformModal: 61,
    				expand: 62,
    				get: 63,
    				patch: 64,
    				acceptAutoRepair: 5,
    				openTransformModal: 65,
    				scrollTo: 66,
    				findElement: 67,
    				focus: 68
    			},
    			null,
    			[-1, -1, -1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TreeMode",
    			options,
    			id: create_fragment$n.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*externalContent*/ ctx[49] === undefined && !('externalContent' in props)) {
    			console.warn("<TreeMode> was created without expected prop 'externalContent'");
    		}

    		if (/*onError*/ ctx[54] === undefined && !('onError' in props)) {
    			console.warn("<TreeMode> was created without expected prop 'onError'");
    		}

    		if (/*onChange*/ ctx[55] === undefined && !('onChange' in props)) {
    			console.warn("<TreeMode> was created without expected prop 'onChange'");
    		}

    		if (/*onRenderValue*/ ctx[56] === undefined && !('onRenderValue' in props)) {
    			console.warn("<TreeMode> was created without expected prop 'onRenderValue'");
    		}

    		if (/*onClassName*/ ctx[57] === undefined && !('onClassName' in props)) {
    			console.warn("<TreeMode> was created without expected prop 'onClassName'");
    		}

    		if (/*onFocus*/ ctx[58] === undefined && !('onFocus' in props)) {
    			console.warn("<TreeMode> was created without expected prop 'onFocus'");
    		}

    		if (/*onBlur*/ ctx[59] === undefined && !('onBlur' in props)) {
    			console.warn("<TreeMode> was created without expected prop 'onBlur'");
    		}

    		if (/*onSortModal*/ ctx[60] === undefined && !('onSortModal' in props)) {
    			console.warn("<TreeMode> was created without expected prop 'onSortModal'");
    		}

    		if (/*onTransformModal*/ ctx[61] === undefined && !('onTransformModal' in props)) {
    			console.warn("<TreeMode> was created without expected prop 'onTransformModal'");
    		}
    	}

    	get readOnly() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readOnly(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get externalContent() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set externalContent(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mainMenuBar() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mainMenuBar(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get navigationBar() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set navigationBar(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get escapeControlCharacters() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set escapeControlCharacters(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get escapeUnicodeCharacters() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set escapeUnicodeCharacters(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validator() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validator(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get indentation() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set indentation(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onError() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onError(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChange() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChange(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRenderValue() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRenderValue(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRequestRepair() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRequestRepair(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRenderMenu() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRenderMenu(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClassName() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClassName(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onFocus() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onFocus(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onBlur() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onBlur(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSortModal() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSortModal(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTransformModal() {
    		throw new Error_1$1("<TreeMode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTransformModal(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get expand() {
    		return this.$$.ctx[62];
    	}

    	set expand(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get get() {
    		return this.$$.ctx[63];
    	}

    	set get(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get patch() {
    		return this.$$.ctx[64];
    	}

    	set patch(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get acceptAutoRepair() {
    		return this.$$.ctx[5];
    	}

    	set acceptAutoRepair(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get openTransformModal() {
    		return this.$$.ctx[65];
    	}

    	set openTransformModal(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scrollTo() {
    		return this.$$.ctx[66];
    	}

    	set scrollTo(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get findElement() {
    		return this.$$.ctx[67];
    	}

    	set findElement(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		return this.$$.ctx[68];
    	}

    	set focus(value) {
    		throw new Error_1$1("<TreeMode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const description = `
<p>
  Enter a JavaScript function to filter, sort, or transform the data.
</p>
`;
    const javascriptQueryLanguage = {
        id: 'javascript',
        name: 'JavaScript',
        description,
        createQuery,
        executeQuery
    };
    function createQuery(json, queryOptions) {
        const { filter, sort, projection } = queryOptions;
        const queryParts = [];
        if (filter && filter.path && filter.relation && filter.value) {
            // Note that the comparisons embrace type coercion,
            // so a filter value like '5' (text) will match numbers like 5 too.
            const actualValueGetter = `item => item${createPropertySelector(filter.path)}`;
            const filterValueStr = typeof parseString(filter.value) === 'string' ? `'${filter.value}'` : filter.value;
            queryParts.push(`  data = data.filter(${actualValueGetter} ${filter.relation} ${filterValueStr})\n`);
        }
        if (sort && sort.path && sort.direction) {
            if (sort.direction === 'desc') {
                queryParts.push(`  data = data.slice().sort((a, b) => {\n` +
                    `    // sort descending\n` +
                    `    const valueA = a${createPropertySelector(sort.path)}\n` +
                    `    const valueB = b${createPropertySelector(sort.path)}\n` +
                    `    return valueA > valueB ? -1 : valueA < valueB ? 1 : 0\n` +
                    `  })\n`);
            }
            else {
                // sort direction 'asc'
                queryParts.push(`  data = data.slice().sort((a, b) => {\n` +
                    `    // sort ascending\n` +
                    `    const valueA = a${createPropertySelector(sort.path)}\n` +
                    `    const valueB = b${createPropertySelector(sort.path)}\n` +
                    `    return valueA > valueB ? 1 : valueA < valueB ? -1 : 0\n` +
                    `  })\n`);
            }
        }
        if (projection && projection.paths) {
            // It is possible to make a util function "pickFlat"
            // and use that when building the query to make it more readable.
            if (projection.paths.length > 1) {
                const paths = projection.paths.map((path) => {
                    const name = path[path.length - 1] || 'item'; // 'item' in case of having selected the whole item
                    const item = `item${createPropertySelector(path)}`;
                    return `    ${JSON.stringify(name)}: ${item}`;
                });
                queryParts.push(`  data = data.map(item => ({\n${paths.join(',\n')}})\n  )\n`);
            }
            else {
                const item = `item${createPropertySelector(projection.paths[0])}`;
                queryParts.push(`  data = data.map(item => ${item})\n`);
            }
        }
        queryParts.push('  return data\n');
        return `function query (data) {\n${queryParts.join('')}}`;
    }
    function executeQuery(json, query) {
        // FIXME: replace unsafe new Function with a JS based query language
        //  As long as we don't persist or fetch queries, there is no security risk.
        // TODO: only import the most relevant subset of lodash instead of the full library?
        // eslint-disable-next-line no-new-func
        const queryFn = new Function('"use strict";\n' +
            '\n' +
            query +
            '\n' +
            '\n' +
            'if (typeof query !== "function") {\n' +
            '  throw new Error("Cannot execute query: expecting a function named \'query\' but is undefined")\n' +
            '}\n' +
            '\n' +
            'return query;\n')();
        const output = queryFn(json);
        return output !== undefined ? output : null;
    }

    /* node_modules/svelte-jsoneditor/plugins/value/components/BooleanToggle.svelte generated by Svelte v3.48.0 */
    const file$k = "node_modules/svelte-jsoneditor/plugins/value/components/BooleanToggle.svelte";

    function create_fragment$m(ctx) {
    	let div;
    	let icon;
    	let div_title_value;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: {
    				data: /*value*/ ctx[0] === true ? faCheckSquare : faSquare
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    			attr_dev(div, "class", "jse-boolean-toggle svelte-zs5o25");

    			attr_dev(div, "title", div_title_value = !/*readOnly*/ ctx[1]
    			? 'Click to toggle this boolean value'
    			: `Boolean value ${/*value*/ ctx[0]}`);

    			add_location(div, file$k, 27, 0, 712);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(icon, div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "mousedown", /*toggleBooleanValue*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const icon_changes = {};
    			if (dirty & /*value*/ 1) icon_changes.data = /*value*/ ctx[0] === true ? faCheckSquare : faSquare;
    			icon.$set(icon_changes);

    			if (!current || dirty & /*readOnly, value*/ 3 && div_title_value !== (div_title_value = !/*readOnly*/ ctx[1]
    			? 'Click to toggle this boolean value'
    			: `Boolean value ${/*value*/ ctx[0]}`)) {
    				attr_dev(div, "title", div_title_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BooleanToggle', slots, []);
    	let { path } = $$props;
    	let { value } = $$props;
    	let { readOnly } = $$props;
    	let { onPatch } = $$props;
    	let { onSelect } = $$props;

    	function toggleBooleanValue(event) {
    		event.stopPropagation();

    		if (readOnly) {
    			return;
    		}

    		onPatch([
    			{
    				op: 'replace',
    				path: immutableJSONPatch.compileJSONPointer(path),
    				value: !value
    			}
    		]);

    		onSelect({ type: SELECTION_TYPE.VALUE, path });
    	}

    	const writable_props = ['path', 'value', 'readOnly', 'onPatch', 'onSelect'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BooleanToggle> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('path' in $$props) $$invalidate(3, path = $$props.path);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('readOnly' in $$props) $$invalidate(1, readOnly = $$props.readOnly);
    		if ('onPatch' in $$props) $$invalidate(4, onPatch = $$props.onPatch);
    		if ('onSelect' in $$props) $$invalidate(5, onSelect = $$props.onSelect);
    	};

    	$$self.$capture_state = () => ({
    		faCheckSquare,
    		faSquare,
    		compileJSONPointer: immutableJSONPatch.compileJSONPointer,
    		Icon,
    		SELECTION_TYPE,
    		path,
    		value,
    		readOnly,
    		onPatch,
    		onSelect,
    		toggleBooleanValue
    	});

    	$$self.$inject_state = $$props => {
    		if ('path' in $$props) $$invalidate(3, path = $$props.path);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('readOnly' in $$props) $$invalidate(1, readOnly = $$props.readOnly);
    		if ('onPatch' in $$props) $$invalidate(4, onPatch = $$props.onPatch);
    		if ('onSelect' in $$props) $$invalidate(5, onSelect = $$props.onSelect);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [value, readOnly, toggleBooleanValue, path, onPatch, onSelect];
    }

    class BooleanToggle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$m, create_fragment$m, not_equal, {
    			path: 3,
    			value: 0,
    			readOnly: 1,
    			onPatch: 4,
    			onSelect: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BooleanToggle",
    			options,
    			id: create_fragment$m.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*path*/ ctx[3] === undefined && !('path' in props)) {
    			console.warn("<BooleanToggle> was created without expected prop 'path'");
    		}

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<BooleanToggle> was created without expected prop 'value'");
    		}

    		if (/*readOnly*/ ctx[1] === undefined && !('readOnly' in props)) {
    			console.warn("<BooleanToggle> was created without expected prop 'readOnly'");
    		}

    		if (/*onPatch*/ ctx[4] === undefined && !('onPatch' in props)) {
    			console.warn("<BooleanToggle> was created without expected prop 'onPatch'");
    		}

    		if (/*onSelect*/ ctx[5] === undefined && !('onSelect' in props)) {
    			console.warn("<BooleanToggle> was created without expected prop 'onSelect'");
    		}
    	}

    	get path() {
    		throw new Error("<BooleanToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<BooleanToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<BooleanToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<BooleanToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readOnly() {
    		throw new Error("<BooleanToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readOnly(value) {
    		throw new Error("<BooleanToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onPatch() {
    		throw new Error("<BooleanToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onPatch(value) {
    		throw new Error("<BooleanToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<BooleanToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<BooleanToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/controls/ColorPickerPopup.svelte generated by Svelte v3.48.0 */
    const file$j = "node_modules/svelte-jsoneditor/components/controls/ColorPickerPopup.svelte";

    function create_fragment$l(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "jse-color-picker-popup svelte-1gn8yt9");
    			add_location(div, file$j, 31, 0, 899);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			/*div_binding*/ ctx[4](div);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[4](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ColorPickerPopup', slots, []);
    	let { color } = $$props;
    	let { onChange } = $$props;
    	let { showOnTop } = $$props;
    	let ref;
    	let colorPicker;

    	onMount(async () => {
    		// Dynamically import VanillaPicker, because it requires `document` to be defined,
    		// and that is not supported server side
    		const VanillaPicker = (await Promise.resolve().then(function () { return vanillaPicker; })).default;

    		colorPicker = new VanillaPicker({
    				parent: ref,
    				color,
    				popup: showOnTop ? 'top' : 'bottom',
    				onDone(color) {
    					const alpha = color.rgba[3];

    					const hex = alpha === 1 ? color.hex.substring(0, 7) : color.hex; // return #RRGGBB
    					// return #RRGGBBAA

    					onChange(hex);
    				}
    			});

    		colorPicker.show();
    	});

    	onDestroy(() => {
    		if (colorPicker) {
    			colorPicker.destroy();
    		}
    	});

    	const writable_props = ['color', 'onChange', 'showOnTop'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ColorPickerPopup> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			ref = $$value;
    			$$invalidate(0, ref);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('onChange' in $$props) $$invalidate(2, onChange = $$props.onChange);
    		if ('showOnTop' in $$props) $$invalidate(3, showOnTop = $$props.showOnTop);
    	};

    	$$self.$capture_state = () => ({
    		onDestroy,
    		onMount,
    		color,
    		onChange,
    		showOnTop,
    		ref,
    		colorPicker
    	});

    	$$self.$inject_state = $$props => {
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('onChange' in $$props) $$invalidate(2, onChange = $$props.onChange);
    		if ('showOnTop' in $$props) $$invalidate(3, showOnTop = $$props.showOnTop);
    		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
    		if ('colorPicker' in $$props) colorPicker = $$props.colorPicker;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [ref, color, onChange, showOnTop, div_binding];
    }

    class ColorPickerPopup extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$l, create_fragment$l, safe_not_equal, { color: 1, onChange: 2, showOnTop: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ColorPickerPopup",
    			options,
    			id: create_fragment$l.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*color*/ ctx[1] === undefined && !('color' in props)) {
    			console.warn("<ColorPickerPopup> was created without expected prop 'color'");
    		}

    		if (/*onChange*/ ctx[2] === undefined && !('onChange' in props)) {
    			console.warn("<ColorPickerPopup> was created without expected prop 'onChange'");
    		}

    		if (/*showOnTop*/ ctx[3] === undefined && !('showOnTop' in props)) {
    			console.warn("<ColorPickerPopup> was created without expected prop 'showOnTop'");
    		}
    	}

    	get color() {
    		throw new Error("<ColorPickerPopup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<ColorPickerPopup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChange() {
    		throw new Error("<ColorPickerPopup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChange(value) {
    		throw new Error("<ColorPickerPopup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showOnTop() {
    		throw new Error("<ColorPickerPopup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showOnTop(value) {
    		throw new Error("<ColorPickerPopup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/plugins/value/components/ColorPicker.svelte generated by Svelte v3.48.0 */
    const file$i = "node_modules/svelte-jsoneditor/plugins/value/components/ColorPicker.svelte";

    function create_fragment$k(ctx) {
    	let button;
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "class", "jse-color-picker-button svelte-fk1u9y");
    			set_style(button, "background", /*color*/ ctx[2]);

    			attr_dev(button, "title", button_title_value = !/*readOnly*/ ctx[1]
    			? 'Click to open a color picker'
    			: `Color ${/*value*/ ctx[0]}`);

    			add_location(button, file$i, 55, 0, 1641);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*openColorPicker*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*color*/ 4) {
    				set_style(button, "background", /*color*/ ctx[2]);
    			}

    			if (dirty & /*readOnly, value*/ 3 && button_title_value !== (button_title_value = !/*readOnly*/ ctx[1]
    			? 'Click to open a color picker'
    			: `Color ${/*value*/ ctx[0]}`)) {
    				attr_dev(button, "title", button_title_value);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let color;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ColorPicker', slots, []);
    	const { openAbsolutePopup } = getContext('absolute-popup');
    	let { path } = $$props;
    	let { value } = $$props;
    	let { readOnly } = $$props;
    	let { onPatch } = $$props;
    	let { onSelect } = $$props;

    	function onChange(color) {
    		onPatch([
    			{
    				op: 'replace',
    				path: immutableJSONPatch.compileJSONPointer(path),
    				value: color
    			}
    		]);

    		onClose();
    	}

    	function onClose() {
    		onSelect({ type: SELECTION_TYPE.VALUE, path });
    	}

    	function openColorPicker(event) {
    		if (readOnly) {
    			return;
    		}

    		// estimate of the color picker height
    		// we'll render the color picker on top
    		// when there is not enough space below, and there is enough space above
    		const height = 300;

    		const top = event.target.getBoundingClientRect().top;
    		const windowHeight = getWindow(event.target).innerHeight;
    		const showOnTop = windowHeight - top < height && top > height;
    		const props = { color: value, onChange, showOnTop };

    		openAbsolutePopup(ColorPickerPopup, props, {
    			anchor: event.target,
    			closeOnOuterClick: true,
    			onClose,
    			offsetTop: 18,
    			offsetLeft: -8,
    			height
    		});
    	}

    	const writable_props = ['path', 'value', 'readOnly', 'onPatch', 'onSelect'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ColorPicker> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('path' in $$props) $$invalidate(4, path = $$props.path);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('readOnly' in $$props) $$invalidate(1, readOnly = $$props.readOnly);
    		if ('onPatch' in $$props) $$invalidate(5, onPatch = $$props.onPatch);
    		if ('onSelect' in $$props) $$invalidate(6, onSelect = $$props.onSelect);
    	};

    	$$self.$capture_state = () => ({
    		getColorCSS,
    		getWindow,
    		compileJSONPointer: immutableJSONPatch.compileJSONPointer,
    		getContext,
    		ColorPickerPopup,
    		SELECTION_TYPE,
    		openAbsolutePopup,
    		path,
    		value,
    		readOnly,
    		onPatch,
    		onSelect,
    		onChange,
    		onClose,
    		openColorPicker,
    		color
    	});

    	$$self.$inject_state = $$props => {
    		if ('path' in $$props) $$invalidate(4, path = $$props.path);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('readOnly' in $$props) $$invalidate(1, readOnly = $$props.readOnly);
    		if ('onPatch' in $$props) $$invalidate(5, onPatch = $$props.onPatch);
    		if ('onSelect' in $$props) $$invalidate(6, onSelect = $$props.onSelect);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 1) {
    			$$invalidate(2, color = getColorCSS(value));
    		}
    	};

    	return [value, readOnly, color, openColorPicker, path, onPatch, onSelect];
    }

    class ColorPicker extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$k, create_fragment$k, not_equal, {
    			path: 4,
    			value: 0,
    			readOnly: 1,
    			onPatch: 5,
    			onSelect: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ColorPicker",
    			options,
    			id: create_fragment$k.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*path*/ ctx[4] === undefined && !('path' in props)) {
    			console.warn("<ColorPicker> was created without expected prop 'path'");
    		}

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<ColorPicker> was created without expected prop 'value'");
    		}

    		if (/*readOnly*/ ctx[1] === undefined && !('readOnly' in props)) {
    			console.warn("<ColorPicker> was created without expected prop 'readOnly'");
    		}

    		if (/*onPatch*/ ctx[5] === undefined && !('onPatch' in props)) {
    			console.warn("<ColorPicker> was created without expected prop 'onPatch'");
    		}

    		if (/*onSelect*/ ctx[6] === undefined && !('onSelect' in props)) {
    			console.warn("<ColorPicker> was created without expected prop 'onSelect'");
    		}
    	}

    	get path() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readOnly() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readOnly(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onPatch() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onPatch(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function getValueClass(value) {
        const type = valueType(value);
        return classnames('jse-value', 'jse-' + type, {
            'jse-url': isUrl(value),
            'jse-empty': typeof value === 'string' && value.length === 0
        });
    }

    /* node_modules/svelte-jsoneditor/plugins/value/components/EditableValue.svelte generated by Svelte v3.48.0 */

    function create_fragment$j(ctx) {
    	let editablediv;
    	let current;

    	editablediv = new EditableDiv({
    			props: {
    				value: /*normalization*/ ctx[1].escapeValue(/*value*/ ctx[0]),
    				onChange: /*handleChangeValue*/ ctx[3],
    				onCancel: /*handleCancelChange*/ ctx[4],
    				onPaste: /*handlePaste*/ ctx[5],
    				onFind: /*onFind*/ ctx[2],
    				onValueClass: /*handleOnValueClass*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(editablediv.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(editablediv, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const editablediv_changes = {};
    			if (dirty & /*normalization, value*/ 3) editablediv_changes.value = /*normalization*/ ctx[1].escapeValue(/*value*/ ctx[0]);
    			if (dirty & /*onFind*/ 4) editablediv_changes.onFind = /*onFind*/ ctx[2];
    			editablediv.$set(editablediv_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editablediv.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editablediv.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(editablediv, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditableValue', slots, []);
    	let { path } = $$props;
    	let { value } = $$props;
    	let { normalization } = $$props;
    	let { enforceString } = $$props;
    	let { onPatch } = $$props;
    	let { onPasteJson } = $$props;
    	let { onSelect } = $$props;
    	let { onFind } = $$props;

    	function convert(value) {
    		return enforceString ? value : stringConvert(value);
    	}

    	function handleChangeValue(newValue, updateSelection) {
    		onPatch([
    			{
    				op: 'replace',
    				path: immutableJSONPatch.compileJSONPointer(path),
    				value: convert(normalization.unescapeValue(newValue))
    			}
    		]);

    		if (updateSelection === UPDATE_SELECTION.NEXT_INSIDE) {
    			onSelect({
    				type: SELECTION_TYPE.VALUE,
    				path,
    				nextInside: true
    			});
    		}

    		if (updateSelection === UPDATE_SELECTION.SELF) {
    			onSelect({ type: SELECTION_TYPE.VALUE, path }, { ensureFocus: false });
    		}
    	}

    	function handleCancelChange() {
    		onSelect({ type: SELECTION_TYPE.VALUE, path });
    	}

    	function handlePaste(pastedText) {
    		try {
    			const pastedJson = JSON.parse(pastedText);

    			if (isObjectOrArray(pastedJson)) {
    				onPasteJson({ path, contents: pastedJson });
    			}
    		} catch(err) {
    			
    		} // silently ignore: thee pasted text is no valid JSON object or array,
    	}

    	function handleOnValueClass(value) {
    		return getValueClass(convert(normalization.unescapeValue(value)));
    	}

    	const writable_props = [
    		'path',
    		'value',
    		'normalization',
    		'enforceString',
    		'onPatch',
    		'onPasteJson',
    		'onSelect',
    		'onFind'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditableValue> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('path' in $$props) $$invalidate(7, path = $$props.path);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('normalization' in $$props) $$invalidate(1, normalization = $$props.normalization);
    		if ('enforceString' in $$props) $$invalidate(8, enforceString = $$props.enforceString);
    		if ('onPatch' in $$props) $$invalidate(9, onPatch = $$props.onPatch);
    		if ('onPasteJson' in $$props) $$invalidate(10, onPasteJson = $$props.onPasteJson);
    		if ('onSelect' in $$props) $$invalidate(11, onSelect = $$props.onSelect);
    		if ('onFind' in $$props) $$invalidate(2, onFind = $$props.onFind);
    	};

    	$$self.$capture_state = () => ({
    		compileJSONPointer: immutableJSONPatch.compileJSONPointer,
    		isObjectOrArray,
    		stringConvert,
    		SELECTION_TYPE,
    		getValueClass,
    		EditableDiv,
    		UPDATE_SELECTION,
    		path,
    		value,
    		normalization,
    		enforceString,
    		onPatch,
    		onPasteJson,
    		onSelect,
    		onFind,
    		convert,
    		handleChangeValue,
    		handleCancelChange,
    		handlePaste,
    		handleOnValueClass
    	});

    	$$self.$inject_state = $$props => {
    		if ('path' in $$props) $$invalidate(7, path = $$props.path);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('normalization' in $$props) $$invalidate(1, normalization = $$props.normalization);
    		if ('enforceString' in $$props) $$invalidate(8, enforceString = $$props.enforceString);
    		if ('onPatch' in $$props) $$invalidate(9, onPatch = $$props.onPatch);
    		if ('onPasteJson' in $$props) $$invalidate(10, onPasteJson = $$props.onPasteJson);
    		if ('onSelect' in $$props) $$invalidate(11, onSelect = $$props.onSelect);
    		if ('onFind' in $$props) $$invalidate(2, onFind = $$props.onFind);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		normalization,
    		onFind,
    		handleChangeValue,
    		handleCancelChange,
    		handlePaste,
    		handleOnValueClass,
    		path,
    		enforceString,
    		onPatch,
    		onPasteJson,
    		onSelect
    	];
    }

    class EditableValue extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$j, create_fragment$j, not_equal, {
    			path: 7,
    			value: 0,
    			normalization: 1,
    			enforceString: 8,
    			onPatch: 9,
    			onPasteJson: 10,
    			onSelect: 11,
    			onFind: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditableValue",
    			options,
    			id: create_fragment$j.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*path*/ ctx[7] === undefined && !('path' in props)) {
    			console.warn("<EditableValue> was created without expected prop 'path'");
    		}

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<EditableValue> was created without expected prop 'value'");
    		}

    		if (/*normalization*/ ctx[1] === undefined && !('normalization' in props)) {
    			console.warn("<EditableValue> was created without expected prop 'normalization'");
    		}

    		if (/*enforceString*/ ctx[8] === undefined && !('enforceString' in props)) {
    			console.warn("<EditableValue> was created without expected prop 'enforceString'");
    		}

    		if (/*onPatch*/ ctx[9] === undefined && !('onPatch' in props)) {
    			console.warn("<EditableValue> was created without expected prop 'onPatch'");
    		}

    		if (/*onPasteJson*/ ctx[10] === undefined && !('onPasteJson' in props)) {
    			console.warn("<EditableValue> was created without expected prop 'onPasteJson'");
    		}

    		if (/*onSelect*/ ctx[11] === undefined && !('onSelect' in props)) {
    			console.warn("<EditableValue> was created without expected prop 'onSelect'");
    		}

    		if (/*onFind*/ ctx[2] === undefined && !('onFind' in props)) {
    			console.warn("<EditableValue> was created without expected prop 'onFind'");
    		}
    	}

    	get path() {
    		throw new Error("<EditableValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<EditableValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<EditableValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<EditableValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get normalization() {
    		throw new Error("<EditableValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set normalization(value) {
    		throw new Error("<EditableValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get enforceString() {
    		throw new Error("<EditableValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set enforceString(value) {
    		throw new Error("<EditableValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onPatch() {
    		throw new Error("<EditableValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onPatch(value) {
    		throw new Error("<EditableValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onPasteJson() {
    		throw new Error("<EditableValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onPasteJson(value) {
    		throw new Error("<EditableValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<EditableValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<EditableValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onFind() {
    		throw new Error("<EditableValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onFind(value) {
    		throw new Error("<EditableValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/plugins/value/components/ReadonlyValue.svelte generated by Svelte v3.48.0 */
    const file$h = "node_modules/svelte-jsoneditor/plugins/value/components/ReadonlyValue.svelte";

    // (39:2) {:else}
    function create_else_block$6(ctx) {
    	let t_value = addNewLineSuffix(/*normalization*/ ctx[1].escapeValue(/*value*/ ctx[0])) + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*normalization, value*/ 3 && t_value !== (t_value = addNewLineSuffix(/*normalization*/ ctx[1].escapeValue(/*value*/ ctx[0])) + "")) set_data_dev(t, t_value);
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(39:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (37:2) {#if searchResult}
    function create_if_block$a(ctx) {
    	let searchresulthighlighter;
    	let current;

    	searchresulthighlighter = new SearchResultHighlighter({
    			props: {
    				text: /*normalization*/ ctx[1].escapeValue(/*value*/ ctx[0]),
    				searchResult: /*searchResult*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(searchresulthighlighter.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(searchresulthighlighter, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const searchresulthighlighter_changes = {};
    			if (dirty & /*normalization, value*/ 3) searchresulthighlighter_changes.text = /*normalization*/ ctx[1].escapeValue(/*value*/ ctx[0]);
    			if (dirty & /*searchResult*/ 4) searchresulthighlighter_changes.searchResult = /*searchResult*/ ctx[2];
    			searchresulthighlighter.$set(searchresulthighlighter_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchresulthighlighter.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(searchresulthighlighter.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(searchresulthighlighter, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(37:2) {#if searchResult}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let div_class_value;
    	let div_title_value;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$a, create_else_block$6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*searchResult*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "data-type", "selectable-value");
    			attr_dev(div, "class", div_class_value = "" + (null_to_empty(getValueClass(/*value*/ ctx[0])) + " svelte-6ci2p7"));

    			attr_dev(div, "title", div_title_value = /*valueIsUrl*/ ctx[3]
    			? 'Ctrl+Click or Ctrl+Enter to open url in new window'
    			: null);

    			add_location(div, file$h, 29, 0, 962);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "click", /*handleValueClick*/ ctx[4], false, false, false),
    					listen_dev(div, "dblclick", /*handleValueDoubleClick*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}

    			if (!current || dirty & /*value*/ 1 && div_class_value !== (div_class_value = "" + (null_to_empty(getValueClass(/*value*/ ctx[0])) + " svelte-6ci2p7"))) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*valueIsUrl*/ 8 && div_title_value !== (div_title_value = /*valueIsUrl*/ ctx[3]
    			? 'Ctrl+Click or Ctrl+Enter to open url in new window'
    			: null)) {
    				attr_dev(div, "title", div_title_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let valueIsUrl;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ReadonlyValue', slots, []);
    	let { path } = $$props;
    	let { value } = $$props;
    	let { readOnly } = $$props;
    	let { normalization } = $$props;
    	let { onSelect } = $$props;
    	let { searchResult } = $$props;

    	function handleValueClick(event) {
    		if (typeof value === 'string' && valueIsUrl && event.ctrlKey) {
    			event.preventDefault();
    			event.stopPropagation();
    			window.open(value, '_blank');
    		}
    	}

    	function handleValueDoubleClick(event) {
    		if (!readOnly) {
    			event.preventDefault();

    			onSelect({
    				type: SELECTION_TYPE.VALUE,
    				path,
    				edit: true
    			});
    		}
    	}

    	const writable_props = ['path', 'value', 'readOnly', 'normalization', 'onSelect', 'searchResult'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ReadonlyValue> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('path' in $$props) $$invalidate(6, path = $$props.path);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('readOnly' in $$props) $$invalidate(7, readOnly = $$props.readOnly);
    		if ('normalization' in $$props) $$invalidate(1, normalization = $$props.normalization);
    		if ('onSelect' in $$props) $$invalidate(8, onSelect = $$props.onSelect);
    		if ('searchResult' in $$props) $$invalidate(2, searchResult = $$props.searchResult);
    	};

    	$$self.$capture_state = () => ({
    		isUrl,
    		SELECTION_TYPE,
    		SearchResultHighlighter,
    		getValueClass,
    		addNewLineSuffix,
    		path,
    		value,
    		readOnly,
    		normalization,
    		onSelect,
    		searchResult,
    		handleValueClick,
    		handleValueDoubleClick,
    		valueIsUrl
    	});

    	$$self.$inject_state = $$props => {
    		if ('path' in $$props) $$invalidate(6, path = $$props.path);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('readOnly' in $$props) $$invalidate(7, readOnly = $$props.readOnly);
    		if ('normalization' in $$props) $$invalidate(1, normalization = $$props.normalization);
    		if ('onSelect' in $$props) $$invalidate(8, onSelect = $$props.onSelect);
    		if ('searchResult' in $$props) $$invalidate(2, searchResult = $$props.searchResult);
    		if ('valueIsUrl' in $$props) $$invalidate(3, valueIsUrl = $$props.valueIsUrl);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 1) {
    			$$invalidate(3, valueIsUrl = isUrl(value));
    		}
    	};

    	return [
    		value,
    		normalization,
    		searchResult,
    		valueIsUrl,
    		handleValueClick,
    		handleValueDoubleClick,
    		path,
    		readOnly,
    		onSelect
    	];
    }

    class ReadonlyValue extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$i, create_fragment$i, not_equal, {
    			path: 6,
    			value: 0,
    			readOnly: 7,
    			normalization: 1,
    			onSelect: 8,
    			searchResult: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ReadonlyValue",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*path*/ ctx[6] === undefined && !('path' in props)) {
    			console.warn("<ReadonlyValue> was created without expected prop 'path'");
    		}

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<ReadonlyValue> was created without expected prop 'value'");
    		}

    		if (/*readOnly*/ ctx[7] === undefined && !('readOnly' in props)) {
    			console.warn("<ReadonlyValue> was created without expected prop 'readOnly'");
    		}

    		if (/*normalization*/ ctx[1] === undefined && !('normalization' in props)) {
    			console.warn("<ReadonlyValue> was created without expected prop 'normalization'");
    		}

    		if (/*onSelect*/ ctx[8] === undefined && !('onSelect' in props)) {
    			console.warn("<ReadonlyValue> was created without expected prop 'onSelect'");
    		}

    		if (/*searchResult*/ ctx[2] === undefined && !('searchResult' in props)) {
    			console.warn("<ReadonlyValue> was created without expected prop 'searchResult'");
    		}
    	}

    	get path() {
    		throw new Error("<ReadonlyValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set path(value) {
    		throw new Error("<ReadonlyValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<ReadonlyValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<ReadonlyValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readOnly() {
    		throw new Error("<ReadonlyValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readOnly(value) {
    		throw new Error("<ReadonlyValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get normalization() {
    		throw new Error("<ReadonlyValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set normalization(value) {
    		throw new Error("<ReadonlyValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelect() {
    		throw new Error("<ReadonlyValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelect(value) {
    		throw new Error("<ReadonlyValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get searchResult() {
    		throw new Error("<ReadonlyValue>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set searchResult(value) {
    		throw new Error("<ReadonlyValue>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/plugins/value/components/TimestampTag.svelte generated by Svelte v3.48.0 */
    const file$g = "node_modules/svelte-jsoneditor/plugins/value/components/TimestampTag.svelte";

    function create_fragment$h(ctx) {
    	let div;
    	let icon;
    	let tooltip_action;
    	let current;
    	let mounted;
    	let dispose;
    	icon = new Icon({ props: { data: faClock }, $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    			attr_dev(div, "class", "jse-timestamp svelte-1u00zub");
    			add_location(div, file$g, 11, 0, 399);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(icon, div, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(tooltip_action = tooltip.call(null, div, {
    					text: /*text*/ ctx[0],
    					.../*absolutePopupContext*/ ctx[1]
    				}));

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (tooltip_action && is_function(tooltip_action.update) && dirty & /*text*/ 1) tooltip_action.update.call(null, {
    				text: /*text*/ ctx[0],
    				.../*absolutePopupContext*/ ctx[1]
    			});
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let text;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TimestampTag', slots, []);
    	const absolutePopupContext = getContext('absolute-popup');
    	let { value } = $$props;
    	const writable_props = ['value'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TimestampTag> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    	};

    	$$self.$capture_state = () => ({
    		Icon,
    		faClock,
    		getContext,
    		tooltip,
    		absolutePopupContext,
    		value,
    		text
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value*/ 4) {
    			$$invalidate(0, text = `Time: ${new Date(value).toString()}`);
    		}
    	};

    	return [text, absolutePopupContext, value];
    }

    class TimestampTag extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$h, create_fragment$h, not_equal, { value: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TimestampTag",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*value*/ ctx[2] === undefined && !('value' in props)) {
    			console.warn("<TimestampTag> was created without expected prop 'value'");
    		}
    	}

    	get value() {
    		throw new Error("<TimestampTag>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<TimestampTag>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function renderValue({ path, value, readOnly, enforceString, searchResult, isEditing, normalization, onPatch, onPasteJson, onSelect, onFind }) {
        const renderers = [];
        if (!isEditing && isBoolean(value)) {
            renderers.push({
                component: BooleanToggle,
                props: { path, value, readOnly, onPatch, onSelect }
            });
        }
        if (!isEditing && isColor(value)) {
            renderers.push({
                component: ColorPicker,
                props: { path, value, readOnly, onPatch, onSelect }
            });
        }
        if (isEditing) {
            renderers.push({
                component: EditableValue,
                props: { path, value, enforceString, normalization, onPatch, onPasteJson, onSelect, onFind }
            });
        }
        if (!isEditing) {
            renderers.push({
                component: ReadonlyValue,
                props: { path, value, readOnly, normalization, searchResult, onSelect }
            });
        }
        if (!isEditing && isTimestamp(value)) {
            renderers.push({
                component: TimestampTag,
                props: { value }
            });
        }
        return renderers;
    }

    const transformModalState = {};

    function isOutOfViewport (parent, container) {
        const parentBounding = parent.getBoundingClientRect();
        const boundingContainer = container.getBoundingClientRect();
        const out = {};

        out.top = parentBounding.top < 0;
        out.left = parentBounding.left < 0;
        out.bottom =
            parentBounding.bottom + boundingContainer.height >
            (window.innerHeight || document.documentElement.clientHeight);

        out.right =
            parentBounding.right >
            (window.innerWidth || document.documentElement.clientWidth);
        out.any = out.top || out.left || out.bottom || out.right;

        return out;
    }

    /* node_modules/svelte-select/src/Item.svelte generated by Svelte v3.48.0 */

    const file$f = "node_modules/svelte-select/src/Item.svelte";

    function create_fragment$g(ctx) {
    	let div;
    	let raw_value = /*getOptionLabel*/ ctx[0](/*item*/ ctx[1], /*filterText*/ ctx[2]) + "";
    	let div_class_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", div_class_value = "item " + /*itemClasses*/ ctx[3] + " svelte-3e0qet");
    			add_location(div, file$f, 78, 0, 1837);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*getOptionLabel, item, filterText*/ 7 && raw_value !== (raw_value = /*getOptionLabel*/ ctx[0](/*item*/ ctx[1], /*filterText*/ ctx[2]) + "")) div.innerHTML = raw_value;
    			if (dirty & /*itemClasses*/ 8 && div_class_value !== (div_class_value = "item " + /*itemClasses*/ ctx[3] + " svelte-3e0qet")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Item', slots, []);
    	let { isActive = false } = $$props;
    	let { isFirst = false } = $$props;
    	let { isHover = false } = $$props;
    	let { isSelectable = false } = $$props;
    	let { getOptionLabel = undefined } = $$props;
    	let { item = undefined } = $$props;
    	let { filterText = '' } = $$props;
    	let itemClasses = '';

    	const writable_props = [
    		'isActive',
    		'isFirst',
    		'isHover',
    		'isSelectable',
    		'getOptionLabel',
    		'item',
    		'filterText'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Item> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('isActive' in $$props) $$invalidate(4, isActive = $$props.isActive);
    		if ('isFirst' in $$props) $$invalidate(5, isFirst = $$props.isFirst);
    		if ('isHover' in $$props) $$invalidate(6, isHover = $$props.isHover);
    		if ('isSelectable' in $$props) $$invalidate(7, isSelectable = $$props.isSelectable);
    		if ('getOptionLabel' in $$props) $$invalidate(0, getOptionLabel = $$props.getOptionLabel);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    		if ('filterText' in $$props) $$invalidate(2, filterText = $$props.filterText);
    	};

    	$$self.$capture_state = () => ({
    		isActive,
    		isFirst,
    		isHover,
    		isSelectable,
    		getOptionLabel,
    		item,
    		filterText,
    		itemClasses
    	});

    	$$self.$inject_state = $$props => {
    		if ('isActive' in $$props) $$invalidate(4, isActive = $$props.isActive);
    		if ('isFirst' in $$props) $$invalidate(5, isFirst = $$props.isFirst);
    		if ('isHover' in $$props) $$invalidate(6, isHover = $$props.isHover);
    		if ('isSelectable' in $$props) $$invalidate(7, isSelectable = $$props.isSelectable);
    		if ('getOptionLabel' in $$props) $$invalidate(0, getOptionLabel = $$props.getOptionLabel);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    		if ('filterText' in $$props) $$invalidate(2, filterText = $$props.filterText);
    		if ('itemClasses' in $$props) $$invalidate(3, itemClasses = $$props.itemClasses);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*isActive, isFirst, isHover, item, isSelectable*/ 242) {
    			{
    				const classes = [];

    				if (isActive) {
    					classes.push('active');
    				}

    				if (isFirst) {
    					classes.push('first');
    				}

    				if (isHover) {
    					classes.push('hover');
    				}

    				if (item.isGroupHeader) {
    					classes.push('groupHeader');
    				}

    				if (item.isGroupItem) {
    					classes.push('groupItem');
    				}

    				if (!isSelectable) {
    					classes.push('notSelectable');
    				}

    				$$invalidate(3, itemClasses = classes.join(' '));
    			}
    		}
    	};

    	return [
    		getOptionLabel,
    		item,
    		filterText,
    		itemClasses,
    		isActive,
    		isFirst,
    		isHover,
    		isSelectable
    	];
    }

    class Item extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$g, create_fragment$g, safe_not_equal, {
    			isActive: 4,
    			isFirst: 5,
    			isHover: 6,
    			isSelectable: 7,
    			getOptionLabel: 0,
    			item: 1,
    			filterText: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Item",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get isActive() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isActive(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isFirst() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isFirst(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isHover() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isHover(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isSelectable() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isSelectable(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getOptionLabel() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getOptionLabel(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get item() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filterText() {
    		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filterText(value) {
    		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/List.svelte generated by Svelte v3.48.0 */
    const file$e = "node_modules/svelte-select/src/List.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[41] = list[i];
    	child_ctx[42] = i;
    	return child_ctx;
    }

    // (309:4) {:else}
    function create_else_block$5(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*items*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block_2(ctx);
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();

    			if (each_1_else) {
    				each_1_else.c();
    			}
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);

    			if (each_1_else) {
    				each_1_else.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*getGroupHeaderLabel, items, handleHover, handleClick, Item, filterText, getOptionLabel, value, optionIdentifier, hoverItemIndex, noOptionsMessage, hideEmptyState*/ 114390) {
    				each_value = /*items*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block_2(ctx);
    					each_1_else.c();
    					each_1_else.m(each_1_anchor.parentNode, each_1_anchor);
    				} else if (each_1_else) {
    					each_1_else.d(1);
    					each_1_else = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    			if (each_1_else) each_1_else.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(309:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (286:4) {#if isVirtualList}
    function create_if_block$9(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*VirtualList*/ ctx[3];

    	function switch_props(ctx) {
    		return {
    			props: {
    				items: /*items*/ ctx[1],
    				itemHeight: /*itemHeight*/ ctx[8],
    				$$slots: {
    					default: [
    						create_default_slot$2,
    						({ item, i }) => ({ 41: item, 42: i }),
    						({ item, i }) => [0, (item ? 1024 : 0) | (i ? 2048 : 0)]
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty[0] & /*items*/ 2) switch_instance_changes.items = /*items*/ ctx[1];
    			if (dirty[0] & /*itemHeight*/ 256) switch_instance_changes.itemHeight = /*itemHeight*/ ctx[8];

    			if (dirty[0] & /*Item, filterText, getOptionLabel, value, optionIdentifier, hoverItemIndex, items*/ 9814 | dirty[1] & /*$$scope, i, item*/ 11264) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*VirtualList*/ ctx[3])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(286:4) {#if isVirtualList}",
    		ctx
    	});

    	return block;
    }

    // (331:8) {:else}
    function create_else_block_2(ctx) {
    	let if_block_anchor;
    	let if_block = !/*hideEmptyState*/ ctx[11] && create_if_block_2$4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (!/*hideEmptyState*/ ctx[11]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2$4(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(331:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (332:12) {#if !hideEmptyState}
    function create_if_block_2$4(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*noOptionsMessage*/ ctx[12]);
    			attr_dev(div, "class", "empty svelte-1uyqfml");
    			add_location(div, file$e, 332, 16, 10333);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*noOptionsMessage*/ 4096) set_data_dev(t, /*noOptionsMessage*/ ctx[12]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(332:12) {#if !hideEmptyState}",
    		ctx
    	});

    	return block;
    }

    // (313:12) {:else}
    function create_else_block_1$1(ctx) {
    	let div;
    	let switch_instance;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*Item*/ ctx[4];

    	function switch_props(ctx) {
    		return {
    			props: {
    				item: /*item*/ ctx[41],
    				filterText: /*filterText*/ ctx[13],
    				getOptionLabel: /*getOptionLabel*/ ctx[6],
    				isFirst: isItemFirst(/*i*/ ctx[42]),
    				isActive: isItemActive(/*item*/ ctx[41], /*value*/ ctx[9], /*optionIdentifier*/ ctx[10]),
    				isHover: isItemHover(/*hoverItemIndex*/ ctx[2], /*item*/ ctx[41], /*i*/ ctx[42], /*items*/ ctx[1]),
    				isSelectable: isItemSelectable(/*item*/ ctx[41])
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	function mouseover_handler_1() {
    		return /*mouseover_handler_1*/ ctx[29](/*i*/ ctx[42]);
    	}

    	function focus_handler_1() {
    		return /*focus_handler_1*/ ctx[30](/*i*/ ctx[42]);
    	}

    	function click_handler_1(...args) {
    		return /*click_handler_1*/ ctx[31](/*item*/ ctx[41], /*i*/ ctx[42], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			t = space();
    			attr_dev(div, "class", "listItem");
    			attr_dev(div, "tabindex", "-1");
    			add_location(div, file$e, 313, 16, 9513);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			append_dev(div, t);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "mouseover", mouseover_handler_1, false, false, false),
    					listen_dev(div, "focus", focus_handler_1, false, false, false),
    					listen_dev(div, "click", click_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const switch_instance_changes = {};
    			if (dirty[0] & /*items*/ 2) switch_instance_changes.item = /*item*/ ctx[41];
    			if (dirty[0] & /*filterText*/ 8192) switch_instance_changes.filterText = /*filterText*/ ctx[13];
    			if (dirty[0] & /*getOptionLabel*/ 64) switch_instance_changes.getOptionLabel = /*getOptionLabel*/ ctx[6];
    			if (dirty[0] & /*items, value, optionIdentifier*/ 1538) switch_instance_changes.isActive = isItemActive(/*item*/ ctx[41], /*value*/ ctx[9], /*optionIdentifier*/ ctx[10]);
    			if (dirty[0] & /*hoverItemIndex, items*/ 6) switch_instance_changes.isHover = isItemHover(/*hoverItemIndex*/ ctx[2], /*item*/ ctx[41], /*i*/ ctx[42], /*items*/ ctx[1]);
    			if (dirty[0] & /*items*/ 2) switch_instance_changes.isSelectable = isItemSelectable(/*item*/ ctx[41]);

    			if (switch_value !== (switch_value = /*Item*/ ctx[4])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, t);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(313:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (311:12) {#if item.isGroupHeader && !item.isSelectable}
    function create_if_block_1$3(ctx) {
    	let div;
    	let t_value = /*getGroupHeaderLabel*/ ctx[7](/*item*/ ctx[41]) + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "listGroupTitle svelte-1uyqfml");
    			add_location(div, file$e, 311, 16, 9415);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*getGroupHeaderLabel, items*/ 130 && t_value !== (t_value = /*getGroupHeaderLabel*/ ctx[7](/*item*/ ctx[41]) + "")) set_data_dev(t, t_value);
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(311:12) {#if item.isGroupHeader && !item.isSelectable}",
    		ctx
    	});

    	return block;
    }

    // (310:8) {#each items as item, i}
    function create_each_block$6(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$3, create_else_block_1$1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*item*/ ctx[41].isGroupHeader && !/*item*/ ctx[41].isSelectable) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(310:8) {#each items as item, i}",
    		ctx
    	});

    	return block;
    }

    // (287:8) <svelte:component             this={VirtualList}             {items}             {itemHeight}             let:item             let:i>
    function create_default_slot$2(ctx) {
    	let div;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*Item*/ ctx[4];

    	function switch_props(ctx) {
    		return {
    			props: {
    				item: /*item*/ ctx[41],
    				filterText: /*filterText*/ ctx[13],
    				getOptionLabel: /*getOptionLabel*/ ctx[6],
    				isFirst: isItemFirst(/*i*/ ctx[42]),
    				isActive: isItemActive(/*item*/ ctx[41], /*value*/ ctx[9], /*optionIdentifier*/ ctx[10]),
    				isHover: isItemHover(/*hoverItemIndex*/ ctx[2], /*item*/ ctx[41], /*i*/ ctx[42], /*items*/ ctx[1]),
    				isSelectable: isItemSelectable(/*item*/ ctx[41])
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	function mouseover_handler() {
    		return /*mouseover_handler*/ ctx[26](/*i*/ ctx[42]);
    	}

    	function focus_handler() {
    		return /*focus_handler*/ ctx[27](/*i*/ ctx[42]);
    	}

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[28](/*item*/ ctx[41], /*i*/ ctx[42], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div, "class", "listItem");
    			add_location(div, file$e, 292, 12, 8621);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "mouseover", mouseover_handler, false, false, false),
    					listen_dev(div, "focus", focus_handler, false, false, false),
    					listen_dev(div, "click", click_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const switch_instance_changes = {};
    			if (dirty[1] & /*item*/ 1024) switch_instance_changes.item = /*item*/ ctx[41];
    			if (dirty[0] & /*filterText*/ 8192) switch_instance_changes.filterText = /*filterText*/ ctx[13];
    			if (dirty[0] & /*getOptionLabel*/ 64) switch_instance_changes.getOptionLabel = /*getOptionLabel*/ ctx[6];
    			if (dirty[1] & /*i*/ 2048) switch_instance_changes.isFirst = isItemFirst(/*i*/ ctx[42]);
    			if (dirty[0] & /*value, optionIdentifier*/ 1536 | dirty[1] & /*item*/ 1024) switch_instance_changes.isActive = isItemActive(/*item*/ ctx[41], /*value*/ ctx[9], /*optionIdentifier*/ ctx[10]);
    			if (dirty[0] & /*hoverItemIndex, items*/ 6 | dirty[1] & /*item, i*/ 3072) switch_instance_changes.isHover = isItemHover(/*hoverItemIndex*/ ctx[2], /*item*/ ctx[41], /*i*/ ctx[42], /*items*/ ctx[1]);
    			if (dirty[1] & /*item*/ 1024) switch_instance_changes.isSelectable = isItemSelectable(/*item*/ ctx[41]);

    			if (switch_value !== (switch_value = /*Item*/ ctx[4])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(287:8) <svelte:component             this={VirtualList}             {items}             {itemHeight}             let:item             let:i>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$9, create_else_block$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isVirtualList*/ ctx[5]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "listContainer svelte-1uyqfml");
    			attr_dev(div, "style", /*listStyle*/ ctx[14]);
    			toggle_class(div, "virtualList", /*isVirtualList*/ ctx[5]);
    			add_location(div, file$e, 280, 0, 8325);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			/*div_binding*/ ctx[32](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "keydown", /*handleKeyDown*/ ctx[17], false, false, false),
    					listen_dev(window, "resize", /*computePlacement*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}

    			if (!current || dirty[0] & /*listStyle*/ 16384) {
    				attr_dev(div, "style", /*listStyle*/ ctx[14]);
    			}

    			if (dirty[0] & /*isVirtualList*/ 32) {
    				toggle_class(div, "virtualList", /*isVirtualList*/ ctx[5]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    			/*div_binding*/ ctx[32](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function isItemActive(item, value, optionIdentifier) {
    	return value && value[optionIdentifier] === item[optionIdentifier];
    }

    function isItemFirst(itemIndex) {
    	return itemIndex === 0;
    }

    function isItemHover(hoverItemIndex, item, itemIndex, items) {
    	return isItemSelectable(item) && (hoverItemIndex === itemIndex || items.length === 1);
    }

    function isItemSelectable(item) {
    	return item.isGroupHeader && item.isSelectable || item.selectable || !item.hasOwnProperty('selectable'); // Default; if `selectable` was not specified, the object is selectable
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('List', slots, []);
    	const dispatch = createEventDispatcher();
    	let { container = undefined } = $$props;
    	let { VirtualList = null } = $$props;
    	let { Item: Item$1 = Item } = $$props;
    	let { isVirtualList = false } = $$props;
    	let { items = [] } = $$props;
    	let { labelIdentifier = 'label' } = $$props;

    	let { getOptionLabel = (option, filterText) => {
    		if (option) return option.isCreator
    		? `Create \"${filterText}\"`
    		: option[labelIdentifier];
    	} } = $$props;

    	let { getGroupHeaderLabel = null } = $$props;
    	let { itemHeight = 40 } = $$props;
    	let { hoverItemIndex = 0 } = $$props;
    	let { value = undefined } = $$props;
    	let { optionIdentifier = 'value' } = $$props;
    	let { hideEmptyState = false } = $$props;
    	let { noOptionsMessage = 'No options' } = $$props;
    	let { isMulti = false } = $$props;
    	let { activeItemIndex = 0 } = $$props;
    	let { filterText = '' } = $$props;
    	let { parent = null } = $$props;
    	let { listPlacement = null } = $$props;
    	let { listAutoWidth = null } = $$props;
    	let { listOffset = 5 } = $$props;
    	let isScrollingTimer = 0;
    	let isScrolling = false;
    	let prev_items;

    	onMount(() => {
    		if (items.length > 0 && !isMulti && value) {
    			const _hoverItemIndex = items.findIndex(item => item[optionIdentifier] === value[optionIdentifier]);

    			if (_hoverItemIndex) {
    				$$invalidate(2, hoverItemIndex = _hoverItemIndex);
    			}
    		}

    		scrollToActiveItem('active');

    		container.addEventListener(
    			'scroll',
    			() => {
    				clearTimeout(isScrollingTimer);

    				isScrollingTimer = setTimeout(
    					() => {
    						isScrolling = false;
    					},
    					100
    				);
    			},
    			false
    		);
    	});

    	beforeUpdate(() => {
    		if (!items) $$invalidate(1, items = []);

    		if (items !== prev_items && items.length > 0) {
    			$$invalidate(2, hoverItemIndex = 0);
    		}

    		prev_items = items;
    	});

    	function handleSelect(item) {
    		if (item.isCreator) return;
    		dispatch('itemSelected', item);
    	}

    	function handleHover(i) {
    		if (isScrolling) return;
    		$$invalidate(2, hoverItemIndex = i);
    	}

    	function handleClick(args) {
    		const { item, i, event } = args;
    		event.stopPropagation();
    		if (value && !isMulti && value[optionIdentifier] === item[optionIdentifier]) return closeList();

    		if (item.isCreator) {
    			dispatch('itemCreated', filterText);
    		} else if (isItemSelectable(item)) {
    			$$invalidate(19, activeItemIndex = i);
    			$$invalidate(2, hoverItemIndex = i);
    			handleSelect(item);
    		}
    	}

    	function closeList() {
    		dispatch('closeList');
    	}

    	async function updateHoverItem(increment) {
    		if (isVirtualList) return;
    		let isNonSelectableItem = true;

    		while (isNonSelectableItem) {
    			if (increment > 0 && hoverItemIndex === items.length - 1) {
    				$$invalidate(2, hoverItemIndex = 0);
    			} else if (increment < 0 && hoverItemIndex === 0) {
    				$$invalidate(2, hoverItemIndex = items.length - 1);
    			} else {
    				$$invalidate(2, hoverItemIndex = hoverItemIndex + increment);
    			}

    			isNonSelectableItem = !isItemSelectable(items[hoverItemIndex]);
    		}

    		await tick();
    		scrollToActiveItem('hover');
    	}

    	function handleKeyDown(e) {
    		switch (e.key) {
    			case 'Escape':
    				e.preventDefault();
    				closeList();
    				break;
    			case 'ArrowDown':
    				e.preventDefault();
    				items.length && updateHoverItem(1);
    				break;
    			case 'ArrowUp':
    				e.preventDefault();
    				items.length && updateHoverItem(-1);
    				break;
    			case 'Enter':
    				e.preventDefault();
    				if (items.length === 0) break;
    				const hoverItem = items[hoverItemIndex];
    				if (value && !isMulti && value[optionIdentifier] === hoverItem[optionIdentifier]) {
    					closeList();
    					break;
    				}
    				if (hoverItem.isCreator) {
    					dispatch('itemCreated', filterText);
    				} else {
    					$$invalidate(19, activeItemIndex = hoverItemIndex);
    					handleSelect(items[hoverItemIndex]);
    				}
    				break;
    			case 'Tab':
    				e.preventDefault();
    				if (items.length === 0) {
    					return closeList();
    				}
    				if (value && value[optionIdentifier] === items[hoverItemIndex][optionIdentifier]) return closeList();
    				$$invalidate(19, activeItemIndex = hoverItemIndex);
    				handleSelect(items[hoverItemIndex]);
    				break;
    		}
    	}

    	function scrollToActiveItem(className) {
    		if (isVirtualList || !container) return;
    		let offsetBounding;
    		const focusedElemBounding = container.querySelector(`.listItem .${className}`);

    		if (focusedElemBounding) {
    			offsetBounding = container.getBoundingClientRect().bottom - focusedElemBounding.getBoundingClientRect().bottom;
    		}

    		$$invalidate(0, container.scrollTop -= offsetBounding, container);
    	}

    	let listStyle;

    	function computePlacement() {
    		const { height, width } = parent.getBoundingClientRect();
    		$$invalidate(14, listStyle = '');
    		$$invalidate(14, listStyle += `min-width:${width}px;width:${listAutoWidth ? 'auto' : '100%'};`);

    		if (listPlacement === 'top' || listPlacement === 'auto' && isOutOfViewport(parent, container).bottom) {
    			$$invalidate(14, listStyle += `bottom:${height + listOffset}px;`);
    		} else {
    			$$invalidate(14, listStyle += `top:${height + listOffset}px;`);
    		}
    	}

    	const writable_props = [
    		'container',
    		'VirtualList',
    		'Item',
    		'isVirtualList',
    		'items',
    		'labelIdentifier',
    		'getOptionLabel',
    		'getGroupHeaderLabel',
    		'itemHeight',
    		'hoverItemIndex',
    		'value',
    		'optionIdentifier',
    		'hideEmptyState',
    		'noOptionsMessage',
    		'isMulti',
    		'activeItemIndex',
    		'filterText',
    		'parent',
    		'listPlacement',
    		'listAutoWidth',
    		'listOffset'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<List> was created with unknown prop '${key}'`);
    	});

    	const mouseover_handler = i => handleHover(i);
    	const focus_handler = i => handleHover(i);
    	const click_handler = (item, i, event) => handleClick({ item, i, event });
    	const mouseover_handler_1 = i => handleHover(i);
    	const focus_handler_1 = i => handleHover(i);
    	const click_handler_1 = (item, i, event) => handleClick({ item, i, event });

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			container = $$value;
    			$$invalidate(0, container);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('VirtualList' in $$props) $$invalidate(3, VirtualList = $$props.VirtualList);
    		if ('Item' in $$props) $$invalidate(4, Item$1 = $$props.Item);
    		if ('isVirtualList' in $$props) $$invalidate(5, isVirtualList = $$props.isVirtualList);
    		if ('items' in $$props) $$invalidate(1, items = $$props.items);
    		if ('labelIdentifier' in $$props) $$invalidate(20, labelIdentifier = $$props.labelIdentifier);
    		if ('getOptionLabel' in $$props) $$invalidate(6, getOptionLabel = $$props.getOptionLabel);
    		if ('getGroupHeaderLabel' in $$props) $$invalidate(7, getGroupHeaderLabel = $$props.getGroupHeaderLabel);
    		if ('itemHeight' in $$props) $$invalidate(8, itemHeight = $$props.itemHeight);
    		if ('hoverItemIndex' in $$props) $$invalidate(2, hoverItemIndex = $$props.hoverItemIndex);
    		if ('value' in $$props) $$invalidate(9, value = $$props.value);
    		if ('optionIdentifier' in $$props) $$invalidate(10, optionIdentifier = $$props.optionIdentifier);
    		if ('hideEmptyState' in $$props) $$invalidate(11, hideEmptyState = $$props.hideEmptyState);
    		if ('noOptionsMessage' in $$props) $$invalidate(12, noOptionsMessage = $$props.noOptionsMessage);
    		if ('isMulti' in $$props) $$invalidate(21, isMulti = $$props.isMulti);
    		if ('activeItemIndex' in $$props) $$invalidate(19, activeItemIndex = $$props.activeItemIndex);
    		if ('filterText' in $$props) $$invalidate(13, filterText = $$props.filterText);
    		if ('parent' in $$props) $$invalidate(22, parent = $$props.parent);
    		if ('listPlacement' in $$props) $$invalidate(23, listPlacement = $$props.listPlacement);
    		if ('listAutoWidth' in $$props) $$invalidate(24, listAutoWidth = $$props.listAutoWidth);
    		if ('listOffset' in $$props) $$invalidate(25, listOffset = $$props.listOffset);
    	};

    	$$self.$capture_state = () => ({
    		beforeUpdate,
    		createEventDispatcher,
    		onMount,
    		tick,
    		isOutOfViewport,
    		ItemComponent: Item,
    		dispatch,
    		container,
    		VirtualList,
    		Item: Item$1,
    		isVirtualList,
    		items,
    		labelIdentifier,
    		getOptionLabel,
    		getGroupHeaderLabel,
    		itemHeight,
    		hoverItemIndex,
    		value,
    		optionIdentifier,
    		hideEmptyState,
    		noOptionsMessage,
    		isMulti,
    		activeItemIndex,
    		filterText,
    		parent,
    		listPlacement,
    		listAutoWidth,
    		listOffset,
    		isScrollingTimer,
    		isScrolling,
    		prev_items,
    		handleSelect,
    		handleHover,
    		handleClick,
    		closeList,
    		updateHoverItem,
    		handleKeyDown,
    		scrollToActiveItem,
    		isItemActive,
    		isItemFirst,
    		isItemHover,
    		isItemSelectable,
    		listStyle,
    		computePlacement
    	});

    	$$self.$inject_state = $$props => {
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('VirtualList' in $$props) $$invalidate(3, VirtualList = $$props.VirtualList);
    		if ('Item' in $$props) $$invalidate(4, Item$1 = $$props.Item);
    		if ('isVirtualList' in $$props) $$invalidate(5, isVirtualList = $$props.isVirtualList);
    		if ('items' in $$props) $$invalidate(1, items = $$props.items);
    		if ('labelIdentifier' in $$props) $$invalidate(20, labelIdentifier = $$props.labelIdentifier);
    		if ('getOptionLabel' in $$props) $$invalidate(6, getOptionLabel = $$props.getOptionLabel);
    		if ('getGroupHeaderLabel' in $$props) $$invalidate(7, getGroupHeaderLabel = $$props.getGroupHeaderLabel);
    		if ('itemHeight' in $$props) $$invalidate(8, itemHeight = $$props.itemHeight);
    		if ('hoverItemIndex' in $$props) $$invalidate(2, hoverItemIndex = $$props.hoverItemIndex);
    		if ('value' in $$props) $$invalidate(9, value = $$props.value);
    		if ('optionIdentifier' in $$props) $$invalidate(10, optionIdentifier = $$props.optionIdentifier);
    		if ('hideEmptyState' in $$props) $$invalidate(11, hideEmptyState = $$props.hideEmptyState);
    		if ('noOptionsMessage' in $$props) $$invalidate(12, noOptionsMessage = $$props.noOptionsMessage);
    		if ('isMulti' in $$props) $$invalidate(21, isMulti = $$props.isMulti);
    		if ('activeItemIndex' in $$props) $$invalidate(19, activeItemIndex = $$props.activeItemIndex);
    		if ('filterText' in $$props) $$invalidate(13, filterText = $$props.filterText);
    		if ('parent' in $$props) $$invalidate(22, parent = $$props.parent);
    		if ('listPlacement' in $$props) $$invalidate(23, listPlacement = $$props.listPlacement);
    		if ('listAutoWidth' in $$props) $$invalidate(24, listAutoWidth = $$props.listAutoWidth);
    		if ('listOffset' in $$props) $$invalidate(25, listOffset = $$props.listOffset);
    		if ('isScrollingTimer' in $$props) isScrollingTimer = $$props.isScrollingTimer;
    		if ('isScrolling' in $$props) isScrolling = $$props.isScrolling;
    		if ('prev_items' in $$props) prev_items = $$props.prev_items;
    		if ('listStyle' in $$props) $$invalidate(14, listStyle = $$props.listStyle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*parent, container*/ 4194305) {
    			{
    				if (parent && container) computePlacement();
    			}
    		}
    	};

    	return [
    		container,
    		items,
    		hoverItemIndex,
    		VirtualList,
    		Item$1,
    		isVirtualList,
    		getOptionLabel,
    		getGroupHeaderLabel,
    		itemHeight,
    		value,
    		optionIdentifier,
    		hideEmptyState,
    		noOptionsMessage,
    		filterText,
    		listStyle,
    		handleHover,
    		handleClick,
    		handleKeyDown,
    		computePlacement,
    		activeItemIndex,
    		labelIdentifier,
    		isMulti,
    		parent,
    		listPlacement,
    		listAutoWidth,
    		listOffset,
    		mouseover_handler,
    		focus_handler,
    		click_handler,
    		mouseover_handler_1,
    		focus_handler_1,
    		click_handler_1,
    		div_binding
    	];
    }

    class List extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$f,
    			create_fragment$f,
    			safe_not_equal,
    			{
    				container: 0,
    				VirtualList: 3,
    				Item: 4,
    				isVirtualList: 5,
    				items: 1,
    				labelIdentifier: 20,
    				getOptionLabel: 6,
    				getGroupHeaderLabel: 7,
    				itemHeight: 8,
    				hoverItemIndex: 2,
    				value: 9,
    				optionIdentifier: 10,
    				hideEmptyState: 11,
    				noOptionsMessage: 12,
    				isMulti: 21,
    				activeItemIndex: 19,
    				filterText: 13,
    				parent: 22,
    				listPlacement: 23,
    				listAutoWidth: 24,
    				listOffset: 25
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "List",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get container() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set container(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get VirtualList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set VirtualList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Item() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Item(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isVirtualList() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isVirtualList(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get items() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelIdentifier() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelIdentifier(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getOptionLabel() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getOptionLabel(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getGroupHeaderLabel() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getGroupHeaderLabel(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemHeight() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemHeight(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hoverItemIndex() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hoverItemIndex(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get optionIdentifier() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set optionIdentifier(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideEmptyState() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideEmptyState(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noOptionsMessage() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noOptionsMessage(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isMulti() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMulti(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeItemIndex() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeItemIndex(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filterText() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filterText(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get parent() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set parent(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listPlacement() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listPlacement(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listAutoWidth() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listAutoWidth(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listOffset() {
    		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listOffset(value) {
    		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/Selection.svelte generated by Svelte v3.48.0 */

    const file$d = "node_modules/svelte-select/src/Selection.svelte";

    function create_fragment$e(ctx) {
    	let div;
    	let raw_value = /*getSelectionLabel*/ ctx[0](/*item*/ ctx[1]) + "";

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "selection svelte-pu1q1n");
    			add_location(div, file$d, 13, 0, 230);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*getSelectionLabel, item*/ 3 && raw_value !== (raw_value = /*getSelectionLabel*/ ctx[0](/*item*/ ctx[1]) + "")) div.innerHTML = raw_value;		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Selection', slots, []);
    	let { getSelectionLabel = undefined } = $$props;
    	let { item = undefined } = $$props;
    	const writable_props = ['getSelectionLabel', 'item'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Selection> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('getSelectionLabel' in $$props) $$invalidate(0, getSelectionLabel = $$props.getSelectionLabel);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    	};

    	$$self.$capture_state = () => ({ getSelectionLabel, item });

    	$$self.$inject_state = $$props => {
    		if ('getSelectionLabel' in $$props) $$invalidate(0, getSelectionLabel = $$props.getSelectionLabel);
    		if ('item' in $$props) $$invalidate(1, item = $$props.item);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [getSelectionLabel, item];
    }

    class Selection$3 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$e, create_fragment$e, safe_not_equal, { getSelectionLabel: 0, item: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Selection",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get getSelectionLabel() {
    		throw new Error("<Selection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getSelectionLabel(value) {
    		throw new Error("<Selection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get item() {
    		throw new Error("<Selection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<Selection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/MultiSelection.svelte generated by Svelte v3.48.0 */
    const file$c = "node_modules/svelte-select/src/MultiSelection.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	child_ctx[11] = i;
    	return child_ctx;
    }

    // (87:8) {#if !isDisabled && !multiFullItemClearable}
    function create_if_block$8(ctx) {
    	let div;
    	let svg;
    	let path;
    	let mounted;
    	let dispose;

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[6](/*i*/ ctx[11], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z");
    			add_location(path, file$c, 97, 20, 3027);
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "viewBox", "-2 -2 50 50");
    			attr_dev(svg, "focusable", "false");
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "role", "presentation");
    			attr_dev(svg, "class", "svelte-liu9pa");
    			add_location(svg, file$c, 90, 16, 2775);
    			attr_dev(div, "class", "multiSelectItem_clear svelte-liu9pa");
    			add_location(div, file$c, 87, 12, 2647);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(87:8) {#if !isDisabled && !multiFullItemClearable}",
    		ctx
    	});

    	return block;
    }

    // (77:0) {#each value as item, i}
    function create_each_block$5(ctx) {
    	let div1;
    	let div0;
    	let raw_value = /*getSelectionLabel*/ ctx[4](/*item*/ ctx[9]) + "";
    	let t0;
    	let t1;
    	let div1_class_value;
    	let mounted;
    	let dispose;
    	let if_block = !/*isDisabled*/ ctx[2] && !/*multiFullItemClearable*/ ctx[3] && create_if_block$8(ctx);

    	function click_handler_1(...args) {
    		return /*click_handler_1*/ ctx[7](/*i*/ ctx[11], ...args);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			attr_dev(div0, "class", "multiSelectItem_label svelte-liu9pa");
    			add_location(div0, file$c, 83, 8, 2487);
    			attr_dev(div1, "class", div1_class_value = "multiSelectItem " + (/*activeValue*/ ctx[1] === /*i*/ ctx[11] ? 'active' : '') + " " + (/*isDisabled*/ ctx[2] ? 'disabled' : '') + " svelte-liu9pa");
    			add_location(div1, file$c, 77, 4, 2256);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			div0.innerHTML = raw_value;
    			append_dev(div1, t0);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t1);

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*getSelectionLabel, value*/ 17 && raw_value !== (raw_value = /*getSelectionLabel*/ ctx[4](/*item*/ ctx[9]) + "")) div0.innerHTML = raw_value;
    			if (!/*isDisabled*/ ctx[2] && !/*multiFullItemClearable*/ ctx[3]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					if_block.m(div1, t1);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*activeValue, isDisabled*/ 6 && div1_class_value !== (div1_class_value = "multiSelectItem " + (/*activeValue*/ ctx[1] === /*i*/ ctx[11] ? 'active' : '') + " " + (/*isDisabled*/ ctx[2] ? 'disabled' : '') + " svelte-liu9pa")) {
    				attr_dev(div1, "class", div1_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(77:0) {#each value as item, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let each_1_anchor;
    	let each_value = /*value*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*activeValue, isDisabled, multiFullItemClearable, handleClear, getSelectionLabel, value*/ 63) {
    				each_value = /*value*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MultiSelection', slots, []);
    	const dispatch = createEventDispatcher();
    	let { value = [] } = $$props;
    	let { activeValue = undefined } = $$props;
    	let { isDisabled = false } = $$props;
    	let { multiFullItemClearable = false } = $$props;
    	let { getSelectionLabel = undefined } = $$props;

    	function handleClear(i, event) {
    		event.stopPropagation();
    		dispatch('multiItemClear', { i });
    	}

    	const writable_props = [
    		'value',
    		'activeValue',
    		'isDisabled',
    		'multiFullItemClearable',
    		'getSelectionLabel'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MultiSelection> was created with unknown prop '${key}'`);
    	});

    	const click_handler = (i, event) => handleClear(i, event);
    	const click_handler_1 = (i, event) => multiFullItemClearable ? handleClear(i, event) : {};

    	$$self.$$set = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('activeValue' in $$props) $$invalidate(1, activeValue = $$props.activeValue);
    		if ('isDisabled' in $$props) $$invalidate(2, isDisabled = $$props.isDisabled);
    		if ('multiFullItemClearable' in $$props) $$invalidate(3, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('getSelectionLabel' in $$props) $$invalidate(4, getSelectionLabel = $$props.getSelectionLabel);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		value,
    		activeValue,
    		isDisabled,
    		multiFullItemClearable,
    		getSelectionLabel,
    		handleClear
    	});

    	$$self.$inject_state = $$props => {
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('activeValue' in $$props) $$invalidate(1, activeValue = $$props.activeValue);
    		if ('isDisabled' in $$props) $$invalidate(2, isDisabled = $$props.isDisabled);
    		if ('multiFullItemClearable' in $$props) $$invalidate(3, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('getSelectionLabel' in $$props) $$invalidate(4, getSelectionLabel = $$props.getSelectionLabel);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		activeValue,
    		isDisabled,
    		multiFullItemClearable,
    		getSelectionLabel,
    		handleClear,
    		click_handler,
    		click_handler_1
    	];
    }

    class MultiSelection extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$d, create_fragment$d, safe_not_equal, {
    			value: 0,
    			activeValue: 1,
    			isDisabled: 2,
    			multiFullItemClearable: 3,
    			getSelectionLabel: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MultiSelection",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get value() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeValue() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeValue(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isDisabled() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isDisabled(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiFullItemClearable() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiFullItemClearable(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getSelectionLabel() {
    		throw new Error("<MultiSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getSelectionLabel(value) {
    		throw new Error("<MultiSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/VirtualList.svelte generated by Svelte v3.48.0 */
    const file$b = "node_modules/svelte-select/src/VirtualList.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    const get_default_slot_changes = dirty => ({
    	item: dirty & /*visible*/ 32,
    	i: dirty & /*visible*/ 32,
    	hoverItemIndex: dirty & /*hoverItemIndex*/ 2
    });

    const get_default_slot_context = ctx => ({
    	item: /*row*/ ctx[23].data,
    	i: /*row*/ ctx[23].index,
    	hoverItemIndex: /*hoverItemIndex*/ ctx[1]
    });

    // (154:69) Missing template
    function fallback_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Missing template");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(154:69) Missing template",
    		ctx
    	});

    	return block;
    }

    // (152:8) {#each visible as row (row.index)}
    function create_each_block$4(key_1, ctx) {
    	let svelte_virtual_list_row;
    	let t;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[15].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], get_default_slot_context);
    	const default_slot_or_fallback = default_slot || fallback_block(ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			svelte_virtual_list_row = element("svelte-virtual-list-row");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			t = space();
    			set_custom_element_data(svelte_virtual_list_row, "class", "svelte-g2cagw");
    			add_location(svelte_virtual_list_row, file$b, 152, 12, 3778);
    			this.first = svelte_virtual_list_row;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svelte_virtual_list_row, anchor);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(svelte_virtual_list_row, null);
    			}

    			append_dev(svelte_virtual_list_row, t);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, visible, hoverItemIndex*/ 16418)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[14],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svelte_virtual_list_row);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(152:8) {#each visible as row (row.index)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let svelte_virtual_list_viewport;
    	let svelte_virtual_list_contents;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let svelte_virtual_list_viewport_resize_listener;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*visible*/ ctx[5];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*row*/ ctx[23].index;
    	validate_each_keys(ctx, each_value, get_each_context$4, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$4(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$4(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			svelte_virtual_list_viewport = element("svelte-virtual-list-viewport");
    			svelte_virtual_list_contents = element("svelte-virtual-list-contents");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_style(svelte_virtual_list_contents, "padding-top", /*top*/ ctx[6] + "px");
    			set_style(svelte_virtual_list_contents, "padding-bottom", /*bottom*/ ctx[7] + "px");
    			set_custom_element_data(svelte_virtual_list_contents, "class", "svelte-g2cagw");
    			add_location(svelte_virtual_list_contents, file$b, 148, 4, 3597);
    			set_style(svelte_virtual_list_viewport, "height", /*height*/ ctx[0]);
    			set_custom_element_data(svelte_virtual_list_viewport, "class", "svelte-g2cagw");
    			add_render_callback(() => /*svelte_virtual_list_viewport_elementresize_handler*/ ctx[18].call(svelte_virtual_list_viewport));
    			add_location(svelte_virtual_list_viewport, file$b, 143, 0, 3437);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svelte_virtual_list_viewport, anchor);
    			append_dev(svelte_virtual_list_viewport, svelte_virtual_list_contents);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(svelte_virtual_list_contents, null);
    			}

    			/*svelte_virtual_list_contents_binding*/ ctx[16](svelte_virtual_list_contents);
    			/*svelte_virtual_list_viewport_binding*/ ctx[17](svelte_virtual_list_viewport);
    			svelte_virtual_list_viewport_resize_listener = add_resize_listener(svelte_virtual_list_viewport, /*svelte_virtual_list_viewport_elementresize_handler*/ ctx[18].bind(svelte_virtual_list_viewport));
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(svelte_virtual_list_viewport, "scroll", /*handle_scroll*/ ctx[8], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$$scope, visible, hoverItemIndex*/ 16418) {
    				each_value = /*visible*/ ctx[5];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$4, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, svelte_virtual_list_contents, outro_and_destroy_block, create_each_block$4, null, get_each_context$4);
    				check_outros();
    			}

    			if (!current || dirty & /*top*/ 64) {
    				set_style(svelte_virtual_list_contents, "padding-top", /*top*/ ctx[6] + "px");
    			}

    			if (!current || dirty & /*bottom*/ 128) {
    				set_style(svelte_virtual_list_contents, "padding-bottom", /*bottom*/ ctx[7] + "px");
    			}

    			if (!current || dirty & /*height*/ 1) {
    				set_style(svelte_virtual_list_viewport, "height", /*height*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svelte_virtual_list_viewport);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			/*svelte_virtual_list_contents_binding*/ ctx[16](null);
    			/*svelte_virtual_list_viewport_binding*/ ctx[17](null);
    			svelte_virtual_list_viewport_resize_listener();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('VirtualList', slots, ['default']);
    	let { items = undefined } = $$props;
    	let { height = '100%' } = $$props;
    	let { itemHeight = 40 } = $$props;
    	let { hoverItemIndex = 0 } = $$props;
    	let { start = 0 } = $$props;
    	let { end = 0 } = $$props;
    	let height_map = [];
    	let rows;
    	let viewport;
    	let contents;
    	let viewport_height = 0;
    	let visible;
    	let mounted;
    	let top = 0;
    	let bottom = 0;
    	let average_height;

    	async function refresh(items, viewport_height, itemHeight) {
    		const { scrollTop } = viewport;
    		await tick();
    		let content_height = top - scrollTop;
    		let i = start;

    		while (content_height < viewport_height && i < items.length) {
    			let row = rows[i - start];

    			if (!row) {
    				$$invalidate(10, end = i + 1);
    				await tick();
    				row = rows[i - start];
    			}

    			const row_height = height_map[i] = itemHeight || row.offsetHeight;
    			content_height += row_height;
    			i += 1;
    		}

    		$$invalidate(10, end = i);
    		const remaining = items.length - end;
    		average_height = (top + content_height) / end;
    		$$invalidate(7, bottom = remaining * average_height);
    		height_map.length = items.length;
    		if (viewport) $$invalidate(3, viewport.scrollTop = 0, viewport);
    	}

    	async function handle_scroll() {
    		const { scrollTop } = viewport;
    		const old_start = start;

    		for (let v = 0; v < rows.length; v += 1) {
    			height_map[start + v] = itemHeight || rows[v].offsetHeight;
    		}

    		let i = 0;
    		let y = 0;

    		while (i < items.length) {
    			const row_height = height_map[i] || average_height;

    			if (y + row_height > scrollTop) {
    				$$invalidate(9, start = i);
    				$$invalidate(6, top = y);
    				break;
    			}

    			y += row_height;
    			i += 1;
    		}

    		while (i < items.length) {
    			y += height_map[i] || average_height;
    			i += 1;
    			if (y > scrollTop + viewport_height) break;
    		}

    		$$invalidate(10, end = i);
    		const remaining = items.length - end;
    		average_height = y / end;
    		while (i < items.length) height_map[i++] = average_height;
    		$$invalidate(7, bottom = remaining * average_height);

    		if (start < old_start) {
    			await tick();
    			let expected_height = 0;
    			let actual_height = 0;

    			for (let i = start; i < old_start; i += 1) {
    				if (rows[i - start]) {
    					expected_height += height_map[i];
    					actual_height += itemHeight || rows[i - start].offsetHeight;
    				}
    			}

    			const d = actual_height - expected_height;
    			viewport.scrollTo(0, scrollTop + d);
    		}
    	}

    	onMount(() => {
    		rows = contents.getElementsByTagName('svelte-virtual-list-row');
    		$$invalidate(13, mounted = true);
    	});

    	const writable_props = ['items', 'height', 'itemHeight', 'hoverItemIndex', 'start', 'end'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<VirtualList> was created with unknown prop '${key}'`);
    	});

    	function svelte_virtual_list_contents_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			contents = $$value;
    			$$invalidate(4, contents);
    		});
    	}

    	function svelte_virtual_list_viewport_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			viewport = $$value;
    			$$invalidate(3, viewport);
    		});
    	}

    	function svelte_virtual_list_viewport_elementresize_handler() {
    		viewport_height = this.offsetHeight;
    		$$invalidate(2, viewport_height);
    	}

    	$$self.$$set = $$props => {
    		if ('items' in $$props) $$invalidate(11, items = $$props.items);
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('itemHeight' in $$props) $$invalidate(12, itemHeight = $$props.itemHeight);
    		if ('hoverItemIndex' in $$props) $$invalidate(1, hoverItemIndex = $$props.hoverItemIndex);
    		if ('start' in $$props) $$invalidate(9, start = $$props.start);
    		if ('end' in $$props) $$invalidate(10, end = $$props.end);
    		if ('$$scope' in $$props) $$invalidate(14, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		tick,
    		items,
    		height,
    		itemHeight,
    		hoverItemIndex,
    		start,
    		end,
    		height_map,
    		rows,
    		viewport,
    		contents,
    		viewport_height,
    		visible,
    		mounted,
    		top,
    		bottom,
    		average_height,
    		refresh,
    		handle_scroll
    	});

    	$$self.$inject_state = $$props => {
    		if ('items' in $$props) $$invalidate(11, items = $$props.items);
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('itemHeight' in $$props) $$invalidate(12, itemHeight = $$props.itemHeight);
    		if ('hoverItemIndex' in $$props) $$invalidate(1, hoverItemIndex = $$props.hoverItemIndex);
    		if ('start' in $$props) $$invalidate(9, start = $$props.start);
    		if ('end' in $$props) $$invalidate(10, end = $$props.end);
    		if ('height_map' in $$props) height_map = $$props.height_map;
    		if ('rows' in $$props) rows = $$props.rows;
    		if ('viewport' in $$props) $$invalidate(3, viewport = $$props.viewport);
    		if ('contents' in $$props) $$invalidate(4, contents = $$props.contents);
    		if ('viewport_height' in $$props) $$invalidate(2, viewport_height = $$props.viewport_height);
    		if ('visible' in $$props) $$invalidate(5, visible = $$props.visible);
    		if ('mounted' in $$props) $$invalidate(13, mounted = $$props.mounted);
    		if ('top' in $$props) $$invalidate(6, top = $$props.top);
    		if ('bottom' in $$props) $$invalidate(7, bottom = $$props.bottom);
    		if ('average_height' in $$props) average_height = $$props.average_height;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*items, start, end*/ 3584) {
    			$$invalidate(5, visible = items.slice(start, end).map((data, i) => {
    				return { index: i + start, data };
    			}));
    		}

    		if ($$self.$$.dirty & /*mounted, items, viewport_height, itemHeight*/ 14340) {
    			if (mounted) refresh(items, viewport_height, itemHeight);
    		}
    	};

    	return [
    		height,
    		hoverItemIndex,
    		viewport_height,
    		viewport,
    		contents,
    		visible,
    		top,
    		bottom,
    		handle_scroll,
    		start,
    		end,
    		items,
    		itemHeight,
    		mounted,
    		$$scope,
    		slots,
    		svelte_virtual_list_contents_binding,
    		svelte_virtual_list_viewport_binding,
    		svelte_virtual_list_viewport_elementresize_handler
    	];
    }

    class VirtualList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			items: 11,
    			height: 0,
    			itemHeight: 12,
    			hoverItemIndex: 1,
    			start: 9,
    			end: 10
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "VirtualList",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get items() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemHeight() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemHeight(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hoverItemIndex() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hoverItemIndex(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get start() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set start(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get end() {
    		throw new Error("<VirtualList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set end(value) {
    		throw new Error("<VirtualList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-select/src/ClearIcon.svelte generated by Svelte v3.48.0 */

    const file$a = "node_modules/svelte-select/src/ClearIcon.svelte";

    function create_fragment$b(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "fill", "currentColor");
    			attr_dev(path, "d", "M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124\n    l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z");
    			add_location(path, file$a, 8, 4, 141);
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "viewBox", "-2 -2 50 50");
    			attr_dev(svg, "focusable", "false");
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "role", "presentation");
    			add_location(svg, file$a, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ClearIcon', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ClearIcon> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class ClearIcon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ClearIcon",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    function debounce(func, wait, immediate) {
        let timeout;

        return function executedFunction() {
            let context = this;
            let args = arguments;

            let later = function () {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };

            let callNow = immediate && !timeout;

            clearTimeout(timeout);

            timeout = setTimeout(later, wait);

            if (callNow) func.apply(context, args);
        };
    }

    /* node_modules/svelte-select/src/Select.svelte generated by Svelte v3.48.0 */

    const { Object: Object_1$1, console: console_1$4 } = globals;
    const file$9 = "node_modules/svelte-select/src/Select.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[103] = list[i];
    	return child_ctx;
    }

    // (876:8) {#if isFocused}
    function create_if_block_10$1(ctx) {
    	let span0;
    	let t0;
    	let t1;
    	let span1;
    	let t2;

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			t0 = text(/*ariaSelection*/ ctx[33]);
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*ariaContext*/ ctx[32]);
    			attr_dev(span0, "id", "aria-selection");
    			add_location(span0, file$9, 876, 12, 23842);
    			attr_dev(span1, "id", "aria-context");
    			add_location(span1, file$9, 877, 12, 23903);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			append_dev(span0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, span1, anchor);
    			append_dev(span1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[1] & /*ariaSelection*/ 4) set_data_dev(t0, /*ariaSelection*/ ctx[33]);
    			if (dirty[1] & /*ariaContext*/ 2) set_data_dev(t2, /*ariaContext*/ ctx[32]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(span1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$1.name,
    		type: "if",
    		source: "(876:8) {#if isFocused}",
    		ctx
    	});

    	return block;
    }

    // (884:4) {#if Icon}
    function create_if_block_9$1(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*iconProps*/ ctx[18]];
    	var switch_value = /*Icon*/ ctx[17];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty[0] & /*iconProps*/ 262144)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*iconProps*/ ctx[18])])
    			: {};

    			if (switch_value !== (switch_value = /*Icon*/ ctx[17])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$1.name,
    		type: "if",
    		source: "(884:4) {#if Icon}",
    		ctx
    	});

    	return block;
    }

    // (888:4) {#if showMultiSelect}
    function create_if_block_8$1(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*MultiSelection*/ ctx[26];

    	function switch_props(ctx) {
    		return {
    			props: {
    				value: /*value*/ ctx[2],
    				getSelectionLabel: /*getSelectionLabel*/ ctx[12],
    				activeValue: /*activeValue*/ ctx[30],
    				isDisabled: /*isDisabled*/ ctx[9],
    				multiFullItemClearable: /*multiFullItemClearable*/ ctx[8]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		switch_instance.$on("multiItemClear", /*handleMultiItemClear*/ ctx[38]);
    		switch_instance.$on("focus", /*handleFocus*/ ctx[40]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty[0] & /*value*/ 4) switch_instance_changes.value = /*value*/ ctx[2];
    			if (dirty[0] & /*getSelectionLabel*/ 4096) switch_instance_changes.getSelectionLabel = /*getSelectionLabel*/ ctx[12];
    			if (dirty[0] & /*activeValue*/ 1073741824) switch_instance_changes.activeValue = /*activeValue*/ ctx[30];
    			if (dirty[0] & /*isDisabled*/ 512) switch_instance_changes.isDisabled = /*isDisabled*/ ctx[9];
    			if (dirty[0] & /*multiFullItemClearable*/ 256) switch_instance_changes.multiFullItemClearable = /*multiFullItemClearable*/ ctx[8];

    			if (switch_value !== (switch_value = /*MultiSelection*/ ctx[26])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					switch_instance.$on("multiItemClear", /*handleMultiItemClear*/ ctx[38]);
    					switch_instance.$on("focus", /*handleFocus*/ ctx[40]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$1.name,
    		type: "if",
    		source: "(888:4) {#if showMultiSelect}",
    		ctx
    	});

    	return block;
    }

    // (910:4) {#if !isMulti && showSelectedItem}
    function create_if_block_7$1(ctx) {
    	let div;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*Selection*/ ctx[25];

    	function switch_props(ctx) {
    		return {
    			props: {
    				item: /*value*/ ctx[2],
    				getSelectionLabel: /*getSelectionLabel*/ ctx[12]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div, "class", "selectedItem svelte-17l1npl");
    			add_location(div, file$9, 910, 8, 24725);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "focus", /*handleFocus*/ ctx[40], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty[0] & /*value*/ 4) switch_instance_changes.item = /*value*/ ctx[2];
    			if (dirty[0] & /*getSelectionLabel*/ 4096) switch_instance_changes.getSelectionLabel = /*getSelectionLabel*/ ctx[12];

    			if (switch_value !== (switch_value = /*Selection*/ ctx[25])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(910:4) {#if !isMulti && showSelectedItem}",
    		ctx
    	});

    	return block;
    }

    // (919:4) {#if showClearIcon}
    function create_if_block_6$1(ctx) {
    	let div;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*ClearIcon*/ ctx[23];

    	function switch_props(ctx) {
    		return { $$inline: true };
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div, "class", "clearSelect svelte-17l1npl");
    			attr_dev(div, "aria-hidden", "true");
    			add_location(div, file$9, 919, 8, 24964);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", prevent_default(/*handleClear*/ ctx[27]), false, true, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (switch_value !== (switch_value = /*ClearIcon*/ ctx[23])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, null);
    				} else {
    					switch_instance = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(919:4) {#if showClearIcon}",
    		ctx
    	});

    	return block;
    }

    // (928:4) {#if !showClearIcon && (showIndicator || (showChevron && !value) || (!isSearchable && !isDisabled && !isWaiting && ((showSelectedItem && !isClearable) || !showSelectedItem)))}
    function create_if_block_4$2(ctx) {
    	let div;

    	function select_block_type(ctx, dirty) {
    		if (/*indicatorSvg*/ ctx[22]) return create_if_block_5$2;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "indicator svelte-17l1npl");
    			attr_dev(div, "aria-hidden", "true");
    			add_location(div, file$9, 928, 8, 25347);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(928:4) {#if !showClearIcon && (showIndicator || (showChevron && !value) || (!isSearchable && !isDisabled && !isWaiting && ((showSelectedItem && !isClearable) || !showSelectedItem)))}",
    		ctx
    	});

    	return block;
    }

    // (932:12) {:else}
    function create_else_block$4(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747\n          3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0\n          1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502\n          0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0\n          0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z");
    			add_location(path, file$9, 938, 20, 25704);
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "height", "100%");
    			attr_dev(svg, "viewBox", "0 0 20 20");
    			attr_dev(svg, "focusable", "false");
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "class", "svelte-17l1npl");
    			add_location(svg, file$9, 932, 16, 25494);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(932:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (930:12) {#if indicatorSvg}
    function create_if_block_5$2(ctx) {
    	let html_tag;
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag(false);
    			html_anchor = empty$3();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(/*indicatorSvg*/ ctx[22], target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*indicatorSvg*/ 4194304) html_tag.p(/*indicatorSvg*/ ctx[22]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(930:12) {#if indicatorSvg}",
    		ctx
    	});

    	return block;
    }

    // (950:4) {#if isWaiting}
    function create_if_block_3$3(ctx) {
    	let div;
    	let svg;
    	let circle;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			circle = svg_element("circle");
    			attr_dev(circle, "class", "spinner_path svelte-17l1npl");
    			attr_dev(circle, "cx", "50");
    			attr_dev(circle, "cy", "50");
    			attr_dev(circle, "r", "20");
    			attr_dev(circle, "fill", "none");
    			attr_dev(circle, "stroke", "currentColor");
    			attr_dev(circle, "stroke-width", "5");
    			attr_dev(circle, "stroke-miterlimit", "10");
    			add_location(circle, file$9, 952, 16, 26253);
    			attr_dev(svg, "class", "spinner_icon svelte-17l1npl");
    			attr_dev(svg, "viewBox", "25 25 50 50");
    			add_location(svg, file$9, 951, 12, 26188);
    			attr_dev(div, "class", "spinner svelte-17l1npl");
    			add_location(div, file$9, 950, 8, 26154);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, circle);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(950:4) {#if isWaiting}",
    		ctx
    	});

    	return block;
    }

    // (966:4) {#if listOpen}
    function create_if_block_2$3(ctx) {
    	let switch_instance;
    	let updating_hoverItemIndex;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*listProps*/ ctx[34]];

    	function switch_instance_hoverItemIndex_binding(value) {
    		/*switch_instance_hoverItemIndex_binding*/ ctx[84](value);
    	}

    	var switch_value = /*List*/ ctx[24];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		if (/*hoverItemIndex*/ ctx[28] !== void 0) {
    			switch_instance_props.hoverItemIndex = /*hoverItemIndex*/ ctx[28];
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		binding_callbacks.push(() => bind$1(switch_instance, 'hoverItemIndex', switch_instance_hoverItemIndex_binding));
    		switch_instance.$on("itemSelected", /*itemSelected*/ ctx[43]);
    		switch_instance.$on("itemCreated", /*itemCreated*/ ctx[44]);
    		switch_instance.$on("closeList", /*closeList*/ ctx[45]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty[1] & /*listProps*/ 8)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*listProps*/ ctx[34])])
    			: {};

    			if (!updating_hoverItemIndex && dirty[0] & /*hoverItemIndex*/ 268435456) {
    				updating_hoverItemIndex = true;
    				switch_instance_changes.hoverItemIndex = /*hoverItemIndex*/ ctx[28];
    				add_flush_callback(() => updating_hoverItemIndex = false);
    			}

    			if (switch_value !== (switch_value = /*List*/ ctx[24])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					binding_callbacks.push(() => bind$1(switch_instance, 'hoverItemIndex', switch_instance_hoverItemIndex_binding));
    					switch_instance.$on("itemSelected", /*itemSelected*/ ctx[43]);
    					switch_instance.$on("itemCreated", /*itemCreated*/ ctx[44]);
    					switch_instance.$on("closeList", /*closeList*/ ctx[45]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(966:4) {#if listOpen}",
    		ctx
    	});

    	return block;
    }

    // (976:4) {#if !isMulti || (isMulti && !showMultiSelect)}
    function create_if_block_1$2(ctx) {
    	let input_1;
    	let input_1_name_value;
    	let input_1_value_value;

    	const block = {
    		c: function create() {
    			input_1 = element("input");
    			attr_dev(input_1, "name", input_1_name_value = /*inputAttributes*/ ctx[16].name);
    			attr_dev(input_1, "type", "hidden");

    			input_1.value = input_1_value_value = /*value*/ ctx[2]
    			? /*getSelectionLabel*/ ctx[12](/*value*/ ctx[2])
    			: null;

    			attr_dev(input_1, "class", "svelte-17l1npl");
    			add_location(input_1, file$9, 976, 8, 26910);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*inputAttributes*/ 65536 && input_1_name_value !== (input_1_name_value = /*inputAttributes*/ ctx[16].name)) {
    				attr_dev(input_1, "name", input_1_name_value);
    			}

    			if (dirty[0] & /*value, getSelectionLabel*/ 4100 && input_1_value_value !== (input_1_value_value = /*value*/ ctx[2]
    			? /*getSelectionLabel*/ ctx[12](/*value*/ ctx[2])
    			: null)) {
    				prop_dev(input_1, "value", input_1_value_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(976:4) {#if !isMulti || (isMulti && !showMultiSelect)}",
    		ctx
    	});

    	return block;
    }

    // (983:4) {#if isMulti && showMultiSelect}
    function create_if_block$7(ctx) {
    	let each_1_anchor;
    	let each_value = /*value*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*inputAttributes, value, getSelectionLabel*/ 69636) {
    				each_value = /*value*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(983:4) {#if isMulti && showMultiSelect}",
    		ctx
    	});

    	return block;
    }

    // (984:8) {#each value as item}
    function create_each_block$3(ctx) {
    	let input_1;
    	let input_1_name_value;
    	let input_1_value_value;

    	const block = {
    		c: function create() {
    			input_1 = element("input");
    			attr_dev(input_1, "name", input_1_name_value = /*inputAttributes*/ ctx[16].name);
    			attr_dev(input_1, "type", "hidden");

    			input_1.value = input_1_value_value = /*item*/ ctx[103]
    			? /*getSelectionLabel*/ ctx[12](/*item*/ ctx[103])
    			: null;

    			attr_dev(input_1, "class", "svelte-17l1npl");
    			add_location(input_1, file$9, 984, 12, 27136);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*inputAttributes*/ 65536 && input_1_name_value !== (input_1_name_value = /*inputAttributes*/ ctx[16].name)) {
    				attr_dev(input_1, "name", input_1_name_value);
    			}

    			if (dirty[0] & /*value, getSelectionLabel*/ 4100 && input_1_value_value !== (input_1_value_value = /*item*/ ctx[103]
    			? /*getSelectionLabel*/ ctx[12](/*item*/ ctx[103])
    			: null)) {
    				prop_dev(input_1, "value", input_1_value_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(984:8) {#each value as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div;
    	let span;
    	let t0;
    	let t1;
    	let t2;
    	let input_1;
    	let input_1_readonly_value;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let div_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*isFocused*/ ctx[1] && create_if_block_10$1(ctx);
    	let if_block1 = /*Icon*/ ctx[17] && create_if_block_9$1(ctx);
    	let if_block2 = /*showMultiSelect*/ ctx[35] && create_if_block_8$1(ctx);

    	let input_1_levels = [
    		{
    			readOnly: input_1_readonly_value = !/*isSearchable*/ ctx[13]
    		},
    		/*_inputAttributes*/ ctx[31],
    		{ placeholder: /*placeholderText*/ ctx[36] },
    		{ style: /*inputStyles*/ ctx[14] },
    		{ disabled: /*isDisabled*/ ctx[9] }
    	];

    	let input_1_data = {};

    	for (let i = 0; i < input_1_levels.length; i += 1) {
    		input_1_data = assign(input_1_data, input_1_levels[i]);
    	}

    	let if_block3 = !/*isMulti*/ ctx[7] && /*showSelectedItem*/ ctx[29] && create_if_block_7$1(ctx);
    	let if_block4 = /*showClearIcon*/ ctx[37] && create_if_block_6$1(ctx);
    	let if_block5 = !/*showClearIcon*/ ctx[37] && (/*showIndicator*/ ctx[20] || /*showChevron*/ ctx[19] && !/*value*/ ctx[2] || !/*isSearchable*/ ctx[13] && !/*isDisabled*/ ctx[9] && !/*isWaiting*/ ctx[4] && (/*showSelectedItem*/ ctx[29] && !/*isClearable*/ ctx[15] || !/*showSelectedItem*/ ctx[29])) && create_if_block_4$2(ctx);
    	let if_block6 = /*isWaiting*/ ctx[4] && create_if_block_3$3(ctx);
    	let if_block7 = /*listOpen*/ ctx[5] && create_if_block_2$3(ctx);
    	let if_block8 = (!/*isMulti*/ ctx[7] || /*isMulti*/ ctx[7] && !/*showMultiSelect*/ ctx[35]) && create_if_block_1$2(ctx);
    	let if_block9 = /*isMulti*/ ctx[7] && /*showMultiSelect*/ ctx[35] && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			input_1 = element("input");
    			t3 = space();
    			if (if_block3) if_block3.c();
    			t4 = space();
    			if (if_block4) if_block4.c();
    			t5 = space();
    			if (if_block5) if_block5.c();
    			t6 = space();
    			if (if_block6) if_block6.c();
    			t7 = space();
    			if (if_block7) if_block7.c();
    			t8 = space();
    			if (if_block8) if_block8.c();
    			t9 = space();
    			if (if_block9) if_block9.c();
    			attr_dev(span, "aria-live", "polite");
    			attr_dev(span, "aria-atomic", "false");
    			attr_dev(span, "aria-relevant", "additions text");
    			attr_dev(span, "class", "a11yText svelte-17l1npl");
    			add_location(span, file$9, 870, 4, 23680);
    			set_attributes(input_1, input_1_data);
    			toggle_class(input_1, "svelte-17l1npl", true);
    			add_location(input_1, file$9, 899, 4, 24419);
    			attr_dev(div, "class", div_class_value = "selectContainer " + /*containerClasses*/ ctx[21] + " svelte-17l1npl");
    			attr_dev(div, "style", /*containerStyles*/ ctx[11]);
    			toggle_class(div, "hasError", /*hasError*/ ctx[10]);
    			toggle_class(div, "multiSelect", /*isMulti*/ ctx[7]);
    			toggle_class(div, "disabled", /*isDisabled*/ ctx[9]);
    			toggle_class(div, "focused", /*isFocused*/ ctx[1]);
    			add_location(div, file$9, 861, 0, 23429);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			if (if_block0) if_block0.m(span, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    			append_dev(div, t2);
    			append_dev(div, input_1);
    			if (input_1.autofocus) input_1.focus();
    			/*input_1_binding*/ ctx[82](input_1);
    			set_input_value(input_1, /*filterText*/ ctx[3]);
    			append_dev(div, t3);
    			if (if_block3) if_block3.m(div, null);
    			append_dev(div, t4);
    			if (if_block4) if_block4.m(div, null);
    			append_dev(div, t5);
    			if (if_block5) if_block5.m(div, null);
    			append_dev(div, t6);
    			if (if_block6) if_block6.m(div, null);
    			append_dev(div, t7);
    			if (if_block7) if_block7.m(div, null);
    			append_dev(div, t8);
    			if (if_block8) if_block8.m(div, null);
    			append_dev(div, t9);
    			if (if_block9) if_block9.m(div, null);
    			/*div_binding*/ ctx[85](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "click", /*handleWindowEvent*/ ctx[41], false, false, false),
    					listen_dev(window, "focusin", /*handleWindowEvent*/ ctx[41], false, false, false),
    					listen_dev(window, "keydown", /*handleKeyDown*/ ctx[39], false, false, false),
    					listen_dev(input_1, "focus", /*handleFocus*/ ctx[40], false, false, false),
    					listen_dev(input_1, "input", /*input_1_input_handler*/ ctx[83]),
    					listen_dev(div, "click", /*handleClick*/ ctx[42], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*isFocused*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_10$1(ctx);
    					if_block0.c();
    					if_block0.m(span, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*Icon*/ ctx[17]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*Icon*/ 131072) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_9$1(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*showMultiSelect*/ ctx[35]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[1] & /*showMultiSelect*/ 16) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_8$1(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, t2);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			set_attributes(input_1, input_1_data = get_spread_update(input_1_levels, [
    				(!current || dirty[0] & /*isSearchable*/ 8192 && input_1_readonly_value !== (input_1_readonly_value = !/*isSearchable*/ ctx[13])) && { readOnly: input_1_readonly_value },
    				dirty[1] & /*_inputAttributes*/ 1 && /*_inputAttributes*/ ctx[31],
    				(!current || dirty[1] & /*placeholderText*/ 32) && { placeholder: /*placeholderText*/ ctx[36] },
    				(!current || dirty[0] & /*inputStyles*/ 16384) && { style: /*inputStyles*/ ctx[14] },
    				(!current || dirty[0] & /*isDisabled*/ 512) && { disabled: /*isDisabled*/ ctx[9] }
    			]));

    			if (dirty[0] & /*filterText*/ 8 && input_1.value !== /*filterText*/ ctx[3]) {
    				set_input_value(input_1, /*filterText*/ ctx[3]);
    			}

    			toggle_class(input_1, "svelte-17l1npl", true);

    			if (!/*isMulti*/ ctx[7] && /*showSelectedItem*/ ctx[29]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*isMulti, showSelectedItem*/ 536871040) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_7$1(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div, t4);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (/*showClearIcon*/ ctx[37]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty[1] & /*showClearIcon*/ 64) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_6$1(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div, t5);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (!/*showClearIcon*/ ctx[37] && (/*showIndicator*/ ctx[20] || /*showChevron*/ ctx[19] && !/*value*/ ctx[2] || !/*isSearchable*/ ctx[13] && !/*isDisabled*/ ctx[9] && !/*isWaiting*/ ctx[4] && (/*showSelectedItem*/ ctx[29] && !/*isClearable*/ ctx[15] || !/*showSelectedItem*/ ctx[29]))) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_4$2(ctx);
    					if_block5.c();
    					if_block5.m(div, t6);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*isWaiting*/ ctx[4]) {
    				if (if_block6) ; else {
    					if_block6 = create_if_block_3$3(ctx);
    					if_block6.c();
    					if_block6.m(div, t7);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*listOpen*/ ctx[5]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);

    					if (dirty[0] & /*listOpen*/ 32) {
    						transition_in(if_block7, 1);
    					}
    				} else {
    					if_block7 = create_if_block_2$3(ctx);
    					if_block7.c();
    					transition_in(if_block7, 1);
    					if_block7.m(div, t8);
    				}
    			} else if (if_block7) {
    				group_outros();

    				transition_out(if_block7, 1, 1, () => {
    					if_block7 = null;
    				});

    				check_outros();
    			}

    			if (!/*isMulti*/ ctx[7] || /*isMulti*/ ctx[7] && !/*showMultiSelect*/ ctx[35]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_1$2(ctx);
    					if_block8.c();
    					if_block8.m(div, t9);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*isMulti*/ ctx[7] && /*showMultiSelect*/ ctx[35]) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block$7(ctx);
    					if_block9.c();
    					if_block9.m(div, null);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if (!current || dirty[0] & /*containerClasses*/ 2097152 && div_class_value !== (div_class_value = "selectContainer " + /*containerClasses*/ ctx[21] + " svelte-17l1npl")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty[0] & /*containerStyles*/ 2048) {
    				attr_dev(div, "style", /*containerStyles*/ ctx[11]);
    			}

    			if (dirty[0] & /*containerClasses, hasError*/ 2098176) {
    				toggle_class(div, "hasError", /*hasError*/ ctx[10]);
    			}

    			if (dirty[0] & /*containerClasses, isMulti*/ 2097280) {
    				toggle_class(div, "multiSelect", /*isMulti*/ ctx[7]);
    			}

    			if (dirty[0] & /*containerClasses, isDisabled*/ 2097664) {
    				toggle_class(div, "disabled", /*isDisabled*/ ctx[9]);
    			}

    			if (dirty[0] & /*containerClasses, isFocused*/ 2097154) {
    				toggle_class(div, "focused", /*isFocused*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(if_block7);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(if_block7);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			/*input_1_binding*/ ctx[82](null);
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			if (if_block6) if_block6.d();
    			if (if_block7) if_block7.d();
    			if (if_block8) if_block8.d();
    			if (if_block9) if_block9.d();
    			/*div_binding*/ ctx[85](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function convertStringItemsToObjects(_items) {
    	return _items.map((item, index) => {
    		return { index, value: item, label: `${item}` };
    	});
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let filteredItems;
    	let showSelectedItem;
    	let showClearIcon;
    	let placeholderText;
    	let showMultiSelect;
    	let listProps;
    	let ariaSelection;
    	let ariaContext;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Select', slots, []);
    	const dispatch = createEventDispatcher();
    	let { id = null } = $$props;
    	let { container = undefined } = $$props;
    	let { input = undefined } = $$props;
    	let { isMulti = false } = $$props;
    	let { multiFullItemClearable = false } = $$props;
    	let { isDisabled = false } = $$props;
    	let { isCreatable = false } = $$props;
    	let { isFocused = false } = $$props;
    	let { value = null } = $$props;
    	let { filterText = '' } = $$props;
    	let { placeholder = 'Select...' } = $$props;
    	let { placeholderAlwaysShow = false } = $$props;
    	let { items = null } = $$props;
    	let { itemFilter = (label, filterText, option) => `${label}`.toLowerCase().includes(filterText.toLowerCase()) } = $$props;
    	let { groupBy = undefined } = $$props;
    	let { groupFilter = groups => groups } = $$props;
    	let { isGroupHeaderSelectable = false } = $$props;

    	let { getGroupHeaderLabel = option => {
    		return option[labelIdentifier] || option.id;
    	} } = $$props;

    	let { labelIdentifier = 'label' } = $$props;

    	let { getOptionLabel = (option, filterText) => {
    		return option.isCreator
    		? `Create \"${filterText}\"`
    		: option[labelIdentifier];
    	} } = $$props;

    	let { optionIdentifier = 'value' } = $$props;
    	let { loadOptions = undefined } = $$props;
    	let { hasError = false } = $$props;
    	let { containerStyles = '' } = $$props;

    	let { getSelectionLabel = option => {
    		if (option) return option[labelIdentifier]; else return null;
    	} } = $$props;

    	let { createGroupHeaderItem = groupValue => {
    		return { value: groupValue, label: groupValue };
    	} } = $$props;

    	let { createItem = filterText => {
    		return { value: filterText, label: filterText };
    	} } = $$props;

    	const getFilteredItems = () => {
    		return filteredItems;
    	};

    	let { isSearchable = true } = $$props;
    	let { inputStyles = '' } = $$props;
    	let { isClearable = true } = $$props;
    	let { isWaiting = false } = $$props;
    	let { listPlacement = 'auto' } = $$props;
    	let { listOpen = false } = $$props;
    	let { isVirtualList = false } = $$props;
    	let { loadOptionsInterval = 300 } = $$props;
    	let { noOptionsMessage = 'No options' } = $$props;
    	let { hideEmptyState = false } = $$props;
    	let { inputAttributes = {} } = $$props;
    	let { listAutoWidth = true } = $$props;
    	let { itemHeight = 40 } = $$props;
    	let { Icon = undefined } = $$props;
    	let { iconProps = {} } = $$props;
    	let { showChevron = false } = $$props;
    	let { showIndicator = false } = $$props;
    	let { containerClasses = '' } = $$props;
    	let { indicatorSvg = undefined } = $$props;
    	let { listOffset = 5 } = $$props;
    	let { ClearIcon: ClearIcon$1 = ClearIcon } = $$props;
    	let { Item: Item$1 = Item } = $$props;
    	let { List: List$1 = List } = $$props;
    	let { Selection = Selection$3 } = $$props;
    	let { MultiSelection: MultiSelection$1 = MultiSelection } = $$props;
    	let { VirtualList: VirtualList$1 = VirtualList } = $$props;

    	function filterMethod(args) {
    		if (args.loadOptions && args.filterText.length > 0) return;
    		if (!args.items) return [];

    		if (args.items && args.items.length > 0 && typeof args.items[0] !== 'object') {
    			args.items = convertStringItemsToObjects(args.items);
    		}

    		let filterResults = args.items.filter(item => {
    			let matchesFilter = itemFilter(getOptionLabel(item, args.filterText), args.filterText, item);

    			if (matchesFilter && args.isMulti && args.value && Array.isArray(args.value)) {
    				matchesFilter = !args.value.some(x => {
    					return x[args.optionIdentifier] === item[args.optionIdentifier];
    				});
    			}

    			return matchesFilter;
    		});

    		if (args.groupBy) {
    			filterResults = filterGroupedItems(filterResults);
    		}

    		if (args.isCreatable) {
    			filterResults = addCreatableItem(filterResults, args.filterText);
    		}

    		return filterResults;
    	}

    	function addCreatableItem(_items, _filterText) {
    		if (_filterText.length === 0) return _items;
    		const itemToCreate = createItem(_filterText);
    		if (_items[0] && _filterText === _items[0][labelIdentifier]) return _items;
    		itemToCreate.isCreator = true;
    		return [..._items, itemToCreate];
    	}

    	let { selectedValue = null } = $$props;
    	let activeValue;
    	let prev_value;
    	let prev_filterText;
    	let prev_isFocused;
    	let prev_isMulti;
    	let hoverItemIndex;

    	const getItems = debounce(
    		async () => {
    			$$invalidate(4, isWaiting = true);

    			let res = await loadOptions(filterText).catch(err => {
    				console.warn('svelte-select loadOptions error :>> ', err);
    				dispatch('error', { type: 'loadOptions', details: err });
    			});

    			if (res && !res.cancelled) {
    				if (res) {
    					if (res && res.length > 0 && typeof res[0] !== 'object') {
    						res = convertStringItemsToObjects(res);
    					}

    					$$invalidate(81, filteredItems = [...res]);
    					dispatch('loaded', { items: filteredItems });
    				} else {
    					$$invalidate(81, filteredItems = []);
    				}

    				if (isCreatable) {
    					$$invalidate(81, filteredItems = addCreatableItem(filteredItems, filterText));
    				}

    				$$invalidate(4, isWaiting = false);
    				$$invalidate(1, isFocused = true);
    				$$invalidate(5, listOpen = true);
    			}
    		},
    		loadOptionsInterval
    	);

    	function setValue() {
    		if (typeof value === 'string') {
    			$$invalidate(2, value = { [optionIdentifier]: value, label: value });
    		} else if (isMulti && Array.isArray(value) && value.length > 0) {
    			$$invalidate(2, value = value.map(item => typeof item === 'string'
    			? { value: item, label: item }
    			: item));
    		}
    	}

    	let _inputAttributes;

    	function assignInputAttributes() {
    		$$invalidate(31, _inputAttributes = Object.assign(
    			{
    				autocapitalize: 'none',
    				autocomplete: 'off',
    				autocorrect: 'off',
    				spellcheck: false,
    				tabindex: 0,
    				type: 'text',
    				'aria-autocomplete': 'list'
    			},
    			inputAttributes
    		));

    		if (id) {
    			$$invalidate(31, _inputAttributes.id = id, _inputAttributes);
    		}

    		if (!isSearchable) {
    			$$invalidate(31, _inputAttributes.readonly = true, _inputAttributes);
    		}
    	}

    	function filterGroupedItems(_items) {
    		const groupValues = [];
    		const groups = {};

    		_items.forEach(item => {
    			const groupValue = groupBy(item);

    			if (!groupValues.includes(groupValue)) {
    				groupValues.push(groupValue);
    				groups[groupValue] = [];

    				if (groupValue) {
    					groups[groupValue].push(Object.assign(createGroupHeaderItem(groupValue, item), {
    						id: groupValue,
    						isGroupHeader: true,
    						isSelectable: isGroupHeaderSelectable
    					}));
    				}
    			}

    			groups[groupValue].push(Object.assign({ isGroupItem: !!groupValue }, item));
    		});

    		const sortedGroupedItems = [];

    		groupFilter(groupValues).forEach(groupValue => {
    			sortedGroupedItems.push(...groups[groupValue]);
    		});

    		return sortedGroupedItems;
    	}

    	function dispatchSelectedItem() {
    		if (isMulti) {
    			if (JSON.stringify(value) !== JSON.stringify(prev_value)) {
    				if (checkValueForDuplicates()) {
    					dispatch('select', value);
    				}
    			}

    			return;
    		}

    		if (!prev_value || JSON.stringify(value[optionIdentifier]) !== JSON.stringify(prev_value[optionIdentifier])) {
    			dispatch('select', value);
    		}
    	}

    	function setupFocus() {
    		if (isFocused || listOpen) {
    			handleFocus();
    		} else {
    			if (input) input.blur();
    		}
    	}

    	function setupMulti() {
    		if (value) {
    			if (Array.isArray(value)) {
    				$$invalidate(2, value = [...value]);
    			} else {
    				$$invalidate(2, value = [value]);
    			}
    		}
    	}

    	function setupSingle() {
    		if (value) $$invalidate(2, value = null);
    	}

    	function setupFilterText() {
    		if (filterText.length === 0) return;
    		$$invalidate(1, isFocused = true);
    		$$invalidate(5, listOpen = true);

    		if (loadOptions) {
    			getItems();
    		} else {
    			$$invalidate(5, listOpen = true);

    			if (isMulti) {
    				$$invalidate(30, activeValue = undefined);
    			}
    		}
    	}

    	beforeUpdate(async () => {
    		$$invalidate(77, prev_value = value);
    		$$invalidate(78, prev_filterText = filterText);
    		$$invalidate(79, prev_isFocused = isFocused);
    		$$invalidate(80, prev_isMulti = isMulti);
    	});

    	function checkValueForDuplicates() {
    		let noDuplicates = true;

    		if (value) {
    			const ids = [];
    			const uniqueValues = [];

    			value.forEach(val => {
    				if (!ids.includes(val[optionIdentifier])) {
    					ids.push(val[optionIdentifier]);
    					uniqueValues.push(val);
    				} else {
    					noDuplicates = false;
    				}
    			});

    			if (!noDuplicates) $$invalidate(2, value = uniqueValues);
    		}

    		return noDuplicates;
    	}

    	function findItem(selection) {
    		let matchTo = selection
    		? selection[optionIdentifier]
    		: value[optionIdentifier];

    		return items.find(item => item[optionIdentifier] === matchTo);
    	}

    	function updateValueDisplay(items) {
    		if (!items || items.length === 0 || items.some(item => typeof item !== 'object')) return;

    		if (!value || (isMulti
    		? value.some(selection => !selection || !selection[optionIdentifier])
    		: !value[optionIdentifier])) return;

    		if (Array.isArray(value)) {
    			$$invalidate(2, value = value.map(selection => findItem(selection) || selection));
    		} else {
    			$$invalidate(2, value = findItem() || value);
    		}
    	}

    	function handleMultiItemClear(event) {
    		const { detail } = event;
    		const itemToRemove = value[detail ? detail.i : value.length - 1];

    		if (value.length === 1) {
    			$$invalidate(2, value = undefined);
    		} else {
    			$$invalidate(2, value = value.filter(item => {
    				return item !== itemToRemove;
    			}));
    		}

    		dispatch('clear', itemToRemove);
    	}

    	function handleKeyDown(e) {
    		if (!isFocused) return;

    		switch (e.key) {
    			case 'ArrowDown':
    				e.preventDefault();
    				$$invalidate(5, listOpen = true);
    				$$invalidate(30, activeValue = undefined);
    				break;
    			case 'ArrowUp':
    				e.preventDefault();
    				$$invalidate(5, listOpen = true);
    				$$invalidate(30, activeValue = undefined);
    				break;
    			case 'Tab':
    				if (!listOpen) $$invalidate(1, isFocused = false);
    				break;
    			case 'Backspace':
    				if (!isMulti || filterText.length > 0) return;
    				if (isMulti && value && value.length > 0) {
    					handleMultiItemClear(activeValue !== undefined
    					? activeValue
    					: value.length - 1);

    					if (activeValue === 0 || activeValue === undefined) break;
    					$$invalidate(30, activeValue = value.length > activeValue ? activeValue - 1 : undefined);
    				}
    				break;
    			case 'ArrowLeft':
    				if (!isMulti || filterText.length > 0) return;
    				if (activeValue === undefined) {
    					$$invalidate(30, activeValue = value.length - 1);
    				} else if (value.length > activeValue && activeValue !== 0) {
    					$$invalidate(30, activeValue -= 1);
    				}
    				break;
    			case 'ArrowRight':
    				if (!isMulti || filterText.length > 0 || activeValue === undefined) return;
    				if (activeValue === value.length - 1) {
    					$$invalidate(30, activeValue = undefined);
    				} else if (activeValue < value.length - 1) {
    					$$invalidate(30, activeValue += 1);
    				}
    				break;
    		}
    	}

    	function handleFocus() {
    		$$invalidate(1, isFocused = true);
    		if (input) input.focus();
    	}

    	function handleWindowEvent(event) {
    		if (!container) return;

    		const eventTarget = event.path && event.path.length > 0
    		? event.path[0]
    		: event.target;

    		if (container.contains(eventTarget) || container.contains(event.relatedTarget)) {
    			return;
    		}

    		$$invalidate(1, isFocused = false);
    		$$invalidate(5, listOpen = false);
    		$$invalidate(30, activeValue = undefined);
    		if (input) input.blur();
    	}

    	function handleClick() {
    		if (isDisabled) return;
    		$$invalidate(1, isFocused = true);
    		$$invalidate(5, listOpen = !listOpen);
    	}

    	function handleClear() {
    		$$invalidate(2, value = undefined);
    		$$invalidate(5, listOpen = false);
    		dispatch('clear', value);
    		handleFocus();
    	}

    	onMount(() => {
    		if (isFocused && input) input.focus();
    	});

    	function itemSelected(event) {
    		const { detail } = event;

    		if (detail) {
    			$$invalidate(3, filterText = '');
    			const item = Object.assign({}, detail);

    			if (!item.isGroupHeader || item.isSelectable) {
    				if (isMulti) {
    					$$invalidate(2, value = value ? value.concat([item]) : [item]);
    				} else {
    					$$invalidate(2, value = item);
    				}

    				$$invalidate(2, value);

    				setTimeout(() => {
    					$$invalidate(5, listOpen = false);
    					$$invalidate(30, activeValue = undefined);
    				});
    			}
    		}
    	}

    	function itemCreated(event) {
    		const { detail } = event;

    		if (isMulti) {
    			$$invalidate(2, value = value || []);
    			$$invalidate(2, value = [...value, createItem(detail)]);
    		} else {
    			$$invalidate(2, value = createItem(detail));
    		}

    		dispatch('itemCreated', detail);
    		$$invalidate(3, filterText = '');
    		$$invalidate(5, listOpen = false);
    		$$invalidate(30, activeValue = undefined);
    	}

    	function closeList() {
    		$$invalidate(3, filterText = '');
    		$$invalidate(5, listOpen = false);
    	}

    	let { ariaValues = values => {
    		return `Option ${values}, selected.`;
    	} } = $$props;

    	let { ariaListOpen = (label, count) => {
    		return `You are currently focused on option ${label}. There are ${count} results available.`;
    	} } = $$props;

    	let { ariaFocused = () => {
    		return `Select is focused, type to refine list, press down to open the menu.`;
    	} } = $$props;

    	function handleAriaSelection() {
    		let selected = undefined;

    		if (isMulti && value.length > 0) {
    			selected = value.map(v => getSelectionLabel(v)).join(', ');
    		} else {
    			selected = getSelectionLabel(value);
    		}

    		return ariaValues(selected);
    	}

    	function handleAriaContent() {
    		if (!isFocused || !filteredItems || filteredItems.length === 0) return '';
    		let _item = filteredItems[hoverItemIndex];

    		if (listOpen && _item) {
    			let label = getSelectionLabel(_item);
    			let count = filteredItems ? filteredItems.length : 0;
    			return ariaListOpen(label, count);
    		} else {
    			return ariaFocused();
    		}
    	}

    	const writable_props = [
    		'id',
    		'container',
    		'input',
    		'isMulti',
    		'multiFullItemClearable',
    		'isDisabled',
    		'isCreatable',
    		'isFocused',
    		'value',
    		'filterText',
    		'placeholder',
    		'placeholderAlwaysShow',
    		'items',
    		'itemFilter',
    		'groupBy',
    		'groupFilter',
    		'isGroupHeaderSelectable',
    		'getGroupHeaderLabel',
    		'labelIdentifier',
    		'getOptionLabel',
    		'optionIdentifier',
    		'loadOptions',
    		'hasError',
    		'containerStyles',
    		'getSelectionLabel',
    		'createGroupHeaderItem',
    		'createItem',
    		'isSearchable',
    		'inputStyles',
    		'isClearable',
    		'isWaiting',
    		'listPlacement',
    		'listOpen',
    		'isVirtualList',
    		'loadOptionsInterval',
    		'noOptionsMessage',
    		'hideEmptyState',
    		'inputAttributes',
    		'listAutoWidth',
    		'itemHeight',
    		'Icon',
    		'iconProps',
    		'showChevron',
    		'showIndicator',
    		'containerClasses',
    		'indicatorSvg',
    		'listOffset',
    		'ClearIcon',
    		'Item',
    		'List',
    		'Selection',
    		'MultiSelection',
    		'VirtualList',
    		'selectedValue',
    		'ariaValues',
    		'ariaListOpen',
    		'ariaFocused'
    	];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<Select> was created with unknown prop '${key}'`);
    	});

    	function input_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(6, input);
    		});
    	}

    	function input_1_input_handler() {
    		filterText = this.value;
    		$$invalidate(3, filterText);
    	}

    	function switch_instance_hoverItemIndex_binding(value) {
    		hoverItemIndex = value;
    		$$invalidate(28, hoverItemIndex);
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			container = $$value;
    			$$invalidate(0, container);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(46, id = $$props.id);
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('input' in $$props) $$invalidate(6, input = $$props.input);
    		if ('isMulti' in $$props) $$invalidate(7, isMulti = $$props.isMulti);
    		if ('multiFullItemClearable' in $$props) $$invalidate(8, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('isDisabled' in $$props) $$invalidate(9, isDisabled = $$props.isDisabled);
    		if ('isCreatable' in $$props) $$invalidate(47, isCreatable = $$props.isCreatable);
    		if ('isFocused' in $$props) $$invalidate(1, isFocused = $$props.isFocused);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('filterText' in $$props) $$invalidate(3, filterText = $$props.filterText);
    		if ('placeholder' in $$props) $$invalidate(48, placeholder = $$props.placeholder);
    		if ('placeholderAlwaysShow' in $$props) $$invalidate(49, placeholderAlwaysShow = $$props.placeholderAlwaysShow);
    		if ('items' in $$props) $$invalidate(50, items = $$props.items);
    		if ('itemFilter' in $$props) $$invalidate(51, itemFilter = $$props.itemFilter);
    		if ('groupBy' in $$props) $$invalidate(52, groupBy = $$props.groupBy);
    		if ('groupFilter' in $$props) $$invalidate(53, groupFilter = $$props.groupFilter);
    		if ('isGroupHeaderSelectable' in $$props) $$invalidate(54, isGroupHeaderSelectable = $$props.isGroupHeaderSelectable);
    		if ('getGroupHeaderLabel' in $$props) $$invalidate(55, getGroupHeaderLabel = $$props.getGroupHeaderLabel);
    		if ('labelIdentifier' in $$props) $$invalidate(56, labelIdentifier = $$props.labelIdentifier);
    		if ('getOptionLabel' in $$props) $$invalidate(57, getOptionLabel = $$props.getOptionLabel);
    		if ('optionIdentifier' in $$props) $$invalidate(58, optionIdentifier = $$props.optionIdentifier);
    		if ('loadOptions' in $$props) $$invalidate(59, loadOptions = $$props.loadOptions);
    		if ('hasError' in $$props) $$invalidate(10, hasError = $$props.hasError);
    		if ('containerStyles' in $$props) $$invalidate(11, containerStyles = $$props.containerStyles);
    		if ('getSelectionLabel' in $$props) $$invalidate(12, getSelectionLabel = $$props.getSelectionLabel);
    		if ('createGroupHeaderItem' in $$props) $$invalidate(60, createGroupHeaderItem = $$props.createGroupHeaderItem);
    		if ('createItem' in $$props) $$invalidate(61, createItem = $$props.createItem);
    		if ('isSearchable' in $$props) $$invalidate(13, isSearchable = $$props.isSearchable);
    		if ('inputStyles' in $$props) $$invalidate(14, inputStyles = $$props.inputStyles);
    		if ('isClearable' in $$props) $$invalidate(15, isClearable = $$props.isClearable);
    		if ('isWaiting' in $$props) $$invalidate(4, isWaiting = $$props.isWaiting);
    		if ('listPlacement' in $$props) $$invalidate(63, listPlacement = $$props.listPlacement);
    		if ('listOpen' in $$props) $$invalidate(5, listOpen = $$props.listOpen);
    		if ('isVirtualList' in $$props) $$invalidate(64, isVirtualList = $$props.isVirtualList);
    		if ('loadOptionsInterval' in $$props) $$invalidate(65, loadOptionsInterval = $$props.loadOptionsInterval);
    		if ('noOptionsMessage' in $$props) $$invalidate(66, noOptionsMessage = $$props.noOptionsMessage);
    		if ('hideEmptyState' in $$props) $$invalidate(67, hideEmptyState = $$props.hideEmptyState);
    		if ('inputAttributes' in $$props) $$invalidate(16, inputAttributes = $$props.inputAttributes);
    		if ('listAutoWidth' in $$props) $$invalidate(68, listAutoWidth = $$props.listAutoWidth);
    		if ('itemHeight' in $$props) $$invalidate(69, itemHeight = $$props.itemHeight);
    		if ('Icon' in $$props) $$invalidate(17, Icon = $$props.Icon);
    		if ('iconProps' in $$props) $$invalidate(18, iconProps = $$props.iconProps);
    		if ('showChevron' in $$props) $$invalidate(19, showChevron = $$props.showChevron);
    		if ('showIndicator' in $$props) $$invalidate(20, showIndicator = $$props.showIndicator);
    		if ('containerClasses' in $$props) $$invalidate(21, containerClasses = $$props.containerClasses);
    		if ('indicatorSvg' in $$props) $$invalidate(22, indicatorSvg = $$props.indicatorSvg);
    		if ('listOffset' in $$props) $$invalidate(70, listOffset = $$props.listOffset);
    		if ('ClearIcon' in $$props) $$invalidate(23, ClearIcon$1 = $$props.ClearIcon);
    		if ('Item' in $$props) $$invalidate(71, Item$1 = $$props.Item);
    		if ('List' in $$props) $$invalidate(24, List$1 = $$props.List);
    		if ('Selection' in $$props) $$invalidate(25, Selection = $$props.Selection);
    		if ('MultiSelection' in $$props) $$invalidate(26, MultiSelection$1 = $$props.MultiSelection);
    		if ('VirtualList' in $$props) $$invalidate(72, VirtualList$1 = $$props.VirtualList);
    		if ('selectedValue' in $$props) $$invalidate(73, selectedValue = $$props.selectedValue);
    		if ('ariaValues' in $$props) $$invalidate(74, ariaValues = $$props.ariaValues);
    		if ('ariaListOpen' in $$props) $$invalidate(75, ariaListOpen = $$props.ariaListOpen);
    		if ('ariaFocused' in $$props) $$invalidate(76, ariaFocused = $$props.ariaFocused);
    	};

    	$$self.$capture_state = () => ({
    		beforeUpdate,
    		createEventDispatcher,
    		onMount,
    		_List: List,
    		_Item: Item,
    		_Selection: Selection$3,
    		_MultiSelection: MultiSelection,
    		_VirtualList: VirtualList,
    		_ClearIcon: ClearIcon,
    		debounce,
    		dispatch,
    		id,
    		container,
    		input,
    		isMulti,
    		multiFullItemClearable,
    		isDisabled,
    		isCreatable,
    		isFocused,
    		value,
    		filterText,
    		placeholder,
    		placeholderAlwaysShow,
    		items,
    		itemFilter,
    		groupBy,
    		groupFilter,
    		isGroupHeaderSelectable,
    		getGroupHeaderLabel,
    		labelIdentifier,
    		getOptionLabel,
    		optionIdentifier,
    		loadOptions,
    		hasError,
    		containerStyles,
    		getSelectionLabel,
    		createGroupHeaderItem,
    		createItem,
    		getFilteredItems,
    		isSearchable,
    		inputStyles,
    		isClearable,
    		isWaiting,
    		listPlacement,
    		listOpen,
    		isVirtualList,
    		loadOptionsInterval,
    		noOptionsMessage,
    		hideEmptyState,
    		inputAttributes,
    		listAutoWidth,
    		itemHeight,
    		Icon,
    		iconProps,
    		showChevron,
    		showIndicator,
    		containerClasses,
    		indicatorSvg,
    		listOffset,
    		ClearIcon: ClearIcon$1,
    		Item: Item$1,
    		List: List$1,
    		Selection,
    		MultiSelection: MultiSelection$1,
    		VirtualList: VirtualList$1,
    		filterMethod,
    		addCreatableItem,
    		selectedValue,
    		activeValue,
    		prev_value,
    		prev_filterText,
    		prev_isFocused,
    		prev_isMulti,
    		hoverItemIndex,
    		getItems,
    		setValue,
    		_inputAttributes,
    		assignInputAttributes,
    		convertStringItemsToObjects,
    		filterGroupedItems,
    		dispatchSelectedItem,
    		setupFocus,
    		setupMulti,
    		setupSingle,
    		setupFilterText,
    		checkValueForDuplicates,
    		findItem,
    		updateValueDisplay,
    		handleMultiItemClear,
    		handleKeyDown,
    		handleFocus,
    		handleWindowEvent,
    		handleClick,
    		handleClear,
    		itemSelected,
    		itemCreated,
    		closeList,
    		ariaValues,
    		ariaListOpen,
    		ariaFocused,
    		handleAriaSelection,
    		handleAriaContent,
    		filteredItems,
    		ariaContext,
    		ariaSelection,
    		listProps,
    		showMultiSelect,
    		placeholderText,
    		showSelectedItem,
    		showClearIcon
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(46, id = $$props.id);
    		if ('container' in $$props) $$invalidate(0, container = $$props.container);
    		if ('input' in $$props) $$invalidate(6, input = $$props.input);
    		if ('isMulti' in $$props) $$invalidate(7, isMulti = $$props.isMulti);
    		if ('multiFullItemClearable' in $$props) $$invalidate(8, multiFullItemClearable = $$props.multiFullItemClearable);
    		if ('isDisabled' in $$props) $$invalidate(9, isDisabled = $$props.isDisabled);
    		if ('isCreatable' in $$props) $$invalidate(47, isCreatable = $$props.isCreatable);
    		if ('isFocused' in $$props) $$invalidate(1, isFocused = $$props.isFocused);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('filterText' in $$props) $$invalidate(3, filterText = $$props.filterText);
    		if ('placeholder' in $$props) $$invalidate(48, placeholder = $$props.placeholder);
    		if ('placeholderAlwaysShow' in $$props) $$invalidate(49, placeholderAlwaysShow = $$props.placeholderAlwaysShow);
    		if ('items' in $$props) $$invalidate(50, items = $$props.items);
    		if ('itemFilter' in $$props) $$invalidate(51, itemFilter = $$props.itemFilter);
    		if ('groupBy' in $$props) $$invalidate(52, groupBy = $$props.groupBy);
    		if ('groupFilter' in $$props) $$invalidate(53, groupFilter = $$props.groupFilter);
    		if ('isGroupHeaderSelectable' in $$props) $$invalidate(54, isGroupHeaderSelectable = $$props.isGroupHeaderSelectable);
    		if ('getGroupHeaderLabel' in $$props) $$invalidate(55, getGroupHeaderLabel = $$props.getGroupHeaderLabel);
    		if ('labelIdentifier' in $$props) $$invalidate(56, labelIdentifier = $$props.labelIdentifier);
    		if ('getOptionLabel' in $$props) $$invalidate(57, getOptionLabel = $$props.getOptionLabel);
    		if ('optionIdentifier' in $$props) $$invalidate(58, optionIdentifier = $$props.optionIdentifier);
    		if ('loadOptions' in $$props) $$invalidate(59, loadOptions = $$props.loadOptions);
    		if ('hasError' in $$props) $$invalidate(10, hasError = $$props.hasError);
    		if ('containerStyles' in $$props) $$invalidate(11, containerStyles = $$props.containerStyles);
    		if ('getSelectionLabel' in $$props) $$invalidate(12, getSelectionLabel = $$props.getSelectionLabel);
    		if ('createGroupHeaderItem' in $$props) $$invalidate(60, createGroupHeaderItem = $$props.createGroupHeaderItem);
    		if ('createItem' in $$props) $$invalidate(61, createItem = $$props.createItem);
    		if ('isSearchable' in $$props) $$invalidate(13, isSearchable = $$props.isSearchable);
    		if ('inputStyles' in $$props) $$invalidate(14, inputStyles = $$props.inputStyles);
    		if ('isClearable' in $$props) $$invalidate(15, isClearable = $$props.isClearable);
    		if ('isWaiting' in $$props) $$invalidate(4, isWaiting = $$props.isWaiting);
    		if ('listPlacement' in $$props) $$invalidate(63, listPlacement = $$props.listPlacement);
    		if ('listOpen' in $$props) $$invalidate(5, listOpen = $$props.listOpen);
    		if ('isVirtualList' in $$props) $$invalidate(64, isVirtualList = $$props.isVirtualList);
    		if ('loadOptionsInterval' in $$props) $$invalidate(65, loadOptionsInterval = $$props.loadOptionsInterval);
    		if ('noOptionsMessage' in $$props) $$invalidate(66, noOptionsMessage = $$props.noOptionsMessage);
    		if ('hideEmptyState' in $$props) $$invalidate(67, hideEmptyState = $$props.hideEmptyState);
    		if ('inputAttributes' in $$props) $$invalidate(16, inputAttributes = $$props.inputAttributes);
    		if ('listAutoWidth' in $$props) $$invalidate(68, listAutoWidth = $$props.listAutoWidth);
    		if ('itemHeight' in $$props) $$invalidate(69, itemHeight = $$props.itemHeight);
    		if ('Icon' in $$props) $$invalidate(17, Icon = $$props.Icon);
    		if ('iconProps' in $$props) $$invalidate(18, iconProps = $$props.iconProps);
    		if ('showChevron' in $$props) $$invalidate(19, showChevron = $$props.showChevron);
    		if ('showIndicator' in $$props) $$invalidate(20, showIndicator = $$props.showIndicator);
    		if ('containerClasses' in $$props) $$invalidate(21, containerClasses = $$props.containerClasses);
    		if ('indicatorSvg' in $$props) $$invalidate(22, indicatorSvg = $$props.indicatorSvg);
    		if ('listOffset' in $$props) $$invalidate(70, listOffset = $$props.listOffset);
    		if ('ClearIcon' in $$props) $$invalidate(23, ClearIcon$1 = $$props.ClearIcon);
    		if ('Item' in $$props) $$invalidate(71, Item$1 = $$props.Item);
    		if ('List' in $$props) $$invalidate(24, List$1 = $$props.List);
    		if ('Selection' in $$props) $$invalidate(25, Selection = $$props.Selection);
    		if ('MultiSelection' in $$props) $$invalidate(26, MultiSelection$1 = $$props.MultiSelection);
    		if ('VirtualList' in $$props) $$invalidate(72, VirtualList$1 = $$props.VirtualList);
    		if ('selectedValue' in $$props) $$invalidate(73, selectedValue = $$props.selectedValue);
    		if ('activeValue' in $$props) $$invalidate(30, activeValue = $$props.activeValue);
    		if ('prev_value' in $$props) $$invalidate(77, prev_value = $$props.prev_value);
    		if ('prev_filterText' in $$props) $$invalidate(78, prev_filterText = $$props.prev_filterText);
    		if ('prev_isFocused' in $$props) $$invalidate(79, prev_isFocused = $$props.prev_isFocused);
    		if ('prev_isMulti' in $$props) $$invalidate(80, prev_isMulti = $$props.prev_isMulti);
    		if ('hoverItemIndex' in $$props) $$invalidate(28, hoverItemIndex = $$props.hoverItemIndex);
    		if ('_inputAttributes' in $$props) $$invalidate(31, _inputAttributes = $$props._inputAttributes);
    		if ('ariaValues' in $$props) $$invalidate(74, ariaValues = $$props.ariaValues);
    		if ('ariaListOpen' in $$props) $$invalidate(75, ariaListOpen = $$props.ariaListOpen);
    		if ('ariaFocused' in $$props) $$invalidate(76, ariaFocused = $$props.ariaFocused);
    		if ('filteredItems' in $$props) $$invalidate(81, filteredItems = $$props.filteredItems);
    		if ('ariaContext' in $$props) $$invalidate(32, ariaContext = $$props.ariaContext);
    		if ('ariaSelection' in $$props) $$invalidate(33, ariaSelection = $$props.ariaSelection);
    		if ('listProps' in $$props) $$invalidate(34, listProps = $$props.listProps);
    		if ('showMultiSelect' in $$props) $$invalidate(35, showMultiSelect = $$props.showMultiSelect);
    		if ('placeholderText' in $$props) $$invalidate(36, placeholderText = $$props.placeholderText);
    		if ('showSelectedItem' in $$props) $$invalidate(29, showSelectedItem = $$props.showSelectedItem);
    		if ('showClearIcon' in $$props) $$invalidate(37, showClearIcon = $$props.showClearIcon);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*filterText, value, isMulti*/ 140 | $$self.$$.dirty[1] & /*loadOptions, items, optionIdentifier, groupBy, isCreatable*/ 405340160) {
    			$$invalidate(81, filteredItems = filterMethod({
    				loadOptions,
    				filterText,
    				items,
    				value,
    				isMulti,
    				optionIdentifier,
    				groupBy,
    				isCreatable
    			}));
    		}

    		if ($$self.$$.dirty[2] & /*selectedValue*/ 2048) {
    			{
    				if (selectedValue) console.warn('selectedValue is no longer used. Please use value instead.');
    			}
    		}

    		if ($$self.$$.dirty[1] & /*items*/ 524288) {
    			updateValueDisplay(items);
    		}

    		if ($$self.$$.dirty[0] & /*value*/ 4) {
    			{
    				if (value) setValue();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*inputAttributes, isSearchable*/ 73728) {
    			{
    				if (inputAttributes || !isSearchable) assignInputAttributes();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*isMulti*/ 128 | $$self.$$.dirty[2] & /*prev_isMulti*/ 262144) {
    			{
    				if (isMulti) {
    					setupMulti();
    				}

    				if (prev_isMulti && !isMulti) {
    					setupSingle();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*isMulti, value*/ 132) {
    			{
    				if (isMulti && value && value.length > 1) {
    					checkValueForDuplicates();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*value*/ 4) {
    			{
    				if (value) dispatchSelectedItem();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*value, isMulti*/ 132 | $$self.$$.dirty[2] & /*prev_value*/ 32768) {
    			{
    				if (!value && isMulti && prev_value) {
    					dispatch('select', value);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*isFocused*/ 2 | $$self.$$.dirty[2] & /*prev_isFocused*/ 131072) {
    			{
    				if (isFocused !== prev_isFocused) {
    					setupFocus();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*filterText*/ 8 | $$self.$$.dirty[2] & /*prev_filterText*/ 65536) {
    			{
    				if (filterText !== prev_filterText) {
    					setupFilterText();
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*value, filterText*/ 12) {
    			$$invalidate(29, showSelectedItem = value && filterText.length === 0);
    		}

    		if ($$self.$$.dirty[0] & /*showSelectedItem, isClearable, isDisabled, isWaiting*/ 536904208) {
    			$$invalidate(37, showClearIcon = showSelectedItem && isClearable && !isDisabled && !isWaiting);
    		}

    		if ($$self.$$.dirty[0] & /*isMulti, value*/ 132 | $$self.$$.dirty[1] & /*placeholderAlwaysShow, placeholder*/ 393216) {
    			$$invalidate(36, placeholderText = placeholderAlwaysShow && isMulti
    			? placeholder
    			: value ? '' : placeholder);
    		}

    		if ($$self.$$.dirty[0] & /*isMulti, value*/ 132) {
    			$$invalidate(35, showMultiSelect = isMulti && value && value.length > 0);
    		}

    		if ($$self.$$.dirty[0] & /*filterText, value, isMulti, container*/ 141 | $$self.$$.dirty[1] & /*optionIdentifier, getGroupHeaderLabel, getOptionLabel*/ 218103808 | $$self.$$.dirty[2] & /*Item, noOptionsMessage, hideEmptyState, isVirtualList, VirtualList, filteredItems, itemHeight, listPlacement, listAutoWidth, listOffset*/ 526326) {
    			$$invalidate(34, listProps = {
    				Item: Item$1,
    				filterText,
    				optionIdentifier,
    				noOptionsMessage,
    				hideEmptyState,
    				isVirtualList,
    				VirtualList: VirtualList$1,
    				value,
    				isMulti,
    				getGroupHeaderLabel,
    				items: filteredItems,
    				itemHeight,
    				getOptionLabel,
    				listPlacement,
    				parent: container,
    				listAutoWidth,
    				listOffset
    			});
    		}

    		if ($$self.$$.dirty[0] & /*value, isMulti*/ 132) {
    			$$invalidate(33, ariaSelection = value ? handleAriaSelection() : '');
    		}

    		if ($$self.$$.dirty[0] & /*hoverItemIndex, isFocused, listOpen*/ 268435490 | $$self.$$.dirty[2] & /*filteredItems*/ 524288) {
    			$$invalidate(32, ariaContext = handleAriaContent());
    		}
    	};

    	return [
    		container,
    		isFocused,
    		value,
    		filterText,
    		isWaiting,
    		listOpen,
    		input,
    		isMulti,
    		multiFullItemClearable,
    		isDisabled,
    		hasError,
    		containerStyles,
    		getSelectionLabel,
    		isSearchable,
    		inputStyles,
    		isClearable,
    		inputAttributes,
    		Icon,
    		iconProps,
    		showChevron,
    		showIndicator,
    		containerClasses,
    		indicatorSvg,
    		ClearIcon$1,
    		List$1,
    		Selection,
    		MultiSelection$1,
    		handleClear,
    		hoverItemIndex,
    		showSelectedItem,
    		activeValue,
    		_inputAttributes,
    		ariaContext,
    		ariaSelection,
    		listProps,
    		showMultiSelect,
    		placeholderText,
    		showClearIcon,
    		handleMultiItemClear,
    		handleKeyDown,
    		handleFocus,
    		handleWindowEvent,
    		handleClick,
    		itemSelected,
    		itemCreated,
    		closeList,
    		id,
    		isCreatable,
    		placeholder,
    		placeholderAlwaysShow,
    		items,
    		itemFilter,
    		groupBy,
    		groupFilter,
    		isGroupHeaderSelectable,
    		getGroupHeaderLabel,
    		labelIdentifier,
    		getOptionLabel,
    		optionIdentifier,
    		loadOptions,
    		createGroupHeaderItem,
    		createItem,
    		getFilteredItems,
    		listPlacement,
    		isVirtualList,
    		loadOptionsInterval,
    		noOptionsMessage,
    		hideEmptyState,
    		listAutoWidth,
    		itemHeight,
    		listOffset,
    		Item$1,
    		VirtualList$1,
    		selectedValue,
    		ariaValues,
    		ariaListOpen,
    		ariaFocused,
    		prev_value,
    		prev_filterText,
    		prev_isFocused,
    		prev_isMulti,
    		filteredItems,
    		input_1_binding,
    		input_1_input_handler,
    		switch_instance_hoverItemIndex_binding,
    		div_binding
    	];
    }

    class Select extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$a,
    			create_fragment$a,
    			safe_not_equal,
    			{
    				id: 46,
    				container: 0,
    				input: 6,
    				isMulti: 7,
    				multiFullItemClearable: 8,
    				isDisabled: 9,
    				isCreatable: 47,
    				isFocused: 1,
    				value: 2,
    				filterText: 3,
    				placeholder: 48,
    				placeholderAlwaysShow: 49,
    				items: 50,
    				itemFilter: 51,
    				groupBy: 52,
    				groupFilter: 53,
    				isGroupHeaderSelectable: 54,
    				getGroupHeaderLabel: 55,
    				labelIdentifier: 56,
    				getOptionLabel: 57,
    				optionIdentifier: 58,
    				loadOptions: 59,
    				hasError: 10,
    				containerStyles: 11,
    				getSelectionLabel: 12,
    				createGroupHeaderItem: 60,
    				createItem: 61,
    				getFilteredItems: 62,
    				isSearchable: 13,
    				inputStyles: 14,
    				isClearable: 15,
    				isWaiting: 4,
    				listPlacement: 63,
    				listOpen: 5,
    				isVirtualList: 64,
    				loadOptionsInterval: 65,
    				noOptionsMessage: 66,
    				hideEmptyState: 67,
    				inputAttributes: 16,
    				listAutoWidth: 68,
    				itemHeight: 69,
    				Icon: 17,
    				iconProps: 18,
    				showChevron: 19,
    				showIndicator: 20,
    				containerClasses: 21,
    				indicatorSvg: 22,
    				listOffset: 70,
    				ClearIcon: 23,
    				Item: 71,
    				List: 24,
    				Selection: 25,
    				MultiSelection: 26,
    				VirtualList: 72,
    				selectedValue: 73,
    				handleClear: 27,
    				ariaValues: 74,
    				ariaListOpen: 75,
    				ariaFocused: 76
    			},
    			null,
    			[-1, -1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Select",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get id() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get container() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set container(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get input() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set input(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isMulti() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMulti(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiFullItemClearable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiFullItemClearable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isDisabled() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isDisabled(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isCreatable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isCreatable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isFocused() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isFocused(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filterText() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filterText(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholderAlwaysShow() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholderAlwaysShow(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get items() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemFilter() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemFilter(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupBy() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupBy(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupFilter() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupFilter(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isGroupHeaderSelectable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isGroupHeaderSelectable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getGroupHeaderLabel() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getGroupHeaderLabel(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelIdentifier() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelIdentifier(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getOptionLabel() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getOptionLabel(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get optionIdentifier() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set optionIdentifier(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loadOptions() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loadOptions(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hasError() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hasError(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get containerStyles() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerStyles(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getSelectionLabel() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set getSelectionLabel(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get createGroupHeaderItem() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set createGroupHeaderItem(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get createItem() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set createItem(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getFilteredItems() {
    		return this.$$.ctx[62];
    	}

    	set getFilteredItems(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isSearchable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isSearchable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputStyles() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputStyles(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isClearable() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isClearable(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isWaiting() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isWaiting(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listPlacement() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listPlacement(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listOpen() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listOpen(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isVirtualList() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isVirtualList(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loadOptionsInterval() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loadOptionsInterval(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noOptionsMessage() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noOptionsMessage(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideEmptyState() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideEmptyState(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputAttributes() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputAttributes(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listAutoWidth() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listAutoWidth(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get itemHeight() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set itemHeight(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Icon() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Icon(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get iconProps() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set iconProps(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showChevron() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showChevron(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showIndicator() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showIndicator(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get containerClasses() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerClasses(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get indicatorSvg() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set indicatorSvg(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listOffset() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listOffset(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ClearIcon() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ClearIcon(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Item() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Item(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get List() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set List(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get Selection() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set Selection(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get MultiSelection() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set MultiSelection(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get VirtualList() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set VirtualList(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedValue() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedValue(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get handleClear() {
    		return this.$$.ctx[27];
    	}

    	set handleClear(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaValues() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaValues(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaListOpen() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaListOpen(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaFocused() {
    		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaFocused(value) {
    		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modals/TransformWizard.svelte generated by Svelte v3.48.0 */
    const file$8 = "node_modules/svelte-jsoneditor/components/modals/TransformWizard.svelte";

    function create_fragment$9(ctx) {
    	let table;
    	let tr0;
    	let th0;
    	let t1;
    	let td0;
    	let div0;
    	let select0;
    	let updating_value;
    	let t2;
    	let select1;
    	let updating_value_1;
    	let t3;
    	let input;
    	let t4;
    	let tr1;
    	let th1;
    	let t6;
    	let td1;
    	let div1;
    	let select2;
    	let updating_value_2;
    	let t7;
    	let select3;
    	let updating_value_3;
    	let t8;
    	let tr2;
    	let th2;
    	let t10;
    	let td2;
    	let div2;
    	let select4;
    	let updating_value_4;
    	let current;
    	let mounted;
    	let dispose;

    	function select0_value_binding(value) {
    		/*select0_value_binding*/ ctx[18](value);
    	}

    	let select0_props = {
    		containerClasses: "jse-filter-path",
    		showIndicator: true,
    		items: /*fieldOptions*/ ctx[6]
    	};

    	if (/*filterPath*/ ctx[0] !== void 0) {
    		select0_props.value = /*filterPath*/ ctx[0];
    	}

    	select0 = new Select({ props: select0_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(select0, 'value', select0_value_binding));

    	function select1_value_binding(value) {
    		/*select1_value_binding*/ ctx[19](value);
    	}

    	let select1_props = {
    		containerClasses: "jse-filter-relation",
    		showIndicator: true,
    		items: /*filterRelationOptions*/ ctx[8]
    	};

    	if (/*filterRelation*/ ctx[1] !== void 0) {
    		select1_props.value = /*filterRelation*/ ctx[1];
    	}

    	select1 = new Select({ props: select1_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(select1, 'value', select1_value_binding));

    	function select2_value_binding(value) {
    		/*select2_value_binding*/ ctx[21](value);
    	}

    	let select2_props = {
    		containerClasses: "jse-sort-path",
    		showIndicator: true,
    		items: /*fieldOptions*/ ctx[6]
    	};

    	if (/*sortPath*/ ctx[3] !== void 0) {
    		select2_props.value = /*sortPath*/ ctx[3];
    	}

    	select2 = new Select({ props: select2_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(select2, 'value', select2_value_binding));

    	function select3_value_binding(value) {
    		/*select3_value_binding*/ ctx[22](value);
    	}

    	let select3_props = {
    		containerClasses: "jse-sort-direction",
    		showIndicator: true,
    		items: /*sortDirectionOptions*/ ctx[9]
    	};

    	if (/*sortDirection*/ ctx[4] !== void 0) {
    		select3_props.value = /*sortDirection*/ ctx[4];
    	}

    	select3 = new Select({ props: select3_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(select3, 'value', select3_value_binding));

    	function select4_value_binding(value) {
    		/*select4_value_binding*/ ctx[23](value);
    	}

    	let select4_props = {
    		containerClasses: "jse-projection-paths",
    		isMulti: true,
    		showIndicator: true,
    		items: /*projectionOptions*/ ctx[7]
    	};

    	if (/*projectionPaths*/ ctx[5] !== void 0) {
    		select4_props.value = /*projectionPaths*/ ctx[5];
    	}

    	select4 = new Select({ props: select4_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(select4, 'value', select4_value_binding));

    	const block = {
    		c: function create() {
    			table = element("table");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Filter";
    			t1 = space();
    			td0 = element("td");
    			div0 = element("div");
    			create_component(select0.$$.fragment);
    			t2 = space();
    			create_component(select1.$$.fragment);
    			t3 = space();
    			input = element("input");
    			t4 = space();
    			tr1 = element("tr");
    			th1 = element("th");
    			th1.textContent = "Sort";
    			t6 = space();
    			td1 = element("td");
    			div1 = element("div");
    			create_component(select2.$$.fragment);
    			t7 = space();
    			create_component(select3.$$.fragment);
    			t8 = space();
    			tr2 = element("tr");
    			th2 = element("th");
    			th2.textContent = "Pick";
    			t10 = space();
    			td2 = element("td");
    			div2 = element("div");
    			create_component(select4.$$.fragment);
    			attr_dev(th0, "class", "svelte-13taczd");
    			add_location(th0, file$8, 107, 4, 5961);
    			attr_dev(input, "class", "jse-filter-value svelte-13taczd");
    			add_location(input, file$8, 122, 8, 6368);
    			attr_dev(div0, "class", "jse-horizontal svelte-13taczd");
    			add_location(div0, file$8, 109, 6, 5992);
    			add_location(td0, file$8, 108, 4, 5981);
    			add_location(tr0, file$8, 106, 2, 5952);
    			attr_dev(th1, "class", "svelte-13taczd");
    			add_location(th1, file$8, 127, 4, 6470);
    			attr_dev(div1, "class", "jse-horizontal svelte-13taczd");
    			add_location(div1, file$8, 129, 6, 6499);
    			add_location(td1, file$8, 128, 4, 6488);
    			add_location(tr1, file$8, 126, 2, 6461);
    			attr_dev(th2, "class", "svelte-13taczd");
    			add_location(th2, file$8, 146, 4, 6902);
    			attr_dev(div2, "class", "jse-horizontal svelte-13taczd");
    			add_location(div2, file$8, 148, 6, 6931);
    			add_location(td2, file$8, 147, 4, 6920);
    			add_location(tr2, file$8, 145, 2, 6893);
    			attr_dev(table, "class", "jse-transform-wizard svelte-13taczd");
    			add_location(table, file$8, 105, 0, 5913);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t1);
    			append_dev(tr0, td0);
    			append_dev(td0, div0);
    			mount_component(select0, div0, null);
    			append_dev(div0, t2);
    			mount_component(select1, div0, null);
    			append_dev(div0, t3);
    			append_dev(div0, input);
    			set_input_value(input, /*filterValue*/ ctx[2]);
    			append_dev(table, t4);
    			append_dev(table, tr1);
    			append_dev(tr1, th1);
    			append_dev(tr1, t6);
    			append_dev(tr1, td1);
    			append_dev(td1, div1);
    			mount_component(select2, div1, null);
    			append_dev(div1, t7);
    			mount_component(select3, div1, null);
    			append_dev(table, t8);
    			append_dev(table, tr2);
    			append_dev(tr2, th2);
    			append_dev(tr2, t10);
    			append_dev(tr2, td2);
    			append_dev(td2, div2);
    			mount_component(select4, div2, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[20]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const select0_changes = {};
    			if (dirty[0] & /*fieldOptions*/ 64) select0_changes.items = /*fieldOptions*/ ctx[6];

    			if (!updating_value && dirty[0] & /*filterPath*/ 1) {
    				updating_value = true;
    				select0_changes.value = /*filterPath*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			select0.$set(select0_changes);
    			const select1_changes = {};

    			if (!updating_value_1 && dirty[0] & /*filterRelation*/ 2) {
    				updating_value_1 = true;
    				select1_changes.value = /*filterRelation*/ ctx[1];
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			select1.$set(select1_changes);

    			if (dirty[0] & /*filterValue*/ 4 && input.value !== /*filterValue*/ ctx[2]) {
    				set_input_value(input, /*filterValue*/ ctx[2]);
    			}

    			const select2_changes = {};
    			if (dirty[0] & /*fieldOptions*/ 64) select2_changes.items = /*fieldOptions*/ ctx[6];

    			if (!updating_value_2 && dirty[0] & /*sortPath*/ 8) {
    				updating_value_2 = true;
    				select2_changes.value = /*sortPath*/ ctx[3];
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			select2.$set(select2_changes);
    			const select3_changes = {};

    			if (!updating_value_3 && dirty[0] & /*sortDirection*/ 16) {
    				updating_value_3 = true;
    				select3_changes.value = /*sortDirection*/ ctx[4];
    				add_flush_callback(() => updating_value_3 = false);
    			}

    			select3.$set(select3_changes);
    			const select4_changes = {};
    			if (dirty[0] & /*projectionOptions*/ 128) select4_changes.items = /*projectionOptions*/ ctx[7];

    			if (!updating_value_4 && dirty[0] & /*projectionPaths*/ 32) {
    				updating_value_4 = true;
    				select4_changes.value = /*projectionPaths*/ ctx[5];
    				add_flush_callback(() => updating_value_4 = false);
    			}

    			select4.$set(select4_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select0.$$.fragment, local);
    			transition_in(select1.$$.fragment, local);
    			transition_in(select2.$$.fragment, local);
    			transition_in(select3.$$.fragment, local);
    			transition_in(select4.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select0.$$.fragment, local);
    			transition_out(select1.$$.fragment, local);
    			transition_out(select2.$$.fragment, local);
    			transition_out(select3.$$.fragment, local);
    			transition_out(select4.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(table);
    			destroy_component(select0);
    			destroy_component(select1);
    			destroy_component(select2);
    			destroy_component(select3);
    			destroy_component(select4);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let jsonIsArray;
    	let paths;
    	let pathsIncludingObjects;
    	let fieldOptions;
    	let projectionOptions;
    	let fieldPath;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TransformWizard', slots, []);
    	var _a, _b, _c, _d, _e, _f, _g;
    	const debug = createDebug('jsoneditor:TransformWizard');
    	let { json } = $$props;
    	let { queryOptions = {} } = $$props;
    	let { onChange } = $$props;
    	const filterRelationOptions = ['==', '!=', '<', '<=', '>', '>='].map(relation => ({ value: relation, label: relation }));
    	const sortDirectionOptions = [{ value: 'asc', label: 'ascending' }, { value: 'desc', label: 'descending' }];

    	// TODO: the binding with the select boxes is very cumbersome. Can we simplify this?
    	let filterPath = ((_a = queryOptions === null || queryOptions === void 0
    	? void 0
    	: queryOptions.filter) === null || _a === void 0
    	? void 0
    	: _a.path)
    	? pathToOption(queryOptions.filter.path)
    	: null;

    	let filterRelation = ((_b = queryOptions === null || queryOptions === void 0
    	? void 0
    	: queryOptions.filter) === null || _b === void 0
    	? void 0
    	: _b.relation)
    	? filterRelationOptions.find(option => option.value === queryOptions.filter.relation)
    	: null;

    	let filterValue = ((_c = queryOptions === null || queryOptions === void 0
    	? void 0
    	: queryOptions.filter) === null || _c === void 0
    	? void 0
    	: _c.value) || '';

    	let sortPath = ((_d = queryOptions === null || queryOptions === void 0
    	? void 0
    	: queryOptions.sort) === null || _d === void 0
    	? void 0
    	: _d.path)
    	? pathToOption(queryOptions.sort.path)
    	: null;

    	let sortDirection = ((_e = queryOptions === null || queryOptions === void 0
    	? void 0
    	: queryOptions.sort) === null || _e === void 0
    	? void 0
    	: _e.direction)
    	? sortDirectionOptions.find(option => option.value === queryOptions.sort.direction)
    	: null;

    	let projectionPaths = ((_f = queryOptions === null || queryOptions === void 0
    	? void 0
    	: queryOptions.projection) === null || _f === void 0
    	? void 0
    	: _f.paths)
    	? queryOptions.projection.paths.map(pathToOption)
    	: null;

    	function pathToOption(path) {
    		return {
    			value: path,
    			label: isEmpty(path) ? '(whole item)' : stringifyPath(path)
    		};
    	}

    	function changeFilterPath(path) {
    		var _a;

    		if (!isEqual(
    			(_a = queryOptions === null || queryOptions === void 0
    			? void 0
    			: queryOptions.filter) === null || _a === void 0
    			? void 0
    			: _a.path,
    			path
    		)) {
    			debug('changeFilterPath', path);
    			$$invalidate(10, queryOptions = immutableJSONPatch.setIn(queryOptions, ['filter', 'path'], path, true));
    			onChange(queryOptions);
    		}
    	}

    	function changeFilterRelation(relation) {
    		var _a;

    		if (!isEqual(
    			(_a = queryOptions === null || queryOptions === void 0
    			? void 0
    			: queryOptions.filter) === null || _a === void 0
    			? void 0
    			: _a.relation,
    			relation
    		)) {
    			debug('changeFilterRelation', relation);
    			$$invalidate(10, queryOptions = immutableJSONPatch.setIn(queryOptions, ['filter', 'relation'], relation, true));
    			onChange(queryOptions);
    		}
    	}

    	function changeFilterValue(value) {
    		var _a;

    		if (!isEqual(
    			(_a = queryOptions === null || queryOptions === void 0
    			? void 0
    			: queryOptions.filter) === null || _a === void 0
    			? void 0
    			: _a.value,
    			value
    		)) {
    			debug('changeFilterValue', value);
    			$$invalidate(10, queryOptions = immutableJSONPatch.setIn(queryOptions, ['filter', 'value'], value, true));
    			onChange(queryOptions);
    		}
    	}

    	function changeSortPath(path) {
    		var _a;

    		if (!isEqual(
    			(_a = queryOptions === null || queryOptions === void 0
    			? void 0
    			: queryOptions.sort) === null || _a === void 0
    			? void 0
    			: _a.path,
    			path
    		)) {
    			debug('changeSortPath', path);
    			$$invalidate(10, queryOptions = immutableJSONPatch.setIn(queryOptions, ['sort', 'path'], path, true));
    			onChange(queryOptions);
    		}
    	}

    	function changeSortDirection(direction) {
    		var _a;

    		if (!isEqual(
    			(_a = queryOptions === null || queryOptions === void 0
    			? void 0
    			: queryOptions.sort) === null || _a === void 0
    			? void 0
    			: _a.direction,
    			direction
    		)) {
    			debug('changeSortDirection', direction);
    			$$invalidate(10, queryOptions = immutableJSONPatch.setIn(queryOptions, ['sort', 'direction'], direction, true));
    			onChange(queryOptions);
    		}
    	}

    	function changeProjectionPaths(paths) {
    		var _a;

    		if (!isEqual(
    			(_a = queryOptions === null || queryOptions === void 0
    			? void 0
    			: queryOptions.projection) === null || _a === void 0
    			? void 0
    			: _a.paths,
    			paths
    		)) {
    			debug('changeProjectionPaths', paths);
    			$$invalidate(10, queryOptions = immutableJSONPatch.setIn(queryOptions, ['projection', 'paths'], paths, true));
    			onChange(queryOptions);
    		}
    	}

    	const writable_props = ['json', 'queryOptions', 'onChange'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TransformWizard> was created with unknown prop '${key}'`);
    	});

    	function select0_value_binding(value) {
    		filterPath = value;
    		$$invalidate(0, filterPath);
    	}

    	function select1_value_binding(value) {
    		filterRelation = value;
    		$$invalidate(1, filterRelation);
    	}

    	function input_input_handler() {
    		filterValue = this.value;
    		$$invalidate(2, filterValue);
    	}

    	function select2_value_binding(value) {
    		sortPath = value;
    		$$invalidate(3, sortPath);
    	}

    	function select3_value_binding(value) {
    		sortDirection = value;
    		$$invalidate(4, sortDirection);
    	}

    	function select4_value_binding(value) {
    		projectionPaths = value;
    		$$invalidate(5, projectionPaths);
    	}

    	$$self.$$set = $$props => {
    		if ('json' in $$props) $$invalidate(11, json = $$props.json);
    		if ('queryOptions' in $$props) $$invalidate(10, queryOptions = $$props.queryOptions);
    		if ('onChange' in $$props) $$invalidate(12, onChange = $$props.onChange);
    	};

    	$$self.$capture_state = () => ({
    		_a,
    		_b,
    		_c,
    		_d,
    		_e,
    		_f,
    		_g,
    		Select,
    		getNestedPaths,
    		stringifyPath,
    		createDebug,
    		isEmpty,
    		isEqual,
    		setIn: immutableJSONPatch.setIn,
    		debug,
    		json,
    		queryOptions,
    		onChange,
    		filterRelationOptions,
    		sortDirectionOptions,
    		filterPath,
    		filterRelation,
    		filterValue,
    		sortPath,
    		sortDirection,
    		projectionPaths,
    		pathToOption,
    		changeFilterPath,
    		changeFilterRelation,
    		changeFilterValue,
    		changeSortPath,
    		changeSortDirection,
    		changeProjectionPaths,
    		fieldOptions,
    		fieldPath,
    		pathsIncludingObjects,
    		projectionOptions,
    		paths,
    		jsonIsArray
    	});

    	$$self.$inject_state = $$props => {
    		if ('_a' in $$props) $$invalidate(13, _a = $$props._a);
    		if ('_b' in $$props) _b = $$props._b;
    		if ('_c' in $$props) _c = $$props._c;
    		if ('_d' in $$props) _d = $$props._d;
    		if ('_e' in $$props) _e = $$props._e;
    		if ('_f' in $$props) _f = $$props._f;
    		if ('_g' in $$props) $$invalidate(14, _g = $$props._g);
    		if ('json' in $$props) $$invalidate(11, json = $$props.json);
    		if ('queryOptions' in $$props) $$invalidate(10, queryOptions = $$props.queryOptions);
    		if ('onChange' in $$props) $$invalidate(12, onChange = $$props.onChange);
    		if ('filterPath' in $$props) $$invalidate(0, filterPath = $$props.filterPath);
    		if ('filterRelation' in $$props) $$invalidate(1, filterRelation = $$props.filterRelation);
    		if ('filterValue' in $$props) $$invalidate(2, filterValue = $$props.filterValue);
    		if ('sortPath' in $$props) $$invalidate(3, sortPath = $$props.sortPath);
    		if ('sortDirection' in $$props) $$invalidate(4, sortDirection = $$props.sortDirection);
    		if ('projectionPaths' in $$props) $$invalidate(5, projectionPaths = $$props.projectionPaths);
    		if ('fieldOptions' in $$props) $$invalidate(6, fieldOptions = $$props.fieldOptions);
    		if ('fieldPath' in $$props) fieldPath = $$props.fieldPath;
    		if ('pathsIncludingObjects' in $$props) $$invalidate(15, pathsIncludingObjects = $$props.pathsIncludingObjects);
    		if ('projectionOptions' in $$props) $$invalidate(7, projectionOptions = $$props.projectionOptions);
    		if ('paths' in $$props) $$invalidate(16, paths = $$props.paths);
    		if ('jsonIsArray' in $$props) $$invalidate(17, jsonIsArray = $$props.jsonIsArray);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*json*/ 2048) {
    			// options
    			$$invalidate(17, jsonIsArray = Array.isArray(json));
    		}

    		if ($$self.$$.dirty[0] & /*jsonIsArray, json*/ 133120) {
    			$$invalidate(16, paths = jsonIsArray ? getNestedPaths(json) : []);
    		}

    		if ($$self.$$.dirty[0] & /*jsonIsArray, json*/ 133120) {
    			$$invalidate(15, pathsIncludingObjects = jsonIsArray ? getNestedPaths(json, true) : []);
    		}

    		if ($$self.$$.dirty[0] & /*paths*/ 65536) {
    			$$invalidate(6, fieldOptions = paths.map(pathToOption));
    		}

    		if ($$self.$$.dirty[0] & /*pathsIncludingObjects*/ 32768) {
    			$$invalidate(7, projectionOptions = pathsIncludingObjects
    			? pathsIncludingObjects.map(pathToOption)
    			: []);
    		}

    		if ($$self.$$.dirty[0] & /*queryOptions, _g, fieldOptions*/ 17472) {
    			fieldPath = ($$invalidate(14, _g = queryOptions === null || queryOptions === void 0
    			? void 0
    			: queryOptions.filter) === null || _g === void 0
    			? void 0
    			: _g.path)
    			? fieldOptions.find(option => {
    					var _a;

    					return isEqual(option.value, (_a = queryOptions === null || queryOptions === void 0
    					? void 0
    					: queryOptions.filter) === null || _a === void 0
    					? void 0
    					: _a.path);
    				})
    			: null;
    		}

    		if ($$self.$$.dirty[0] & /*filterPath*/ 1) {
    			changeFilterPath((filterPath === null || filterPath === void 0
    			? void 0
    			: filterPath.value) || null);
    		}

    		if ($$self.$$.dirty[0] & /*filterRelation*/ 2) {
    			changeFilterRelation((filterRelation === null || filterRelation === void 0
    			? void 0
    			: filterRelation.value) || null);
    		}

    		if ($$self.$$.dirty[0] & /*filterValue*/ 4) {
    			changeFilterValue(filterValue || null);
    		}

    		if ($$self.$$.dirty[0] & /*sortPath*/ 8) {
    			changeSortPath((sortPath === null || sortPath === void 0
    			? void 0
    			: sortPath.value) || null);
    		}

    		if ($$self.$$.dirty[0] & /*sortDirection*/ 16) {
    			changeSortDirection((sortDirection === null || sortDirection === void 0
    			? void 0
    			: sortDirection.value) || null);
    		}

    		if ($$self.$$.dirty[0] & /*projectionPaths*/ 32) {
    			changeProjectionPaths(projectionPaths
    			? projectionPaths.map(item => item.value)
    			: null);
    		}
    	};

    	return [
    		filterPath,
    		filterRelation,
    		filterValue,
    		sortPath,
    		sortDirection,
    		projectionPaths,
    		fieldOptions,
    		projectionOptions,
    		filterRelationOptions,
    		sortDirectionOptions,
    		queryOptions,
    		json,
    		onChange,
    		_a,
    		_g,
    		pathsIncludingObjects,
    		paths,
    		jsonIsArray,
    		select0_value_binding,
    		select1_value_binding,
    		input_input_handler,
    		select2_value_binding,
    		select3_value_binding,
    		select4_value_binding
    	];
    }

    class TransformWizard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$9, create_fragment$9, not_equal, { json: 11, queryOptions: 10, onChange: 12 }, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TransformWizard",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*json*/ ctx[11] === undefined && !('json' in props)) {
    			console.warn("<TransformWizard> was created without expected prop 'json'");
    		}

    		if (/*onChange*/ ctx[12] === undefined && !('onChange' in props)) {
    			console.warn("<TransformWizard> was created without expected prop 'onChange'");
    		}
    	}

    	get json() {
    		throw new Error("<TransformWizard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set json(value) {
    		throw new Error("<TransformWizard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get queryOptions() {
    		throw new Error("<TransformWizard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set queryOptions(value) {
    		throw new Error("<TransformWizard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChange() {
    		throw new Error("<TransformWizard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChange(value) {
    		throw new Error("<TransformWizard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/controls/selectQueryLanguage/SelectQueryLanguage.svelte generated by Svelte v3.48.0 */
    const file$7 = "node_modules/svelte-jsoneditor/components/controls/selectQueryLanguage/SelectQueryLanguage.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    // (24:8) {:else}
    function create_else_block$3(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { data: faSquare },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(24:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (22:8) {#if queryLanguage.id === queryLanguageId}
    function create_if_block$6(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: { data: faCheckSquare },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(icon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(22:8) {#if queryLanguage.id === queryLanguageId}",
    		ctx
    	});

    	return block;
    }

    // (14:4) {#each queryLanguages as queryLanguage}
    function create_each_block$2(ctx) {
    	let button;
    	let current_block_type_index;
    	let if_block;
    	let t0;
    	let t1_value = /*queryLanguage*/ ctx[5].name + "";
    	let t1;
    	let t2;
    	let button_title_value;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$6, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*queryLanguage*/ ctx[5].id === /*queryLanguageId*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*queryLanguage*/ ctx[5]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			if_block.c();
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-query-language svelte-19cxesy");
    			attr_dev(button, "title", button_title_value = `Select ${/*queryLanguage*/ ctx[5].name} as query language`);
    			toggle_class(button, "selected", /*queryLanguage*/ ctx[5].id === /*queryLanguageId*/ ctx[0]);
    			add_location(button, file$7, 14, 6, 521);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			if_blocks[current_block_type_index].m(button, null);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			append_dev(button, t2);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(button, t0);
    			}

    			if ((!current || dirty & /*queryLanguages*/ 2) && t1_value !== (t1_value = /*queryLanguage*/ ctx[5].name + "")) set_data_dev(t1, t1_value);

    			if (!current || dirty & /*queryLanguages*/ 2 && button_title_value !== (button_title_value = `Select ${/*queryLanguage*/ ctx[5].name} as query language`)) {
    				attr_dev(button, "title", button_title_value);
    			}

    			if (dirty & /*queryLanguages, queryLanguageId*/ 3) {
    				toggle_class(button, "selected", /*queryLanguage*/ ctx[5].id === /*queryLanguageId*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(14:4) {#each queryLanguages as queryLanguage}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let div1;
    	let div0;
    	let current;
    	let each_value = /*queryLanguages*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "jse-select-query-language-container svelte-19cxesy");
    			add_location(div0, file$7, 12, 2, 421);
    			attr_dev(div1, "class", "jse-select-query-language svelte-19cxesy");
    			add_location(div1, file$7, 11, 0, 379);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*queryLanguages, queryLanguageId, handleChangeQueryLanguage, faCheckSquare, faSquare*/ 7) {
    				each_value = /*queryLanguages*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SelectQueryLanguage', slots, []);
    	let { queryLanguages } = $$props;
    	let { queryLanguageId } = $$props;
    	let { onChangeQueryLanguage } = $$props;

    	function handleChangeQueryLanguage(newQueryLanguageId) {
    		$$invalidate(0, queryLanguageId = newQueryLanguageId);
    		onChangeQueryLanguage(newQueryLanguageId);
    	}

    	const writable_props = ['queryLanguages', 'queryLanguageId', 'onChangeQueryLanguage'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SelectQueryLanguage> was created with unknown prop '${key}'`);
    	});

    	const click_handler = queryLanguage => handleChangeQueryLanguage(queryLanguage.id);

    	$$self.$$set = $$props => {
    		if ('queryLanguages' in $$props) $$invalidate(1, queryLanguages = $$props.queryLanguages);
    		if ('queryLanguageId' in $$props) $$invalidate(0, queryLanguageId = $$props.queryLanguageId);
    		if ('onChangeQueryLanguage' in $$props) $$invalidate(3, onChangeQueryLanguage = $$props.onChangeQueryLanguage);
    	};

    	$$self.$capture_state = () => ({
    		Icon,
    		faCheckSquare,
    		faSquare,
    		queryLanguages,
    		queryLanguageId,
    		onChangeQueryLanguage,
    		handleChangeQueryLanguage
    	});

    	$$self.$inject_state = $$props => {
    		if ('queryLanguages' in $$props) $$invalidate(1, queryLanguages = $$props.queryLanguages);
    		if ('queryLanguageId' in $$props) $$invalidate(0, queryLanguageId = $$props.queryLanguageId);
    		if ('onChangeQueryLanguage' in $$props) $$invalidate(3, onChangeQueryLanguage = $$props.onChangeQueryLanguage);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		queryLanguageId,
    		queryLanguages,
    		handleChangeQueryLanguage,
    		onChangeQueryLanguage,
    		click_handler
    	];
    }

    class SelectQueryLanguage extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			queryLanguages: 1,
    			queryLanguageId: 0,
    			onChangeQueryLanguage: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SelectQueryLanguage",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*queryLanguages*/ ctx[1] === undefined && !('queryLanguages' in props)) {
    			console.warn("<SelectQueryLanguage> was created without expected prop 'queryLanguages'");
    		}

    		if (/*queryLanguageId*/ ctx[0] === undefined && !('queryLanguageId' in props)) {
    			console.warn("<SelectQueryLanguage> was created without expected prop 'queryLanguageId'");
    		}

    		if (/*onChangeQueryLanguage*/ ctx[3] === undefined && !('onChangeQueryLanguage' in props)) {
    			console.warn("<SelectQueryLanguage> was created without expected prop 'onChangeQueryLanguage'");
    		}
    	}

    	get queryLanguages() {
    		throw new Error("<SelectQueryLanguage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set queryLanguages(value) {
    		throw new Error("<SelectQueryLanguage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get queryLanguageId() {
    		throw new Error("<SelectQueryLanguage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set queryLanguageId(value) {
    		throw new Error("<SelectQueryLanguage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChangeQueryLanguage() {
    		throw new Error("<SelectQueryLanguage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChangeQueryLanguage(value) {
    		throw new Error("<SelectQueryLanguage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modals/TransformModalHeader.svelte generated by Svelte v3.48.0 */
    const file$6 = "node_modules/svelte-jsoneditor/components/modals/TransformModalHeader.svelte";

    // (34:2) {#if queryLanguages.length > 1}
    function create_if_block$5(ctx) {
    	let button;
    	let icon;
    	let current;
    	let mounted;
    	let dispose;
    	icon = new Icon({ props: { data: faCog }, $$inline: true });

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(icon.$$.fragment);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-config svelte-d01h2s");
    			attr_dev(button, "title", "Select a query language");
    			add_location(button, file$6, 34, 4, 1120);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(icon, button, null);
    			/*button_binding*/ ctx[6](button);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*openConfig*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(icon);
    			/*button_binding*/ ctx[6](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(34:2) {#if queryLanguages.length > 1}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div1;
    	let div0;
    	let t1;
    	let t2;
    	let button;
    	let icon;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*queryLanguages*/ ctx[0].length > 1 && create_if_block$5(ctx);
    	icon = new Icon({ props: { data: faTimes }, $$inline: true });

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "Transform";
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			button = element("button");
    			create_component(icon.$$.fragment);
    			attr_dev(div0, "class", "jse-title svelte-d01h2s");
    			add_location(div0, file$6, 32, 2, 1043);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-close svelte-d01h2s");
    			add_location(button, file$6, 44, 2, 1331);
    			attr_dev(div1, "class", "jse-header svelte-d01h2s");
    			add_location(div1, file$6, 31, 0, 1016);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t2);
    			append_dev(div1, button);
    			mount_component(icon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*close*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*queryLanguages*/ ctx[0].length > 1) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*queryLanguages*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t2);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TransformModalHeader', slots, []);
    	let { queryLanguages } = $$props;
    	let { queryLanguageId } = $$props;
    	let { onChangeQueryLanguage } = $$props;
    	let refConfigButton;
    	const { close } = getContext('simple-modal');
    	const { openAbsolutePopup, closeAbsolutePopup } = getContext('absolute-popup');

    	function openConfig() {
    		const props = {
    			queryLanguages,
    			queryLanguageId,
    			onChangeQueryLanguage: selectedQueryLanguage => {
    				closeAbsolutePopup();
    				onChangeQueryLanguage(selectedQueryLanguage);
    			}
    		};

    		openAbsolutePopup(SelectQueryLanguage, props, {
    			position: 'bottom',
    			offsetTop: -2,
    			offsetLeft: 0,
    			anchor: refConfigButton,
    			closeOnOuterClick: true
    		});
    	}

    	const writable_props = ['queryLanguages', 'queryLanguageId', 'onChangeQueryLanguage'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TransformModalHeader> was created with unknown prop '${key}'`);
    	});

    	function button_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refConfigButton = $$value;
    			$$invalidate(1, refConfigButton);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('queryLanguages' in $$props) $$invalidate(0, queryLanguages = $$props.queryLanguages);
    		if ('queryLanguageId' in $$props) $$invalidate(4, queryLanguageId = $$props.queryLanguageId);
    		if ('onChangeQueryLanguage' in $$props) $$invalidate(5, onChangeQueryLanguage = $$props.onChangeQueryLanguage);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		Icon,
    		faCog,
    		faTimes,
    		SelectQueryLanguage,
    		queryLanguages,
    		queryLanguageId,
    		onChangeQueryLanguage,
    		refConfigButton,
    		close,
    		openAbsolutePopup,
    		closeAbsolutePopup,
    		openConfig
    	});

    	$$self.$inject_state = $$props => {
    		if ('queryLanguages' in $$props) $$invalidate(0, queryLanguages = $$props.queryLanguages);
    		if ('queryLanguageId' in $$props) $$invalidate(4, queryLanguageId = $$props.queryLanguageId);
    		if ('onChangeQueryLanguage' in $$props) $$invalidate(5, onChangeQueryLanguage = $$props.onChangeQueryLanguage);
    		if ('refConfigButton' in $$props) $$invalidate(1, refConfigButton = $$props.refConfigButton);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		queryLanguages,
    		refConfigButton,
    		close,
    		openConfig,
    		queryLanguageId,
    		onChangeQueryLanguage,
    		button_binding
    	];
    }

    class TransformModalHeader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$7, create_fragment$7, not_equal, {
    			queryLanguages: 0,
    			queryLanguageId: 4,
    			onChangeQueryLanguage: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TransformModalHeader",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*queryLanguages*/ ctx[0] === undefined && !('queryLanguages' in props)) {
    			console.warn("<TransformModalHeader> was created without expected prop 'queryLanguages'");
    		}

    		if (/*queryLanguageId*/ ctx[4] === undefined && !('queryLanguageId' in props)) {
    			console.warn("<TransformModalHeader> was created without expected prop 'queryLanguageId'");
    		}

    		if (/*onChangeQueryLanguage*/ ctx[5] === undefined && !('onChangeQueryLanguage' in props)) {
    			console.warn("<TransformModalHeader> was created without expected prop 'onChangeQueryLanguage'");
    		}
    	}

    	get queryLanguages() {
    		throw new Error("<TransformModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set queryLanguages(value) {
    		throw new Error("<TransformModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get queryLanguageId() {
    		throw new Error("<TransformModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set queryLanguageId(value) {
    		throw new Error("<TransformModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChangeQueryLanguage() {
    		throw new Error("<TransformModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChangeQueryLanguage(value) {
    		throw new Error("<TransformModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modals/TransformModal.svelte generated by Svelte v3.48.0 */

    const { console: console_1$3 } = globals;
    const file$5 = "node_modules/svelte-jsoneditor/components/modals/TransformModal.svelte";

    // (167:10) {#if showWizard}
    function create_if_block_2$2(ctx) {
    	let show_if;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_3$2, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (dirty[0] & /*selectedJson*/ 512) show_if = null;
    		if (show_if == null) show_if = !!Array.isArray(/*selectedJson*/ ctx[9]);
    		if (show_if) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx, [-1, -1]);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(167:10) {#if showWizard}",
    		ctx
    	});

    	return block;
    }

    // (170:12) {:else}
    function create_else_block_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("(Only available for arrays, not for objects)");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(170:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (168:12) {#if Array.isArray(selectedJson)}
    function create_if_block_3$2(ctx) {
    	let transformwizard;
    	let current;

    	transformwizard = new TransformWizard({
    			props: {
    				queryOptions: /*queryOptions*/ ctx[7],
    				json: /*selectedJson*/ ctx[9],
    				onChange: /*updateQueryByWizard*/ ctx[16]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(transformwizard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(transformwizard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const transformwizard_changes = {};
    			if (dirty[0] & /*queryOptions*/ 128) transformwizard_changes.queryOptions = /*queryOptions*/ ctx[7];
    			if (dirty[0] & /*selectedJson*/ 512) transformwizard_changes.json = /*selectedJson*/ ctx[9];
    			transformwizard.$set(transformwizard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(transformwizard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(transformwizard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(transformwizard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(168:12) {#if Array.isArray(selectedJson)}",
    		ctx
    	});

    	return block;
    }

    // (195:12) {#if showOriginal}
    function create_if_block_1$1(ctx) {
    	let treemode;
    	let current;

    	treemode = new TreeMode({
    			props: {
    				externalContent: /*selectedContent*/ ctx[14],
    				readOnly: true,
    				mainMenuBar: false,
    				navigationBar: false,
    				escapeControlCharacters: /*escapeControlCharacters*/ ctx[2],
    				escapeUnicodeCharacters: /*escapeUnicodeCharacters*/ ctx[3],
    				onRenderValue: /*onRenderValue*/ ctx[5],
    				onError: console.error,
    				onChange: noop$1,
    				onFocus: noop$1,
    				onBlur: noop$1,
    				onSortModal: noop$1,
    				onTransformModal: noop$1,
    				onClassName: /*onClassName*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(treemode.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(treemode, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const treemode_changes = {};
    			if (dirty[0] & /*selectedContent*/ 16384) treemode_changes.externalContent = /*selectedContent*/ ctx[14];
    			if (dirty[0] & /*escapeControlCharacters*/ 4) treemode_changes.escapeControlCharacters = /*escapeControlCharacters*/ ctx[2];
    			if (dirty[0] & /*escapeUnicodeCharacters*/ 8) treemode_changes.escapeUnicodeCharacters = /*escapeUnicodeCharacters*/ ctx[3];
    			if (dirty[0] & /*onRenderValue*/ 32) treemode_changes.onRenderValue = /*onRenderValue*/ ctx[5];
    			if (dirty[0] & /*onClassName*/ 64) treemode_changes.onClassName = /*onClassName*/ ctx[6];
    			treemode.$set(treemode_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(treemode.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(treemode.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(treemode, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(195:12) {#if showOriginal}",
    		ctx
    	});

    	return block;
    }

    // (235:12) {:else}
    function create_else_block$2(ctx) {
    	let div;
    	let t_value = /*previewError*/ ctx[12].toString() + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "jse-preview jse-error svelte-15uz9w0");
    			add_location(div, file$5, 235, 14, 8512);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*previewError*/ 4096 && t_value !== (t_value = /*previewError*/ ctx[12].toString() + "")) set_data_dev(t, t_value);
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(235:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (218:12) {#if !previewError}
    function create_if_block$4(ctx) {
    	let treemode;
    	let current;

    	treemode = new TreeMode({
    			props: {
    				externalContent: /*previewContent*/ ctx[13],
    				readOnly: true,
    				mainMenuBar: false,
    				navigationBar: false,
    				escapeControlCharacters: /*escapeControlCharacters*/ ctx[2],
    				escapeUnicodeCharacters: /*escapeUnicodeCharacters*/ ctx[3],
    				onRenderValue: /*onRenderValue*/ ctx[5],
    				onError: console.error,
    				onChange: noop$1,
    				onFocus: noop$1,
    				onBlur: noop$1,
    				onSortModal: noop$1,
    				onTransformModal: noop$1,
    				onClassName: /*onClassName*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(treemode.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(treemode, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const treemode_changes = {};
    			if (dirty[0] & /*previewContent*/ 8192) treemode_changes.externalContent = /*previewContent*/ ctx[13];
    			if (dirty[0] & /*escapeControlCharacters*/ 4) treemode_changes.escapeControlCharacters = /*escapeControlCharacters*/ ctx[2];
    			if (dirty[0] & /*escapeUnicodeCharacters*/ 8) treemode_changes.escapeUnicodeCharacters = /*escapeUnicodeCharacters*/ ctx[3];
    			if (dirty[0] & /*onRenderValue*/ 32) treemode_changes.onRenderValue = /*onRenderValue*/ ctx[5];
    			if (dirty[0] & /*onClassName*/ 64) treemode_changes.onClassName = /*onClassName*/ ctx[6];
    			treemode.$set(treemode_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(treemode.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(treemode.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(treemode, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(218:12) {#if !previewError}",
    		ctx
    	});

    	return block;
    }

    // (132:2) <AbsolutePopup>
    function create_default_slot$1(ctx) {
    	let transformmodalheader;
    	let t0;
    	let div19;
    	let div17;
    	let div9;
    	let div1;
    	let div0;
    	let t2;
    	let div2;
    	let raw_value = /*getSelectedQueryLanguage*/ ctx[15](/*queryLanguageId*/ ctx[0]).description + "";
    	let t3;
    	let div4;
    	let div3;
    	let t5;
    	let input;
    	let input_value_value;
    	let t6;
    	let div6;
    	let div5;
    	let button0;
    	let icon0;
    	let t7;
    	let t8;
    	let t9;
    	let div8;
    	let div7;
    	let t11;
    	let textarea;
    	let t12;
    	let div16;
    	let div12;
    	let div11;
    	let div10;
    	let button1;
    	let icon1;
    	let t13;
    	let t14;
    	let t15;
    	let div15;
    	let div14;
    	let div13;
    	let t17;
    	let current_block_type_index;
    	let if_block2;
    	let t18;
    	let div18;
    	let button2;
    	let t19;
    	let button2_disabled_value;
    	let current;
    	let mounted;
    	let dispose;

    	transformmodalheader = new TransformModalHeader({
    			props: {
    				queryLanguages: /*queryLanguages*/ ctx[4],
    				queryLanguageId: /*queryLanguageId*/ ctx[0],
    				onChangeQueryLanguage: /*handleChangeQueryLanguage*/ ctx[21]
    			},
    			$$inline: true
    		});

    	icon0 = new Icon({
    			props: {
    				data: /*showWizard*/ ctx[10] ? faCaretDown : faCaretRight
    			},
    			$$inline: true
    		});

    	let if_block0 = /*showWizard*/ ctx[10] && create_if_block_2$2(ctx);

    	icon1 = new Icon({
    			props: {
    				data: /*showOriginal*/ ctx[11] ? faCaretDown : faCaretRight
    			},
    			$$inline: true
    		});

    	let if_block1 = /*showOriginal*/ ctx[11] && create_if_block_1$1(ctx);
    	const if_block_creators = [create_if_block$4, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (!/*previewError*/ ctx[12]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			create_component(transformmodalheader.$$.fragment);
    			t0 = space();
    			div19 = element("div");
    			div17 = element("div");
    			div9 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "Language";
    			t2 = space();
    			div2 = element("div");
    			t3 = space();
    			div4 = element("div");
    			div3 = element("div");
    			div3.textContent = "Path";
    			t5 = space();
    			input = element("input");
    			t6 = space();
    			div6 = element("div");
    			div5 = element("div");
    			button0 = element("button");
    			create_component(icon0.$$.fragment);
    			t7 = text("\n                Wizard");
    			t8 = space();
    			if (if_block0) if_block0.c();
    			t9 = space();
    			div8 = element("div");
    			div7 = element("div");
    			div7.textContent = "Query";
    			t11 = space();
    			textarea = element("textarea");
    			t12 = space();
    			div16 = element("div");
    			div12 = element("div");
    			div11 = element("div");
    			div10 = element("div");
    			button1 = element("button");
    			create_component(icon1.$$.fragment);
    			t13 = text("\n                  Original");
    			t14 = space();
    			if (if_block1) if_block1.c();
    			t15 = space();
    			div15 = element("div");
    			div14 = element("div");
    			div13 = element("div");
    			div13.textContent = "Preview";
    			t17 = space();
    			if_block2.c();
    			t18 = space();
    			div18 = element("div");
    			button2 = element("button");
    			t19 = text("Transform");
    			attr_dev(div0, "class", "jse-label-inner svelte-15uz9w0");
    			add_location(div0, file$5, 141, 12, 5258);
    			attr_dev(div1, "class", "jse-label svelte-15uz9w0");
    			add_location(div1, file$5, 140, 10, 5222);
    			attr_dev(div2, "class", "jse-description svelte-15uz9w0");
    			add_location(div2, file$5, 143, 10, 5329);
    			attr_dev(div3, "class", "jse-label-inner svelte-15uz9w0");
    			add_location(div3, file$5, 148, 12, 5497);
    			attr_dev(div4, "class", "jse-label svelte-15uz9w0");
    			add_location(div4, file$5, 147, 10, 5461);
    			attr_dev(input, "class", "jse-path svelte-15uz9w0");
    			attr_dev(input, "type", "text");
    			input.readOnly = true;
    			attr_dev(input, "title", "Selected path");

    			input.value = input_value_value = !isEmpty(/*selectedPath*/ ctx[1])
    			? stringifyPath(/*selectedPath*/ ctx[1])
    			: '(whole document)';

    			add_location(input, file$5, 150, 10, 5564);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "svelte-15uz9w0");
    			add_location(button0, file$5, 160, 14, 5877);
    			attr_dev(div5, "class", "jse-label-inner svelte-15uz9w0");
    			add_location(div5, file$5, 159, 12, 5833);
    			attr_dev(div6, "class", "jse-label svelte-15uz9w0");
    			add_location(div6, file$5, 158, 10, 5797);
    			attr_dev(div7, "class", "jse-label-inner svelte-15uz9w0");
    			add_location(div7, file$5, 175, 12, 6416);
    			attr_dev(div8, "class", "jse-label svelte-15uz9w0");
    			add_location(div8, file$5, 174, 10, 6380);
    			attr_dev(textarea, "class", "jse-query svelte-15uz9w0");
    			attr_dev(textarea, "spellcheck", "false");
    			textarea.value = /*query*/ ctx[8];
    			add_location(textarea, file$5, 177, 10, 6484);
    			attr_dev(div9, "class", "jse-query-contents svelte-15uz9w0");
    			add_location(div9, file$5, 139, 8, 5179);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "svelte-15uz9w0");
    			add_location(button1, file$5, 188, 16, 6904);
    			attr_dev(div10, "class", "jse-label-inner svelte-15uz9w0");
    			add_location(div10, file$5, 187, 14, 6858);
    			attr_dev(div11, "class", "jse-label svelte-15uz9w0");
    			add_location(div11, file$5, 186, 12, 6820);
    			attr_dev(div12, "class", "jse-original-data svelte-15uz9w0");
    			toggle_class(div12, "jse-hide", !/*showOriginal*/ ctx[11]);
    			add_location(div12, file$5, 185, 10, 6745);
    			attr_dev(div13, "class", "jse-label-inner svelte-15uz9w0");
    			add_location(div13, file$5, 215, 14, 7834);
    			attr_dev(div14, "class", "jse-label svelte-15uz9w0");
    			add_location(div14, file$5, 214, 12, 7796);
    			attr_dev(div15, "class", "jse-preview-data svelte-15uz9w0");
    			add_location(div15, file$5, 213, 10, 7753);
    			attr_dev(div16, "class", "jse-data-contents svelte-15uz9w0");
    			toggle_class(div16, "jse-hide-original-data", !/*showOriginal*/ ctx[11]);
    			add_location(div16, file$5, 184, 8, 6658);
    			attr_dev(div17, "class", "jse-main-contents svelte-15uz9w0");
    			add_location(div17, file$5, 138, 6, 5139);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "jse-primary svelte-15uz9w0");
    			button2.disabled = button2_disabled_value = !!/*previewError*/ ctx[12];
    			add_location(button2, file$5, 245, 8, 8749);
    			attr_dev(div18, "class", "jse-actions svelte-15uz9w0");
    			add_location(div18, file$5, 244, 6, 8715);
    			attr_dev(div19, "class", "jse-contents svelte-15uz9w0");
    			add_location(div19, file$5, 137, 4, 5106);
    		},
    		m: function mount(target, anchor) {
    			mount_component(transformmodalheader, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div19, anchor);
    			append_dev(div19, div17);
    			append_dev(div17, div9);
    			append_dev(div9, div1);
    			append_dev(div1, div0);
    			append_dev(div9, t2);
    			append_dev(div9, div2);
    			div2.innerHTML = raw_value;
    			append_dev(div9, t3);
    			append_dev(div9, div4);
    			append_dev(div4, div3);
    			append_dev(div9, t5);
    			append_dev(div9, input);
    			append_dev(div9, t6);
    			append_dev(div9, div6);
    			append_dev(div6, div5);
    			append_dev(div5, button0);
    			mount_component(icon0, button0, null);
    			append_dev(button0, t7);
    			append_dev(div9, t8);
    			if (if_block0) if_block0.m(div9, null);
    			append_dev(div9, t9);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div9, t11);
    			append_dev(div9, textarea);
    			append_dev(div17, t12);
    			append_dev(div17, div16);
    			append_dev(div16, div12);
    			append_dev(div12, div11);
    			append_dev(div11, div10);
    			append_dev(div10, button1);
    			mount_component(icon1, button1, null);
    			append_dev(button1, t13);
    			append_dev(div12, t14);
    			if (if_block1) if_block1.m(div12, null);
    			append_dev(div16, t15);
    			append_dev(div16, div15);
    			append_dev(div15, div14);
    			append_dev(div14, div13);
    			append_dev(div15, t17);
    			if_blocks[current_block_type_index].m(div15, null);
    			append_dev(div19, t18);
    			append_dev(div19, div18);
    			append_dev(div18, button2);
    			append_dev(button2, t19);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*toggleShowWizard*/ ctx[19], false, false, false),
    					listen_dev(textarea, "input", /*handleChangeQuery*/ ctx[17], false, false, false),
    					listen_dev(button1, "click", /*toggleShowOriginal*/ ctx[20], false, false, false),
    					listen_dev(button2, "click", /*handleTransform*/ ctx[18], false, false, false),
    					action_destroyer(focus$1.call(null, button2))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const transformmodalheader_changes = {};
    			if (dirty[0] & /*queryLanguages*/ 16) transformmodalheader_changes.queryLanguages = /*queryLanguages*/ ctx[4];
    			if (dirty[0] & /*queryLanguageId*/ 1) transformmodalheader_changes.queryLanguageId = /*queryLanguageId*/ ctx[0];
    			transformmodalheader.$set(transformmodalheader_changes);
    			if ((!current || dirty[0] & /*queryLanguageId*/ 1) && raw_value !== (raw_value = /*getSelectedQueryLanguage*/ ctx[15](/*queryLanguageId*/ ctx[0]).description + "")) div2.innerHTML = raw_value;
    			if (!current || dirty[0] & /*selectedPath*/ 2 && input_value_value !== (input_value_value = !isEmpty(/*selectedPath*/ ctx[1])
    			? stringifyPath(/*selectedPath*/ ctx[1])
    			: '(whole document)') && input.value !== input_value_value) {
    				prop_dev(input, "value", input_value_value);
    			}

    			const icon0_changes = {};
    			if (dirty[0] & /*showWizard*/ 1024) icon0_changes.data = /*showWizard*/ ctx[10] ? faCaretDown : faCaretRight;
    			icon0.$set(icon0_changes);

    			if (/*showWizard*/ ctx[10]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*showWizard*/ 1024) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div9, t9);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty[0] & /*query*/ 256) {
    				prop_dev(textarea, "value", /*query*/ ctx[8]);
    			}

    			const icon1_changes = {};
    			if (dirty[0] & /*showOriginal*/ 2048) icon1_changes.data = /*showOriginal*/ ctx[11] ? faCaretDown : faCaretRight;
    			icon1.$set(icon1_changes);

    			if (/*showOriginal*/ ctx[11]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*showOriginal*/ 2048) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$1(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div12, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*showOriginal*/ 2048) {
    				toggle_class(div12, "jse-hide", !/*showOriginal*/ ctx[11]);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks[current_block_type_index];

    				if (!if_block2) {
    					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block2.c();
    				} else {
    					if_block2.p(ctx, dirty);
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(div15, null);
    			}

    			if (dirty[0] & /*showOriginal*/ 2048) {
    				toggle_class(div16, "jse-hide-original-data", !/*showOriginal*/ ctx[11]);
    			}

    			if (!current || dirty[0] & /*previewError*/ 4096 && button2_disabled_value !== (button2_disabled_value = !!/*previewError*/ ctx[12])) {
    				prop_dev(button2, "disabled", button2_disabled_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(transformmodalheader.$$.fragment, local);
    			transition_in(icon0.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(icon1.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(transformmodalheader.$$.fragment, local);
    			transition_out(icon0.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(icon1.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(transformmodalheader, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div19);
    			destroy_component(icon0);
    			if (if_block0) if_block0.d();
    			destroy_component(icon1);
    			if (if_block1) if_block1.d();
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(132:2) <AbsolutePopup>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div;
    	let absolutepopup;
    	let current;

    	absolutepopup = new AbsolutePopup({
    			props: {
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(absolutepopup.$$.fragment);
    			attr_dev(div, "class", "jse-modal jse-transform svelte-15uz9w0");
    			add_location(div, file$5, 130, 0, 4910);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(absolutepopup, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const absolutepopup_changes = {};

    			if (dirty[0] & /*previewError, showOriginal, previewContent, escapeControlCharacters, escapeUnicodeCharacters, onRenderValue, onClassName, selectedContent, query, queryOptions, selectedJson, showWizard, selectedPath, queryLanguageId, queryLanguages*/ 32767 | dirty[1] & /*$$scope*/ 8) {
    				absolutepopup_changes.$$scope = { dirty, ctx };
    			}

    			absolutepopup.$set(absolutepopup_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(absolutepopup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(absolutepopup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(absolutepopup);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function focus$1(element) {
    	element.focus();
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let selectedJson;
    	let selectedContent;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TransformModal', slots, []);
    	const debug = createDebug('jsoneditor:TransformModal');
    	let { id = 'transform-modal-' + uniqueId$1() } = $$props;
    	let { json } = $$props;
    	let { selectedPath = [] } = $$props;
    	let { escapeControlCharacters } = $$props;
    	let { escapeUnicodeCharacters } = $$props;
    	let { queryLanguages } = $$props;
    	let { queryLanguageId } = $$props;
    	let { onChangeQueryLanguage } = $$props;
    	let { onRenderValue } = $$props;
    	let { onClassName } = $$props;
    	let { onTransform } = $$props;
    	const { close } = getContext('simple-modal');
    	const stateId = `${id}:${immutableJSONPatch.compileJSONPointer(selectedPath)}`;
    	const state = transformModalState[stateId] || {};

    	// showWizard is not stored inside a stateId
    	let showWizard = transformModalState.showWizard !== false;

    	let showOriginal = transformModalState.showOriginal !== false;
    	let queryOptions = state.queryOptions || {};

    	let query = queryLanguageId === state.queryLanguageId && state.query
    	? state.query
    	: getSelectedQueryLanguage(queryLanguageId).createQuery(json, state.queryOptions || {});

    	let isManual = state.isManual || false;
    	let previewError = undefined;
    	let previewContent = { text: '' };

    	function getSelectedQueryLanguage(queryLanguageId) {
    		return queryLanguages.find(item => item.id === queryLanguageId) || queryLanguages[0];
    	}

    	function updateQueryByWizard(newQueryOptions) {
    		$$invalidate(7, queryOptions = newQueryOptions);
    		$$invalidate(8, query = getSelectedQueryLanguage(queryLanguageId).createQuery(json, newQueryOptions));
    		$$invalidate(27, isManual = false);
    		debug('updateQueryByWizard', { queryOptions, query, isManual });
    	}

    	function handleChangeQuery(event) {
    		$$invalidate(8, query = event.target.value);
    		$$invalidate(27, isManual = true);
    		debug('handleChangeQuery', { query, isManual });
    	}

    	function previewTransform(json, query) {
    		try {
    			debug('previewTransform', { query });
    			const jsonTransformed = getSelectedQueryLanguage(queryLanguageId).executeQuery(json, query);
    			$$invalidate(13, previewContent = { json: jsonTransformed });
    			$$invalidate(12, previewError = undefined);
    		} catch(err) {
    			$$invalidate(13, previewContent = { text: '' });
    			$$invalidate(12, previewError = err);
    		}
    	}

    	const previewTransformDebounced = debounce$1(previewTransform, DEBOUNCE_DELAY);

    	function handleTransform() {
    		try {
    			debug('handleTransform', { query });
    			const jsonTransformed = getSelectedQueryLanguage(queryLanguageId).executeQuery(selectedJson, query);

    			onTransform([
    				{
    					op: 'replace',
    					path: immutableJSONPatch.compileJSONPointer(selectedPath),
    					value: jsonTransformed
    				}
    			]);

    			close();
    		} catch(err) {
    			// this should never occur since we can only press the Transform
    			// button when creating a preview was successful
    			console.error(err);

    			$$invalidate(13, previewContent = { text: '' });
    			$$invalidate(12, previewError = err.toString());
    		}
    	}

    	function toggleShowWizard() {
    		$$invalidate(10, showWizard = !showWizard);

    		// not stored inside a stateId
    		$$invalidate(26, transformModalState.showWizard = showWizard, transformModalState);
    	}

    	function toggleShowOriginal() {
    		$$invalidate(11, showOriginal = !showOriginal);

    		// not stored inside a stateId
    		$$invalidate(26, transformModalState.showOriginal = showOriginal, transformModalState);
    	}

    	function handleChangeQueryLanguage(newQueryLanguageId) {
    		debug('handleChangeQueryLanguage', newQueryLanguageId);
    		$$invalidate(0, queryLanguageId = newQueryLanguageId);
    		onChangeQueryLanguage(newQueryLanguageId);
    		const newSelectedQueryLanguage = getSelectedQueryLanguage(queryLanguageId);
    		$$invalidate(8, query = newSelectedQueryLanguage.createQuery(json, queryOptions));
    		$$invalidate(27, isManual = false);
    	}

    	const writable_props = [
    		'id',
    		'json',
    		'selectedPath',
    		'escapeControlCharacters',
    		'escapeUnicodeCharacters',
    		'queryLanguages',
    		'queryLanguageId',
    		'onChangeQueryLanguage',
    		'onRenderValue',
    		'onClassName',
    		'onTransform'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<TransformModal> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(22, id = $$props.id);
    		if ('json' in $$props) $$invalidate(23, json = $$props.json);
    		if ('selectedPath' in $$props) $$invalidate(1, selectedPath = $$props.selectedPath);
    		if ('escapeControlCharacters' in $$props) $$invalidate(2, escapeControlCharacters = $$props.escapeControlCharacters);
    		if ('escapeUnicodeCharacters' in $$props) $$invalidate(3, escapeUnicodeCharacters = $$props.escapeUnicodeCharacters);
    		if ('queryLanguages' in $$props) $$invalidate(4, queryLanguages = $$props.queryLanguages);
    		if ('queryLanguageId' in $$props) $$invalidate(0, queryLanguageId = $$props.queryLanguageId);
    		if ('onChangeQueryLanguage' in $$props) $$invalidate(24, onChangeQueryLanguage = $$props.onChangeQueryLanguage);
    		if ('onRenderValue' in $$props) $$invalidate(5, onRenderValue = $$props.onRenderValue);
    		if ('onClassName' in $$props) $$invalidate(6, onClassName = $$props.onClassName);
    		if ('onTransform' in $$props) $$invalidate(25, onTransform = $$props.onTransform);
    	};

    	$$self.$capture_state = () => ({
    		uniqueId: uniqueId$1,
    		faCaretDown,
    		faCaretRight,
    		debounce: debounce$1,
    		isEmpty,
    		noop: noop$1,
    		getContext,
    		Icon,
    		DEBOUNCE_DELAY,
    		compileJSONPointer: immutableJSONPatch.compileJSONPointer,
    		getIn: immutableJSONPatch.getIn,
    		stringifyPath,
    		transformModalState,
    		TransformWizard,
    		TransformModalHeader,
    		AbsolutePopup,
    		createDebug,
    		TreeMode,
    		debug,
    		id,
    		json,
    		selectedPath,
    		escapeControlCharacters,
    		escapeUnicodeCharacters,
    		queryLanguages,
    		queryLanguageId,
    		onChangeQueryLanguage,
    		onRenderValue,
    		onClassName,
    		onTransform,
    		close,
    		stateId,
    		state,
    		showWizard,
    		showOriginal,
    		queryOptions,
    		query,
    		isManual,
    		previewError,
    		previewContent,
    		getSelectedQueryLanguage,
    		updateQueryByWizard,
    		handleChangeQuery,
    		previewTransform,
    		previewTransformDebounced,
    		handleTransform,
    		toggleShowWizard,
    		toggleShowOriginal,
    		focus: focus$1,
    		handleChangeQueryLanguage,
    		selectedJson,
    		selectedContent
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(22, id = $$props.id);
    		if ('json' in $$props) $$invalidate(23, json = $$props.json);
    		if ('selectedPath' in $$props) $$invalidate(1, selectedPath = $$props.selectedPath);
    		if ('escapeControlCharacters' in $$props) $$invalidate(2, escapeControlCharacters = $$props.escapeControlCharacters);
    		if ('escapeUnicodeCharacters' in $$props) $$invalidate(3, escapeUnicodeCharacters = $$props.escapeUnicodeCharacters);
    		if ('queryLanguages' in $$props) $$invalidate(4, queryLanguages = $$props.queryLanguages);
    		if ('queryLanguageId' in $$props) $$invalidate(0, queryLanguageId = $$props.queryLanguageId);
    		if ('onChangeQueryLanguage' in $$props) $$invalidate(24, onChangeQueryLanguage = $$props.onChangeQueryLanguage);
    		if ('onRenderValue' in $$props) $$invalidate(5, onRenderValue = $$props.onRenderValue);
    		if ('onClassName' in $$props) $$invalidate(6, onClassName = $$props.onClassName);
    		if ('onTransform' in $$props) $$invalidate(25, onTransform = $$props.onTransform);
    		if ('showWizard' in $$props) $$invalidate(10, showWizard = $$props.showWizard);
    		if ('showOriginal' in $$props) $$invalidate(11, showOriginal = $$props.showOriginal);
    		if ('queryOptions' in $$props) $$invalidate(7, queryOptions = $$props.queryOptions);
    		if ('query' in $$props) $$invalidate(8, query = $$props.query);
    		if ('isManual' in $$props) $$invalidate(27, isManual = $$props.isManual);
    		if ('previewError' in $$props) $$invalidate(12, previewError = $$props.previewError);
    		if ('previewContent' in $$props) $$invalidate(13, previewContent = $$props.previewContent);
    		if ('selectedJson' in $$props) $$invalidate(9, selectedJson = $$props.selectedJson);
    		if ('selectedContent' in $$props) $$invalidate(14, selectedContent = $$props.selectedContent);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*json, selectedPath*/ 8388610) {
    			$$invalidate(9, selectedJson = immutableJSONPatch.getIn(json, selectedPath));
    		}

    		if ($$self.$$.dirty[0] & /*selectedJson*/ 512) {
    			$$invalidate(14, selectedContent = { json: selectedJson });
    		}

    		if ($$self.$$.dirty[0] & /*selectedJson, query*/ 768) {
    			{
    				previewTransformDebounced(selectedJson, query);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*queryOptions, query, queryLanguageId, isManual, transformModalState*/ 201326977) {
    			{
    				// remember the selected values for the next time we open the SortModal
    				// just in memory, not persisted
    				$$invalidate(
    					26,
    					transformModalState[stateId] = {
    						queryOptions,
    						query,
    						queryLanguageId,
    						isManual
    					},
    					transformModalState
    				);

    				debug('store state in memory', stateId, transformModalState[stateId]);
    			}
    		}
    	};

    	return [
    		queryLanguageId,
    		selectedPath,
    		escapeControlCharacters,
    		escapeUnicodeCharacters,
    		queryLanguages,
    		onRenderValue,
    		onClassName,
    		queryOptions,
    		query,
    		selectedJson,
    		showWizard,
    		showOriginal,
    		previewError,
    		previewContent,
    		selectedContent,
    		getSelectedQueryLanguage,
    		updateQueryByWizard,
    		handleChangeQuery,
    		handleTransform,
    		toggleShowWizard,
    		toggleShowOriginal,
    		handleChangeQueryLanguage,
    		id,
    		json,
    		onChangeQueryLanguage,
    		onTransform,
    		transformModalState,
    		isManual
    	];
    }

    class TransformModal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$6,
    			create_fragment$6,
    			not_equal,
    			{
    				id: 22,
    				json: 23,
    				selectedPath: 1,
    				escapeControlCharacters: 2,
    				escapeUnicodeCharacters: 3,
    				queryLanguages: 4,
    				queryLanguageId: 0,
    				onChangeQueryLanguage: 24,
    				onRenderValue: 5,
    				onClassName: 6,
    				onTransform: 25
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TransformModal",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*json*/ ctx[23] === undefined && !('json' in props)) {
    			console_1$3.warn("<TransformModal> was created without expected prop 'json'");
    		}

    		if (/*escapeControlCharacters*/ ctx[2] === undefined && !('escapeControlCharacters' in props)) {
    			console_1$3.warn("<TransformModal> was created without expected prop 'escapeControlCharacters'");
    		}

    		if (/*escapeUnicodeCharacters*/ ctx[3] === undefined && !('escapeUnicodeCharacters' in props)) {
    			console_1$3.warn("<TransformModal> was created without expected prop 'escapeUnicodeCharacters'");
    		}

    		if (/*queryLanguages*/ ctx[4] === undefined && !('queryLanguages' in props)) {
    			console_1$3.warn("<TransformModal> was created without expected prop 'queryLanguages'");
    		}

    		if (/*queryLanguageId*/ ctx[0] === undefined && !('queryLanguageId' in props)) {
    			console_1$3.warn("<TransformModal> was created without expected prop 'queryLanguageId'");
    		}

    		if (/*onChangeQueryLanguage*/ ctx[24] === undefined && !('onChangeQueryLanguage' in props)) {
    			console_1$3.warn("<TransformModal> was created without expected prop 'onChangeQueryLanguage'");
    		}

    		if (/*onRenderValue*/ ctx[5] === undefined && !('onRenderValue' in props)) {
    			console_1$3.warn("<TransformModal> was created without expected prop 'onRenderValue'");
    		}

    		if (/*onClassName*/ ctx[6] === undefined && !('onClassName' in props)) {
    			console_1$3.warn("<TransformModal> was created without expected prop 'onClassName'");
    		}

    		if (/*onTransform*/ ctx[25] === undefined && !('onTransform' in props)) {
    			console_1$3.warn("<TransformModal> was created without expected prop 'onTransform'");
    		}
    	}

    	get id() {
    		throw new Error("<TransformModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<TransformModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get json() {
    		throw new Error("<TransformModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set json(value) {
    		throw new Error("<TransformModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedPath() {
    		throw new Error("<TransformModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedPath(value) {
    		throw new Error("<TransformModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get escapeControlCharacters() {
    		throw new Error("<TransformModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set escapeControlCharacters(value) {
    		throw new Error("<TransformModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get escapeUnicodeCharacters() {
    		throw new Error("<TransformModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set escapeUnicodeCharacters(value) {
    		throw new Error("<TransformModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get queryLanguages() {
    		throw new Error("<TransformModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set queryLanguages(value) {
    		throw new Error("<TransformModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get queryLanguageId() {
    		throw new Error("<TransformModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set queryLanguageId(value) {
    		throw new Error("<TransformModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChangeQueryLanguage() {
    		throw new Error("<TransformModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChangeQueryLanguage(value) {
    		throw new Error("<TransformModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRenderValue() {
    		throw new Error("<TransformModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRenderValue(value) {
    		throw new Error("<TransformModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClassName() {
    		throw new Error("<TransformModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClassName(value) {
    		throw new Error("<TransformModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onTransform() {
    		throw new Error("<TransformModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onTransform(value) {
    		throw new Error("<TransformModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const sortModalState = {};

    /* node_modules/svelte-jsoneditor/components/modals/SortModal.svelte generated by Svelte v3.48.0 */

    const { console: console_1$2 } = globals;
    const file$4 = "node_modules/svelte-jsoneditor/components/modals/SortModal.svelte";

    // (104:8) {#if jsonIsArray && (properties.length > 1 || selectedProperty === undefined)}
    function create_if_block$3(ctx) {
    	let tr;
    	let th;
    	let t1;
    	let td;
    	let select;
    	let updating_value;
    	let current;

    	function select_value_binding(value) {
    		/*select_value_binding*/ ctx[12](value);
    	}

    	let select_props = {
    		showIndicator: true,
    		items: /*properties*/ ctx[4]
    	};

    	if (/*selectedProperty*/ ctx[1] !== void 0) {
    		select_props.value = /*selectedProperty*/ ctx[1];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(select, 'value', select_value_binding));

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			th = element("th");
    			th.textContent = "Property";
    			t1 = space();
    			td = element("td");
    			create_component(select.$$.fragment);
    			attr_dev(th, "class", "svelte-ery7bx");
    			add_location(th, file$4, 105, 12, 3513);
    			attr_dev(td, "class", "svelte-ery7bx");
    			add_location(td, file$4, 106, 12, 3543);
    			add_location(tr, file$4, 104, 10, 3496);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, th);
    			append_dev(tr, t1);
    			append_dev(tr, td);
    			mount_component(select, td, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const select_changes = {};
    			if (dirty & /*properties*/ 16) select_changes.items = /*properties*/ ctx[4];

    			if (!updating_value && dirty & /*selectedProperty*/ 2) {
    				updating_value = true;
    				select_changes.value = /*selectedProperty*/ ctx[1];
    				add_flush_callback(() => updating_value = false);
    			}

    			select.$set(select_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_component(select);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(104:8) {#if jsonIsArray && (properties.length > 1 || selectedProperty === undefined)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let div3;
    	let header;
    	let t0;
    	let div2;
    	let table;
    	let colgroup;
    	let col0;
    	let t1;
    	let col1;
    	let t2;
    	let tbody;
    	let tr0;
    	let th0;
    	let t4;
    	let td0;
    	let input;
    	let input_value_value;
    	let t5;
    	let t6;
    	let tr1;
    	let th1;
    	let t8;
    	let td1;
    	let select;
    	let updating_value;
    	let t9;
    	let div0;
    	let t10;
    	let div1;
    	let button;
    	let t11;
    	let button_disabled_value;
    	let current;
    	let mounted;
    	let dispose;

    	header = new Header({
    			props: {
    				title: /*jsonIsArray*/ ctx[3]
    				? 'Sort array items'
    				: 'Sort object keys'
    			},
    			$$inline: true
    		});

    	let if_block = /*jsonIsArray*/ ctx[3] && (/*properties*/ ctx[4].length > 1 || /*selectedProperty*/ ctx[1] === undefined) && create_if_block$3(ctx);

    	function select_value_binding_1(value) {
    		/*select_value_binding_1*/ ctx[13](value);
    	}

    	let select_props = {
    		showIndicator: true,
    		items: /*directions*/ ctx[5],
    		isClearable: false
    	};

    	if (/*selectedDirection*/ ctx[2] !== void 0) {
    		select_props.value = /*selectedDirection*/ ctx[2];
    	}

    	select = new Select({ props: select_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(select, 'value', select_value_binding_1));

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			create_component(header.$$.fragment);
    			t0 = space();
    			div2 = element("div");
    			table = element("table");
    			colgroup = element("colgroup");
    			col0 = element("col");
    			t1 = space();
    			col1 = element("col");
    			t2 = space();
    			tbody = element("tbody");
    			tr0 = element("tr");
    			th0 = element("th");
    			th0.textContent = "Path";
    			t4 = space();
    			td0 = element("td");
    			input = element("input");
    			t5 = space();
    			if (if_block) if_block.c();
    			t6 = space();
    			tr1 = element("tr");
    			th1 = element("th");
    			th1.textContent = "Direction";
    			t8 = space();
    			td1 = element("td");
    			create_component(select.$$.fragment);
    			t9 = space();
    			div0 = element("div");
    			t10 = space();
    			div1 = element("div");
    			button = element("button");
    			t11 = text("Sort");
    			attr_dev(col0, "width", "25%");
    			add_location(col0, file$4, 87, 8, 2991);
    			attr_dev(col1, "width", "75%");
    			add_location(col1, file$4, 88, 8, 3019);
    			add_location(colgroup, file$4, 86, 6, 2972);
    			attr_dev(th0, "class", "svelte-ery7bx");
    			add_location(th0, file$4, 92, 10, 3094);
    			attr_dev(input, "class", "jse-path svelte-ery7bx");
    			attr_dev(input, "type", "text");
    			input.readOnly = true;
    			attr_dev(input, "title", "Selected path");

    			input.value = input_value_value = !isEmpty(/*selectedPath*/ ctx[0])
    			? stringifyPath(/*selectedPath*/ ctx[0])
    			: '(whole document)';

    			add_location(input, file$4, 94, 12, 3135);
    			attr_dev(td0, "class", "svelte-ery7bx");
    			add_location(td0, file$4, 93, 10, 3118);
    			add_location(tr0, file$4, 91, 8, 3079);
    			attr_dev(th1, "class", "svelte-ery7bx");
    			add_location(th1, file$4, 112, 10, 3707);
    			attr_dev(td1, "class", "svelte-ery7bx");
    			add_location(td1, file$4, 113, 10, 3736);
    			add_location(tr1, file$4, 111, 8, 3692);
    			add_location(tbody, file$4, 90, 6, 3063);
    			attr_dev(table, "class", "svelte-ery7bx");
    			add_location(table, file$4, 85, 4, 2958);
    			attr_dev(div0, "class", "jse-space svelte-ery7bx");
    			add_location(div0, file$4, 125, 4, 3979);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "jse-primary svelte-ery7bx");

    			button.disabled = button_disabled_value = /*jsonIsArray*/ ctx[3]
    			? !/*selectedProperty*/ ctx[1]
    			: false;

    			add_location(button, file$4, 128, 6, 4042);
    			attr_dev(div1, "class", "jse-actions svelte-ery7bx");
    			add_location(div1, file$4, 127, 4, 4010);
    			attr_dev(div2, "class", "jse-contents svelte-ery7bx");
    			add_location(div2, file$4, 84, 2, 2927);
    			attr_dev(div3, "class", "jse-modal jse-sort svelte-ery7bx");
    			add_location(div3, file$4, 81, 0, 2816);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			mount_component(header, div3, null);
    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, table);
    			append_dev(table, colgroup);
    			append_dev(colgroup, col0);
    			append_dev(colgroup, t1);
    			append_dev(colgroup, col1);
    			append_dev(table, t2);
    			append_dev(table, tbody);
    			append_dev(tbody, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t4);
    			append_dev(tr0, td0);
    			append_dev(td0, input);
    			append_dev(tbody, t5);
    			if (if_block) if_block.m(tbody, null);
    			append_dev(tbody, t6);
    			append_dev(tbody, tr1);
    			append_dev(tr1, th1);
    			append_dev(tr1, t8);
    			append_dev(tr1, td1);
    			mount_component(select, td1, null);
    			append_dev(div2, t9);
    			append_dev(div2, div0);
    			append_dev(div2, t10);
    			append_dev(div2, div1);
    			append_dev(div1, button);
    			append_dev(button, t11);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "click", /*handleSort*/ ctx[6], false, false, false),
    					action_destroyer(focus.call(null, button))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const header_changes = {};

    			if (dirty & /*jsonIsArray*/ 8) header_changes.title = /*jsonIsArray*/ ctx[3]
    			? 'Sort array items'
    			: 'Sort object keys';

    			header.$set(header_changes);

    			if (!current || dirty & /*selectedPath*/ 1 && input_value_value !== (input_value_value = !isEmpty(/*selectedPath*/ ctx[0])
    			? stringifyPath(/*selectedPath*/ ctx[0])
    			: '(whole document)') && input.value !== input_value_value) {
    				prop_dev(input, "value", input_value_value);
    			}

    			if (/*jsonIsArray*/ ctx[3] && (/*properties*/ ctx[4].length > 1 || /*selectedProperty*/ ctx[1] === undefined)) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*jsonIsArray, properties, selectedProperty*/ 26) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(tbody, t6);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const select_changes = {};

    			if (!updating_value && dirty & /*selectedDirection*/ 4) {
    				updating_value = true;
    				select_changes.value = /*selectedDirection*/ ctx[2];
    				add_flush_callback(() => updating_value = false);
    			}

    			select.$set(select_changes);

    			if (!current || dirty & /*jsonIsArray, selectedProperty*/ 10 && button_disabled_value !== (button_disabled_value = /*jsonIsArray*/ ctx[3]
    			? !/*selectedProperty*/ ctx[1]
    			: false)) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(select.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(select.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(header);
    			if (if_block) if_block.d();
    			destroy_component(select);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function focus(element) {
    	element.focus();
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let jsonIsArray;
    	let paths;
    	let properties;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SortModal', slots, []);
    	const debug = createDebug('jsoneditor:SortModal');
    	let { id } = $$props;
    	let { json } = $$props;
    	let { selectedPath } = $$props;
    	let { onSort } = $$props;
    	const { close } = getContext('simple-modal');
    	const stateId = `${id}:${immutableJSONPatch.compileJSONPointer(selectedPath)}`;
    	const selectedJson = immutableJSONPatch.getIn(json, selectedPath);
    	const asc = { value: 1, label: 'ascending' };
    	const desc = { value: -1, label: 'descending' };
    	const directions = [asc, desc];
    	let selectedProperty = sortModalState[stateId] && sortModalState[stateId].selectedProperty || undefined;
    	let selectedDirection = sortModalState[stateId] && sortModalState[stateId].selectedDirection || asc;

    	function pathToOption(path) {
    		return {
    			value: path,
    			label: isEmpty(path) ? '(whole item)' : stringifyPath(path)
    		};
    	}

    	function handleSort() {
    		if (jsonIsArray) {
    			if (!selectedProperty) {
    				return;
    			}

    			const property = selectedProperty.value;
    			const direction = selectedDirection.value;
    			const operations = sortArray(json, selectedPath, property, direction);
    			onSort(operations);
    		} else if (isObject$1(selectedJson)) {
    			const direction = selectedDirection.value;
    			const operations = sortObjectKeys(json, selectedPath, direction);
    			onSort(operations);
    		} else {
    			console.error('Cannot sort: no array or object');
    		}

    		close();
    	}

    	const writable_props = ['id', 'json', 'selectedPath', 'onSort'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<SortModal> was created with unknown prop '${key}'`);
    	});

    	function select_value_binding(value) {
    		selectedProperty = value;
    		((($$invalidate(1, selectedProperty), $$invalidate(4, properties)), $$invalidate(11, paths)), $$invalidate(3, jsonIsArray));
    	}

    	function select_value_binding_1(value) {
    		selectedDirection = value;
    		$$invalidate(2, selectedDirection);
    	}

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(7, id = $$props.id);
    		if ('json' in $$props) $$invalidate(8, json = $$props.json);
    		if ('selectedPath' in $$props) $$invalidate(0, selectedPath = $$props.selectedPath);
    		if ('onSort' in $$props) $$invalidate(9, onSort = $$props.onSort);
    	};

    	$$self.$capture_state = () => ({
    		isEmpty,
    		getContext,
    		Select,
    		Header,
    		getNestedPaths,
    		isObject: isObject$1,
    		stringifyPath,
    		sortArray,
    		sortObjectKeys,
    		sortModalState,
    		compileJSONPointer: immutableJSONPatch.compileJSONPointer,
    		getIn: immutableJSONPatch.getIn,
    		createDebug,
    		debug,
    		id,
    		json,
    		selectedPath,
    		onSort,
    		close,
    		stateId,
    		selectedJson,
    		asc,
    		desc,
    		directions,
    		selectedProperty,
    		selectedDirection,
    		pathToOption,
    		handleSort,
    		focus,
    		jsonIsArray,
    		properties,
    		paths
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(7, id = $$props.id);
    		if ('json' in $$props) $$invalidate(8, json = $$props.json);
    		if ('selectedPath' in $$props) $$invalidate(0, selectedPath = $$props.selectedPath);
    		if ('onSort' in $$props) $$invalidate(9, onSort = $$props.onSort);
    		if ('selectedProperty' in $$props) $$invalidate(1, selectedProperty = $$props.selectedProperty);
    		if ('selectedDirection' in $$props) $$invalidate(2, selectedDirection = $$props.selectedDirection);
    		if ('jsonIsArray' in $$props) $$invalidate(3, jsonIsArray = $$props.jsonIsArray);
    		if ('properties' in $$props) $$invalidate(4, properties = $$props.properties);
    		if ('paths' in $$props) $$invalidate(11, paths = $$props.paths);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*jsonIsArray*/ 8) {
    			$$invalidate(11, paths = jsonIsArray ? getNestedPaths(selectedJson) : undefined);
    		}

    		if ($$self.$$.dirty & /*paths*/ 2048) {
    			$$invalidate(4, properties = paths ? paths.map(pathToOption) : undefined);
    		}

    		if ($$self.$$.dirty & /*selectedProperty, properties*/ 18) {
    			{
    				// if there is only one option, select it and do not render the select box
    				if (selectedProperty === undefined && properties && properties.length === 1) {
    					$$invalidate(1, selectedProperty = properties[0]);
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*selectedProperty, selectedDirection, sortModalState*/ 1030) {
    			{
    				// remember the selected values for the next time we open the SortModal
    				// just in memory, not persisted
    				$$invalidate(10, sortModalState[stateId] = { selectedProperty, selectedDirection }, sortModalState);

    				debug('store state in memory', stateId, sortModalState[stateId]);
    			}
    		}
    	};

    	$$invalidate(3, jsonIsArray = Array.isArray(selectedJson));

    	return [
    		selectedPath,
    		selectedProperty,
    		selectedDirection,
    		jsonIsArray,
    		properties,
    		directions,
    		handleSort,
    		id,
    		json,
    		onSort,
    		sortModalState,
    		paths,
    		select_value_binding,
    		select_value_binding_1
    	];
    }

    class SortModal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$5, create_fragment$5, not_equal, {
    			id: 7,
    			json: 8,
    			selectedPath: 0,
    			onSort: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SortModal",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[7] === undefined && !('id' in props)) {
    			console_1$2.warn("<SortModal> was created without expected prop 'id'");
    		}

    		if (/*json*/ ctx[8] === undefined && !('json' in props)) {
    			console_1$2.warn("<SortModal> was created without expected prop 'json'");
    		}

    		if (/*selectedPath*/ ctx[0] === undefined && !('selectedPath' in props)) {
    			console_1$2.warn("<SortModal> was created without expected prop 'selectedPath'");
    		}

    		if (/*onSort*/ ctx[9] === undefined && !('onSort' in props)) {
    			console_1$2.warn("<SortModal> was created without expected prop 'onSort'");
    		}
    	}

    	get id() {
    		throw new Error("<SortModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<SortModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get json() {
    		throw new Error("<SortModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set json(value) {
    		throw new Error("<SortModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedPath() {
    		throw new Error("<SortModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedPath(value) {
    		throw new Error("<SortModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSort() {
    		throw new Error("<SortModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSort(value) {
    		throw new Error("<SortModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-jsoneditor/components/modals/ModalRef.svelte generated by Svelte v3.48.0 */

    function create_fragment$4(ctx) {
    	const block = {
    		c: noop$3,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop$3,
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: noop$3
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalRef', slots, []);
    	const context = getContext('simple-modal');
    	const open = context.open;
    	const close = context.close;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalRef> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ getContext, context, open, close });
    	return [open, close];
    }

    class ModalRef extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$4, create_fragment$4, not_equal, { open: 0, close: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalRef",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get open() {
    		return this.$$.ctx[0];
    	}

    	set open(value) {
    		throw new Error("<ModalRef>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get close() {
    		return this.$$.ctx[1];
    	}

    	set close(value) {
    		throw new Error("<ModalRef>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function isMenuSpaceItem(item) {
        return item && item['space'] === true && Object.keys(item).length === 1;
    }

    /* node_modules/svelte-jsoneditor/components/JSONEditor.svelte generated by Svelte v3.48.0 */

    const { Error: Error_1, console: console_1$1 } = globals;
    const file$3 = "node_modules/svelte-jsoneditor/components/JSONEditor.svelte";

    // (329:8) {:else}
    function create_else_block$1(ctx) {
    	let treemode;
    	let current;

    	let treemode_props = {
    		readOnly: /*readOnly*/ ctx[2],
    		indentation: /*indentation*/ ctx[3],
    		externalContent: /*content*/ ctx[0],
    		mainMenuBar: /*mainMenuBar*/ ctx[5],
    		navigationBar: /*navigationBar*/ ctx[6],
    		escapeControlCharacters: /*escapeControlCharacters*/ ctx[8],
    		escapeUnicodeCharacters: /*escapeUnicodeCharacters*/ ctx[9],
    		validator: /*validator*/ ctx[10],
    		onError: /*onError*/ ctx[13],
    		onChange: /*handleChange*/ ctx[21],
    		onRequestRepair: /*handleRequestRepair*/ ctx[23],
    		onRenderValue: /*onRenderValue*/ ctx[11],
    		onClassName: /*onClassName*/ ctx[12],
    		onFocus: /*handleFocus*/ ctx[25],
    		onBlur: /*handleBlur*/ ctx[26],
    		onRenderMenu: /*handleRenderMenu*/ ctx[27],
    		onSortModal: /*onSortModal*/ ctx[29],
    		onTransformModal: /*onTransformModal*/ ctx[28]
    	};

    	treemode = new TreeMode({ props: treemode_props, $$inline: true });
    	/*treemode_binding*/ ctx[54](treemode);

    	const block = {
    		c: function create() {
    			create_component(treemode.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(treemode, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const treemode_changes = {};
    			if (dirty[0] & /*readOnly*/ 4) treemode_changes.readOnly = /*readOnly*/ ctx[2];
    			if (dirty[0] & /*indentation*/ 8) treemode_changes.indentation = /*indentation*/ ctx[3];
    			if (dirty[0] & /*content*/ 1) treemode_changes.externalContent = /*content*/ ctx[0];
    			if (dirty[0] & /*mainMenuBar*/ 32) treemode_changes.mainMenuBar = /*mainMenuBar*/ ctx[5];
    			if (dirty[0] & /*navigationBar*/ 64) treemode_changes.navigationBar = /*navigationBar*/ ctx[6];
    			if (dirty[0] & /*escapeControlCharacters*/ 256) treemode_changes.escapeControlCharacters = /*escapeControlCharacters*/ ctx[8];
    			if (dirty[0] & /*escapeUnicodeCharacters*/ 512) treemode_changes.escapeUnicodeCharacters = /*escapeUnicodeCharacters*/ ctx[9];
    			if (dirty[0] & /*validator*/ 1024) treemode_changes.validator = /*validator*/ ctx[10];
    			if (dirty[0] & /*onError*/ 8192) treemode_changes.onError = /*onError*/ ctx[13];
    			if (dirty[0] & /*onRenderValue*/ 2048) treemode_changes.onRenderValue = /*onRenderValue*/ ctx[11];
    			if (dirty[0] & /*onClassName*/ 4096) treemode_changes.onClassName = /*onClassName*/ ctx[12];
    			treemode.$set(treemode_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(treemode.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(treemode.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*treemode_binding*/ ctx[54](null);
    			destroy_component(treemode, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(329:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (309:8) {#if mode === MODE.CODE}
    function create_if_block$2(ctx) {
    	let codemode;
    	let current;

    	let codemode_props = {
    		text: /*getText*/ ctx[20](/*content*/ ctx[0]),
    		readOnly: /*readOnly*/ ctx[2],
    		indentation: /*indentation*/ ctx[3],
    		tabSize: /*tabSize*/ ctx[4],
    		mainMenuBar: /*mainMenuBar*/ ctx[5],
    		statusBar: /*statusBar*/ ctx[7],
    		escapeUnicodeCharacters: /*escapeUnicodeCharacters*/ ctx[9],
    		validator: /*validator*/ ctx[10],
    		onChange: /*handleChangeText*/ ctx[22],
    		onSwitchToTreeMode: /*handleSwitchToTreeMode*/ ctx[24],
    		onError: /*onError*/ ctx[13],
    		onFocus: /*handleFocus*/ ctx[25],
    		onBlur: /*handleBlur*/ ctx[26],
    		onRenderMenu: /*handleRenderMenu*/ ctx[27],
    		onSortModal: /*onSortModal*/ ctx[29],
    		onTransformModal: /*onTransformModal*/ ctx[28]
    	};

    	codemode = new CodeMode({ props: codemode_props, $$inline: true });
    	/*codemode_binding*/ ctx[53](codemode);

    	const block = {
    		c: function create() {
    			create_component(codemode.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(codemode, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const codemode_changes = {};
    			if (dirty[0] & /*content*/ 1) codemode_changes.text = /*getText*/ ctx[20](/*content*/ ctx[0]);
    			if (dirty[0] & /*readOnly*/ 4) codemode_changes.readOnly = /*readOnly*/ ctx[2];
    			if (dirty[0] & /*indentation*/ 8) codemode_changes.indentation = /*indentation*/ ctx[3];
    			if (dirty[0] & /*tabSize*/ 16) codemode_changes.tabSize = /*tabSize*/ ctx[4];
    			if (dirty[0] & /*mainMenuBar*/ 32) codemode_changes.mainMenuBar = /*mainMenuBar*/ ctx[5];
    			if (dirty[0] & /*statusBar*/ 128) codemode_changes.statusBar = /*statusBar*/ ctx[7];
    			if (dirty[0] & /*escapeUnicodeCharacters*/ 512) codemode_changes.escapeUnicodeCharacters = /*escapeUnicodeCharacters*/ ctx[9];
    			if (dirty[0] & /*validator*/ 1024) codemode_changes.validator = /*validator*/ ctx[10];
    			if (dirty[0] & /*onError*/ 8192) codemode_changes.onError = /*onError*/ ctx[13];
    			codemode.$set(codemode_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(codemode.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(codemode.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*codemode_binding*/ ctx[53](null);
    			destroy_component(codemode, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(309:8) {#if mode === MODE.CODE}",
    		ctx
    	});

    	return block;
    }

    // (308:6) {#key instanceId}
    function create_key_block(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$2, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*mode*/ ctx[1] === MODE.CODE) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block.name,
    		type: "key",
    		source: "(308:6) {#key instanceId}",
    		ctx
    	});

    	return block;
    }

    // (306:2) <AbsolutePopup>
    function create_default_slot_1(ctx) {
    	let div;
    	let previous_key = /*instanceId*/ ctx[14];
    	let current;
    	let key_block = create_key_block(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			key_block.c();
    			attr_dev(div, "class", "jse-main svelte-1ogdbp0");
    			toggle_class(div, "jse-focus", /*hasFocus*/ ctx[15]);
    			add_location(div, file$3, 306, 4, 9473);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			key_block.m(div, null);
    			/*div_binding*/ ctx[55](div);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*instanceId*/ 16384 && not_equal(previous_key, previous_key = /*instanceId*/ ctx[14])) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop$3);
    				check_outros();
    				key_block = create_key_block(ctx);
    				key_block.c();
    				transition_in(key_block, 1);
    				key_block.m(div, null);
    			} else {
    				key_block.p(ctx, dirty);
    			}

    			if (dirty[0] & /*hasFocus*/ 32768) {
    				toggle_class(div, "jse-focus", /*hasFocus*/ ctx[15]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(key_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(key_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			key_block.d(detaching);
    			/*div_binding*/ ctx[55](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(306:2) <AbsolutePopup>",
    		ctx
    	});

    	return block;
    }

    // (304:0) <Modal>
    function create_default_slot(ctx) {
    	let modalref;
    	let updating_open;
    	let t;
    	let absolutepopup;
    	let current;

    	function modalref_open_binding(value) {
    		/*modalref_open_binding*/ ctx[52](value);
    	}

    	let modalref_props = {};

    	if (/*open*/ ctx[19] !== void 0) {
    		modalref_props.open = /*open*/ ctx[19];
    	}

    	modalref = new ModalRef({ props: modalref_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(modalref, 'open', modalref_open_binding));

    	absolutepopup = new AbsolutePopup({
    			props: {
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(modalref.$$.fragment);
    			t = space();
    			create_component(absolutepopup.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(modalref, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(absolutepopup, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const modalref_changes = {};

    			if (!updating_open && dirty[0] & /*open*/ 524288) {
    				updating_open = true;
    				modalref_changes.open = /*open*/ ctx[19];
    				add_flush_callback(() => updating_open = false);
    			}

    			modalref.$set(modalref_changes);
    			const absolutepopup_changes = {};

    			if (dirty[0] & /*refJSONEditor, hasFocus, instanceId, content, readOnly, indentation, tabSize, mainMenuBar, statusBar, escapeUnicodeCharacters, validator, onError, refCodeMode, mode, navigationBar, escapeControlCharacters, onRenderValue, onClassName, refTreeMode*/ 524287 | dirty[1] & /*$$scope*/ 1073741824) {
    				absolutepopup_changes.$$scope = { dirty, ctx };
    			}

    			absolutepopup.$set(absolutepopup_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalref.$$.fragment, local);
    			transition_in(absolutepopup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalref.$$.fragment, local);
    			transition_out(absolutepopup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modalref, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(absolutepopup, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(304:0) <Modal>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let modal;
    	let current;

    	modal = new Modal({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(modal.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(modal, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const modal_changes = {};

    			if (dirty[0] & /*refJSONEditor, hasFocus, instanceId, content, readOnly, indentation, tabSize, mainMenuBar, statusBar, escapeUnicodeCharacters, validator, onError, refCodeMode, mode, navigationBar, escapeControlCharacters, onRenderValue, onClassName, refTreeMode, open*/ 1048575 | dirty[1] & /*$$scope*/ 1073741824) {
    				modal_changes.$$scope = { dirty, ctx };
    			}

    			modal.$set(modal_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modal.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modal.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modal, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function updateProps(props) {
    	this.$set(props);
    }

    function destroy() {
    	this.$destroy();
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let isCodeMode;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('JSONEditor', slots, []);
    	const debug = createDebug('jsoneditor:Main');
    	let { content = { text: '' } } = $$props;
    	let { readOnly = false } = $$props;
    	let { indentation = 2 } = $$props;
    	let { tabSize = 4 } = $$props;
    	let { mode = MODE.TREE } = $$props;
    	let { mainMenuBar = true } = $$props;
    	let { navigationBar = true } = $$props;
    	let { statusBar = true } = $$props;
    	let { escapeControlCharacters = false } = $$props;
    	let { escapeUnicodeCharacters = false } = $$props;
    	let { validator = null } = $$props;
    	let { queryLanguages = [javascriptQueryLanguage] } = $$props;
    	let { queryLanguageId = queryLanguages[0].id } = $$props;
    	let { onChangeQueryLanguage = noop$1 } = $$props;
    	let { onChange = null } = $$props;
    	let { onRenderValue = renderValue } = $$props;
    	let { onClassName = noop$1 } = $$props;
    	let { onRenderMenu = noop$1 } = $$props;
    	let { onChangeMode = noop$1 } = $$props;

    	let { onError = err => {
    		console.error(err);
    		alert(err.toString()); // TODO: create a nice alert modal
    	} } = $$props;

    	let { onFocus = noop$1 } = $$props;
    	let { onBlur = noop$1 } = $$props;
    	let instanceId = uniqueId$1();
    	let hasFocus = false;
    	let refJSONEditor;
    	let refTreeMode;
    	let refCodeMode;
    	let open; // svelte-simple-modal context open(...)

    	function get() {
    		return content;
    	}

    	function getText(content) {
    		return isTextContent(content)
    		? content.text
    		: JSON.stringify(content.json, null, indentation);
    	}

    	function set(newContent) {
    		debug('set');
    		const contentError = validateContentType(newContent);

    		if (contentError) {
    			throw new Error(contentError);
    		}

    		// new editor id -> will re-create the editor
    		$$invalidate(14, instanceId = uniqueId$1());

    		$$invalidate(0, content = newContent);
    	}

    	function update(updatedContent) {
    		debug('update');
    		const contentError = validateContentType(updatedContent);

    		if (contentError) {
    			throw new Error(contentError);
    		}

    		$$invalidate(0, content = updatedContent);
    	}

    	function patch(operations) {
    		if (isTextContent(content)) {
    			try {
    				$$invalidate(0, content = {
    					json: JSON.parse(content.text),
    					text: undefined
    				});
    			} catch(err) {
    				throw new Error('Cannot apply patch: current document contains invalid JSON');
    			}
    		}

    		if (refTreeMode) {
    			// Note that tree mode has an optional afterPatch callback.
    			// right now we don's support this in the public API.
    			return refTreeMode.patch(operations);
    		}

    		if (refCodeMode) {
    			return refCodeMode.patch(operations);
    		}
    	}

    	function expand(callback) {
    		if (refTreeMode) {
    			return refTreeMode.expand(callback);
    		} else {
    			throw new Error(`Method expand is not available in mode "${mode}"`);
    		}
    	}

    	function transform(options) {
    		if (refCodeMode) {
    			refCodeMode.openTransformModal(options);
    		} else if (refTreeMode) {
    			refTreeMode.openTransformModal(options);
    		} else {
    			throw new Error(`Method transform is not available in mode "${mode}"`);
    		}
    	}

    	function acceptAutoRepair() {
    		if (refTreeMode) {
    			return refTreeMode.acceptAutoRepair();
    		} else {
    			return content;
    		}
    	}

    	function scrollTo(path) {
    		if (refTreeMode) {
    			return refTreeMode.scrollTo(path);
    		} else {
    			// TODO: implement scrollTo for code mode
    			throw new Error(`Method scrollTo is not available in mode "${mode}"`);
    		}
    	}

    	function findElement(path) {
    		if (refTreeMode) {
    			return refTreeMode.findElement(path);
    		} else {
    			throw new Error(`Method findElement is not available in mode "${mode}"`);
    		}
    	}

    	function focus() {
    		if (refCodeMode) {
    			refCodeMode.focus();
    		} else if (refTreeMode) {
    			refTreeMode.focus();
    		}
    	}

    	function refresh() {
    		if (refCodeMode) {
    			refCodeMode.refresh();
    		} // nothing to do in tree mode (also: don't throw an exception or so,
    		// that annoying having to reckon with that when using .refresh()).
    	}

    	function handleChange(updatedContent, previousContent, patchResult) {
    		$$invalidate(0, content = updatedContent);

    		if (onChange) {
    			onChange(updatedContent, previousContent, patchResult);
    		}
    	}

    	function handleChangeText(updatedText, previousText) {
    		const updatedContent = { text: updatedText, json: undefined };
    		const previousContent = { text: previousText, json: undefined };
    		const patchResult = null;
    		handleChange(updatedContent, previousContent, patchResult);
    	}

    	async function handleRequestRepair() {
    		$$invalidate(1, mode = MODE.CODE);
    		await tick();
    		onChangeMode(MODE.CODE);
    	}

    	async function handleSwitchToTreeMode() {
    		$$invalidate(1, mode = MODE.TREE);
    		await tick();
    		onChangeMode(MODE.TREE);
    	}

    	function handleFocus() {
    		$$invalidate(15, hasFocus = true);

    		if (onFocus) {
    			onFocus();
    		}
    	}

    	function handleBlur() {
    		$$invalidate(15, hasFocus = false);

    		if (onBlur) {
    			onBlur();
    		}
    	}

    	async function toggleMode(newMode) {
    		if (mode === newMode) {
    			return;
    		}

    		$$invalidate(1, mode = newMode);
    		await tick();
    		focus();
    		onChangeMode(newMode);
    	}

    	let modeMenuItems;
    	const separatorMenuItem = { separator: true };

    	function handleRenderMenu(mode, items) {
    		const updatedItems = mode === MODE.TREE || mode === MODE.CODE
    		? isMenuSpaceItem(items[0])
    			? modeMenuItems.concat(items)
    			: modeMenuItems.concat([separatorMenuItem], items)
    		: items; // menu is empty, readOnly mode

    		return onRenderMenu(mode, updatedItems) || updatedItems;
    	}

    	function handleChangeQueryLanguage(newQueryLanguageId) {
    		debug('handleChangeQueryLanguage', newQueryLanguageId);
    		$$invalidate(30, queryLanguageId = newQueryLanguageId);
    		onChangeQueryLanguage(newQueryLanguageId);
    	}

    	// The onTransformModal method is located in JSONEditor to prevent circular references:
    	//     TreeMode -> TransformModal -> TreeMode
    	function onTransformModal({ id, json, selectedPath, onTransform, onClose }) {
    		console.log('json', json);

    		if (readOnly) {
    			return;
    		}

    		open(
    			TransformModal,
    			{
    				id,
    				json,
    				selectedPath,
    				escapeControlCharacters,
    				escapeUnicodeCharacters,
    				queryLanguages,
    				queryLanguageId,
    				onChangeQueryLanguage: handleChangeQueryLanguage,
    				onRenderValue,
    				onClassName,
    				onTransform
    			},
    			TRANSFORM_MODAL_OPTIONS,
    			{ onClose }
    		);
    	}

    	// The onSortModal is positioned here for consistency with TransformModal
    	function onSortModal({ id, json, selectedPath, onSort, onClose }) {
    		if (readOnly) {
    			return;
    		}

    		open(SortModal, { id, json, selectedPath, onSort }, SORT_MODAL_OPTIONS, { onClose });
    	}

    	const writable_props = [
    		'content',
    		'readOnly',
    		'indentation',
    		'tabSize',
    		'mode',
    		'mainMenuBar',
    		'navigationBar',
    		'statusBar',
    		'escapeControlCharacters',
    		'escapeUnicodeCharacters',
    		'validator',
    		'queryLanguages',
    		'queryLanguageId',
    		'onChangeQueryLanguage',
    		'onChange',
    		'onRenderValue',
    		'onClassName',
    		'onRenderMenu',
    		'onChangeMode',
    		'onError',
    		'onFocus',
    		'onBlur'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<JSONEditor> was created with unknown prop '${key}'`);
    	});

    	function modalref_open_binding(value) {
    		open = value;
    		$$invalidate(19, open);
    	}

    	function codemode_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refCodeMode = $$value;
    			$$invalidate(18, refCodeMode);
    		});
    	}

    	function treemode_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refTreeMode = $$value;
    			$$invalidate(17, refTreeMode);
    		});
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refJSONEditor = $$value;
    			$$invalidate(16, refJSONEditor);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('readOnly' in $$props) $$invalidate(2, readOnly = $$props.readOnly);
    		if ('indentation' in $$props) $$invalidate(3, indentation = $$props.indentation);
    		if ('tabSize' in $$props) $$invalidate(4, tabSize = $$props.tabSize);
    		if ('mode' in $$props) $$invalidate(1, mode = $$props.mode);
    		if ('mainMenuBar' in $$props) $$invalidate(5, mainMenuBar = $$props.mainMenuBar);
    		if ('navigationBar' in $$props) $$invalidate(6, navigationBar = $$props.navigationBar);
    		if ('statusBar' in $$props) $$invalidate(7, statusBar = $$props.statusBar);
    		if ('escapeControlCharacters' in $$props) $$invalidate(8, escapeControlCharacters = $$props.escapeControlCharacters);
    		if ('escapeUnicodeCharacters' in $$props) $$invalidate(9, escapeUnicodeCharacters = $$props.escapeUnicodeCharacters);
    		if ('validator' in $$props) $$invalidate(10, validator = $$props.validator);
    		if ('queryLanguages' in $$props) $$invalidate(31, queryLanguages = $$props.queryLanguages);
    		if ('queryLanguageId' in $$props) $$invalidate(30, queryLanguageId = $$props.queryLanguageId);
    		if ('onChangeQueryLanguage' in $$props) $$invalidate(32, onChangeQueryLanguage = $$props.onChangeQueryLanguage);
    		if ('onChange' in $$props) $$invalidate(33, onChange = $$props.onChange);
    		if ('onRenderValue' in $$props) $$invalidate(11, onRenderValue = $$props.onRenderValue);
    		if ('onClassName' in $$props) $$invalidate(12, onClassName = $$props.onClassName);
    		if ('onRenderMenu' in $$props) $$invalidate(34, onRenderMenu = $$props.onRenderMenu);
    		if ('onChangeMode' in $$props) $$invalidate(35, onChangeMode = $$props.onChangeMode);
    		if ('onError' in $$props) $$invalidate(13, onError = $$props.onError);
    		if ('onFocus' in $$props) $$invalidate(36, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(37, onBlur = $$props.onBlur);
    	};

    	$$self.$capture_state = () => ({
    		createDebug,
    		Modal,
    		MODE,
    		SORT_MODAL_OPTIONS,
    		TRANSFORM_MODAL_OPTIONS,
    		uniqueId: uniqueId$1,
    		isTextContent,
    		validateContentType,
    		AbsolutePopup,
    		CodeMode,
    		TreeMode,
    		javascriptQueryLanguage,
    		renderValue,
    		tick,
    		TransformModal,
    		SortModal,
    		ModalRef,
    		isMenuSpaceItem,
    		noop: noop$1,
    		debug,
    		content,
    		readOnly,
    		indentation,
    		tabSize,
    		mode,
    		mainMenuBar,
    		navigationBar,
    		statusBar,
    		escapeControlCharacters,
    		escapeUnicodeCharacters,
    		validator,
    		queryLanguages,
    		queryLanguageId,
    		onChangeQueryLanguage,
    		onChange,
    		onRenderValue,
    		onClassName,
    		onRenderMenu,
    		onChangeMode,
    		onError,
    		onFocus,
    		onBlur,
    		instanceId,
    		hasFocus,
    		refJSONEditor,
    		refTreeMode,
    		refCodeMode,
    		open,
    		get,
    		getText,
    		set,
    		update,
    		patch,
    		expand,
    		transform,
    		acceptAutoRepair,
    		scrollTo,
    		findElement,
    		focus,
    		refresh,
    		updateProps,
    		destroy,
    		handleChange,
    		handleChangeText,
    		handleRequestRepair,
    		handleSwitchToTreeMode,
    		handleFocus,
    		handleBlur,
    		toggleMode,
    		modeMenuItems,
    		separatorMenuItem,
    		handleRenderMenu,
    		handleChangeQueryLanguage,
    		onTransformModal,
    		onSortModal,
    		isCodeMode
    	});

    	$$self.$inject_state = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('readOnly' in $$props) $$invalidate(2, readOnly = $$props.readOnly);
    		if ('indentation' in $$props) $$invalidate(3, indentation = $$props.indentation);
    		if ('tabSize' in $$props) $$invalidate(4, tabSize = $$props.tabSize);
    		if ('mode' in $$props) $$invalidate(1, mode = $$props.mode);
    		if ('mainMenuBar' in $$props) $$invalidate(5, mainMenuBar = $$props.mainMenuBar);
    		if ('navigationBar' in $$props) $$invalidate(6, navigationBar = $$props.navigationBar);
    		if ('statusBar' in $$props) $$invalidate(7, statusBar = $$props.statusBar);
    		if ('escapeControlCharacters' in $$props) $$invalidate(8, escapeControlCharacters = $$props.escapeControlCharacters);
    		if ('escapeUnicodeCharacters' in $$props) $$invalidate(9, escapeUnicodeCharacters = $$props.escapeUnicodeCharacters);
    		if ('validator' in $$props) $$invalidate(10, validator = $$props.validator);
    		if ('queryLanguages' in $$props) $$invalidate(31, queryLanguages = $$props.queryLanguages);
    		if ('queryLanguageId' in $$props) $$invalidate(30, queryLanguageId = $$props.queryLanguageId);
    		if ('onChangeQueryLanguage' in $$props) $$invalidate(32, onChangeQueryLanguage = $$props.onChangeQueryLanguage);
    		if ('onChange' in $$props) $$invalidate(33, onChange = $$props.onChange);
    		if ('onRenderValue' in $$props) $$invalidate(11, onRenderValue = $$props.onRenderValue);
    		if ('onClassName' in $$props) $$invalidate(12, onClassName = $$props.onClassName);
    		if ('onRenderMenu' in $$props) $$invalidate(34, onRenderMenu = $$props.onRenderMenu);
    		if ('onChangeMode' in $$props) $$invalidate(35, onChangeMode = $$props.onChangeMode);
    		if ('onError' in $$props) $$invalidate(13, onError = $$props.onError);
    		if ('onFocus' in $$props) $$invalidate(36, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(37, onBlur = $$props.onBlur);
    		if ('instanceId' in $$props) $$invalidate(14, instanceId = $$props.instanceId);
    		if ('hasFocus' in $$props) $$invalidate(15, hasFocus = $$props.hasFocus);
    		if ('refJSONEditor' in $$props) $$invalidate(16, refJSONEditor = $$props.refJSONEditor);
    		if ('refTreeMode' in $$props) $$invalidate(17, refTreeMode = $$props.refTreeMode);
    		if ('refCodeMode' in $$props) $$invalidate(18, refCodeMode = $$props.refCodeMode);
    		if ('open' in $$props) $$invalidate(19, open = $$props.open);
    		if ('modeMenuItems' in $$props) modeMenuItems = $$props.modeMenuItems;
    		if ('isCodeMode' in $$props) $$invalidate(51, isCodeMode = $$props.isCodeMode);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*content*/ 1) {
    			{
    				const contentError = validateContentType(content);

    				if (contentError) {
    					console.error('Error: ' + contentError);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*mode*/ 2) {
    			$$invalidate(51, isCodeMode = mode === MODE.CODE);
    		}

    		if ($$self.$$.dirty[0] & /*mode*/ 2 | $$self.$$.dirty[1] & /*isCodeMode*/ 1048576) {
    			modeMenuItems = [
    				{
    					text: 'code',
    					title: `Switch to code mode (current mode: ${mode})`,
    					className: 'jse-group-button jse-first' + (isCodeMode ? ' jse-selected' : ''),
    					onClick: () => toggleMode(MODE.CODE)
    				},
    				{
    					text: 'tree',
    					title: `Switch to tree mode (current mode: ${mode})`,
    					className: 'jse-group-button jse-last' + (!isCodeMode ? ' jse-selected' : ''),
    					onClick: () => toggleMode(MODE.TREE)
    				}
    			];
    		}
    	};

    	return [
    		content,
    		mode,
    		readOnly,
    		indentation,
    		tabSize,
    		mainMenuBar,
    		navigationBar,
    		statusBar,
    		escapeControlCharacters,
    		escapeUnicodeCharacters,
    		validator,
    		onRenderValue,
    		onClassName,
    		onError,
    		instanceId,
    		hasFocus,
    		refJSONEditor,
    		refTreeMode,
    		refCodeMode,
    		open,
    		getText,
    		handleChange,
    		handleChangeText,
    		handleRequestRepair,
    		handleSwitchToTreeMode,
    		handleFocus,
    		handleBlur,
    		handleRenderMenu,
    		onTransformModal,
    		onSortModal,
    		queryLanguageId,
    		queryLanguages,
    		onChangeQueryLanguage,
    		onChange,
    		onRenderMenu,
    		onChangeMode,
    		onFocus,
    		onBlur,
    		get,
    		set,
    		update,
    		patch,
    		expand,
    		transform,
    		acceptAutoRepair,
    		scrollTo,
    		findElement,
    		focus,
    		refresh,
    		updateProps,
    		destroy,
    		isCodeMode,
    		modalref_open_binding,
    		codemode_binding,
    		treemode_binding,
    		div_binding
    	];
    }

    class JSONEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$3,
    			create_fragment$3,
    			not_equal,
    			{
    				content: 0,
    				readOnly: 2,
    				indentation: 3,
    				tabSize: 4,
    				mode: 1,
    				mainMenuBar: 5,
    				navigationBar: 6,
    				statusBar: 7,
    				escapeControlCharacters: 8,
    				escapeUnicodeCharacters: 9,
    				validator: 10,
    				queryLanguages: 31,
    				queryLanguageId: 30,
    				onChangeQueryLanguage: 32,
    				onChange: 33,
    				onRenderValue: 11,
    				onClassName: 12,
    				onRenderMenu: 34,
    				onChangeMode: 35,
    				onError: 13,
    				onFocus: 36,
    				onBlur: 37,
    				get: 38,
    				set: 39,
    				update: 40,
    				patch: 41,
    				expand: 42,
    				transform: 43,
    				acceptAutoRepair: 44,
    				scrollTo: 45,
    				findElement: 46,
    				focus: 47,
    				refresh: 48,
    				updateProps: 49,
    				destroy: 50
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "JSONEditor",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get content() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readOnly() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readOnly(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get indentation() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set indentation(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tabSize() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tabSize(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mode() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mode(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mainMenuBar() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mainMenuBar(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get navigationBar() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set navigationBar(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get statusBar() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set statusBar(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get escapeControlCharacters() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set escapeControlCharacters(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get escapeUnicodeCharacters() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set escapeUnicodeCharacters(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validator() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validator(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get queryLanguages() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set queryLanguages(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get queryLanguageId() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set queryLanguageId(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChangeQueryLanguage() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChangeQueryLanguage(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChange() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChange(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRenderValue() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRenderValue(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClassName() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClassName(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onRenderMenu() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onRenderMenu(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChangeMode() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChangeMode(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onError() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onError(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onFocus() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onFocus(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onBlur() {
    		throw new Error_1("<JSONEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onBlur(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get get() {
    		return this.$$.ctx[38];
    	}

    	set get(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get set() {
    		return this.$$.ctx[39];
    	}

    	set set(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get update() {
    		return this.$$.ctx[40];
    	}

    	set update(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get patch() {
    		return this.$$.ctx[41];
    	}

    	set patch(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get expand() {
    		return this.$$.ctx[42];
    	}

    	set expand(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transform() {
    		return this.$$.ctx[43];
    	}

    	set transform(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get acceptAutoRepair() {
    		return this.$$.ctx[44];
    	}

    	set acceptAutoRepair(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scrollTo() {
    		return this.$$.ctx[45];
    	}

    	set scrollTo(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get findElement() {
    		return this.$$.ctx[46];
    	}

    	set findElement(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get focus() {
    		return this.$$.ctx[47];
    	}

    	set focus(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get refresh() {
    		return this.$$.ctx[48];
    	}

    	set refresh(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get updateProps() {
    		return updateProps;
    	}

    	set updateProps(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get destroy() {
    		return destroy;
    	}

    	set destroy(value) {
    		throw new Error_1("<JSONEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* ajv 8.11.0 (ajv7): Another JSON Schema Validator */

    createCommonjsModule(function (module, exports) {
    !function(e){module.exports=e();}((function(){return function e(t,r,o){function s(n,i){if(!r[n]){if(!t[n]){var c="function"==typeof commonjsRequire&&commonjsRequire;if(!i&&c)return c(n,!0);if(a)return a(n,!0);var l=new Error("Cannot find module '"+n+"'");throw l.code="MODULE_NOT_FOUND",l}var d=r[n]={exports:{}};t[n][0].call(d.exports,(function(e){return s(t[n][1][e]||e)}),d,d.exports,e,t,r,o);}return r[n].exports}for(var a="function"==typeof commonjsRequire&&commonjsRequire,n=0;n<o.length;n++)s(o[n]);return s}({1:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.regexpCode=r.getEsmExportName=r.getProperty=r.safeStringify=r.stringify=r.strConcat=r.addCodeArg=r.str=r._=r.nil=r._Code=r.Name=r.IDENTIFIER=r._CodeOrName=void 0;class o{}r._CodeOrName=o,r.IDENTIFIER=/^[a-z$_][a-z$_0-9]*$/i;class s extends o{constructor(e){if(super(),!r.IDENTIFIER.test(e))throw new Error("CodeGen: name must be a valid identifier");this.str=e;}toString(){return this.str}emptyStr(){return !1}get names(){return {[this.str]:1}}}r.Name=s;class a extends o{constructor(e){super(),this._items="string"==typeof e?[e]:e;}toString(){return this.str}emptyStr(){if(this._items.length>1)return !1;const e=this._items[0];return ""===e||'""'===e}get str(){var e;return null!==(e=this._str)&&void 0!==e?e:this._str=this._items.reduce(((e,t)=>`${e}${t}`),"")}get names(){var e;return null!==(e=this._names)&&void 0!==e?e:this._names=this._items.reduce(((e,t)=>(t instanceof s&&(e[t.str]=(e[t.str]||0)+1),e)),{})}}function n(e,...t){const r=[e[0]];let o=0;for(;o<t.length;)l(r,t[o]),r.push(e[++o]);return new a(r)}r._Code=a,r.nil=new a(""),r._=n;const i=new a("+");function c(e,...t){const r=[u(e[0])];let o=0;for(;o<t.length;)r.push(i),l(r,t[o]),r.push(i,u(e[++o]));return function(e){let t=1;for(;t<e.length-1;){if(e[t]===i){const r=d(e[t-1],e[t+1]);if(void 0!==r){e.splice(t-1,3,r);continue}e[t++]="+";}t++;}}(r),new a(r)}function l(e,t){var r;t instanceof a?e.push(...t._items):e.push(t instanceof s?t:"number"==typeof(r=t)||"boolean"==typeof r||null===r?r:u(Array.isArray(r)?r.join(","):r));}function d(e,t){if('""'===t)return e;if('""'===e)return t;if("string"==typeof e){if(t instanceof s||'"'!==e[e.length-1])return;return "string"!=typeof t?`${e.slice(0,-1)}${t}"`:'"'===t[0]?e.slice(0,-1)+t.slice(1):void 0}return "string"!=typeof t||'"'!==t[0]||e instanceof s?void 0:`"${e}${t.slice(1)}`}function u(e){return JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}r.str=c,r.addCodeArg=l,r.strConcat=function(e,t){return t.emptyStr()?e:e.emptyStr()?t:c`${e}${t}`},r.stringify=function(e){return new a(u(e))},r.safeStringify=u,r.getProperty=function(e){return "string"==typeof e&&r.IDENTIFIER.test(e)?new a(`.${e}`):n`[${e}]`},r.getEsmExportName=function(e){if("string"==typeof e&&r.IDENTIFIER.test(e))return new a(`${e}`);throw new Error(`CodeGen: invalid export name: ${e}, use explicit $id name mapping`)},r.regexpCode=function(e){return new a(e.toString())};},{}],2:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.or=r.and=r.not=r.CodeGen=r.operators=r.varKinds=r.ValueScopeName=r.ValueScope=r.Scope=r.Name=r.regexpCode=r.stringify=r.getProperty=r.nil=r.strConcat=r.str=r._=void 0;const o=e("./code"),s=e("./scope");var a=e("./code");Object.defineProperty(r,"_",{enumerable:!0,get(){return a._}}),Object.defineProperty(r,"str",{enumerable:!0,get(){return a.str}}),Object.defineProperty(r,"strConcat",{enumerable:!0,get(){return a.strConcat}}),Object.defineProperty(r,"nil",{enumerable:!0,get(){return a.nil}}),Object.defineProperty(r,"getProperty",{enumerable:!0,get(){return a.getProperty}}),Object.defineProperty(r,"stringify",{enumerable:!0,get(){return a.stringify}}),Object.defineProperty(r,"regexpCode",{enumerable:!0,get(){return a.regexpCode}}),Object.defineProperty(r,"Name",{enumerable:!0,get(){return a.Name}});var n=e("./scope");Object.defineProperty(r,"Scope",{enumerable:!0,get(){return n.Scope}}),Object.defineProperty(r,"ValueScope",{enumerable:!0,get(){return n.ValueScope}}),Object.defineProperty(r,"ValueScopeName",{enumerable:!0,get(){return n.ValueScopeName}}),Object.defineProperty(r,"varKinds",{enumerable:!0,get(){return n.varKinds}}),r.operators={GT:new o._Code(">"),GTE:new o._Code(">="),LT:new o._Code("<"),LTE:new o._Code("<="),EQ:new o._Code("==="),NEQ:new o._Code("!=="),NOT:new o._Code("!"),OR:new o._Code("||"),AND:new o._Code("&&"),ADD:new o._Code("+")};class i{optimizeNodes(){return this}optimizeNames(e,t){return this}}class c extends i{constructor(e,t,r){super(),this.varKind=e,this.name=t,this.rhs=r;}render({es5:e,_n:t}){return `${e?s.varKinds.var:this.varKind} ${this.name}${void 0===this.rhs?"":` = ${this.rhs}`};`+t}optimizeNames(e,t){if(e[this.name.str])return this.rhs&&(this.rhs=x(this.rhs,e,t)),this}get names(){return this.rhs instanceof o._CodeOrName?this.rhs.names:{}}}class l extends i{constructor(e,t,r){super(),this.lhs=e,this.rhs=t,this.sideEffects=r;}render({_n:e}){return `${this.lhs} = ${this.rhs};`+e}optimizeNames(e,t){if(!(this.lhs instanceof o.Name)||e[this.lhs.str]||this.sideEffects)return this.rhs=x(this.rhs,e,t),this}get names(){return O(this.lhs instanceof o.Name?{}:{...this.lhs.names},this.rhs)}}class d extends l{constructor(e,t,r,o){super(e,r,o),this.op=t;}render({_n:e}){return `${this.lhs} ${this.op}= ${this.rhs};`+e}}class u extends i{constructor(e){super(),this.label=e,this.names={};}render({_n:e}){return `${this.label}:`+e}}class f extends i{constructor(e){super(),this.label=e,this.names={};}render({_n:e}){return `break${this.label?` ${this.label}`:""};`+e}}class p extends i{constructor(e){super(),this.error=e;}render({_n:e}){return `throw ${this.error};`+e}get names(){return this.error.names}}class m extends i{constructor(e){super(),this.code=e;}render({_n:e}){return `${this.code};`+e}optimizeNodes(){return `${this.code}`?this:void 0}optimizeNames(e,t){return this.code=x(this.code,e,t),this}get names(){return this.code instanceof o._CodeOrName?this.code.names:{}}}class h extends i{constructor(e=[]){super(),this.nodes=e;}render(e){return this.nodes.reduce(((t,r)=>t+r.render(e)),"")}optimizeNodes(){const{nodes:e}=this;let t=e.length;for(;t--;){const r=e[t].optimizeNodes();Array.isArray(r)?e.splice(t,1,...r):r?e[t]=r:e.splice(t,1);}return e.length>0?this:void 0}optimizeNames(e,t){const{nodes:r}=this;let o=r.length;for(;o--;){const s=r[o];s.optimizeNames(e,t)||(T(e,s.names),r.splice(o,1));}return r.length>0?this:void 0}get names(){return this.nodes.reduce(((e,t)=>C(e,t.names)),{})}}class y extends h{render(e){return "{"+e._n+super.render(e)+"}"+e._n}}class v extends h{}class g extends y{}g.kind="else";class $ extends y{constructor(e,t){super(t),this.condition=e;}render(e){let t=`if(${this.condition})`+super.render(e);return this.else&&(t+="else "+this.else.render(e)),t}optimizeNodes(){super.optimizeNodes();const e=this.condition;if(!0===e)return this.nodes;let t=this.else;if(t){const e=t.optimizeNodes();t=this.else=Array.isArray(e)?new g(e):e;}return t?!1===e?t instanceof $?t:t.nodes:this.nodes.length?this:new $(I(e),t instanceof $?[t]:t.nodes):!1!==e&&this.nodes.length?this:void 0}optimizeNames(e,t){var r;if(this.else=null===(r=this.else)||void 0===r?void 0:r.optimizeNames(e,t),super.optimizeNames(e,t)||this.else)return this.condition=x(this.condition,e,t),this}get names(){const e=super.names;return O(e,this.condition),this.else&&C(e,this.else.names),e}}$.kind="if";class _ extends y{}_.kind="for";class w extends _{constructor(e){super(),this.iteration=e;}render(e){return `for(${this.iteration})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iteration=x(this.iteration,e,t),this}get names(){return C(super.names,this.iteration.names)}}class b extends _{constructor(e,t,r,o){super(),this.varKind=e,this.name=t,this.from=r,this.to=o;}render(e){const t=e.es5?s.varKinds.var:this.varKind,{name:r,from:o,to:a}=this;return `for(${t} ${r}=${o}; ${r}<${a}; ${r}++)`+super.render(e)}get names(){const e=O(super.names,this.from);return O(e,this.to)}}class E extends _{constructor(e,t,r,o){super(),this.loop=e,this.varKind=t,this.name=r,this.iterable=o;}render(e){return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iterable=x(this.iterable,e,t),this}get names(){return C(super.names,this.iterable.names)}}class P extends y{constructor(e,t,r){super(),this.name=e,this.args=t,this.async=r;}render(e){return `${this.async?"async ":""}function ${this.name}(${this.args})`+super.render(e)}}P.kind="func";class S extends h{render(e){return "return "+super.render(e)}}S.kind="return";class N extends y{render(e){let t="try"+super.render(e);return this.catch&&(t+=this.catch.render(e)),this.finally&&(t+=this.finally.render(e)),t}optimizeNodes(){var e,t;return super.optimizeNodes(),null===(e=this.catch)||void 0===e||e.optimizeNodes(),null===(t=this.finally)||void 0===t||t.optimizeNodes(),this}optimizeNames(e,t){var r,o;return super.optimizeNames(e,t),null===(r=this.catch)||void 0===r||r.optimizeNames(e,t),null===(o=this.finally)||void 0===o||o.optimizeNames(e,t),this}get names(){const e=super.names;return this.catch&&C(e,this.catch.names),this.finally&&C(e,this.finally.names),e}}class k extends y{constructor(e){super(),this.error=e;}render(e){return `catch(${this.error})`+super.render(e)}}k.kind="catch";class j extends y{render(e){return "finally"+super.render(e)}}j.kind="finally";function C(e,t){for(const r in t)e[r]=(e[r]||0)+(t[r]||0);return e}function O(e,t){return t instanceof o._CodeOrName?C(e,t.names):e}function x(e,t,r){return e instanceof o.Name?a(e):(s=e)instanceof o._Code&&s._items.some((e=>e instanceof o.Name&&1===t[e.str]&&void 0!==r[e.str]))?new o._Code(e._items.reduce(((e,t)=>(t instanceof o.Name&&(t=a(t)),t instanceof o._Code?e.push(...t._items):e.push(t),e)),[])):e;var s;function a(e){const o=r[e.str];return void 0===o||1!==t[e.str]?e:(delete t[e.str],o)}}function T(e,t){for(const r in t)e[r]=(e[r]||0)-(t[r]||0);}function I(e){return "boolean"==typeof e||"number"==typeof e||null===e?!e:o._`!${M(e)}`}r.CodeGen=class{constructor(e,t={}){this._values={},this._blockStarts=[],this._constants={},this.opts={...t,_n:t.lines?"\n":""},this._extScope=e,this._scope=new s.Scope({parent:e}),this._nodes=[new v];}toString(){return this._root.render(this.opts)}name(e){return this._scope.name(e)}scopeName(e){return this._extScope.name(e)}scopeValue(e,t){const r=this._extScope.value(e,t);return (this._values[r.prefix]||(this._values[r.prefix]=new Set)).add(r),r}getScopeValue(e,t){return this._extScope.getValue(e,t)}scopeRefs(e){return this._extScope.scopeRefs(e,this._values)}scopeCode(){return this._extScope.scopeCode(this._values)}_def(e,t,r,o){const s=this._scope.toName(t);return void 0!==r&&o&&(this._constants[s.str]=r),this._leafNode(new c(e,s,r)),s}const(e,t,r){return this._def(s.varKinds.const,e,t,r)}let(e,t,r){return this._def(s.varKinds.let,e,t,r)}var(e,t,r){return this._def(s.varKinds.var,e,t,r)}assign(e,t,r){return this._leafNode(new l(e,t,r))}add(e,t){return this._leafNode(new d(e,r.operators.ADD,t))}code(e){return "function"==typeof e?e():e!==o.nil&&this._leafNode(new m(e)),this}object(...e){const t=["{"];for(const[r,s]of e)t.length>1&&t.push(","),t.push(r),(r!==s||this.opts.es5)&&(t.push(":"),(0, o.addCodeArg)(t,s));return t.push("}"),new o._Code(t)}if(e,t,r){if(this._blockNode(new $(e)),t&&r)this.code(t).else().code(r).endIf();else if(t)this.code(t).endIf();else if(r)throw new Error('CodeGen: "else" body without "then" body');return this}elseIf(e){return this._elseNode(new $(e))}else(){return this._elseNode(new g)}endIf(){return this._endBlockNode($,g)}_for(e,t){return this._blockNode(e),t&&this.code(t).endFor(),this}for(e,t){return this._for(new w(e),t)}forRange(e,t,r,o,a=(this.opts.es5?s.varKinds.var:s.varKinds.let)){const n=this._scope.toName(e);return this._for(new b(a,n,t,r),(()=>o(n)))}forOf(e,t,r,a=s.varKinds.const){const n=this._scope.toName(e);if(this.opts.es5){const e=t instanceof o.Name?t:this.var("_arr",t);return this.forRange("_i",0,o._`${e}.length`,(t=>{this.var(n,o._`${e}[${t}]`),r(n);}))}return this._for(new E("of",a,n,t),(()=>r(n)))}forIn(e,t,r,a=(this.opts.es5?s.varKinds.var:s.varKinds.const)){if(this.opts.ownProperties)return this.forOf(e,o._`Object.keys(${t})`,r);const n=this._scope.toName(e);return this._for(new E("in",a,n,t),(()=>r(n)))}endFor(){return this._endBlockNode(_)}label(e){return this._leafNode(new u(e))}break(e){return this._leafNode(new f(e))}return(e){const t=new S;if(this._blockNode(t),this.code(e),1!==t.nodes.length)throw new Error('CodeGen: "return" should have one node');return this._endBlockNode(S)}try(e,t,r){if(!t&&!r)throw new Error('CodeGen: "try" without "catch" and "finally"');const o=new N;if(this._blockNode(o),this.code(e),t){const e=this.name("e");this._currNode=o.catch=new k(e),t(e);}return r&&(this._currNode=o.finally=new j,this.code(r)),this._endBlockNode(k,j)}throw(e){return this._leafNode(new p(e))}block(e,t){return this._blockStarts.push(this._nodes.length),e&&this.code(e).endBlock(t),this}endBlock(e){const t=this._blockStarts.pop();if(void 0===t)throw new Error("CodeGen: not in self-balancing block");const r=this._nodes.length-t;if(r<0||void 0!==e&&r!==e)throw new Error(`CodeGen: wrong number of nodes: ${r} vs ${e} expected`);return this._nodes.length=t,this}func(e,t=o.nil,r,s){return this._blockNode(new P(e,t,r)),s&&this.code(s).endFunc(),this}endFunc(){return this._endBlockNode(P)}optimize(e=1){for(;e-- >0;)this._root.optimizeNodes(),this._root.optimizeNames(this._root.names,this._constants);}_leafNode(e){return this._currNode.nodes.push(e),this}_blockNode(e){this._currNode.nodes.push(e),this._nodes.push(e);}_endBlockNode(e,t){const r=this._currNode;if(r instanceof e||t&&r instanceof t)return this._nodes.pop(),this;throw new Error(`CodeGen: not in block "${t?`${e.kind}/${t.kind}`:e.kind}"`)}_elseNode(e){const t=this._currNode;if(!(t instanceof $))throw new Error('CodeGen: "else" without "if"');return this._currNode=t.else=e,this}get _root(){return this._nodes[0]}get _currNode(){const e=this._nodes;return e[e.length-1]}set _currNode(e){const t=this._nodes;t[t.length-1]=e;}},r.not=I;const R=A(r.operators.AND);r.and=function(...e){return e.reduce(R)};const D=A(r.operators.OR);function A(e){return (t,r)=>t===o.nil?r:r===o.nil?t:o._`${M(t)} ${e} ${M(r)}`}function M(e){return e instanceof o.Name?e:o._`(${e})`}r.or=function(...e){return e.reduce(D)};},{"./code":1,"./scope":3}],3:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.ValueScope=r.ValueScopeName=r.Scope=r.varKinds=r.UsedValueState=void 0;const o=e("./code");class s extends Error{constructor(e){super(`CodeGen: "code" for ${e} not defined`),this.value=e.value;}}var a;!function(e){e[e.Started=0]="Started",e[e.Completed=1]="Completed";}(a=r.UsedValueState||(r.UsedValueState={})),r.varKinds={const:new o.Name("const"),let:new o.Name("let"),var:new o.Name("var")};class n{constructor({prefixes:e,parent:t}={}){this._names={},this._prefixes=e,this._parent=t;}toName(e){return e instanceof o.Name?e:this.name(e)}name(e){return new o.Name(this._newName(e))}_newName(e){return `${e}${(this._names[e]||this._nameGroup(e)).index++}`}_nameGroup(e){var t,r;if((null===(r=null===(t=this._parent)||void 0===t?void 0:t._prefixes)||void 0===r?void 0:r.has(e))||this._prefixes&&!this._prefixes.has(e))throw new Error(`CodeGen: prefix "${e}" is not allowed in this scope`);return this._names[e]={prefix:e,index:0}}}r.Scope=n;class i extends o.Name{constructor(e,t){super(t),this.prefix=e;}setValue(e,{property:t,itemIndex:r}){this.value=e,this.scopePath=o._`.${new o.Name(t)}[${r}]`;}}r.ValueScopeName=i;const c=o._`\n`;r.ValueScope=class extends n{constructor(e){super(e),this._values={},this._scope=e.scope,this.opts={...e,_n:e.lines?c:o.nil};}get(){return this._scope}name(e){return new i(e,this._newName(e))}value(e,t){var r;if(void 0===t.ref)throw new Error("CodeGen: ref must be passed in value");const o=this.toName(e),{prefix:s}=o,a=null!==(r=t.key)&&void 0!==r?r:t.ref;let n=this._values[s];if(n){const e=n.get(a);if(e)return e}else n=this._values[s]=new Map;n.set(a,o);const i=this._scope[s]||(this._scope[s]=[]),c=i.length;return i[c]=t.ref,o.setValue(t,{property:s,itemIndex:c}),o}getValue(e,t){const r=this._values[e];if(r)return r.get(t)}scopeRefs(e,t=this._values){return this._reduceValues(t,(t=>{if(void 0===t.scopePath)throw new Error(`CodeGen: name "${t}" has no value`);return o._`${e}${t.scopePath}`}))}scopeCode(e=this._values,t,r){return this._reduceValues(e,(e=>{if(void 0===e.value)throw new Error(`CodeGen: name "${e}" has no value`);return e.value.code}),t,r)}_reduceValues(e,t,n={},i){let c=o.nil;for(const l in e){const d=e[l];if(!d)continue;const u=n[l]=n[l]||new Map;d.forEach((e=>{if(u.has(e))return;u.set(e,a.Started);let n=t(e);if(n){c=o._`${c}${this.opts.es5?r.varKinds.var:r.varKinds.const} ${e} = ${n};${this.opts._n}`;}else {if(!(n=null==i?void 0:i(e)))throw new s(e);c=o._`${c}${n}${this.opts._n}`;}u.set(e,a.Completed);}));}return c}};},{"./code":1}],4:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.extendErrors=r.resetErrorsCount=r.reportExtraError=r.reportError=r.keyword$DataError=r.keywordError=void 0;const o=e("./codegen"),s=e("./util"),a=e("./names");function n(e,t){const r=e.const("err",t);e.if(o._`${a.default.vErrors} === null`,(()=>e.assign(a.default.vErrors,o._`[${r}]`)),o._`${a.default.vErrors}.push(${r})`),e.code(o._`${a.default.errors}++`);}function i(e,t){const{gen:r,validateName:s,schemaEnv:a}=e;a.$async?r.throw(o._`new ${e.ValidationError}(${t})`):(r.assign(o._`${s}.errors`,t),r.return(!1));}r.keywordError={message({keyword:e}){return o.str`must pass "${e}" keyword validation`}},r.keyword$DataError={message({keyword:e,schemaType:t}){return t?o.str`"${e}" keyword must be ${t} ($data)`:o.str`"${e}" keyword is invalid ($data)`}},r.reportError=function(e,t=r.keywordError,s,a){const{it:c}=e,{gen:d,compositeRule:u,allErrors:f}=c,p=l(e,t,s);(null!=a?a:u||f)?n(d,p):i(c,o._`[${p}]`);},r.reportExtraError=function(e,t=r.keywordError,o){const{it:s}=e,{gen:c,compositeRule:d,allErrors:u}=s;n(c,l(e,t,o)),d||u||i(s,a.default.vErrors);},r.resetErrorsCount=function(e,t){e.assign(a.default.errors,t),e.if(o._`${a.default.vErrors} !== null`,(()=>e.if(t,(()=>e.assign(o._`${a.default.vErrors}.length`,t)),(()=>e.assign(a.default.vErrors,null)))));},r.extendErrors=function({gen:e,keyword:t,schemaValue:r,data:s,errsCount:n,it:i}){if(void 0===n)throw new Error("ajv implementation error");const c=e.name("err");e.forRange("i",n,a.default.errors,(n=>{e.const(c,o._`${a.default.vErrors}[${n}]`),e.if(o._`${c}.instancePath === undefined`,(()=>e.assign(o._`${c}.instancePath`,(0, o.strConcat)(a.default.instancePath,i.errorPath)))),e.assign(o._`${c}.schemaPath`,o.str`${i.errSchemaPath}/${t}`),i.opts.verbose&&(e.assign(o._`${c}.schema`,r),e.assign(o._`${c}.data`,s));}));};const c={keyword:new o.Name("keyword"),schemaPath:new o.Name("schemaPath"),params:new o.Name("params"),propertyName:new o.Name("propertyName"),message:new o.Name("message"),schema:new o.Name("schema"),parentSchema:new o.Name("parentSchema")};function l(e,t,r){const{createErrors:s}=e.it;return !1===s?o._`{}`:function(e,t,r={}){const{gen:s,it:n}=e,i=[d(n,r),u(e,r)];return function(e,{params:t,message:r},s){const{keyword:n,data:i,schemaValue:l,it:d}=e,{opts:u,propertyName:f,topSchemaRef:p,schemaPath:m}=d;s.push([c.keyword,n],[c.params,"function"==typeof t?t(e):t||o._`{}`]),u.messages&&s.push([c.message,"function"==typeof r?r(e):r]);u.verbose&&s.push([c.schema,l],[c.parentSchema,o._`${p}${m}`],[a.default.data,i]);f&&s.push([c.propertyName,f]);}(e,t,i),s.object(...i)}(e,t,r)}function d({errorPath:e},{instancePath:t}){const r=t?o.str`${e}${(0, s.getErrorPath)(t,s.Type.Str)}`:e;return [a.default.instancePath,(0, o.strConcat)(a.default.instancePath,r)]}function u({keyword:e,it:{errSchemaPath:t}},{schemaPath:r,parentSchema:a}){let n=a?t:o.str`${t}/${e}`;return r&&(n=o.str`${n}${(0, s.getErrorPath)(r,s.Type.Str)}`),[c.schemaPath,n]}},{"./codegen":2,"./names":6,"./util":10}],5:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.resolveSchema=r.getCompilingSchema=r.resolveRef=r.compileSchema=r.SchemaEnv=void 0;const o=e("./codegen"),s=e("../runtime/validation_error"),a=e("./names"),n=e("./resolve"),i=e("./util"),c=e("./validate");class l{constructor(e){var t;let r;this.refs={},this.dynamicAnchors={},"object"==typeof e.schema&&(r=e.schema),this.schema=e.schema,this.schemaId=e.schemaId,this.root=e.root||this,this.baseId=null!==(t=e.baseId)&&void 0!==t?t:(0, n.normalizeId)(null==r?void 0:r[e.schemaId||"$id"]),this.schemaPath=e.schemaPath,this.localRefs=e.localRefs,this.meta=e.meta,this.$async=null==r?void 0:r.$async,this.refs={};}}function d(e){const t=f.call(this,e);if(t)return t;const r=(0, n.getFullPath)(this.opts.uriResolver,e.root.baseId),{es5:i,lines:l}=this.opts.code,{ownProperties:d}=this.opts,u=new o.CodeGen(this.scope,{es5:i,lines:l,ownProperties:d});let p;e.$async&&(p=u.scopeValue("Error",{ref:s.default,code:o._`require("ajv/dist/runtime/validation_error").default`}));const m=u.scopeName("validate");e.validateName=m;const h={gen:u,allErrors:this.opts.allErrors,data:a.default.data,parentData:a.default.parentData,parentDataProperty:a.default.parentDataProperty,dataNames:[a.default.data],dataPathArr:[o.nil],dataLevel:0,dataTypes:[],definedProperties:new Set,topSchemaRef:u.scopeValue("schema",!0===this.opts.code.source?{ref:e.schema,code:(0, o.stringify)(e.schema)}:{ref:e.schema}),validateName:m,ValidationError:p,schema:e.schema,schemaEnv:e,rootId:r,baseId:e.baseId||r,schemaPath:o.nil,errSchemaPath:e.schemaPath||(this.opts.jtd?"":"#"),errorPath:o._`""`,opts:this.opts,self:this};let y;try{this._compilations.add(e),(0,c.validateFunctionCode)(h),u.optimize(this.opts.code.optimize);const t=u.toString();y=`${u.scopeRefs(a.default.scope)}return ${t}`,this.opts.code.process&&(y=this.opts.code.process(y,e));const r=new Function(`${a.default.self}`,`${a.default.scope}`,y)(this,this.scope.get());if(this.scope.value(m,{ref:r}),r.errors=null,r.schema=e.schema,r.schemaEnv=e,e.$async&&(r.$async=!0),!0===this.opts.code.source&&(r.source={validateName:m,validateCode:t,scopeValues:u._values}),this.opts.unevaluated){const{props:e,items:t}=h;r.evaluated={props:e instanceof o.Name?void 0:e,items:t instanceof o.Name?void 0:t,dynamicProps:e instanceof o.Name,dynamicItems:t instanceof o.Name},r.source&&(r.source.evaluated=(0,o.stringify)(r.evaluated));}return e.validate=r,e}catch(t){throw delete e.validate,delete e.validateName,y&&this.logger.error("Error compiling schema, function code:",y),t}finally{this._compilations.delete(e);}}function u(e){return (0, n.inlineRef)(e.schema,this.opts.inlineRefs)?e.schema:e.validate?e:d.call(this,e)}function f(e){for(const o of this._compilations)if((t=o).schema===(r=e).schema&&t.root===r.root&&t.baseId===r.baseId)return o;var t,r;}function p(e,t){let r;for(;"string"==typeof(r=this.refs[t]);)t=r;return r||this.schemas[t]||m.call(this,e,t)}function m(e,t){const r=this.opts.uriResolver.parse(t),o=(0, n._getFullPath)(this.opts.uriResolver,r);let s=(0, n.getFullPath)(this.opts.uriResolver,e.baseId,void 0);if(Object.keys(e.schema).length>0&&o===s)return y.call(this,r,e);const a=(0, n.normalizeId)(o),i=this.refs[a]||this.schemas[a];if("string"==typeof i){const t=m.call(this,e,i);if("object"!=typeof(null==t?void 0:t.schema))return;return y.call(this,r,t)}if("object"==typeof(null==i?void 0:i.schema)){if(i.validate||d.call(this,i),a===(0, n.normalizeId)(t)){const{schema:t}=i,{schemaId:r}=this.opts,o=t[r];return o&&(s=(0, n.resolveUrl)(this.opts.uriResolver,s,o)),new l({schema:t,schemaId:r,root:e,baseId:s})}return y.call(this,r,i)}}r.SchemaEnv=l,r.compileSchema=d,r.resolveRef=function(e,t,r){var o;r=(0, n.resolveUrl)(this.opts.uriResolver,t,r);const s=e.refs[r];if(s)return s;let a=p.call(this,e,r);if(void 0===a){const s=null===(o=e.localRefs)||void 0===o?void 0:o[r],{schemaId:n}=this.opts;s&&(a=new l({schema:s,schemaId:n,root:e,baseId:t}));}return void 0!==a?e.refs[r]=u.call(this,a):void 0},r.getCompilingSchema=f,r.resolveSchema=m;const h=new Set(["properties","patternProperties","enum","dependencies","definitions"]);function y(e,{baseId:t,schema:r,root:o}){var s;if("/"!==(null===(s=e.fragment)||void 0===s?void 0:s[0]))return;for(const o of e.fragment.slice(1).split("/")){if("boolean"==typeof r)return;const e=r[(0, i.unescapeFragment)(o)];if(void 0===e)return;const s="object"==typeof(r=e)&&r[this.opts.schemaId];!h.has(o)&&s&&(t=(0, n.resolveUrl)(this.opts.uriResolver,t,s));}let a;if("boolean"!=typeof r&&r.$ref&&!(0, i.schemaHasRulesButRef)(r,this.RULES)){const e=(0, n.resolveUrl)(this.opts.uriResolver,t,r.$ref);a=m.call(this,o,e);}const{schemaId:c}=this.opts;return a=a||new l({schema:r,schemaId:c,root:o,baseId:t}),a.schema!==a.root.schema?a:void 0}},{"../runtime/validation_error":24,"./codegen":2,"./names":6,"./resolve":8,"./util":10,"./validate":15}],6:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("./codegen"),s={data:new o.Name("data"),valCxt:new o.Name("valCxt"),instancePath:new o.Name("instancePath"),parentData:new o.Name("parentData"),parentDataProperty:new o.Name("parentDataProperty"),rootData:new o.Name("rootData"),dynamicAnchors:new o.Name("dynamicAnchors"),vErrors:new o.Name("vErrors"),errors:new o.Name("errors"),this:new o.Name("this"),self:new o.Name("self"),scope:new o.Name("scope"),json:new o.Name("json"),jsonPos:new o.Name("jsonPos"),jsonLen:new o.Name("jsonLen"),jsonPart:new o.Name("jsonPart")};r.default=s;},{"./codegen":2}],7:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("./resolve");class s extends Error{constructor(e,t,r,s){super(s||`can't resolve reference ${r} from id ${t}`),this.missingRef=(0, o.resolveUrl)(e,t,r),this.missingSchema=(0, o.normalizeId)((0, o.getFullPath)(e,this.missingRef));}}r.default=s;},{"./resolve":8}],8:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.getSchemaRefs=r.resolveUrl=r.normalizeId=r._getFullPath=r.getFullPath=r.inlineRef=void 0;const o=e("./util"),s=e("fast-deep-equal"),a=e("json-schema-traverse"),n=new Set(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum","const"]);r.inlineRef=function(e,t=!0){return "boolean"==typeof e||(!0===t?!c(e):!!t&&l(e)<=t)};const i=new Set(["$ref","$recursiveRef","$recursiveAnchor","$dynamicRef","$dynamicAnchor"]);function c(e){for(const t in e){if(i.has(t))return !0;const r=e[t];if(Array.isArray(r)&&r.some(c))return !0;if("object"==typeof r&&c(r))return !0}return !1}function l(e){let t=0;for(const r in e){if("$ref"===r)return Infinity;if(t++,!n.has(r)&&("object"==typeof e[r]&&(0, o.eachItem)(e[r],(e=>t+=l(e))),Infinity===t))return Infinity}return t}function d(e,t="",r){!1!==r&&(t=p(t));const o=e.parse(t);return u(e,o)}function u(e,t){return e.serialize(t).split("#")[0]+"#"}r.getFullPath=d,r._getFullPath=u;const f=/#\/?$/;function p(e){return e?e.replace(f,""):""}r.normalizeId=p,r.resolveUrl=function(e,t,r){return r=p(r),e.resolve(t,r)};const m=/^[a-z_][-a-z0-9._]*$/i;r.getSchemaRefs=function(e,t){if("boolean"==typeof e)return {};const{schemaId:r,uriResolver:o}=this.opts,n=p(e[r]||t),i={"":n},c=d(o,n,!1),l={},u=new Set;return a(e,{allKeys:!0},((e,t,o,s)=>{if(void 0===s)return;const a=c+t;let n=i[s];function d(t){if(t=p(n?(0, this.opts.uriResolver.resolve)(n,t):t),u.has(t))throw h(t);u.add(t);let r=this.refs[t];return "string"==typeof r&&(r=this.refs[r]),"object"==typeof r?f(e,r.schema,t):t!==p(a)&&("#"===t[0]?(f(e,l[t],t),l[t]=e):this.refs[t]=a),t}function y(e){if("string"==typeof e){if(!m.test(e))throw new Error(`invalid anchor "${e}"`);d.call(this,`#${e}`);}}"string"==typeof e[r]&&(n=d.call(this,e[r])),y.call(this,e.$anchor),y.call(this,e.$dynamicAnchor),i[t]=n;})),l;function f(e,t,r){if(void 0!==t&&!s(e,t))throw h(r)}function h(e){return new Error(`reference "${e}" resolves to more than one schema`)}};},{"./util":10,"fast-deep-equal":63,"json-schema-traverse":64}],9:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.getRules=r.isJSONType=void 0;const o=new Set(["string","number","integer","boolean","null","object","array"]);r.isJSONType=function(e){return "string"==typeof e&&o.has(e)},r.getRules=function(){const e={number:{type:"number",rules:[]},string:{type:"string",rules:[]},array:{type:"array",rules:[]},object:{type:"object",rules:[]}};return {types:{...e,integer:!0,boolean:!0,null:!0},rules:[{rules:[]},e.number,e.string,e.array,e.object],post:{rules:[]},all:{},keywords:{}}};},{}],10:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.checkStrictMode=r.getErrorPath=r.Type=r.useFunc=r.setEvaluated=r.evaluatedPropsToName=r.mergeEvaluated=r.eachItem=r.unescapeJsonPointer=r.escapeJsonPointer=r.escapeFragment=r.unescapeFragment=r.schemaRefOrVal=r.schemaHasRulesButRef=r.schemaHasRules=r.checkUnknownRules=r.alwaysValidSchema=r.toHash=void 0;const o=e("./codegen"),s=e("./codegen/code");function a(e,t=e.schema){const{opts:r,self:o}=e;if(!r.strictSchema)return;if("boolean"==typeof t)return;const s=o.RULES.keywords;for(const r in t)s[r]||m(e,`unknown keyword: "${r}"`);}function n(e,t){if("boolean"==typeof e)return !e;for(const r in e)if(t[r])return !0;return !1}function i(e){return "number"==typeof e?`${e}`:e.replace(/~/g,"~0").replace(/\//g,"~1")}function c(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}function l({mergeNames:e,mergeToName:t,mergeValues:r,resultToName:s}){return (a,n,i,c)=>{const l=void 0===i?n:i instanceof o.Name?(n instanceof o.Name?e(a,n,i):t(a,n,i),i):n instanceof o.Name?(t(a,i,n),n):r(n,i);return c!==o.Name||l instanceof o.Name?l:s(a,l)}}function d(e,t){if(!0===t)return e.var("props",!0);const r=e.var("props",o._`{}`);return void 0!==t&&u(e,r,t),r}function u(e,t,r){Object.keys(r).forEach((r=>e.assign(o._`${t}${(0, o.getProperty)(r)}`,!0)));}r.toHash=function(e){const t={};for(const r of e)t[r]=!0;return t},r.alwaysValidSchema=function(e,t){return "boolean"==typeof t?t:0===Object.keys(t).length||(a(e,t),!n(t,e.self.RULES.all))},r.checkUnknownRules=a,r.schemaHasRules=n,r.schemaHasRulesButRef=function(e,t){if("boolean"==typeof e)return !e;for(const r in e)if("$ref"!==r&&t.all[r])return !0;return !1},r.schemaRefOrVal=function({topSchemaRef:e,schemaPath:t},r,s,a){if(!a){if("number"==typeof r||"boolean"==typeof r)return r;if("string"==typeof r)return o._`${r}`}return o._`${e}${t}${(0, o.getProperty)(s)}`},r.unescapeFragment=function(e){return c(decodeURIComponent(e))},r.escapeFragment=function(e){return encodeURIComponent(i(e))},r.escapeJsonPointer=i,r.unescapeJsonPointer=c,r.eachItem=function(e,t){if(Array.isArray(e))for(const r of e)t(r);else t(e);},r.mergeEvaluated={props:l({mergeNames(e,t,r){return e.if(o._`${r} !== true && ${t} !== undefined`,(()=>{e.if(o._`${t} === true`,(()=>e.assign(r,!0)),(()=>e.assign(r,o._`${r} || {}`).code(o._`Object.assign(${r}, ${t})`)));}))},mergeToName(e,t,r){return e.if(o._`${r} !== true`,(()=>{!0===t?e.assign(r,!0):(e.assign(r,o._`${r} || {}`),u(e,r,t));}))},mergeValues(e,t){return !0===e||{...e,...t}},resultToName:d}),items:l({mergeNames(e,t,r){return e.if(o._`${r} !== true && ${t} !== undefined`,(()=>e.assign(r,o._`${t} === true ? true : ${r} > ${t} ? ${r} : ${t}`)))},mergeToName(e,t,r){return e.if(o._`${r} !== true`,(()=>e.assign(r,!0===t||o._`${r} > ${t} ? ${r} : ${t}`)))},mergeValues(e,t){return !0===e||Math.max(e,t)},resultToName(e,t){return e.var("items",t)}})},r.evaluatedPropsToName=d,r.setEvaluated=u;const f={};var p;function m(e,t,r=e.opts.strictSchema){if(r){if(t=`strict mode: ${t}`,!0===r)throw new Error(t);e.self.logger.warn(t);}}r.useFunc=function(e,t){return e.scopeValue("func",{ref:t,code:f[t.code]||(f[t.code]=new s._Code(t.code))})},function(e){e[e.Num=0]="Num",e[e.Str=1]="Str";}(p=r.Type||(r.Type={})),r.getErrorPath=function(e,t,r){if(e instanceof o.Name){const s=t===p.Num;return r?s?o._`"[" + ${e} + "]"`:o._`"['" + ${e} + "']"`:s?o._`"/" + ${e}`:o._`"/" + ${e}.replace(/~/g, "~0").replace(/\\//g, "~1")`}return r?(0, o.getProperty)(e).toString():"/"+i(e)},r.checkStrictMode=m;},{"./codegen":2,"./codegen/code":1}],11:[function(e,t,r){function o(e,t){return t.rules.some((t=>s(e,t)))}function s(e,t){var r;return void 0!==e[t.keyword]||(null===(r=t.definition.implements)||void 0===r?void 0:r.some((t=>void 0!==e[t])))}Object.defineProperty(r,"__esModule",{value:!0}),r.shouldUseRule=r.shouldUseGroup=r.schemaHasRulesForType=void 0,r.schemaHasRulesForType=function({schema:e,self:t},r){const s=t.RULES.types[r];return s&&!0!==s&&o(e,s)},r.shouldUseGroup=o,r.shouldUseRule=s;},{}],12:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.boolOrEmptySchema=r.topBoolOrEmptySchema=void 0;const o=e("../errors"),s=e("../codegen"),a=e("../names"),n={message:"boolean schema is false"};function i(e,t){const{gen:r,data:s}=e;(0, o.reportError)({gen:r,keyword:"false schema",data:s,schema:!1,schemaCode:!1,schemaValue:!1,params:{},it:e},n,void 0,t);}r.topBoolOrEmptySchema=function(e){const{gen:t,schema:r,validateName:o}=e;!1===r?i(e,!1):"object"==typeof r&&!0===r.$async?t.return(a.default.data):(t.assign(s._`${o}.errors`,null),t.return(!0));},r.boolOrEmptySchema=function(e,t){const{gen:r,schema:o}=e;!1===o?(r.var(t,!1),i(e)):r.var(t,!0);};},{"../codegen":2,"../errors":4,"../names":6}],13:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.reportTypeError=r.checkDataTypes=r.checkDataType=r.coerceAndCheckDataType=r.getJSONTypes=r.getSchemaTypes=r.DataType=void 0;const o=e("../rules"),s=e("./applicability"),a=e("../errors"),n=e("../codegen"),i=e("../util");var c;function l(e){const t=Array.isArray(e)?e:e?[e]:[];if(t.every(o.isJSONType))return t;throw new Error("type must be JSONType or JSONType[]: "+t.join(","))}!function(e){e[e.Correct=0]="Correct",e[e.Wrong=1]="Wrong";}(c=r.DataType||(r.DataType={})),r.getSchemaTypes=function(e){const t=l(e.type);if(t.includes("null")){if(!1===e.nullable)throw new Error("type: null contradicts nullable: false")}else {if(!t.length&&void 0!==e.nullable)throw new Error('"nullable" cannot be used without "type"');!0===e.nullable&&t.push("null");}return t},r.getJSONTypes=l,r.coerceAndCheckDataType=function(e,t){const{gen:r,data:o,opts:a}=e,i=function(e,t){return t?e.filter((e=>d.has(e)||"array"===t&&"array"===e)):[]}(t,a.coerceTypes),l=t.length>0&&!(0===i.length&&1===t.length&&(0, s.schemaHasRulesForType)(e,t[0]));if(l){const s=f(t,o,a.strictNumbers,c.Wrong);r.if(s,(()=>{i.length?function(e,t,r){const{gen:o,data:s,opts:a}=e,i=o.let("dataType",n._`typeof ${s}`),c=o.let("coerced",n._`undefined`);"array"===a.coerceTypes&&o.if(n._`${i} == 'object' && Array.isArray(${s}) && ${s}.length == 1`,(()=>o.assign(s,n._`${s}[0]`).assign(i,n._`typeof ${s}`).if(f(t,s,a.strictNumbers),(()=>o.assign(c,s)))));o.if(n._`${c} !== undefined`);for(const e of r)(d.has(e)||"array"===e&&"array"===a.coerceTypes)&&l(e);function l(e){switch(e){case"string":return void o.elseIf(n._`${i} == "number" || ${i} == "boolean"`).assign(c,n._`"" + ${s}`).elseIf(n._`${s} === null`).assign(c,n._`""`);case"number":return void o.elseIf(n._`${i} == "boolean" || ${s} === null
              || (${i} == "string" && ${s} && ${s} == +${s})`).assign(c,n._`+${s}`);case"integer":return void o.elseIf(n._`${i} === "boolean" || ${s} === null
              || (${i} === "string" && ${s} && ${s} == +${s} && !(${s} % 1))`).assign(c,n._`+${s}`);case"boolean":return void o.elseIf(n._`${s} === "false" || ${s} === 0 || ${s} === null`).assign(c,!1).elseIf(n._`${s} === "true" || ${s} === 1`).assign(c,!0);case"null":return o.elseIf(n._`${s} === "" || ${s} === 0 || ${s} === false`),void o.assign(c,null);case"array":o.elseIf(n._`${i} === "string" || ${i} === "number"
              || ${i} === "boolean" || ${s} === null`).assign(c,n._`[${s}]`);}}o.else(),m(e),o.endIf(),o.if(n._`${c} !== undefined`,(()=>{o.assign(s,c),function({gen:e,parentData:t,parentDataProperty:r},o){e.if(n._`${t} !== undefined`,(()=>e.assign(n._`${t}[${r}]`,o)));}(e,c);}));}(e,t,i):m(e);}));}return l};const d=new Set(["string","number","integer","boolean","null"]);function u(e,t,r,o=c.Correct){const s=o===c.Correct?n.operators.EQ:n.operators.NEQ;let a;switch(e){case"null":return n._`${t} ${s} null`;case"array":a=n._`Array.isArray(${t})`;break;case"object":a=n._`${t} && typeof ${t} == "object" && !Array.isArray(${t})`;break;case"integer":a=i(n._`!(${t} % 1) && !isNaN(${t})`);break;case"number":a=i();break;default:return n._`typeof ${t} ${s} ${e}`}return o===c.Correct?a:(0, n.not)(a);function i(e=n.nil){return (0, n.and)(n._`typeof ${t} == "number"`,e,r?n._`isFinite(${t})`:n.nil)}}function f(e,t,r,o){if(1===e.length)return u(e[0],t,r,o);let s;const a=(0, i.toHash)(e);if(a.array&&a.object){const e=n._`typeof ${t} != "object"`;s=a.null?e:n._`!${t} || ${e}`,delete a.null,delete a.array,delete a.object;}else s=n.nil;a.number&&delete a.integer;for(const e in a)s=(0, n.and)(s,u(e,t,r,o));return s}r.checkDataType=u,r.checkDataTypes=f;const p={message({schema:e}){return `must be ${e}`},params({schema:e,schemaValue:t}){return "string"==typeof e?n._`{type: ${e}}`:n._`{type: ${t}}`}};function m(e){const t=function(e){const{gen:t,data:r,schema:o}=e,s=(0, i.schemaRefOrVal)(e,o,"type");return {gen:t,keyword:"type",data:r,schema:o.type,schemaCode:s,schemaValue:s,parentSchema:o,params:{},it:e}}(e);(0, a.reportError)(t,p);}r.reportTypeError=m;},{"../codegen":2,"../errors":4,"../rules":9,"../util":10,"./applicability":11}],14:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.assignDefaults=void 0;const o=e("../codegen"),s=e("../util");function a(e,t,r){const{gen:a,compositeRule:n,data:i,opts:c}=e;if(void 0===r)return;const l=o._`${i}${(0, o.getProperty)(t)}`;if(n)return void(0, s.checkStrictMode)(e,`default is ignored for: ${l}`);let d=o._`${l} === undefined`;"empty"===c.useDefaults&&(d=o._`${d} || ${l} === null || ${l} === ""`),a.if(d,o._`${l} = ${(0, o.stringify)(r)}`);}r.assignDefaults=function(e,t){const{properties:r,items:o}=e.schema;if("object"===t&&r)for(const t in r)a(e,t,r[t].default);else "array"===t&&Array.isArray(o)&&o.forEach(((t,r)=>a(e,r,t.default)));};},{"../codegen":2,"../util":10}],15:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.getData=r.KeywordCxt=r.validateFunctionCode=void 0;const o=e("./boolSchema"),s=e("./dataType"),a=e("./applicability"),n=e("./dataType"),i=e("./defaults"),c=e("./keyword"),l=e("./subschema"),d=e("../codegen"),u=e("../names"),f=e("../resolve"),p=e("../util"),m=e("../errors");function h({gen:e,validateName:t,schema:r,schemaEnv:o,opts:s},a){s.code.es5?e.func(t,d._`${u.default.data}, ${u.default.valCxt}`,o.$async,(()=>{e.code(d._`"use strict"; ${y(r,s)}`),function(e,t){e.if(u.default.valCxt,(()=>{e.var(u.default.instancePath,d._`${u.default.valCxt}.${u.default.instancePath}`),e.var(u.default.parentData,d._`${u.default.valCxt}.${u.default.parentData}`),e.var(u.default.parentDataProperty,d._`${u.default.valCxt}.${u.default.parentDataProperty}`),e.var(u.default.rootData,d._`${u.default.valCxt}.${u.default.rootData}`),t.dynamicRef&&e.var(u.default.dynamicAnchors,d._`${u.default.valCxt}.${u.default.dynamicAnchors}`);}),(()=>{e.var(u.default.instancePath,d._`""`),e.var(u.default.parentData,d._`undefined`),e.var(u.default.parentDataProperty,d._`undefined`),e.var(u.default.rootData,u.default.data),t.dynamicRef&&e.var(u.default.dynamicAnchors,d._`{}`);}));}(e,s),e.code(a);})):e.func(t,d._`${u.default.data}, ${function(e){return d._`{${u.default.instancePath}="", ${u.default.parentData}, ${u.default.parentDataProperty}, ${u.default.rootData}=${u.default.data}${e.dynamicRef?d._`, ${u.default.dynamicAnchors}={}`:d.nil}}={}`}(s)}`,o.$async,(()=>e.code(y(r,s)).code(a)));}function y(e,t){const r="object"==typeof e&&e[t.schemaId];return r&&(t.code.source||t.code.process)?d._`/*# sourceURL=${r} */`:d.nil}function v(e,t){$(e)&&(_(e),g(e))?function(e,t){const{schema:r,gen:o,opts:s}=e;s.$comment&&r.$comment&&b(e);((function(e){const t=e.schema[e.opts.schemaId];t&&(e.baseId=(0, f.resolveUrl)(e.opts.uriResolver,e.baseId,t));}))(e),function(e){if(e.schema.$async&&!e.schemaEnv.$async)throw new Error("async schema in sync schema")}(e);const a=o.const("_errs",u.default.errors);w(e,a),o.var(t,d._`${a} === ${u.default.errors}`);}(e,t):(0, o.boolOrEmptySchema)(e,t);}function g({schema:e,self:t}){if("boolean"==typeof e)return !e;for(const r in e)if(t.RULES.all[r])return !0;return !1}function $(e){return "boolean"!=typeof e.schema}function _(e){(0, p.checkUnknownRules)(e),function(e){const{schema:t,errSchemaPath:r,opts:o,self:s}=e;t.$ref&&o.ignoreKeywordsWithRef&&(0, p.schemaHasRulesButRef)(t,s.RULES)&&s.logger.warn(`$ref: keywords ignored in schema at path "${r}"`);}(e);}function w(e,t){if(e.opts.jtd)return E(e,[],!1,t);const r=(0, s.getSchemaTypes)(e.schema);E(e,r,!(0, s.coerceAndCheckDataType)(e,r),t);}function b({gen:e,schemaEnv:t,schema:r,errSchemaPath:o,opts:s}){const a=r.$comment;if(!0===s.$comment)e.code(d._`${u.default.self}.logger.log(${a})`);else if("function"==typeof s.$comment){const r=d.str`${o}/$comment`,s=e.scopeValue("root",{ref:t.root});e.code(d._`${u.default.self}.opts.$comment(${a}, ${r}, ${s}.schema)`);}}function E(e,t,r,o){const{gen:s,schema:i,data:c,allErrors:l,opts:f,self:m}=e,{RULES:h}=m;function y(p){(0, a.shouldUseGroup)(i,p)&&(p.type?(s.if((0, n.checkDataType)(p.type,c,f.strictNumbers)),P(e,p),1===t.length&&t[0]===p.type&&r&&(s.else(),(0, n.reportTypeError)(e)),s.endIf()):P(e,p),l||s.if(d._`${u.default.errors} === ${o||0}`));}!i.$ref||!f.ignoreKeywordsWithRef&&(0, p.schemaHasRulesButRef)(i,h)?(f.jtd||function(e,t){if(e.schemaEnv.meta||!e.opts.strictTypes)return;((function(e,t){if(!t.length)return;if(!e.dataTypes.length)return void(e.dataTypes=t);t.forEach((t=>{N(e.dataTypes,t)||k(e,`type "${t}" not allowed by context "${e.dataTypes.join(",")}"`);})),e.dataTypes=e.dataTypes.filter((e=>N(t,e)));}))(e,t),e.opts.allowUnionTypes||function(e,t){t.length>1&&(2!==t.length||!t.includes("null"))&&k(e,"use allowUnionTypes to allow union type keyword");}(e,t);!function(e,t){const r=e.self.RULES.all;for(const o in r){const s=r[o];if("object"==typeof s&&(0, a.shouldUseRule)(e.schema,s)){const{type:r}=s.definition;r.length&&!r.some((e=>S(t,e)))&&k(e,`missing type "${r.join(",")}" for keyword "${o}"`);}}}(e,e.dataTypes);}(e,t),s.block((()=>{for(const e of h.rules)y(e);y(h.post);}))):s.block((()=>C(e,"$ref",h.all.$ref.definition)));}function P(e,t){const{gen:r,schema:o,opts:{useDefaults:s}}=e;s&&(0, i.assignDefaults)(e,t.type),r.block((()=>{for(const r of t.rules)(0, a.shouldUseRule)(o,r)&&C(e,r.keyword,r.definition,t.type);}));}function S(e,t){return e.includes(t)||"number"===t&&e.includes("integer")}function N(e,t){return e.includes(t)||"integer"===t&&e.includes("number")}function k(e,t){(0, p.checkStrictMode)(e,t+=` at "${e.schemaEnv.baseId+e.errSchemaPath}" (strictTypes)`,e.opts.strictTypes);}r.validateFunctionCode=function(e){$(e)&&(_(e),g(e))?function(e){const{schema:t,opts:r,gen:o}=e;h(e,(()=>{r.$comment&&t.$comment&&b(e),function(e){const{schema:t,opts:r}=e;void 0!==t.default&&r.useDefaults&&r.strictSchema&&(0, p.checkStrictMode)(e,"default is ignored in the schema root");}(e),o.let(u.default.vErrors,null),o.let(u.default.errors,0),r.unevaluated&&function(e){const{gen:t,validateName:r}=e;e.evaluated=t.const("evaluated",d._`${r}.evaluated`),t.if(d._`${e.evaluated}.dynamicProps`,(()=>t.assign(d._`${e.evaluated}.props`,d._`undefined`))),t.if(d._`${e.evaluated}.dynamicItems`,(()=>t.assign(d._`${e.evaluated}.items`,d._`undefined`)));}(e),w(e),function(e){const{gen:t,schemaEnv:r,validateName:o,ValidationError:s,opts:a}=e;r.$async?t.if(d._`${u.default.errors} === 0`,(()=>t.return(u.default.data)),(()=>t.throw(d._`new ${s}(${u.default.vErrors})`))):(t.assign(d._`${o}.errors`,u.default.vErrors),a.unevaluated&&function({gen:e,evaluated:t,props:r,items:o}){r instanceof d.Name&&e.assign(d._`${t}.props`,r);o instanceof d.Name&&e.assign(d._`${t}.items`,o);}(e),t.return(d._`${u.default.errors} === 0`));}(e);}));}(e):h(e,(()=>(0, o.topBoolOrEmptySchema)(e)));};class j{constructor(e,t,r){if((0, c.validateKeywordUsage)(e,t,r),this.gen=e.gen,this.allErrors=e.allErrors,this.keyword=r,this.data=e.data,this.schema=e.schema[r],this.$data=t.$data&&e.opts.$data&&this.schema&&this.schema.$data,this.schemaValue=(0, p.schemaRefOrVal)(e,this.schema,r,this.$data),this.schemaType=t.schemaType,this.parentSchema=e.schema,this.params={},this.it=e,this.def=t,this.$data)this.schemaCode=e.gen.const("vSchema",T(this.$data,e));else if(this.schemaCode=this.schemaValue,!(0, c.validSchemaType)(this.schema,t.schemaType,t.allowUndefined))throw new Error(`${r} value must be ${JSON.stringify(t.schemaType)}`);("code"in t?t.trackErrors:!1!==t.errors)&&(this.errsCount=e.gen.const("_errs",u.default.errors));}result(e,t,r){this.failResult((0, d.not)(e),t,r);}failResult(e,t,r){this.gen.if(e),r?r():this.error(),t?(this.gen.else(),t(),this.allErrors&&this.gen.endIf()):this.allErrors?this.gen.endIf():this.gen.else();}pass(e,t){this.failResult((0, d.not)(e),void 0,t);}fail(e){if(void 0===e)return this.error(),void(this.allErrors||this.gen.if(!1));this.gen.if(e),this.error(),this.allErrors?this.gen.endIf():this.gen.else();}fail$data(e){if(!this.$data)return this.fail(e);const{schemaCode:t}=this;this.fail(d._`${t} !== undefined && (${(0, d.or)(this.invalid$data(),e)})`);}error(e,t,r){if(t)return this.setParams(t),this._error(e,r),void this.setParams({});this._error(e,r);}_error(e,t){(e?m.reportExtraError:m.reportError)(this,this.def.error,t);}$dataError(){(0, m.reportError)(this,this.def.$dataError||m.keyword$DataError);}reset(){if(void 0===this.errsCount)throw new Error('add "trackErrors" to keyword definition');(0, m.resetErrorsCount)(this.gen,this.errsCount);}ok(e){this.allErrors||this.gen.if(e);}setParams(e,t){t?Object.assign(this.params,e):this.params=e;}block$data(e,t,r=d.nil){this.gen.block((()=>{this.check$data(e,r),t();}));}check$data(e=d.nil,t=d.nil){if(!this.$data)return;const{gen:r,schemaCode:o,schemaType:s,def:a}=this;r.if((0, d.or)(d._`${o} === undefined`,t)),e!==d.nil&&r.assign(e,!0),(s.length||a.validateSchema)&&(r.elseIf(this.invalid$data()),this.$dataError(),e!==d.nil&&r.assign(e,!1)),r.else();}invalid$data(){const{gen:e,schemaCode:t,schemaType:r,def:o,it:s}=this;return (0, d.or)(function(){if(r.length){if(!(t instanceof d.Name))throw new Error("ajv implementation error");const e=Array.isArray(r)?r:[r];return d._`${(0, n.checkDataTypes)(e,t,s.opts.strictNumbers,n.DataType.Wrong)}`}return d.nil}(),function(){if(o.validateSchema){const r=e.scopeValue("validate$data",{ref:o.validateSchema});return d._`!${r}(${t})`}return d.nil}())}subschema(e,t){const r=(0, l.getSubschema)(this.it,e);(0, l.extendSubschemaData)(r,this.it,e),(0, l.extendSubschemaMode)(r,e);const o={...this.it,...r,items:void 0,props:void 0};return v(o,t),o}mergeEvaluated(e,t){const{it:r,gen:o}=this;r.opts.unevaluated&&(!0!==r.props&&void 0!==e.props&&(r.props=p.mergeEvaluated.props(o,e.props,r.props,t)),!0!==r.items&&void 0!==e.items&&(r.items=p.mergeEvaluated.items(o,e.items,r.items,t)));}mergeValidEvaluated(e,t){const{it:r,gen:o}=this;if(r.opts.unevaluated&&(!0!==r.props||!0!==r.items))return o.if(t,(()=>this.mergeEvaluated(e,d.Name))),!0}}function C(e,t,r,o){const s=new j(e,r,t);"code"in r?r.code(s,o):s.$data&&r.validate?(0, c.funcKeywordCode)(s,r):"macro"in r?(0, c.macroKeywordCode)(s,r):(r.compile||r.validate)&&(0, c.funcKeywordCode)(s,r);}r.KeywordCxt=j;const O=/^\/(?:[^~]|~0|~1)*$/,x=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function T(e,{dataLevel:t,dataNames:r,dataPathArr:o}){let s,a;if(""===e)return u.default.rootData;if("/"===e[0]){if(!O.test(e))throw new Error(`Invalid JSON-pointer: ${e}`);s=e,a=u.default.rootData;}else {const n=x.exec(e);if(!n)throw new Error(`Invalid JSON-pointer: ${e}`);const i=+n[1];if(s=n[2],"#"===s){if(i>=t)throw new Error(c("property/index",i));return o[t-i]}if(i>t)throw new Error(c("data",i));if(a=r[t-i],!s)return a}let n=a;const i=s.split("/");for(const e of i)e&&(a=d._`${a}${(0, d.getProperty)((0, p.unescapeJsonPointer)(e))}`,n=d._`${n} && ${a}`);return n;function c(e,r){return `Cannot access ${e} ${r} levels up, current level is ${t}`}}r.getData=T;},{"../codegen":2,"../errors":4,"../names":6,"../resolve":8,"../util":10,"./applicability":11,"./boolSchema":12,"./dataType":13,"./defaults":14,"./keyword":16,"./subschema":17}],16:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.validateKeywordUsage=r.validSchemaType=r.funcKeywordCode=r.macroKeywordCode=void 0;const o=e("../codegen"),s=e("../names"),a=e("../../vocabularies/code"),n=e("../errors");function i(e){const{gen:t,data:r,it:s}=e;t.if(s.parentData,(()=>t.assign(r,o._`${s.parentData}[${s.parentDataProperty}]`)));}function c(e,t,r){if(void 0===r)throw new Error(`keyword "${t}" failed to compile`);return e.scopeValue("keyword","function"==typeof r?{ref:r}:{ref:r,code:(0, o.stringify)(r)})}r.macroKeywordCode=function(e,t){const{gen:r,keyword:s,schema:a,parentSchema:n,it:i}=e,l=t.macro.call(i.self,a,n,i),d=c(r,s,l);!1!==i.opts.validateSchema&&i.self.validateSchema(l,!0);const u=r.name("valid");e.subschema({schema:l,schemaPath:o.nil,errSchemaPath:`${i.errSchemaPath}/${s}`,topSchemaRef:d,compositeRule:!0},u),e.pass(u,(()=>e.error(!0)));},r.funcKeywordCode=function(e,t){var r;const{gen:l,keyword:d,schema:u,parentSchema:f,$data:p,it:m}=e;!function({schemaEnv:e},t){if(t.async&&!e.$async)throw new Error("async keyword in sync schema")}(m,t);const h=!p&&t.compile?t.compile.call(m.self,u,f,m):t.validate,y=c(l,d,h),v=l.let("valid");function g(r=(t.async?o._`await `:o.nil)){l.assign(v,o._`${r}${(0, a.callValidateCode)(e,y,m.opts.passContext?s.default.this:s.default.self,!("compile"in t&&!p||!1===t.schema))}`,t.modifying);}function $(e){var r;l.if((0, o.not)(null!==(r=t.valid)&&void 0!==r?r:v),e);}e.block$data(v,(function(){if(!1===t.errors)g(),t.modifying&&i(e),$((()=>e.error()));else {const r=t.async?function(){const e=l.let("ruleErrs",null);return l.try((()=>g(o._`await `)),(t=>l.assign(v,!1).if(o._`${t} instanceof ${m.ValidationError}`,(()=>l.assign(e,o._`${t}.errors`)),(()=>l.throw(t))))),e}():function(){const e=o._`${y}.errors`;return l.assign(e,null),g(o.nil),e}();t.modifying&&i(e),$((()=>function(e,t){const{gen:r}=e;r.if(o._`Array.isArray(${t})`,(()=>{r.assign(s.default.vErrors,o._`${s.default.vErrors} === null ? ${t} : ${s.default.vErrors}.concat(${t})`).assign(s.default.errors,o._`${s.default.vErrors}.length`),(0, n.extendErrors)(e);}),(()=>e.error()));}(e,r)));}})),e.ok(null!==(r=t.valid)&&void 0!==r?r:v);},r.validSchemaType=function(e,t,r=!1){return !t.length||t.some((t=>"array"===t?Array.isArray(e):"object"===t?e&&"object"==typeof e&&!Array.isArray(e):typeof e==t||r&&void 0===e))},r.validateKeywordUsage=function({schema:e,opts:t,self:r,errSchemaPath:o},s,a){if(Array.isArray(s.keyword)?!s.keyword.includes(a):s.keyword!==a)throw new Error("ajv implementation error");const n=s.dependencies;if(null==n?void 0:n.some((t=>!Object.prototype.hasOwnProperty.call(e,t))))throw new Error(`parent schema must have dependencies of ${a}: ${n.join(",")}`);if(s.validateSchema){if(!s.validateSchema(e[a])){const e=`keyword "${a}" value is invalid at path "${o}": `+r.errorsText(s.validateSchema.errors);if("log"!==t.validateSchema)throw new Error(e);r.logger.error(e);}}};},{"../../vocabularies/code":42,"../codegen":2,"../errors":4,"../names":6}],17:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.extendSubschemaMode=r.extendSubschemaData=r.getSubschema=void 0;const o=e("../codegen"),s=e("../util");r.getSubschema=function(e,{keyword:t,schemaProp:r,schema:a,schemaPath:n,errSchemaPath:i,topSchemaRef:c}){if(void 0!==t&&void 0!==a)throw new Error('both "keyword" and "schema" passed, only one allowed');if(void 0!==t){const a=e.schema[t];return void 0===r?{schema:a,schemaPath:o._`${e.schemaPath}${(0, o.getProperty)(t)}`,errSchemaPath:`${e.errSchemaPath}/${t}`}:{schema:a[r],schemaPath:o._`${e.schemaPath}${(0, o.getProperty)(t)}${(0, o.getProperty)(r)}`,errSchemaPath:`${e.errSchemaPath}/${t}/${(0, s.escapeFragment)(r)}`}}if(void 0!==a){if(void 0===n||void 0===i||void 0===c)throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');return {schema:a,schemaPath:n,topSchemaRef:c,errSchemaPath:i}}throw new Error('either "keyword" or "schema" must be passed')},r.extendSubschemaData=function(e,t,{dataProp:r,dataPropType:a,data:n,dataTypes:i,propertyName:c}){if(void 0!==n&&void 0!==r)throw new Error('both "data" and "dataProp" passed, only one allowed');const{gen:l}=t;if(void 0!==r){const{errorPath:n,dataPathArr:i,opts:c}=t;d(l.let("data",o._`${t.data}${(0, o.getProperty)(r)}`,!0)),e.errorPath=o.str`${n}${(0, s.getErrorPath)(r,a,c.jsPropertySyntax)}`,e.parentDataProperty=o._`${r}`,e.dataPathArr=[...i,e.parentDataProperty];}if(void 0!==n){d(n instanceof o.Name?n:l.let("data",n,!0)),void 0!==c&&(e.propertyName=c);}function d(r){e.data=r,e.dataLevel=t.dataLevel+1,e.dataTypes=[],t.definedProperties=new Set,e.parentData=t.data,e.dataNames=[...t.dataNames,r];}i&&(e.dataTypes=i);},r.extendSubschemaMode=function(e,{jtdDiscriminator:t,jtdMetadata:r,compositeRule:o,createErrors:s,allErrors:a}){void 0!==o&&(e.compositeRule=o),void 0!==s&&(e.createErrors=s),void 0!==a&&(e.allErrors=a),e.jtdDiscriminator=t,e.jtdMetadata=r;};},{"../codegen":2,"../util":10}],18:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.CodeGen=r.Name=r.nil=r.stringify=r.str=r._=r.KeywordCxt=void 0;var o=e("./compile/validate");Object.defineProperty(r,"KeywordCxt",{enumerable:!0,get(){return o.KeywordCxt}});var s=e("./compile/codegen");Object.defineProperty(r,"_",{enumerable:!0,get(){return s._}}),Object.defineProperty(r,"str",{enumerable:!0,get(){return s.str}}),Object.defineProperty(r,"stringify",{enumerable:!0,get(){return s.stringify}}),Object.defineProperty(r,"nil",{enumerable:!0,get(){return s.nil}}),Object.defineProperty(r,"Name",{enumerable:!0,get(){return s.Name}}),Object.defineProperty(r,"CodeGen",{enumerable:!0,get(){return s.CodeGen}});const a=e("./runtime/validation_error"),n=e("./compile/ref_error"),i=e("./compile/rules"),c=e("./compile"),l=e("./compile/codegen"),d=e("./compile/resolve"),u=e("./compile/validate/dataType"),f=e("./compile/util"),p=e("./refs/data.json"),m=e("./runtime/uri"),h=(e,t)=>new RegExp(e,t);h.code="new RegExp";const y=["removeAdditional","useDefaults","coerceTypes"],v=new Set(["validate","serialize","parse","wrapper","root","schema","keyword","pattern","formats","validate$data","func","obj","Error"]),g={errorDataPath:"",format:"`validateFormats: false` can be used instead.",nullable:'"nullable" keyword is supported by default.',jsonPointers:"Deprecated jsPropertySyntax can be used instead.",extendRefs:"Deprecated ignoreKeywordsWithRef can be used instead.",missingRefs:"Pass empty schema with $id that should be ignored to ajv.addSchema.",processCode:"Use option `code: {process: (code, schemaEnv: object) => string}`",sourceCode:"Use option `code: {source: true}`",strictDefaults:"It is default now, see option `strict`.",strictKeywords:"It is default now, see option `strict`.",uniqueItems:'"uniqueItems" keyword is always validated.',unknownFormats:"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",cache:"Map is used as cache, schema object as key.",serialize:"Map is used as cache, schema object as key.",ajvErrors:"It is default now."},$={ignoreKeywordsWithRef:"",jsPropertySyntax:"",unicode:'"minLength"/"maxLength" account for unicode characters by default.'};function _(e){var t,r,o,s,a,n,i,c,l,d,u,f,p,y,v,g,$,_,w,b,E,P,S,N,k;const j=e.strict,C=null===(t=e.code)||void 0===t?void 0:t.optimize,O=!0===C||void 0===C?1:C||0,x=null!==(o=null===(r=e.code)||void 0===r?void 0:r.regExp)&&void 0!==o?o:h,T=null!==(s=e.uriResolver)&&void 0!==s?s:m.default;return {strictSchema:null===(n=null!==(a=e.strictSchema)&&void 0!==a?a:j)||void 0===n||n,strictNumbers:null===(c=null!==(i=e.strictNumbers)&&void 0!==i?i:j)||void 0===c||c,strictTypes:null!==(d=null!==(l=e.strictTypes)&&void 0!==l?l:j)&&void 0!==d?d:"log",strictTuples:null!==(f=null!==(u=e.strictTuples)&&void 0!==u?u:j)&&void 0!==f?f:"log",strictRequired:null!==(y=null!==(p=e.strictRequired)&&void 0!==p?p:j)&&void 0!==y&&y,code:e.code?{...e.code,optimize:O,regExp:x}:{optimize:O,regExp:x},loopRequired:null!==(v=e.loopRequired)&&void 0!==v?v:200,loopEnum:null!==(g=e.loopEnum)&&void 0!==g?g:200,meta:null===($=e.meta)||void 0===$||$,messages:null===(_=e.messages)||void 0===_||_,inlineRefs:null===(w=e.inlineRefs)||void 0===w||w,schemaId:null!==(b=e.schemaId)&&void 0!==b?b:"$id",addUsedSchema:null===(E=e.addUsedSchema)||void 0===E||E,validateSchema:null===(P=e.validateSchema)||void 0===P||P,validateFormats:null===(S=e.validateFormats)||void 0===S||S,unicodeRegExp:null===(N=e.unicodeRegExp)||void 0===N||N,int32range:null===(k=e.int32range)||void 0===k||k,uriResolver:T}}class w{constructor(e={}){this.schemas={},this.refs={},this.formats={},this._compilations=new Set,this._loading={},this._cache=new Map,e=this.opts={...e,..._(e)};const{es5:t,lines:r}=this.opts.code;this.scope=new l.ValueScope({scope:{},prefixes:v,es5:t,lines:r}),this.logger=function(e){if(!1===e)return j;if(void 0===e)return console;if(e.log&&e.warn&&e.error)return e;throw new Error("logger must implement log, warn and error methods")}(e.logger);const o=e.validateFormats;e.validateFormats=!1,this.RULES=(0, i.getRules)(),b.call(this,g,e,"NOT SUPPORTED"),b.call(this,$,e,"DEPRECATED","warn"),this._metaOpts=k.call(this),e.formats&&S.call(this),this._addVocabularies(),this._addDefaultMetaSchema(),e.keywords&&N.call(this,e.keywords),"object"==typeof e.meta&&this.addMetaSchema(e.meta),P.call(this),e.validateFormats=o;}_addVocabularies(){this.addKeyword("$async");}_addDefaultMetaSchema(){const{$data:e,meta:t,schemaId:r}=this.opts;let o=p;"id"===r&&(o={...p},o.id=o.$id,delete o.$id),t&&e&&this.addMetaSchema(o,o[r],!1);}defaultMeta(){const{meta:e,schemaId:t}=this.opts;return this.opts.defaultMeta="object"==typeof e?e[t]||e:void 0}validate(e,t){let r;if("string"==typeof e){if(r=this.getSchema(e),!r)throw new Error(`no schema with key or ref "${e}"`)}else r=this.compile(e);const o=r(t);return "$async"in r||(this.errors=r.errors),o}compile(e,t){const r=this._addSchema(e,t);return r.validate||this._compileSchemaEnv(r)}compileAsync(e,t){if("function"!=typeof this.opts.loadSchema)throw new Error("options.loadSchema should be a function");const{loadSchema:r}=this.opts;return o.call(this,e,t);async function o(e,t){await s.call(this,e.$schema);const r=this._addSchema(e,t);return r.validate||a.call(this,r)}async function s(e){e&&!this.getSchema(e)&&await o.call(this,{$ref:e},!0);}async function a(e){try{return this._compileSchemaEnv(e)}catch(t){if(!(t instanceof n.default))throw t;return i.call(this,t),await c.call(this,t.missingSchema),a.call(this,e)}}function i({missingSchema:e,missingRef:t}){if(this.refs[e])throw new Error(`AnySchema ${e} is loaded but ${t} cannot be resolved`)}async function c(e){const r=await l.call(this,e);this.refs[e]||await s.call(this,r.$schema),this.refs[e]||this.addSchema(r,e,t);}async function l(e){const t=this._loading[e];if(t)return t;try{return await(this._loading[e]=r(e))}finally{delete this._loading[e];}}}addSchema(e,t,r,o=this.opts.validateSchema){if(Array.isArray(e)){for(const t of e)this.addSchema(t,void 0,r,o);return this}let s;if("object"==typeof e){const{schemaId:t}=this.opts;if(s=e[t],void 0!==s&&"string"!=typeof s)throw new Error(`schema ${t} must be string`)}return t=(0, d.normalizeId)(t||s),this._checkUnique(t),this.schemas[t]=this._addSchema(e,r,t,o,!0),this}addMetaSchema(e,t,r=this.opts.validateSchema){return this.addSchema(e,t,!0,r),this}validateSchema(e,t){if("boolean"==typeof e)return !0;let r;if(r=e.$schema,void 0!==r&&"string"!=typeof r)throw new Error("$schema must be a string");if(r=r||this.opts.defaultMeta||this.defaultMeta(),!r)return this.logger.warn("meta-schema not available"),this.errors=null,!0;const o=this.validate(r,e);if(!o&&t){const e="schema is invalid: "+this.errorsText();if("log"!==this.opts.validateSchema)throw new Error(e);this.logger.error(e);}return o}getSchema(e){let t;for(;"string"==typeof(t=E.call(this,e));)e=t;if(void 0===t){const{schemaId:r}=this.opts,o=new c.SchemaEnv({schema:{},schemaId:r});if(t=c.resolveSchema.call(this,o,e),!t)return;this.refs[e]=t;}return t.validate||this._compileSchemaEnv(t)}removeSchema(e){if(e instanceof RegExp)return this._removeAllSchemas(this.schemas,e),this._removeAllSchemas(this.refs,e),this;switch(typeof e){case"undefined":return this._removeAllSchemas(this.schemas),this._removeAllSchemas(this.refs),this._cache.clear(),this;case"string":{const t=E.call(this,e);return "object"==typeof t&&this._cache.delete(t.schema),delete this.schemas[e],delete this.refs[e],this}case"object":{this._cache.delete(e);let t=e[this.opts.schemaId];return t&&(t=(0, d.normalizeId)(t),delete this.schemas[t],delete this.refs[t]),this}default:throw new Error("ajv.removeSchema: invalid parameter")}}addVocabulary(e){for(const t of e)this.addKeyword(t);return this}addKeyword(e,t){let r;if("string"==typeof e)r=e,"object"==typeof t&&(this.logger.warn("these parameters are deprecated, see docs for addKeyword"),t.keyword=r);else {if("object"!=typeof e||void 0!==t)throw new Error("invalid addKeywords parameters");if(r=(t=e).keyword,Array.isArray(r)&&!r.length)throw new Error("addKeywords: keyword must be string or non-empty array")}if(O.call(this,r,t),!t)return (0, f.eachItem)(r,(e=>x.call(this,e))),this;I.call(this,t);const o={...t,type:(0, u.getJSONTypes)(t.type),schemaType:(0, u.getJSONTypes)(t.schemaType)};return (0, f.eachItem)(r,0===o.type.length?e=>x.call(this,e,o):e=>o.type.forEach((t=>x.call(this,e,o,t)))),this}getKeyword(e){const t=this.RULES.all[e];return "object"==typeof t?t.definition:!!t}removeKeyword(e){const{RULES:t}=this;delete t.keywords[e],delete t.all[e];for(const r of t.rules){const t=r.rules.findIndex((t=>t.keyword===e));t>=0&&r.rules.splice(t,1);}return this}addFormat(e,t){return "string"==typeof t&&(t=new RegExp(t)),this.formats[e]=t,this}errorsText(e=this.errors,{separator:t=", ",dataVar:r="data"}={}){return e&&0!==e.length?e.map((e=>`${r}${e.instancePath} ${e.message}`)).reduce(((e,r)=>e+t+r)):"No errors"}$dataMetaSchema(e,t){const r=this.RULES.all;e=JSON.parse(JSON.stringify(e));for(const o of t){const t=o.split("/").slice(1);let s=e;for(const e of t)s=s[e];for(const e in r){const t=r[e];if("object"!=typeof t)continue;const{$data:o}=t.definition,a=s[e];o&&a&&(s[e]=D(a));}}return e}_removeAllSchemas(e,t){for(const r in e){const o=e[r];t&&!t.test(r)||("string"==typeof o?delete e[r]:o&&!o.meta&&(this._cache.delete(o.schema),delete e[r]));}}_addSchema(e,t,r,o=this.opts.validateSchema,s=this.opts.addUsedSchema){let a;const{schemaId:n}=this.opts;if("object"==typeof e)a=e[n];else {if(this.opts.jtd)throw new Error("schema must be object");if("boolean"!=typeof e)throw new Error("schema must be object or boolean")}let i=this._cache.get(e);if(void 0!==i)return i;r=(0, d.normalizeId)(a||r);const l=d.getSchemaRefs.call(this,e,r);return i=new c.SchemaEnv({schema:e,schemaId:n,meta:t,baseId:r,localRefs:l}),this._cache.set(i.schema,i),s&&!r.startsWith("#")&&(r&&this._checkUnique(r),this.refs[r]=i),o&&this.validateSchema(e,!0),i}_checkUnique(e){if(this.schemas[e]||this.refs[e])throw new Error(`schema with key or id "${e}" already exists`)}_compileSchemaEnv(e){if(e.meta?this._compileMetaSchema(e):c.compileSchema.call(this,e),!e.validate)throw new Error("ajv implementation error");return e.validate}_compileMetaSchema(e){const t=this.opts;this.opts=this._metaOpts;try{c.compileSchema.call(this,e);}finally{this.opts=t;}}}function b(e,t,r,o="error"){for(const s in e){const a=s;a in t&&this.logger[o](`${r}: option ${s}. ${e[a]}`);}}function E(e){return e=(0, d.normalizeId)(e),this.schemas[e]||this.refs[e]}function P(){const e=this.opts.schemas;if(e)if(Array.isArray(e))this.addSchema(e);else for(const t in e)this.addSchema(e[t],t);}function S(){for(const e in this.opts.formats){const t=this.opts.formats[e];t&&this.addFormat(e,t);}}function N(e){if(Array.isArray(e))this.addVocabulary(e);else {this.logger.warn("keywords option as map is deprecated, pass array");for(const t in e){const r=e[t];r.keyword||(r.keyword=t),this.addKeyword(r);}}}function k(){const e={...this.opts};for(const t of y)delete e[t];return e}r.default=w,w.ValidationError=a.default,w.MissingRefError=n.default;const j={log(){},warn(){},error(){}};const C=/^[a-z_$][a-z0-9_$:-]*$/i;function O(e,t){const{RULES:r}=this;if((0, f.eachItem)(e,(e=>{if(r.keywords[e])throw new Error(`Keyword ${e} is already defined`);if(!C.test(e))throw new Error(`Keyword ${e} has invalid name`)})),t&&t.$data&&!("code"in t)&&!("validate"in t))throw new Error('$data keyword must have "code" or "validate" function')}function x(e,t,r){var o;const s=null==t?void 0:t.post;if(r&&s)throw new Error('keyword with "post" flag cannot have "type"');const{RULES:a}=this;let n=s?a.post:a.rules.find((({type:e})=>e===r));if(n||(n={type:r,rules:[]},a.rules.push(n)),a.keywords[e]=!0,!t)return;const i={keyword:e,definition:{...t,type:(0, u.getJSONTypes)(t.type),schemaType:(0, u.getJSONTypes)(t.schemaType)}};t.before?T.call(this,n,i,t.before):n.rules.push(i),a.all[e]=i,null===(o=t.implements)||void 0===o||o.forEach((e=>this.addKeyword(e)));}function T(e,t,r){const o=e.rules.findIndex((e=>e.keyword===r));o>=0?e.rules.splice(o,0,t):(e.rules.push(t),this.logger.warn(`rule ${r} is not defined`));}function I(e){let{metaSchema:t}=e;void 0!==t&&(e.$data&&this.opts.$data&&(t=D(t)),e.validateSchema=this.compile(t,!0));}const R={$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"};function D(e){return {anyOf:[e,R]}}},{"./compile":5,"./compile/codegen":2,"./compile/ref_error":7,"./compile/resolve":8,"./compile/rules":9,"./compile/util":10,"./compile/validate":15,"./compile/validate/dataType":13,"./refs/data.json":19,"./runtime/uri":23,"./runtime/validation_error":24}],19:[function(e,t,r){t.exports={$id:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",description:"Meta-schema for $data reference (JSON AnySchema extension proposal)",type:"object",required:["$data"],properties:{$data:{type:"string",anyOf:[{format:"relative-json-pointer"},{format:"json-pointer"}]}},additionalProperties:!1};},{}],20:[function(e,t,r){t.exports={$schema:"http://json-schema.org/draft-07/schema#",$id:"http://json-schema.org/draft-07/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0};},{}],21:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("fast-deep-equal");o.code='require("ajv/dist/runtime/equal").default',r.default=o;},{"fast-deep-equal":63}],22:[function(e,t,r){function o(e){const t=e.length;let r,o=0,s=0;for(;s<t;)o++,r=e.charCodeAt(s++),r>=55296&&r<=56319&&s<t&&(r=e.charCodeAt(s),56320==(64512&r)&&s++);return o}Object.defineProperty(r,"__esModule",{value:!0}),r.default=o,o.code='require("ajv/dist/runtime/ucs2length").default';},{}],23:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("uri-js");o.code='require("ajv/dist/runtime/uri").default',r.default=o;},{"uri-js":65}],24:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});class o extends Error{constructor(e){super("validation failed"),this.errors=e,this.ajv=this.validation=!0;}}r.default=o;},{}],25:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.validateAdditionalItems=void 0;const o=e("../../compile/codegen"),s=e("../../compile/util"),a={keyword:"additionalItems",type:"array",schemaType:["boolean","object"],before:"uniqueItems",error:{message({params:{len:e}}){return o.str`must NOT have more than ${e} items`},params({params:{len:e}}){return o._`{limit: ${e}}`}},code(e){const{parentSchema:t,it:r}=e,{items:o}=t;Array.isArray(o)?n(e,o):(0, s.checkStrictMode)(r,'"additionalItems" is ignored when "items" is not an array of schemas');}};function n(e,t){const{gen:r,schema:a,data:n,keyword:i,it:c}=e;c.items=!0;const l=r.const("len",o._`${n}.length`);if(!1===a)e.setParams({len:t.length}),e.pass(o._`${l} <= ${t.length}`);else if("object"==typeof a&&!(0, s.alwaysValidSchema)(c,a)){const a=r.var("valid",o._`${l} <= ${t.length}`);r.if((0, o.not)(a),(()=>function(a){r.forRange("i",t.length,l,(t=>{e.subschema({keyword:i,dataProp:t,dataPropType:s.Type.Num},a),c.allErrors||r.if((0, o.not)(a),(()=>r.break()));}));}(a))),e.ok(a);}}r.validateAdditionalItems=n,r.default=a;},{"../../compile/codegen":2,"../../compile/util":10}],26:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../code"),s=e("../../compile/codegen"),a=e("../../compile/names"),n=e("../../compile/util");r.default={keyword:"additionalProperties",type:["object"],schemaType:["boolean","object"],allowUndefined:!0,trackErrors:!0,error:{message:"must NOT have additional properties",params({params:e}){return s._`{additionalProperty: ${e.additionalProperty}}`}},code(e){const{gen:t,schema:r,parentSchema:i,data:c,errsCount:l,it:d}=e;if(!l)throw new Error("ajv implementation error");const{allErrors:u,opts:f}=d;if(d.props=!0,"all"!==f.removeAdditional&&(0, n.alwaysValidSchema)(d,r))return;const p=(0, o.allSchemaProperties)(i.properties),m=(0, o.allSchemaProperties)(i.patternProperties);function h(e){t.code(s._`delete ${c}[${e}]`);}function y(o){if("all"===f.removeAdditional||f.removeAdditional&&!1===r)h(o);else {if(!1===r)return e.setParams({additionalProperty:o}),e.error(),void(u||t.break());if("object"==typeof r&&!(0, n.alwaysValidSchema)(d,r)){const r=t.name("valid");"failing"===f.removeAdditional?(v(o,r,!1),t.if((0, s.not)(r),(()=>{e.reset(),h(o);}))):(v(o,r),u||t.if((0, s.not)(r),(()=>t.break())));}}}function v(t,r,o){const s={keyword:"additionalProperties",dataProp:t,dataPropType:n.Type.Str};!1===o&&Object.assign(s,{compositeRule:!0,createErrors:!1,allErrors:!1}),e.subschema(s,r);}t.forIn("key",c,(r=>{p.length||m.length?t.if(function(r){let a;if(p.length>8){const e=(0, n.schemaRefOrVal)(d,i.properties,"properties");a=(0, o.isOwnProperty)(t,e,r);}else a=p.length?(0, s.or)(...p.map((e=>s._`${r} === ${e}`))):s.nil;return m.length&&(a=(0, s.or)(a,...m.map((t=>s._`${(0, o.usePattern)(e,t)}.test(${r})`)))),(0, s.not)(a)}(r),(()=>y(r))):y(r);})),e.ok(s._`${l} === ${a.default.errors}`);}};},{"../../compile/codegen":2,"../../compile/names":6,"../../compile/util":10,"../code":42}],27:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/util");r.default={keyword:"allOf",schemaType:"array",code(e){const{gen:t,schema:r,it:s}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");const a=t.name("valid");r.forEach(((t,r)=>{if((0, o.alwaysValidSchema)(s,t))return;const n=e.subschema({keyword:"allOf",schemaProp:r},a);e.ok(a),e.mergeEvaluated(n);}));}};},{"../../compile/util":10}],28:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../code");r.default={keyword:"anyOf",schemaType:"array",trackErrors:!0,code:o.validateUnion,error:{message:"must match a schema in anyOf"}};},{"../code":42}],29:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen"),s=e("../../compile/util");r.default={keyword:"contains",type:"array",schemaType:["object","boolean"],before:"uniqueItems",trackErrors:!0,error:{message({params:{min:e,max:t}}){return void 0===t?o.str`must contain at least ${e} valid item(s)`:o.str`must contain at least ${e} and no more than ${t} valid item(s)`},params({params:{min:e,max:t}}){return void 0===t?o._`{minContains: ${e}}`:o._`{minContains: ${e}, maxContains: ${t}}`}},code(e){const{gen:t,schema:r,parentSchema:a,data:n,it:i}=e;let c,l;const{minContains:d,maxContains:u}=a;i.opts.next?(c=void 0===d?1:d,l=u):c=1;const f=t.const("len",o._`${n}.length`);if(e.setParams({min:c,max:l}),void 0===l&&0===c)return void(0, s.checkStrictMode)(i,'"minContains" == 0 without "maxContains": "contains" keyword ignored');if(void 0!==l&&c>l)return (0, s.checkStrictMode)(i,'"minContains" > "maxContains" is always invalid'),void e.fail();if((0, s.alwaysValidSchema)(i,r)){let t=o._`${f} >= ${c}`;return void 0!==l&&(t=o._`${t} && ${f} <= ${l}`),void e.pass(t)}i.items=!0;const p=t.name("valid");function m(){const e=t.name("_valid"),r=t.let("count",0);h(e,(()=>t.if(e,(()=>function(e){t.code(o._`${e}++`),void 0===l?t.if(o._`${e} >= ${c}`,(()=>t.assign(p,!0).break())):(t.if(o._`${e} > ${l}`,(()=>t.assign(p,!1).break())),1===c?t.assign(p,!0):t.if(o._`${e} >= ${c}`,(()=>t.assign(p,!0))));}(r)))));}function h(r,o){t.forRange("i",0,f,(t=>{e.subschema({keyword:"contains",dataProp:t,dataPropType:s.Type.Num,compositeRule:!0},r),o();}));}void 0===l&&1===c?h(p,(()=>t.if(p,(()=>t.break())))):0===c?(t.let(p,!0),void 0!==l&&t.if(o._`${n}.length > 0`,m)):(t.let(p,!1),m()),e.result(p,(()=>e.reset()));}};},{"../../compile/codegen":2,"../../compile/util":10}],30:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.validateSchemaDeps=r.validatePropertyDeps=r.error=void 0;const o=e("../../compile/codegen"),s=e("../../compile/util"),a=e("../code");r.error={message({params:{property:e,depsCount:t,deps:r}}){return o.str`must have ${1===t?"property":"properties"} ${r} when property ${e} is present`},params({params:{property:e,depsCount:t,deps:r,missingProperty:s}}){return o._`{property: ${e},
    missingProperty: ${s},
    depsCount: ${t},
    deps: ${r}}`}};const n={keyword:"dependencies",type:"object",schemaType:"object",error:r.error,code(e){const[t,r]=function({schema:e}){const t={},r={};for(const o in e){if("__proto__"===o)continue;(Array.isArray(e[o])?t:r)[o]=e[o];}return [t,r]}(e);i(e,t),c(e,r);}};function i(e,t=e.schema){const{gen:r,data:s,it:n}=e;if(0===Object.keys(t).length)return;const i=r.let("missing");for(const c in t){const l=t[c];if(0===l.length)continue;const d=(0, a.propertyInData)(r,s,c,n.opts.ownProperties);e.setParams({property:c,depsCount:l.length,deps:l.join(", ")}),n.allErrors?r.if(d,(()=>{for(const t of l)(0, a.checkReportMissingProp)(e,t);})):(r.if(o._`${d} && (${(0, a.checkMissingProp)(e,l,i)})`),(0, a.reportMissingProp)(e,i),r.else());}}function c(e,t=e.schema){const{gen:r,data:o,keyword:n,it:i}=e,c=r.name("valid");for(const l in t)(0, s.alwaysValidSchema)(i,t[l])||(r.if((0, a.propertyInData)(r,o,l,i.opts.ownProperties),(()=>{const t=e.subschema({keyword:n,schemaProp:l},c);e.mergeValidEvaluated(t,c);}),(()=>r.var(c,!0))),e.ok(c));}r.validatePropertyDeps=i,r.validateSchemaDeps=c,r.default=n;},{"../../compile/codegen":2,"../../compile/util":10,"../code":42}],31:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen"),s=e("../../compile/util");function a(e,t){const r=e.schema[t];return void 0!==r&&!(0, s.alwaysValidSchema)(e,r)}r.default={keyword:"if",schemaType:["object","boolean"],trackErrors:!0,error:{message({params:e}){return o.str`must match "${e.ifClause}" schema`},params({params:e}){return o._`{failingKeyword: ${e.ifClause}}`}},code(e){const{gen:t,parentSchema:r,it:n}=e;void 0===r.then&&void 0===r.else&&(0, s.checkStrictMode)(n,'"if" without "then" and "else" is ignored');const i=a(n,"then"),c=a(n,"else");if(!i&&!c)return;const l=t.let("valid",!0),d=t.name("_valid");if(function(){const t=e.subschema({keyword:"if",compositeRule:!0,createErrors:!1,allErrors:!1},d);e.mergeEvaluated(t);}(),e.reset(),i&&c){const r=t.let("ifClause");e.setParams({ifClause:r}),t.if(d,u("then",r),u("else",r));}else i?t.if(d,u("then")):t.if((0, o.not)(d),u("else"));function u(r,s){return ()=>{const a=e.subschema({keyword:r},d);t.assign(l,d),e.mergeValidEvaluated(a,l),s?t.assign(s,o._`${r}`):e.setParams({ifClause:r});}}e.pass(l,(()=>e.error(!0)));}};},{"../../compile/codegen":2,"../../compile/util":10}],32:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("./additionalItems"),s=e("./prefixItems"),a=e("./items"),n=e("./items2020"),i=e("./contains"),c=e("./dependencies"),l=e("./propertyNames"),d=e("./additionalProperties"),u=e("./properties"),f=e("./patternProperties"),p=e("./not"),m=e("./anyOf"),h=e("./oneOf"),y=e("./allOf"),v=e("./if"),g=e("./thenElse");r.default=function(e=!1){const t=[p.default,m.default,h.default,y.default,v.default,g.default,l.default,d.default,c.default,u.default,f.default];return e?t.push(s.default,n.default):t.push(o.default,a.default),t.push(i.default),t};},{"./additionalItems":25,"./additionalProperties":26,"./allOf":27,"./anyOf":28,"./contains":29,"./dependencies":30,"./if":31,"./items":33,"./items2020":34,"./not":35,"./oneOf":36,"./patternProperties":37,"./prefixItems":38,"./properties":39,"./propertyNames":40,"./thenElse":41}],33:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.validateTuple=void 0;const o=e("../../compile/codegen"),s=e("../../compile/util"),a=e("../code"),n={keyword:"items",type:"array",schemaType:["object","array","boolean"],before:"uniqueItems",code(e){const{schema:t,it:r}=e;if(Array.isArray(t))return i(e,"additionalItems",t);r.items=!0,(0, s.alwaysValidSchema)(r,t)||e.ok((0, a.validateArray)(e));}};function i(e,t,r=e.schema){const{gen:a,parentSchema:n,data:i,keyword:c,it:l}=e;!function(e){const{opts:o,errSchemaPath:a}=l,n=r.length,i=n===e.minItems&&(n===e.maxItems||!1===e[t]);if(o.strictTuples&&!i){(0, s.checkStrictMode)(l,`"${c}" is ${n}-tuple, but minItems or maxItems/${t} are not specified or different at path "${a}"`,o.strictTuples);}}(n),l.opts.unevaluated&&r.length&&!0!==l.items&&(l.items=s.mergeEvaluated.items(a,r.length,l.items));const d=a.name("valid"),u=a.const("len",o._`${i}.length`);r.forEach(((t,r)=>{(0, s.alwaysValidSchema)(l,t)||(a.if(o._`${u} > ${r}`,(()=>e.subschema({keyword:c,schemaProp:r,dataProp:r},d))),e.ok(d));}));}r.validateTuple=i,r.default=n;},{"../../compile/codegen":2,"../../compile/util":10,"../code":42}],34:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen"),s=e("../../compile/util"),a=e("../code"),n=e("./additionalItems");r.default={keyword:"items",type:"array",schemaType:["object","boolean"],before:"uniqueItems",error:{message({params:{len:e}}){return o.str`must NOT have more than ${e} items`},params({params:{len:e}}){return o._`{limit: ${e}}`}},code(e){const{schema:t,parentSchema:r,it:o}=e,{prefixItems:i}=r;o.items=!0,(0, s.alwaysValidSchema)(o,t)||(i?(0, n.validateAdditionalItems)(e,i):e.ok((0, a.validateArray)(e)));}};},{"../../compile/codegen":2,"../../compile/util":10,"../code":42,"./additionalItems":25}],35:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/util");r.default={keyword:"not",schemaType:["object","boolean"],trackErrors:!0,code(e){const{gen:t,schema:r,it:s}=e;if((0, o.alwaysValidSchema)(s,r))return void e.fail();const a=t.name("valid");e.subschema({keyword:"not",compositeRule:!0,createErrors:!1,allErrors:!1},a),e.failResult(a,(()=>e.reset()),(()=>e.error()));},error:{message:"must NOT be valid"}};},{"../../compile/util":10}],36:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen"),s=e("../../compile/util");r.default={keyword:"oneOf",schemaType:"array",trackErrors:!0,error:{message:"must match exactly one schema in oneOf",params({params:e}){return o._`{passingSchemas: ${e.passing}}`}},code(e){const{gen:t,schema:r,parentSchema:a,it:n}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");if(n.opts.discriminator&&a.discriminator)return;const i=r,c=t.let("valid",!1),l=t.let("passing",null),d=t.name("_valid");e.setParams({passing:l}),t.block((function(){i.forEach(((r,a)=>{let i;(0, s.alwaysValidSchema)(n,r)?t.var(d,!0):i=e.subschema({keyword:"oneOf",schemaProp:a,compositeRule:!0},d),a>0&&t.if(o._`${d} && ${c}`).assign(c,!1).assign(l,o._`[${l}, ${a}]`).else(),t.if(d,(()=>{t.assign(c,!0),t.assign(l,a),i&&e.mergeEvaluated(i,o.Name);}));}));})),e.result(c,(()=>e.reset()),(()=>e.error(!0)));}};},{"../../compile/codegen":2,"../../compile/util":10}],37:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../code"),s=e("../../compile/codegen"),a=e("../../compile/util"),n=e("../../compile/util");r.default={keyword:"patternProperties",type:"object",schemaType:"object",code(e){const{gen:t,schema:r,data:i,parentSchema:c,it:l}=e,{opts:d}=l,u=(0, o.allSchemaProperties)(r),f=u.filter((e=>(0, a.alwaysValidSchema)(l,r[e])));if(0===u.length||f.length===u.length&&(!l.opts.unevaluated||!0===l.props))return;const p=d.strictSchema&&!d.allowMatchingProperties&&c.properties,m=t.name("valid");!0===l.props||l.props instanceof s.Name||(l.props=(0, n.evaluatedPropsToName)(t,l.props));const{props:h}=l;function y(e){for(const t in p)new RegExp(e).test(t)&&(0, a.checkStrictMode)(l,`property ${t} matches pattern ${e} (use allowMatchingProperties)`);}function v(r){t.forIn("key",i,(a=>{t.if(s._`${(0, o.usePattern)(e,r)}.test(${a})`,(()=>{const o=f.includes(r);o||e.subschema({keyword:"patternProperties",schemaProp:r,dataProp:a,dataPropType:n.Type.Str},m),l.opts.unevaluated&&!0!==h?t.assign(s._`${h}[${a}]`,!0):o||l.allErrors||t.if((0, s.not)(m),(()=>t.break()));}));}));}!function(){for(const e of u)p&&y(e),l.allErrors?v(e):(t.var(m,!0),v(e),t.if(m));}();}};},{"../../compile/codegen":2,"../../compile/util":10,"../code":42}],38:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("./items");r.default={keyword:"prefixItems",type:"array",schemaType:["array"],before:"uniqueItems",code(e){return (0, o.validateTuple)(e,"items")}};},{"./items":33}],39:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/validate"),s=e("../code"),a=e("../../compile/util"),n=e("./additionalProperties");r.default={keyword:"properties",type:"object",schemaType:"object",code(e){const{gen:t,schema:r,parentSchema:i,data:c,it:l}=e;"all"===l.opts.removeAdditional&&void 0===i.additionalProperties&&n.default.code(new o.KeywordCxt(l,n.default,"additionalProperties"));const d=(0, s.allSchemaProperties)(r);for(const e of d)l.definedProperties.add(e);l.opts.unevaluated&&d.length&&!0!==l.props&&(l.props=a.mergeEvaluated.props(t,(0, a.toHash)(d),l.props));const u=d.filter((e=>!(0, a.alwaysValidSchema)(l,r[e])));if(0===u.length)return;const f=t.name("valid");for(const r of u)p(r)?m(r):(t.if((0, s.propertyInData)(t,c,r,l.opts.ownProperties)),m(r),l.allErrors||t.else().var(f,!0),t.endIf()),e.it.definedProperties.add(r),e.ok(f);function p(e){return l.opts.useDefaults&&!l.compositeRule&&void 0!==r[e].default}function m(t){e.subschema({keyword:"properties",schemaProp:t,dataProp:t},f);}}};},{"../../compile/util":10,"../../compile/validate":15,"../code":42,"./additionalProperties":26}],40:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen"),s=e("../../compile/util");r.default={keyword:"propertyNames",type:"object",schemaType:["object","boolean"],error:{message:"property name must be valid",params({params:e}){return o._`{propertyName: ${e.propertyName}}`}},code(e){const{gen:t,schema:r,data:a,it:n}=e;if((0, s.alwaysValidSchema)(n,r))return;const i=t.name("valid");t.forIn("key",a,(r=>{e.setParams({propertyName:r}),e.subschema({keyword:"propertyNames",data:r,dataTypes:["string"],propertyName:r,compositeRule:!0},i),t.if((0, o.not)(i),(()=>{e.error(!0),n.allErrors||t.break();}));})),e.ok(i);}};},{"../../compile/codegen":2,"../../compile/util":10}],41:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/util");r.default={keyword:["then","else"],schemaType:["object","boolean"],code({keyword:e,parentSchema:t,it:r}){void 0===t.if&&(0, o.checkStrictMode)(r,`"${e}" without "if" is ignored`);}};},{"../../compile/util":10}],42:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.validateUnion=r.validateArray=r.usePattern=r.callValidateCode=r.schemaProperties=r.allSchemaProperties=r.noPropertyInData=r.propertyInData=r.isOwnProperty=r.hasPropFunc=r.reportMissingProp=r.checkMissingProp=r.checkReportMissingProp=void 0;const o=e("../compile/codegen"),s=e("../compile/util"),a=e("../compile/names"),n=e("../compile/util");function i(e){return e.scopeValue("func",{ref:Object.prototype.hasOwnProperty,code:o._`Object.prototype.hasOwnProperty`})}function c(e,t,r){return o._`${i(e)}.call(${t}, ${r})`}function l(e,t,r,s){const a=o._`${t}${(0, o.getProperty)(r)} === undefined`;return s?(0, o.or)(a,(0, o.not)(c(e,t,r))):a}function d(e){return e?Object.keys(e).filter((e=>"__proto__"!==e)):[]}r.checkReportMissingProp=function(e,t){const{gen:r,data:s,it:a}=e;r.if(l(r,s,t,a.opts.ownProperties),(()=>{e.setParams({missingProperty:o._`${t}`},!0),e.error();}));},r.checkMissingProp=function({gen:e,data:t,it:{opts:r}},s,a){return (0, o.or)(...s.map((s=>(0, o.and)(l(e,t,s,r.ownProperties),o._`${a} = ${s}`))))},r.reportMissingProp=function(e,t){e.setParams({missingProperty:t},!0),e.error();},r.hasPropFunc=i,r.isOwnProperty=c,r.propertyInData=function(e,t,r,s){const a=o._`${t}${(0, o.getProperty)(r)} !== undefined`;return s?o._`${a} && ${c(e,t,r)}`:a},r.noPropertyInData=l,r.allSchemaProperties=d,r.schemaProperties=function(e,t){return d(t).filter((r=>!(0, s.alwaysValidSchema)(e,t[r])))},r.callValidateCode=function({schemaCode:e,data:t,it:{gen:r,topSchemaRef:s,schemaPath:n,errorPath:i},it:c},l,d,u){const f=u?o._`${e}, ${t}, ${s}${n}`:t,p=[[a.default.instancePath,(0, o.strConcat)(a.default.instancePath,i)],[a.default.parentData,c.parentData],[a.default.parentDataProperty,c.parentDataProperty],[a.default.rootData,a.default.rootData]];c.opts.dynamicRef&&p.push([a.default.dynamicAnchors,a.default.dynamicAnchors]);const m=o._`${f}, ${r.object(...p)}`;return d!==o.nil?o._`${l}.call(${d}, ${m})`:o._`${l}(${m})`};const u=o._`new RegExp`;r.usePattern=function({gen:e,it:{opts:t}},r){const s=t.unicodeRegExp?"u":"",{regExp:a}=t.code,i=a(r,s);return e.scopeValue("pattern",{key:i.toString(),ref:i,code:o._`${"new RegExp"===a.code?u:(0, n.useFunc)(e,a)}(${r}, ${s})`})},r.validateArray=function(e){const{gen:t,data:r,keyword:a,it:n}=e,i=t.name("valid");if(n.allErrors){const e=t.let("valid",!0);return c((()=>t.assign(e,!1))),e}return t.var(i,!0),c((()=>t.break())),i;function c(n){const c=t.const("len",o._`${r}.length`);t.forRange("i",0,c,(r=>{e.subschema({keyword:a,dataProp:r,dataPropType:s.Type.Num},i),t.if((0, o.not)(i),n);}));}},r.validateUnion=function(e){const{gen:t,schema:r,keyword:a,it:n}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");if(r.some((e=>(0, s.alwaysValidSchema)(n,e)))&&!n.opts.unevaluated)return;const i=t.let("valid",!1),c=t.name("_valid");t.block((()=>r.forEach(((r,s)=>{const n=e.subschema({keyword:a,schemaProp:s,compositeRule:!0},c);t.assign(i,o._`${i} || ${c}`);e.mergeValidEvaluated(n,c)||t.if((0, o.not)(i));})))),e.result(i,(()=>e.reset()),(()=>e.error(!0)));};},{"../compile/codegen":2,"../compile/names":6,"../compile/util":10}],43:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});r.default={keyword:"id",code(){throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID')}};},{}],44:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("./id"),s=e("./ref");r.default=["$schema","$id","$defs","$vocabulary",{keyword:"$comment"},"definitions",o.default,s.default];},{"./id":43,"./ref":45}],45:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.callRef=r.getValidate=void 0;const o=e("../../compile/ref_error"),s=e("../code"),a=e("../../compile/codegen"),n=e("../../compile/names"),i=e("../../compile"),c=e("../../compile/util"),l={keyword:"$ref",schemaType:"string",code(e){const{gen:t,schema:r,it:s}=e,{baseId:n,schemaEnv:c,validateName:l,opts:f,self:p}=s,{root:m}=c;if(("#"===r||"#/"===r)&&n===m.baseId)return function(){if(c===m)return u(e,l,c,c.$async);const r=t.scopeValue("root",{ref:m});return u(e,a._`${r}.validate`,m,m.$async)}();const h=i.resolveRef.call(p,m,n,r);if(void 0===h)throw new o.default(s.opts.uriResolver,n,r);return h instanceof i.SchemaEnv?function(t){const r=d(e,t);u(e,r,t,t.$async);}(h):function(o){const s=t.scopeValue("schema",!0===f.code.source?{ref:o,code:(0, a.stringify)(o)}:{ref:o}),n=t.name("valid"),i=e.subschema({schema:o,dataTypes:[],schemaPath:a.nil,topSchemaRef:s,errSchemaPath:r},n);e.mergeEvaluated(i),e.ok(n);}(h)}};function d(e,t){const{gen:r}=e;return t.validate?r.scopeValue("validate",{ref:t.validate}):a._`${r.scopeValue("wrapper",{ref:t})}.validate`}function u(e,t,r,o){const{gen:i,it:l}=e,{allErrors:d,schemaEnv:u,opts:f}=l,p=f.passContext?n.default.this:a.nil;function m(e){const t=a._`${e}.errors`;i.assign(n.default.vErrors,a._`${n.default.vErrors} === null ? ${t} : ${n.default.vErrors}.concat(${t})`),i.assign(n.default.errors,a._`${n.default.vErrors}.length`);}function h(e){var t;if(!l.opts.unevaluated)return;const o=null===(t=null==r?void 0:r.validate)||void 0===t?void 0:t.evaluated;if(!0!==l.props)if(o&&!o.dynamicProps)void 0!==o.props&&(l.props=c.mergeEvaluated.props(i,o.props,l.props));else {const t=i.var("props",a._`${e}.evaluated.props`);l.props=c.mergeEvaluated.props(i,t,l.props,a.Name);}if(!0!==l.items)if(o&&!o.dynamicItems)void 0!==o.items&&(l.items=c.mergeEvaluated.items(i,o.items,l.items));else {const t=i.var("items",a._`${e}.evaluated.items`);l.items=c.mergeEvaluated.items(i,t,l.items,a.Name);}}o?function(){if(!u.$async)throw new Error("async schema referenced by sync schema");const r=i.let("valid");i.try((()=>{i.code(a._`await ${(0, s.callValidateCode)(e,t,p)}`),h(t),d||i.assign(r,!0);}),(e=>{i.if(a._`!(${e} instanceof ${l.ValidationError})`,(()=>i.throw(e))),m(e),d||i.assign(r,!1);})),e.ok(r);}():e.result((0, s.callValidateCode)(e,t,p),(()=>h(t)),(()=>m(t)));}r.getValidate=d,r.callRef=u,r.default=l;},{"../../compile":5,"../../compile/codegen":2,"../../compile/names":6,"../../compile/ref_error":7,"../../compile/util":10,"../code":42}],46:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen"),s=e("../discriminator/types"),a=e("../../compile"),n=e("../../compile/util");r.default={keyword:"discriminator",type:"object",schemaType:"object",error:{message({params:{discrError:e,tagName:t}}){return e===s.DiscrError.Tag?`tag "${t}" must be string`:`value of tag "${t}" must be in oneOf`},params({params:{discrError:e,tag:t,tagName:r}}){return o._`{error: ${e}, tag: ${r}, tagValue: ${t}}`}},code(e){const{gen:t,data:r,schema:i,parentSchema:c,it:l}=e,{oneOf:d}=c;if(!l.opts.discriminator)throw new Error("discriminator: requires discriminator option");const u=i.propertyName;if("string"!=typeof u)throw new Error("discriminator: requires propertyName");if(i.mapping)throw new Error("discriminator: mapping is not supported");if(!d)throw new Error("discriminator: requires oneOf keyword");const f=t.let("valid",!1),p=t.const("tag",o._`${r}${(0, o.getProperty)(u)}`);function m(r){const s=t.name("valid"),a=e.subschema({keyword:"oneOf",schemaProp:r},s);return e.mergeEvaluated(a,o.Name),s}t.if(o._`typeof ${p} == "string"`,(()=>function(){const r=function(){var e;const t={},r=s(c);let o=!0;for(let t=0;t<d.length;t++){let c=d[t];(null==c?void 0:c.$ref)&&!(0, n.schemaHasRulesButRef)(c,l.self.RULES)&&(c=a.resolveRef.call(l.self,l.schemaEnv.root,l.baseId,null==c?void 0:c.$ref),c instanceof a.SchemaEnv&&(c=c.schema));const f=null===(e=null==c?void 0:c.properties)||void 0===e?void 0:e[u];if("object"!=typeof f)throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${u}"`);o=o&&(r||s(c)),i(f,t);}if(!o)throw new Error(`discriminator: "${u}" must be required`);return t;function s({required:e}){return Array.isArray(e)&&e.includes(u)}function i(e,t){if(e.const)f(e.const,t);else {if(!e.enum)throw new Error(`discriminator: "properties/${u}" must have "const" or "enum"`);for(const r of e.enum)f(r,t);}}function f(e,r){if("string"!=typeof e||e in t)throw new Error(`discriminator: "${u}" values must be unique strings`);t[e]=r;}}();t.if(!1);for(const e in r)t.elseIf(o._`${p} === ${e}`),t.assign(f,m(r[e]));t.else(),e.error(!1,{discrError:s.DiscrError.Mapping,tag:p,tagName:u}),t.endIf();}()),(()=>e.error(!1,{discrError:s.DiscrError.Tag,tag:p,tagName:u}))),e.ok(f);}};},{"../../compile":5,"../../compile/codegen":2,"../../compile/util":10,"../discriminator/types":47}],47:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.DiscrError=void 0,function(e){e.Tag="tag",e.Mapping="mapping";}(r.DiscrError||(r.DiscrError={}));},{}],48:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("./core"),s=e("./validation"),a=e("./applicator"),n=e("./format"),i=e("./metadata"),c=[o.default,s.default,(0, a.default)(),n.default,i.metadataVocabulary,i.contentVocabulary];r.default=c;},{"./applicator":32,"./core":44,"./format":50,"./metadata":51,"./validation":54}],49:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen");r.default={keyword:"format",type:["number","string"],schemaType:"string",$data:!0,error:{message({schemaCode:e}){return o.str`must match format "${e}"`},params({schemaCode:e}){return o._`{format: ${e}}`}},code(e,t){const{gen:r,data:s,$data:a,schema:n,schemaCode:i,it:c}=e,{opts:l,errSchemaPath:d,schemaEnv:u,self:f}=c;l.validateFormats&&(a?function(){const a=r.scopeValue("formats",{ref:f.formats,code:l.code.formats}),n=r.const("fDef",o._`${a}[${i}]`),c=r.let("fType"),d=r.let("format");r.if(o._`typeof ${n} == "object" && !(${n} instanceof RegExp)`,(()=>r.assign(c,o._`${n}.type || "string"`).assign(d,o._`${n}.validate`)),(()=>r.assign(c,o._`"string"`).assign(d,n))),e.fail$data((0, o.or)(!1===l.strictSchema?o.nil:o._`${i} && !${d}`,function(){const e=u.$async?o._`(${n}.async ? await ${d}(${s}) : ${d}(${s}))`:o._`${d}(${s})`,r=o._`(typeof ${d} == "function" ? ${e} : ${d}.test(${s}))`;return o._`${d} && ${d} !== true && ${c} === ${t} && !${r}`}()));}():function(){const a=f.formats[n];if(!a)return void function(){if(!1===l.strictSchema)return void f.logger.warn(e());throw new Error(e());function e(){return `unknown format "${n}" ignored in schema at path "${d}"`}}();if(!0===a)return;const[i,c,p]=function(e){const t=e instanceof RegExp?(0, o.regexpCode)(e):l.code.formats?o._`${l.code.formats}${(0, o.getProperty)(n)}`:void 0,s=r.scopeValue("formats",{key:n,ref:e,code:t});if("object"==typeof e&&!(e instanceof RegExp))return [e.type||"string",e.validate,o._`${s}.validate`];return ["string",e,s]}(a);i===t&&e.pass(function(){if("object"==typeof a&&!(a instanceof RegExp)&&a.async){if(!u.$async)throw new Error("async format in sync schema");return o._`await ${p}(${s})`}return "function"==typeof c?o._`${p}(${s})`:o._`${p}.test(${s})`}());}());}};},{"../../compile/codegen":2}],50:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("./format");r.default=[o.default];},{"./format":49}],51:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.contentVocabulary=r.metadataVocabulary=void 0,r.metadataVocabulary=["title","description","default","deprecated","readOnly","writeOnly","examples"],r.contentVocabulary=["contentMediaType","contentEncoding","contentSchema"];},{}],52:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen"),s=e("../../compile/util"),a=e("../../runtime/equal");r.default={keyword:"const",$data:!0,error:{message:"must be equal to constant",params({schemaCode:e}){return o._`{allowedValue: ${e}}`}},code(e){const{gen:t,data:r,$data:n,schemaCode:i,schema:c}=e;n||c&&"object"==typeof c?e.fail$data(o._`!${(0, s.useFunc)(t,a.default)}(${r}, ${i})`):e.fail(o._`${c} !== ${r}`);}};},{"../../compile/codegen":2,"../../compile/util":10,"../../runtime/equal":21}],53:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen"),s=e("../../compile/util"),a=e("../../runtime/equal");r.default={keyword:"enum",schemaType:"array",$data:!0,error:{message:"must be equal to one of the allowed values",params({schemaCode:e}){return o._`{allowedValues: ${e}}`}},code(e){const{gen:t,data:r,$data:n,schema:i,schemaCode:c,it:l}=e;if(!n&&0===i.length)throw new Error("enum must have non-empty array");let d;const u=()=>null!=d?d:d=(0, s.useFunc)(t,a.default);let f;if(i.length>=l.opts.loopEnum||n)f=t.let("valid"),e.block$data(f,(function(){t.assign(f,!1),t.forOf("v",c,(e=>t.if(o._`${u()}(${r}, ${e})`,(()=>t.assign(f,!0).break()))));}));else {if(!Array.isArray(i))throw new Error("ajv implementation error");const e=t.const("vSchema",c);f=(0, o.or)(...i.map(((t,s)=>function(e,t){const s=i[t];return "object"==typeof s&&null!==s?o._`${u()}(${r}, ${e}[${t}])`:o._`${r} === ${s}`}(e,s))));}e.pass(f);}};},{"../../compile/codegen":2,"../../compile/util":10,"../../runtime/equal":21}],54:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("./limitNumber"),s=e("./multipleOf"),a=e("./limitLength"),n=e("./pattern"),i=e("./limitProperties"),c=e("./required"),l=e("./limitItems"),d=e("./uniqueItems"),u=e("./const"),f=e("./enum");r.default=[o.default,s.default,a.default,n.default,i.default,c.default,l.default,d.default,{keyword:"type",schemaType:["string","array"]},{keyword:"nullable",schemaType:"boolean"},u.default,f.default];},{"./const":52,"./enum":53,"./limitItems":55,"./limitLength":56,"./limitNumber":57,"./limitProperties":58,"./multipleOf":59,"./pattern":60,"./required":61,"./uniqueItems":62}],55:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen");r.default={keyword:["maxItems","minItems"],type:"array",schemaType:"number",$data:!0,error:{message:({keyword:e,schemaCode:t})=>o.str`must NOT have ${"maxItems"===e?"more":"fewer"} than ${t} items`,params({schemaCode:e}){return o._`{limit: ${e}}`}},code(e){const{keyword:t,data:r,schemaCode:s}=e;e.fail$data(o._`${r}.length ${"maxItems"===t?o.operators.GT:o.operators.LT} ${s}`);}};},{"../../compile/codegen":2}],56:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen"),s=e("../../compile/util"),a=e("../../runtime/ucs2length");r.default={keyword:["maxLength","minLength"],type:"string",schemaType:"number",$data:!0,error:{message:({keyword:e,schemaCode:t})=>o.str`must NOT have ${"maxLength"===e?"more":"fewer"} than ${t} characters`,params({schemaCode:e}){return o._`{limit: ${e}}`}},code(e){const{keyword:t,data:r,schemaCode:n,it:i}=e,c="maxLength"===t?o.operators.GT:o.operators.LT,l=!1===i.opts.unicode?o._`${r}.length`:o._`${(0, s.useFunc)(e.gen,a.default)}(${r})`;e.fail$data(o._`${l} ${c} ${n}`);}};},{"../../compile/codegen":2,"../../compile/util":10,"../../runtime/ucs2length":22}],57:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen"),s=o.operators,a={maximum:{okStr:"<=",ok:s.LTE,fail:s.GT},minimum:{okStr:">=",ok:s.GTE,fail:s.LT},exclusiveMaximum:{okStr:"<",ok:s.LT,fail:s.GTE},exclusiveMinimum:{okStr:">",ok:s.GT,fail:s.LTE}},n={message({keyword:e,schemaCode:t}){return o.str`must be ${a[e].okStr} ${t}`},params({keyword:e,schemaCode:t}){return o._`{comparison: ${a[e].okStr}, limit: ${t}}`}},i={keyword:Object.keys(a),type:"number",schemaType:"number",$data:!0,error:n,code(e){const{keyword:t,data:r,schemaCode:s}=e;e.fail$data(o._`${r} ${a[t].fail} ${s} || isNaN(${r})`);}};r.default=i;},{"../../compile/codegen":2}],58:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen");r.default={keyword:["maxProperties","minProperties"],type:"object",schemaType:"number",$data:!0,error:{message:({keyword:e,schemaCode:t})=>o.str`must NOT have ${"maxProperties"===e?"more":"fewer"} than ${t} properties`,params({schemaCode:e}){return o._`{limit: ${e}}`}},code(e){const{keyword:t,data:r,schemaCode:s}=e;e.fail$data(o._`Object.keys(${r}).length ${"maxProperties"===t?o.operators.GT:o.operators.LT} ${s}`);}};},{"../../compile/codegen":2}],59:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/codegen");r.default={keyword:"multipleOf",type:"number",schemaType:"number",$data:!0,error:{message({schemaCode:e}){return o.str`must be multiple of ${e}`},params({schemaCode:e}){return o._`{multipleOf: ${e}}`}},code(e){const{gen:t,data:r,schemaCode:s,it:a}=e,n=a.opts.multipleOfPrecision,i=t.let("res"),c=n?o._`Math.abs(Math.round(${i}) - ${i}) > 1e-${n}`:o._`${i} !== parseInt(${i})`;e.fail$data(o._`(${s} === 0 || (${i} = ${r}/${s}, ${c}))`);}};},{"../../compile/codegen":2}],60:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../code"),s=e("../../compile/codegen");r.default={keyword:"pattern",type:"string",schemaType:"string",$data:!0,error:{message({schemaCode:e}){return s.str`must match pattern "${e}"`},params({schemaCode:e}){return s._`{pattern: ${e}}`}},code(e){const{data:t,$data:r,schema:a,schemaCode:n,it:i}=e,c=r?s._`(new RegExp(${n}, ${i.opts.unicodeRegExp?"u":""}))`:(0, o.usePattern)(e,a);e.fail$data(s._`!${c}.test(${t})`);}};},{"../../compile/codegen":2,"../code":42}],61:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../code"),s=e("../../compile/codegen"),a=e("../../compile/util");r.default={keyword:"required",type:"object",schemaType:"array",$data:!0,error:{message({params:{missingProperty:e}}){return s.str`must have required property '${e}'`},params({params:{missingProperty:e}}){return s._`{missingProperty: ${e}}`}},code(e){const{gen:t,schema:r,schemaCode:n,data:i,$data:c,it:l}=e,{opts:d}=l;if(!c&&0===r.length)return;const u=r.length>=d.loopRequired;if(l.allErrors?function(){if(u||c)e.block$data(s.nil,f);else for(const t of r)(0, o.checkReportMissingProp)(e,t);}():function(){const a=t.let("missing");if(u||c){const r=t.let("valid",!0);e.block$data(r,(()=>function(r,a){e.setParams({missingProperty:r}),t.forOf(r,n,(()=>{t.assign(a,(0, o.propertyInData)(t,i,r,d.ownProperties)),t.if((0, s.not)(a),(()=>{e.error(),t.break();}));}),s.nil);}(a,r))),e.ok(r);}else t.if((0, o.checkMissingProp)(e,r,a)),(0, o.reportMissingProp)(e,a),t.else();}(),d.strictRequired){const t=e.parentSchema.properties,{definedProperties:o}=e.it;for(const e of r)if(void 0===(null==t?void 0:t[e])&&!o.has(e)){(0, a.checkStrictMode)(l,`required property "${e}" is not defined at "${l.schemaEnv.baseId+l.errSchemaPath}" (strictRequired)`,l.opts.strictRequired);}}function f(){t.forOf("prop",n,(r=>{e.setParams({missingProperty:r}),t.if((0, o.noPropertyInData)(t,i,r,d.ownProperties),(()=>e.error()));}));}}};},{"../../compile/codegen":2,"../../compile/util":10,"../code":42}],62:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});const o=e("../../compile/validate/dataType"),s=e("../../compile/codegen"),a=e("../../compile/util"),n=e("../../runtime/equal");r.default={keyword:"uniqueItems",type:"array",schemaType:"boolean",$data:!0,error:{message({params:{i:e,j:t}}){return s.str`must NOT have duplicate items (items ## ${t} and ${e} are identical)`},params({params:{i:e,j:t}}){return s._`{i: ${e}, j: ${t}}`}},code(e){const{gen:t,data:r,$data:i,schema:c,parentSchema:l,schemaCode:d,it:u}=e;if(!i&&!c)return;const f=t.let("valid"),p=l.items?(0, o.getSchemaTypes)(l.items):[];function m(a,n){const i=t.name("item"),c=(0, o.checkDataTypes)(p,i,u.opts.strictNumbers,o.DataType.Wrong),l=t.const("indices",s._`{}`);t.for(s._`;${a}--;`,(()=>{t.let(i,s._`${r}[${a}]`),t.if(c,s._`continue`),p.length>1&&t.if(s._`typeof ${i} == "string"`,s._`${i} += "_"`),t.if(s._`typeof ${l}[${i}] == "number"`,(()=>{t.assign(n,s._`${l}[${i}]`),e.error(),t.assign(f,!1).break();})).code(s._`${l}[${i}] = ${a}`);}));}function h(o,i){const c=(0, a.useFunc)(t,n.default),l=t.name("outer");t.label(l).for(s._`;${o}--;`,(()=>t.for(s._`${i} = ${o}; ${i}--;`,(()=>t.if(s._`${c}(${r}[${o}], ${r}[${i}])`,(()=>{e.error(),t.assign(f,!1).break(l);}))))));}e.block$data(f,(function(){const o=t.let("i",s._`${r}.length`),a=t.let("j");e.setParams({i:o,j:a}),t.assign(f,!0),t.if(s._`${o} > 1`,(()=>(p.length>0&&!p.some((e=>"object"===e||"array"===e))?m:h)(o,a)));}),s._`${d} === false`),e.ok(f);}};},{"../../compile/codegen":2,"../../compile/util":10,"../../compile/validate/dataType":13,"../../runtime/equal":21}],63:[function(e,t,r){t.exports=function e(t,r){if(t===r)return !0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return !1;var o,s,a;if(Array.isArray(t)){if((o=t.length)!=r.length)return !1;for(s=o;0!=s--;)if(!e(t[s],r[s]))return !1;return !0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((o=(a=Object.keys(t)).length)!==Object.keys(r).length)return !1;for(s=o;0!=s--;)if(!Object.prototype.hasOwnProperty.call(r,a[s]))return !1;for(s=o;0!=s--;){var n=a[s];if(!e(t[n],r[n]))return !1}return !0}return t!=t&&r!=r};},{}],64:[function(e,t,r){var o=t.exports=function(e,t,r){"function"==typeof t&&(r=t,t={}),s(t,"function"==typeof(r=t.cb||r)?r:r.pre||function(){},r.post||function(){},e,"",e);};function s(e,t,r,a,n,i,c,l,d,u){if(a&&"object"==typeof a&&!Array.isArray(a)){for(var f in t(a,n,i,c,l,d,u),a){var p=a[f];if(Array.isArray(p)){if(f in o.arrayKeywords)for(var m=0;m<p.length;m++)s(e,t,r,p[m],n+"/"+f+"/"+m,i,n,f,a,m);}else if(f in o.propsKeywords){if(p&&"object"==typeof p)for(var h in p)s(e,t,r,p[h],n+"/"+f+"/"+h.replace(/~/g,"~0").replace(/\//g,"~1"),i,n,f,a,h);}else (f in o.keywords||e.allKeys&&!(f in o.skipKeywords))&&s(e,t,r,p,n+"/"+f,i,n,f,a);}r(a,n,i,c,l,d,u);}}o.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0,if:!0,then:!0,else:!0},o.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},o.propsKeywords={$defs:!0,definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},o.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0};},{}],65:[function(e,t,r){
    /** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
    !function(e,o){o("object"==typeof r&&void 0!==t?r:e.URI=e.URI||{});}(this,(function(e){function t(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(t.length>1){t[0]=t[0].slice(0,-1);for(var o=t.length-1,s=1;s<o;++s)t[s]=t[s].slice(1,-1);return t[o]=t[o].slice(1),t.join("")}return t[0]}function r(e){return "(?:"+e+")"}function o(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function s(e){return e.toUpperCase()}function a(e){var o="[A-Za-z]",s="[0-9]",a=t(s,"[A-Fa-f]"),n=r(r("%[EFef]"+a+"%"+a+a+"%"+a+a)+"|"+r("%[89A-Fa-f]"+a+"%"+a+a)+"|"+r("%"+a+a)),i="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",c=t("[\\:\\/\\?\\#\\[\\]\\@]",i),l=e?"[\\uE000-\\uF8FF]":"[]",d=t(o,s,"[\\-\\.\\_\\~]",e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]");r(o+t(o,s,"[\\+\\-\\.]")+"*");r(r(n+"|"+t(d,i,"[\\:]"))+"*");var p=(r(r("25[0-5]")+"|"+r("2[0-4][0-9]")+"|"+r("1[0-9][0-9]")+"|"+r("0?[1-9][0-9]")+"|0?0?"+s)),m=r(p+"\\."+p+"\\."+p+"\\."+p),h=r(a+"{1,4}"),y=r(r(h+"\\:"+h)+"|"+m),v=r(r(h+"\\:")+"{6}"+y),g=r("\\:\\:"+r(h+"\\:")+"{5}"+y),$=r(r(h)+"?\\:\\:"+r(h+"\\:")+"{4}"+y),_=r(r(r(h+"\\:")+"{0,1}"+h)+"?\\:\\:"+r(h+"\\:")+"{3}"+y),w=r(r(r(h+"\\:")+"{0,2}"+h)+"?\\:\\:"+r(h+"\\:")+"{2}"+y),b=r(r(r(h+"\\:")+"{0,3}"+h)+"?\\:\\:"+h+"\\:"+y),E=r(r(r(h+"\\:")+"{0,4}"+h)+"?\\:\\:"+y),P=r(r(r(h+"\\:")+"{0,5}"+h)+"?\\:\\:"+h),S=r(r(r(h+"\\:")+"{0,6}"+h)+"?\\:\\:"),N=r([v,g,$,_,w,b,E,P,S].join("|")),k=r(r(d+"|"+n)+"+");r("[vV]"+a+"+\\."+t(d,i,"[\\:]")+"+");r(r(n+"|"+t(d,i))+"*");var D=r(n+"|"+t(d,i,"[\\:\\@]"));r(r(n+"|"+t(d,i,"[\\@]"))+"+");(r(r(D+"|"+t("[\\/\\?]",l))+"*"));return {NOT_SCHEME:new RegExp(t("[^]",o,s,"[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(t("[^\\%\\:]",d,i),"g"),NOT_HOST:new RegExp(t("[^\\%\\[\\]\\:]",d,i),"g"),NOT_PATH:new RegExp(t("[^\\%\\/\\:\\@]",d,i),"g"),NOT_PATH_NOSCHEME:new RegExp(t("[^\\%\\/\\@]",d,i),"g"),NOT_QUERY:new RegExp(t("[^\\%]",d,i,"[\\:\\@\\/\\?]",l),"g"),NOT_FRAGMENT:new RegExp(t("[^\\%]",d,i,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(t("[^]",d,i),"g"),UNRESERVED:new RegExp(d,"g"),OTHER_CHARS:new RegExp(t("[^\\%]",d,c),"g"),PCT_ENCODED:new RegExp(n,"g"),IPV4ADDRESS:new RegExp("^("+m+")$"),IPV6ADDRESS:new RegExp("^\\[?("+N+")"+r(r("\\%25|\\%(?!"+a+"{2})")+"("+k+")")+"?\\]?$")}}var n=a(!1),i=a(!0),c=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],o=!0,s=!1,a=void 0;try{for(var n,i=e[Symbol.iterator]();!(o=(n=i.next()).done)&&(r.push(n.value),!t||r.length!==t);o=!0);}catch(e){s=!0,a=e;}finally{try{!o&&i.return&&i.return();}finally{if(s)throw a}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},l=2147483647,d=36,u=/^xn--/,f=/[^\0-\x7E]/,p=/[\x2E\u3002\uFF0E\uFF61]/g,m={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},h=Math.floor,y=String.fromCharCode;function v(e){throw new RangeError(m[e])}function g(e,t){var r=e.split("@"),o="";r.length>1&&(o=r[0]+"@",e=r[1]);var s=function(e,t){for(var r=[],o=e.length;o--;)r[o]=t(e[o]);return r}((e=e.replace(p,".")).split("."),t).join(".");return o+s}function $(e){for(var t=[],r=0,o=e.length;r<o;){var s=e.charCodeAt(r++);if(s>=55296&&s<=56319&&r<o){var a=e.charCodeAt(r++);56320==(64512&a)?t.push(((1023&s)<<10)+(1023&a)+65536):(t.push(s),r--);}else t.push(s);}return t}var _=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},w=function(e,t,r){var o=0;for(e=r?h(e/700):e>>1,e+=h(e/t);e>455;o+=d)e=h(e/35);return h(o+36*e/(e+38))},b=function(e){var t,r=[],o=e.length,s=0,a=128,n=72,i=e.lastIndexOf("-");i<0&&(i=0);for(var c=0;c<i;++c)e.charCodeAt(c)>=128&&v("not-basic"),r.push(e.charCodeAt(c));for(var u=i>0?i+1:0;u<o;){for(var f=s,p=1,m=d;;m+=d){u>=o&&v("invalid-input");var y=(t=e.charCodeAt(u++))-48<10?t-22:t-65<26?t-65:t-97<26?t-97:d;(y>=d||y>h((l-s)/p))&&v("overflow"),s+=y*p;var g=m<=n?1:m>=n+26?26:m-n;if(y<g)break;var $=d-g;p>h(l/$)&&v("overflow"),p*=$;}var _=r.length+1;n=w(s-f,_,0==f),h(s/_)>l-a&&v("overflow"),a+=h(s/_),s%=_,r.splice(s++,0,a);}return String.fromCodePoint.apply(String,r)},E=function(e){var t=[],r=(e=$(e)).length,o=128,s=0,a=72,n=!0,i=!1,c=void 0;try{for(var u,f=e[Symbol.iterator]();!(n=(u=f.next()).done);n=!0){var p=u.value;p<128&&t.push(y(p));}}catch(e){i=!0,c=e;}finally{try{!n&&f.return&&f.return();}finally{if(i)throw c}}var m=t.length,g=m;for(m&&t.push("-");g<r;){var b=l,E=!0,P=!1,S=void 0;try{for(var N,k=e[Symbol.iterator]();!(E=(N=k.next()).done);E=!0){var j=N.value;j>=o&&j<b&&(b=j);}}catch(e){P=!0,S=e;}finally{try{!E&&k.return&&k.return();}finally{if(P)throw S}}var C=g+1;b-o>h((l-s)/C)&&v("overflow"),s+=(b-o)*C,o=b;var O=!0,x=!1,T=void 0;try{for(var I,R=e[Symbol.iterator]();!(O=(I=R.next()).done);O=!0){var D=I.value;if(D<o&&++s>l&&v("overflow"),D==o){for(var A=s,M=d;;M+=d){var V=M<=a?1:M>=a+26?26:M-a;if(A<V)break;var F=A-V,q=d-V;t.push(y(_(V+F%q,0))),A=h(F/q);}t.push(y(_(A,0))),a=w(s,C,g==m),s=0,++g;}}}catch(e){x=!0,T=e;}finally{try{!O&&R.return&&R.return();}finally{if(x)throw T}}++s,++o;}return t.join("")},P=function(e){return g(e,(function(e){return f.test(e)?"xn--"+E(e):e}))},S=function(e){return g(e,(function(e){return u.test(e)?b(e.slice(4).toLowerCase()):e}))},N={};function k(e){var t=e.charCodeAt(0);return t<16?"%0"+t.toString(16).toUpperCase():t<128?"%"+t.toString(16).toUpperCase():t<2048?"%"+(t>>6|192).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase():"%"+(t>>12|224).toString(16).toUpperCase()+"%"+(t>>6&63|128).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase()}function j(e){for(var t="",r=0,o=e.length;r<o;){var s=parseInt(e.substr(r+1,2),16);if(s<128)t+=String.fromCharCode(s),r+=3;else if(s>=194&&s<224){if(o-r>=6){var a=parseInt(e.substr(r+4,2),16);t+=String.fromCharCode((31&s)<<6|63&a);}else t+=e.substr(r,6);r+=6;}else if(s>=224){if(o-r>=9){var n=parseInt(e.substr(r+4,2),16),i=parseInt(e.substr(r+7,2),16);t+=String.fromCharCode((15&s)<<12|(63&n)<<6|63&i);}else t+=e.substr(r,9);r+=9;}else t+=e.substr(r,3),r+=3;}return t}function C(e,t){function r(e){var r=j(e);return r.match(t.UNRESERVED)?r:e}return e.scheme&&(e.scheme=String(e.scheme).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(t.PCT_ENCODED,r).replace(t.NOT_USERINFO,k).replace(t.PCT_ENCODED,s)),void 0!==e.host&&(e.host=String(e.host).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_HOST,k).replace(t.PCT_ENCODED,s)),void 0!==e.path&&(e.path=String(e.path).replace(t.PCT_ENCODED,r).replace(e.scheme?t.NOT_PATH:t.NOT_PATH_NOSCHEME,k).replace(t.PCT_ENCODED,s)),void 0!==e.query&&(e.query=String(e.query).replace(t.PCT_ENCODED,r).replace(t.NOT_QUERY,k).replace(t.PCT_ENCODED,s)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(t.PCT_ENCODED,r).replace(t.NOT_FRAGMENT,k).replace(t.PCT_ENCODED,s)),e}function O(e){return e.replace(/^0*(.*)/,"$1")||"0"}function x(e,t){var r=e.match(t.IPV4ADDRESS)||[],o=c(r,2)[1];return o?o.split(".").map(O).join("."):e}function T(e,t){var r=e.match(t.IPV6ADDRESS)||[],o=c(r,3),s=o[1],a=o[2];if(s){for(var n=s.toLowerCase().split("::").reverse(),i=c(n,2),l=i[0],d=i[1],u=d?d.split(":").map(O):[],f=l.split(":").map(O),p=t.IPV4ADDRESS.test(f[f.length-1]),m=p?7:8,h=f.length-m,y=Array(m),v=0;v<m;++v)y[v]=u[v]||f[h+v]||"";p&&(y[m-1]=x(y[m-1],t));var g=y.reduce((function(e,t,r){if(!t||"0"===t){var o=e[e.length-1];o&&o.index+o.length===r?o.length++:e.push({index:r,length:1});}return e}),[]).sort((function(e,t){return t.length-e.length}))[0],$=void 0;if(g&&g.length>1){var _=y.slice(0,g.index),w=y.slice(g.index+g.length);$=_.join(":")+"::"+w.join(":");}else $=y.join(":");return a&&($+="%"+a),$}return e}var I=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,R=void 0==="".match(/(){0}/)[1];function D(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r={},o=!1!==t.iri?i:n;"suffix"===t.reference&&(e=(t.scheme?t.scheme+":":"")+"//"+e);var s=e.match(I);if(s){R?(r.scheme=s[1],r.userinfo=s[3],r.host=s[4],r.port=parseInt(s[5],10),r.path=s[6]||"",r.query=s[7],r.fragment=s[8],isNaN(r.port)&&(r.port=s[5])):(r.scheme=s[1]||void 0,r.userinfo=-1!==e.indexOf("@")?s[3]:void 0,r.host=-1!==e.indexOf("//")?s[4]:void 0,r.port=parseInt(s[5],10),r.path=s[6]||"",r.query=-1!==e.indexOf("?")?s[7]:void 0,r.fragment=-1!==e.indexOf("#")?s[8]:void 0,isNaN(r.port)&&(r.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?s[4]:void 0)),r.host&&(r.host=T(x(r.host,o),o)),r.reference=void 0!==r.scheme||void 0!==r.userinfo||void 0!==r.host||void 0!==r.port||r.path||void 0!==r.query?void 0===r.scheme?"relative":void 0===r.fragment?"absolute":"uri":"same-document",t.reference&&"suffix"!==t.reference&&t.reference!==r.reference&&(r.error=r.error||"URI is not a "+t.reference+" reference.");var a=N[(t.scheme||r.scheme||"").toLowerCase()];if(t.unicodeSupport||a&&a.unicodeSupport)C(r,o);else {if(r.host&&(t.domainHost||a&&a.domainHost))try{r.host=P(r.host.replace(o.PCT_ENCODED,j).toLowerCase());}catch(e){r.error=r.error||"Host's domain name can not be converted to ASCII via punycode: "+e;}C(r,n);}a&&a.parse&&a.parse(r,t);}else r.error=r.error||"URI can not be parsed.";return r}function A(e,t){var r=!1!==t.iri?i:n,o=[];return void 0!==e.userinfo&&(o.push(e.userinfo),o.push("@")),void 0!==e.host&&o.push(T(x(String(e.host),r),r).replace(r.IPV6ADDRESS,(function(e,t,r){return "["+t+(r?"%25"+r:"")+"]"}))),"number"!=typeof e.port&&"string"!=typeof e.port||(o.push(":"),o.push(String(e.port))),o.length?o.join(""):void 0}var M=/^\.\.?\//,V=/^\/\.(\/|$)/,F=/^\/\.\.(\/|$)/,q=/^\/?(?:.|\n)*?(?=\/|$)/;function U(e){for(var t=[];e.length;)if(e.match(M))e=e.replace(M,"");else if(e.match(V))e=e.replace(V,"/");else if(e.match(F))e=e.replace(F,"/"),t.pop();else if("."===e||".."===e)e="";else {var r=e.match(q);if(!r)throw new Error("Unexpected dot segment condition");var o=r[0];e=e.slice(o.length),t.push(o);}return t.join("")}function z(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.iri?i:n,o=[],s=N[(t.scheme||e.scheme||"").toLowerCase()];if(s&&s.serialize&&s.serialize(e,t),e.host)if(r.IPV6ADDRESS.test(e.host));else if(t.domainHost||s&&s.domainHost)try{e.host=t.iri?S(e.host):P(e.host.replace(r.PCT_ENCODED,j).toLowerCase());}catch(r){e.error=e.error||"Host's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+r;}C(e,r),"suffix"!==t.reference&&e.scheme&&(o.push(e.scheme),o.push(":"));var a=A(e,t);if(void 0!==a&&("suffix"!==t.reference&&o.push("//"),o.push(a),e.path&&"/"!==e.path.charAt(0)&&o.push("/")),void 0!==e.path){var c=e.path;t.absolutePath||s&&s.absolutePath||(c=U(c)),void 0===a&&(c=c.replace(/^\/\//,"/%2F")),o.push(c);}return void 0!==e.query&&(o.push("?"),o.push(e.query)),void 0!==e.fragment&&(o.push("#"),o.push(e.fragment)),o.join("")}function K(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments[3],s={};return o||(e=D(z(e,r),r),t=D(z(t,r),r)),!(r=r||{}).tolerant&&t.scheme?(s.scheme=t.scheme,s.userinfo=t.userinfo,s.host=t.host,s.port=t.port,s.path=U(t.path||""),s.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(s.userinfo=t.userinfo,s.host=t.host,s.port=t.port,s.path=U(t.path||""),s.query=t.query):(t.path?("/"===t.path.charAt(0)?s.path=U(t.path):(s.path=void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:t.path:"/"+t.path,s.path=U(s.path)),s.query=t.query):(s.path=e.path,s.query=void 0!==t.query?t.query:e.query),s.userinfo=e.userinfo,s.host=e.host,s.port=e.port),s.scheme=e.scheme),s.fragment=t.fragment,s}function L(e,t){return e&&e.toString().replace(t&&t.iri?i.PCT_ENCODED:n.PCT_ENCODED,j)}var H={scheme:"http",domainHost:!0,parse(e,t){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize(e,t){var r="https"===String(e.scheme).toLowerCase();return e.port!==(r?443:80)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}},G={scheme:"https",domainHost:H.domainHost,parse:H.parse,serialize:H.serialize};function J(e){return "boolean"==typeof e.secure?e.secure:"wss"===String(e.scheme).toLowerCase()}var B={scheme:"ws",domainHost:!0,parse(e,t){var r=e;return r.secure=J(r),r.resourceName=(r.path||"/")+(r.query?"?"+r.query:""),r.path=void 0,r.query=void 0,r},serialize(e,t){if(e.port!==(J(e)?443:80)&&""!==e.port||(e.port=void 0),"boolean"==typeof e.secure&&(e.scheme=e.secure?"wss":"ws",e.secure=void 0),e.resourceName){var r=e.resourceName.split("?"),o=c(r,2),s=o[0],a=o[1];e.path=s&&"/"!==s?s:void 0,e.query=a,e.resourceName=void 0;}return e.fragment=void 0,e}},W={scheme:"wss",domainHost:B.domainHost,parse:B.parse,serialize:B.serialize},Q={},Z="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",Y="[0-9A-Fa-f]",X=r(r("%[EFef][0-9A-Fa-f]%"+Y+Y+"%"+Y+Y)+"|"+r("%[89A-Fa-f][0-9A-Fa-f]%"+Y+Y)+"|"+r("%"+Y+Y)),ee=t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),te=new RegExp(Z,"g"),re=new RegExp(X,"g"),oe=new RegExp(t("[^]","[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]","[\\.]",'[\\"]',ee),"g"),se=new RegExp(t("[^]",Z,"[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"),"g"),ae=se;function ne(e){var t=j(e);return t.match(te)?t:e}var ie={scheme:"mailto",parse(e,t){var r=e,o=r.to=r.path?r.path.split(","):[];if(r.path=void 0,r.query){for(var s=!1,a={},n=r.query.split("&"),i=0,c=n.length;i<c;++i){var l=n[i].split("=");switch(l[0]){case"to":for(var d=l[1].split(","),u=0,f=d.length;u<f;++u)o.push(d[u]);break;case"subject":r.subject=L(l[1],t);break;case"body":r.body=L(l[1],t);break;default:s=!0,a[L(l[0],t)]=L(l[1],t);}}s&&(r.headers=a);}r.query=void 0;for(var p=0,m=o.length;p<m;++p){var h=o[p].split("@");if(h[0]=L(h[0]),t.unicodeSupport)h[1]=L(h[1],t).toLowerCase();else try{h[1]=P(L(h[1],t).toLowerCase());}catch(e){r.error=r.error||"Email address's domain name can not be converted to ASCII via punycode: "+e;}o[p]=h.join("@");}return r},serialize(e,t){var r,o=e,a=null!=(r=e.to)?r instanceof Array?r:"number"!=typeof r.length||r.split||r.setInterval||r.call?[r]:Array.prototype.slice.call(r):[];if(a){for(var n=0,i=a.length;n<i;++n){var c=String(a[n]),l=c.lastIndexOf("@"),d=c.slice(0,l).replace(re,ne).replace(re,s).replace(oe,k),u=c.slice(l+1);try{u=t.iri?S(u):P(L(u,t).toLowerCase());}catch(e){o.error=o.error||"Email address's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+e;}a[n]=d+"@"+u;}o.path=a.join(",");}var f=e.headers=e.headers||{};e.subject&&(f.subject=e.subject),e.body&&(f.body=e.body);var p=[];for(var m in f)f[m]!==Q[m]&&p.push(m.replace(re,ne).replace(re,s).replace(se,k)+"="+f[m].replace(re,ne).replace(re,s).replace(ae,k));return p.length&&(o.query=p.join("&")),o}},ce=/^([^\:]+)\:(.*)/,le={scheme:"urn",parse(e,t){var r=e.path&&e.path.match(ce),o=e;if(r){var s=t.scheme||o.scheme||"urn",a=r[1].toLowerCase(),n=r[2],i=N[s+":"+(t.nid||a)];o.nid=a,o.nss=n,o.path=void 0,i&&(o=i.parse(o,t));}else o.error=o.error||"URN can not be parsed.";return o},serialize(e,t){var r=e.nid,o=N[(t.scheme||e.scheme||"urn")+":"+(t.nid||r)];o&&(e=o.serialize(e,t));var s=e;return s.path=(r||t.nid)+":"+e.nss,s}},de=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,ue={scheme:"urn:uuid",parse(e,t){var r=e;return r.uuid=r.nss,r.nss=void 0,t.tolerant||r.uuid&&r.uuid.match(de)||(r.error=r.error||"UUID is not valid."),r},serialize(e,t){var r=e;return r.nss=(e.uuid||"").toLowerCase(),r}};N[H.scheme]=H,N[G.scheme]=G,N[B.scheme]=B,N[W.scheme]=W,N[ie.scheme]=ie,N[le.scheme]=le,N[ue.scheme]=ue,e.SCHEMES=N,e.pctEncChar=k,e.pctDecChars=j,e.parse=D,e.removeDotSegments=U,e.serialize=z,e.resolveComponents=K,e.resolve=function(e,t,r){var o=function(e,t){var r=e;if(t)for(var o in t)r[o]=t[o];return r}({scheme:"null"},r);return z(K(D(e,o),D(t,o),o,!0),o)},e.normalize=function(e,t){return "string"==typeof e?e=z(D(e,t),t):"object"===o(e)&&(e=D(z(e,t),t)),e},e.equal=function(e,t,r){return "string"==typeof e?e=z(D(e,r),r):"object"===o(e)&&(e=z(e,r)),"string"==typeof t?t=z(D(t,r),r):"object"===o(t)&&(t=z(t,r)),e===t},e.escapeComponent=function(e,t){return e&&e.toString().replace(t&&t.iri?i.ESCAPE:n.ESCAPE,k)},e.unescapeComponent=L,Object.defineProperty(e,"__esModule",{value:!0});}));},{}],ajv:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.CodeGen=r.Name=r.nil=r.stringify=r.str=r._=r.KeywordCxt=void 0;const o=e("./core"),s=e("./vocabularies/draft7"),a=e("./vocabularies/discriminator"),n=e("./refs/json-schema-draft-07.json"),i=["/properties"],c="http://json-schema.org/draft-07/schema";class l extends o.default{_addVocabularies(){super._addVocabularies(),s.default.forEach((e=>this.addVocabulary(e))),this.opts.discriminator&&this.addKeyword(a.default);}_addDefaultMetaSchema(){if(super._addDefaultMetaSchema(),!this.opts.meta)return;const e=this.opts.$data?this.$dataMetaSchema(n,i):n;this.addMetaSchema(e,c,!1),this.refs["http://json-schema.org/schema"]=c;}defaultMeta(){return this.opts.defaultMeta=super.defaultMeta()||(this.getSchema(c)?c:void 0)}}t.exports=r=l,Object.defineProperty(r,"__esModule",{value:!0}),r.default=l;var d=e("./compile/validate");Object.defineProperty(r,"KeywordCxt",{enumerable:!0,get(){return d.KeywordCxt}});var u=e("./compile/codegen");Object.defineProperty(r,"_",{enumerable:!0,get(){return u._}}),Object.defineProperty(r,"str",{enumerable:!0,get(){return u.str}}),Object.defineProperty(r,"stringify",{enumerable:!0,get(){return u.stringify}}),Object.defineProperty(r,"nil",{enumerable:!0,get(){return u.nil}}),Object.defineProperty(r,"Name",{enumerable:!0,get(){return u.Name}}),Object.defineProperty(r,"CodeGen",{enumerable:!0,get(){return u.CodeGen}});},{"./compile/codegen":2,"./compile/validate":15,"./core":18,"./refs/json-schema-draft-07.json":20,"./vocabularies/discriminator":46,"./vocabularies/draft7":48}]},{},[])("ajv")}));

    });

    createCommonjsModule(function (module, exports) {
    (function(exports) {

      function isArray(obj) {
        if (obj !== null) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        } else {
          return false;
        }
      }

      function isObject(obj) {
        if (obj !== null) {
          return Object.prototype.toString.call(obj) === "[object Object]";
        } else {
          return false;
        }
      }

      function strictDeepEqual(first, second) {
        // Check the scalar case first.
        if (first === second) {
          return true;
        }

        // Check if they are the same type.
        var firstType = Object.prototype.toString.call(first);
        if (firstType !== Object.prototype.toString.call(second)) {
          return false;
        }
        // We know that first and second have the same type so we can just check the
        // first type from now on.
        if (isArray(first) === true) {
          // Short circuit if they're not the same length;
          if (first.length !== second.length) {
            return false;
          }
          for (var i = 0; i < first.length; i++) {
            if (strictDeepEqual(first[i], second[i]) === false) {
              return false;
            }
          }
          return true;
        }
        if (isObject(first) === true) {
          // An object is equal if it has the same key/value pairs.
          var keysSeen = {};
          for (var key in first) {
            if (hasOwnProperty.call(first, key)) {
              if (strictDeepEqual(first[key], second[key]) === false) {
                return false;
              }
              keysSeen[key] = true;
            }
          }
          // Now check that there aren't any keys in second that weren't
          // in first.
          for (var key2 in second) {
            if (hasOwnProperty.call(second, key2)) {
              if (keysSeen[key2] !== true) {
                return false;
              }
            }
          }
          return true;
        }
        return false;
      }

      function isFalse(obj) {
        // From the spec:
        // A false value corresponds to the following values:
        // Empty list
        // Empty object
        // Empty string
        // False boolean
        // null value

        // First check the scalar values.
        if (obj === "" || obj === false || obj === null) {
            return true;
        } else if (isArray(obj) && obj.length === 0) {
            // Check for an empty array.
            return true;
        } else if (isObject(obj)) {
            // Check for an empty object.
            for (var key in obj) {
                // If there are any keys, then
                // the object is not empty so the object
                // is not false.
                if (obj.hasOwnProperty(key)) {
                  return false;
                }
            }
            return true;
        } else {
            return false;
        }
      }

      function objValues(obj) {
        var keys = Object.keys(obj);
        var values = [];
        for (var i = 0; i < keys.length; i++) {
          values.push(obj[keys[i]]);
        }
        return values;
      }

      var trimLeft;
      if (typeof String.prototype.trimLeft === "function") {
        trimLeft = function(str) {
          return str.trimLeft();
        };
      } else {
        trimLeft = function(str) {
          return str.match(/^\s*(.*)/)[1];
        };
      }

      // Type constants used to define functions.
      var TYPE_NUMBER = 0;
      var TYPE_ANY = 1;
      var TYPE_STRING = 2;
      var TYPE_ARRAY = 3;
      var TYPE_OBJECT = 4;
      var TYPE_BOOLEAN = 5;
      var TYPE_EXPREF = 6;
      var TYPE_NULL = 7;
      var TYPE_ARRAY_NUMBER = 8;
      var TYPE_ARRAY_STRING = 9;
      var TYPE_NAME_TABLE = {
        0: 'number',
        1: 'any',
        2: 'string',
        3: 'array',
        4: 'object',
        5: 'boolean',
        6: 'expression',
        7: 'null',
        8: 'Array<number>',
        9: 'Array<string>'
      };

      var TOK_EOF = "EOF";
      var TOK_UNQUOTEDIDENTIFIER = "UnquotedIdentifier";
      var TOK_QUOTEDIDENTIFIER = "QuotedIdentifier";
      var TOK_RBRACKET = "Rbracket";
      var TOK_RPAREN = "Rparen";
      var TOK_COMMA = "Comma";
      var TOK_COLON = "Colon";
      var TOK_RBRACE = "Rbrace";
      var TOK_NUMBER = "Number";
      var TOK_CURRENT = "Current";
      var TOK_EXPREF = "Expref";
      var TOK_PIPE = "Pipe";
      var TOK_OR = "Or";
      var TOK_AND = "And";
      var TOK_EQ = "EQ";
      var TOK_GT = "GT";
      var TOK_LT = "LT";
      var TOK_GTE = "GTE";
      var TOK_LTE = "LTE";
      var TOK_NE = "NE";
      var TOK_FLATTEN = "Flatten";
      var TOK_STAR = "Star";
      var TOK_FILTER = "Filter";
      var TOK_DOT = "Dot";
      var TOK_NOT = "Not";
      var TOK_LBRACE = "Lbrace";
      var TOK_LBRACKET = "Lbracket";
      var TOK_LPAREN= "Lparen";
      var TOK_LITERAL= "Literal";

      // The "&", "[", "<", ">" tokens
      // are not in basicToken because
      // there are two token variants
      // ("&&", "[?", "<=", ">=").  This is specially handled
      // below.

      var basicTokens = {
        ".": TOK_DOT,
        "*": TOK_STAR,
        ",": TOK_COMMA,
        ":": TOK_COLON,
        "{": TOK_LBRACE,
        "}": TOK_RBRACE,
        "]": TOK_RBRACKET,
        "(": TOK_LPAREN,
        ")": TOK_RPAREN,
        "@": TOK_CURRENT
      };

      var operatorStartToken = {
          "<": true,
          ">": true,
          "=": true,
          "!": true
      };

      var skipChars = {
          " ": true,
          "\t": true,
          "\n": true
      };


      function isAlpha(ch) {
          return (ch >= "a" && ch <= "z") ||
                 (ch >= "A" && ch <= "Z") ||
                 ch === "_";
      }

      function isNum(ch) {
          return (ch >= "0" && ch <= "9") ||
                 ch === "-";
      }
      function isAlphaNum(ch) {
          return (ch >= "a" && ch <= "z") ||
                 (ch >= "A" && ch <= "Z") ||
                 (ch >= "0" && ch <= "9") ||
                 ch === "_";
      }

      function Lexer() {
      }
      Lexer.prototype = {
          tokenize: function(stream) {
              var tokens = [];
              this._current = 0;
              var start;
              var identifier;
              var token;
              while (this._current < stream.length) {
                  if (isAlpha(stream[this._current])) {
                      start = this._current;
                      identifier = this._consumeUnquotedIdentifier(stream);
                      tokens.push({type: TOK_UNQUOTEDIDENTIFIER,
                                   value: identifier,
                                   start: start});
                  } else if (basicTokens[stream[this._current]] !== undefined) {
                      tokens.push({type: basicTokens[stream[this._current]],
                                  value: stream[this._current],
                                  start: this._current});
                      this._current++;
                  } else if (isNum(stream[this._current])) {
                      token = this._consumeNumber(stream);
                      tokens.push(token);
                  } else if (stream[this._current] === "[") {
                      // No need to increment this._current.  This happens
                      // in _consumeLBracket
                      token = this._consumeLBracket(stream);
                      tokens.push(token);
                  } else if (stream[this._current] === "\"") {
                      start = this._current;
                      identifier = this._consumeQuotedIdentifier(stream);
                      tokens.push({type: TOK_QUOTEDIDENTIFIER,
                                   value: identifier,
                                   start: start});
                  } else if (stream[this._current] === "'") {
                      start = this._current;
                      identifier = this._consumeRawStringLiteral(stream);
                      tokens.push({type: TOK_LITERAL,
                                   value: identifier,
                                   start: start});
                  } else if (stream[this._current] === "`") {
                      start = this._current;
                      var literal = this._consumeLiteral(stream);
                      tokens.push({type: TOK_LITERAL,
                                   value: literal,
                                   start: start});
                  } else if (operatorStartToken[stream[this._current]] !== undefined) {
                      tokens.push(this._consumeOperator(stream));
                  } else if (skipChars[stream[this._current]] !== undefined) {
                      // Ignore whitespace.
                      this._current++;
                  } else if (stream[this._current] === "&") {
                      start = this._current;
                      this._current++;
                      if (stream[this._current] === "&") {
                          this._current++;
                          tokens.push({type: TOK_AND, value: "&&", start: start});
                      } else {
                          tokens.push({type: TOK_EXPREF, value: "&", start: start});
                      }
                  } else if (stream[this._current] === "|") {
                      start = this._current;
                      this._current++;
                      if (stream[this._current] === "|") {
                          this._current++;
                          tokens.push({type: TOK_OR, value: "||", start: start});
                      } else {
                          tokens.push({type: TOK_PIPE, value: "|", start: start});
                      }
                  } else {
                      var error = new Error("Unknown character:" + stream[this._current]);
                      error.name = "LexerError";
                      throw error;
                  }
              }
              return tokens;
          },

          _consumeUnquotedIdentifier: function(stream) {
              var start = this._current;
              this._current++;
              while (this._current < stream.length && isAlphaNum(stream[this._current])) {
                  this._current++;
              }
              return stream.slice(start, this._current);
          },

          _consumeQuotedIdentifier: function(stream) {
              var start = this._current;
              this._current++;
              var maxLength = stream.length;
              while (stream[this._current] !== "\"" && this._current < maxLength) {
                  // You can escape a double quote and you can escape an escape.
                  var current = this._current;
                  if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
                                                   stream[current + 1] === "\"")) {
                      current += 2;
                  } else {
                      current++;
                  }
                  this._current = current;
              }
              this._current++;
              return JSON.parse(stream.slice(start, this._current));
          },

          _consumeRawStringLiteral: function(stream) {
              var start = this._current;
              this._current++;
              var maxLength = stream.length;
              while (stream[this._current] !== "'" && this._current < maxLength) {
                  // You can escape a single quote and you can escape an escape.
                  var current = this._current;
                  if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
                                                   stream[current + 1] === "'")) {
                      current += 2;
                  } else {
                      current++;
                  }
                  this._current = current;
              }
              this._current++;
              var literal = stream.slice(start + 1, this._current - 1);
              return literal.replace("\\'", "'");
          },

          _consumeNumber: function(stream) {
              var start = this._current;
              this._current++;
              var maxLength = stream.length;
              while (isNum(stream[this._current]) && this._current < maxLength) {
                  this._current++;
              }
              var value = parseInt(stream.slice(start, this._current));
              return {type: TOK_NUMBER, value: value, start: start};
          },

          _consumeLBracket: function(stream) {
              var start = this._current;
              this._current++;
              if (stream[this._current] === "?") {
                  this._current++;
                  return {type: TOK_FILTER, value: "[?", start: start};
              } else if (stream[this._current] === "]") {
                  this._current++;
                  return {type: TOK_FLATTEN, value: "[]", start: start};
              } else {
                  return {type: TOK_LBRACKET, value: "[", start: start};
              }
          },

          _consumeOperator: function(stream) {
              var start = this._current;
              var startingChar = stream[start];
              this._current++;
              if (startingChar === "!") {
                  if (stream[this._current] === "=") {
                      this._current++;
                      return {type: TOK_NE, value: "!=", start: start};
                  } else {
                    return {type: TOK_NOT, value: "!", start: start};
                  }
              } else if (startingChar === "<") {
                  if (stream[this._current] === "=") {
                      this._current++;
                      return {type: TOK_LTE, value: "<=", start: start};
                  } else {
                      return {type: TOK_LT, value: "<", start: start};
                  }
              } else if (startingChar === ">") {
                  if (stream[this._current] === "=") {
                      this._current++;
                      return {type: TOK_GTE, value: ">=", start: start};
                  } else {
                      return {type: TOK_GT, value: ">", start: start};
                  }
              } else if (startingChar === "=") {
                  if (stream[this._current] === "=") {
                      this._current++;
                      return {type: TOK_EQ, value: "==", start: start};
                  }
              }
          },

          _consumeLiteral: function(stream) {
              this._current++;
              var start = this._current;
              var maxLength = stream.length;
              var literal;
              while(stream[this._current] !== "`" && this._current < maxLength) {
                  // You can escape a literal char or you can escape the escape.
                  var current = this._current;
                  if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
                                                   stream[current + 1] === "`")) {
                      current += 2;
                  } else {
                      current++;
                  }
                  this._current = current;
              }
              var literalString = trimLeft(stream.slice(start, this._current));
              literalString = literalString.replace("\\`", "`");
              if (this._looksLikeJSON(literalString)) {
                  literal = JSON.parse(literalString);
              } else {
                  // Try to JSON parse it as "<literal>"
                  literal = JSON.parse("\"" + literalString + "\"");
              }
              // +1 gets us to the ending "`", +1 to move on to the next char.
              this._current++;
              return literal;
          },

          _looksLikeJSON: function(literalString) {
              var startingChars = "[{\"";
              var jsonLiterals = ["true", "false", "null"];
              var numberLooking = "-0123456789";

              if (literalString === "") {
                  return false;
              } else if (startingChars.indexOf(literalString[0]) >= 0) {
                  return true;
              } else if (jsonLiterals.indexOf(literalString) >= 0) {
                  return true;
              } else if (numberLooking.indexOf(literalString[0]) >= 0) {
                  try {
                      JSON.parse(literalString);
                      return true;
                  } catch (ex) {
                      return false;
                  }
              } else {
                  return false;
              }
          }
      };

          var bindingPower = {};
          bindingPower[TOK_EOF] = 0;
          bindingPower[TOK_UNQUOTEDIDENTIFIER] = 0;
          bindingPower[TOK_QUOTEDIDENTIFIER] = 0;
          bindingPower[TOK_RBRACKET] = 0;
          bindingPower[TOK_RPAREN] = 0;
          bindingPower[TOK_COMMA] = 0;
          bindingPower[TOK_RBRACE] = 0;
          bindingPower[TOK_NUMBER] = 0;
          bindingPower[TOK_CURRENT] = 0;
          bindingPower[TOK_EXPREF] = 0;
          bindingPower[TOK_PIPE] = 1;
          bindingPower[TOK_OR] = 2;
          bindingPower[TOK_AND] = 3;
          bindingPower[TOK_EQ] = 5;
          bindingPower[TOK_GT] = 5;
          bindingPower[TOK_LT] = 5;
          bindingPower[TOK_GTE] = 5;
          bindingPower[TOK_LTE] = 5;
          bindingPower[TOK_NE] = 5;
          bindingPower[TOK_FLATTEN] = 9;
          bindingPower[TOK_STAR] = 20;
          bindingPower[TOK_FILTER] = 21;
          bindingPower[TOK_DOT] = 40;
          bindingPower[TOK_NOT] = 45;
          bindingPower[TOK_LBRACE] = 50;
          bindingPower[TOK_LBRACKET] = 55;
          bindingPower[TOK_LPAREN] = 60;

      function Parser() {
      }

      Parser.prototype = {
          parse: function(expression) {
              this._loadTokens(expression);
              this.index = 0;
              var ast = this.expression(0);
              if (this._lookahead(0) !== TOK_EOF) {
                  var t = this._lookaheadToken(0);
                  var error = new Error(
                      "Unexpected token type: " + t.type + ", value: " + t.value);
                  error.name = "ParserError";
                  throw error;
              }
              return ast;
          },

          _loadTokens: function(expression) {
              var lexer = new Lexer();
              var tokens = lexer.tokenize(expression);
              tokens.push({type: TOK_EOF, value: "", start: expression.length});
              this.tokens = tokens;
          },

          expression: function(rbp) {
              var leftToken = this._lookaheadToken(0);
              this._advance();
              var left = this.nud(leftToken);
              var currentToken = this._lookahead(0);
              while (rbp < bindingPower[currentToken]) {
                  this._advance();
                  left = this.led(currentToken, left);
                  currentToken = this._lookahead(0);
              }
              return left;
          },

          _lookahead: function(number) {
              return this.tokens[this.index + number].type;
          },

          _lookaheadToken: function(number) {
              return this.tokens[this.index + number];
          },

          _advance: function() {
              this.index++;
          },

          nud: function(token) {
            var left;
            var right;
            var expression;
            switch (token.type) {
              case TOK_LITERAL:
                return {type: "Literal", value: token.value};
              case TOK_UNQUOTEDIDENTIFIER:
                return {type: "Field", name: token.value};
              case TOK_QUOTEDIDENTIFIER:
                var node = {type: "Field", name: token.value};
                if (this._lookahead(0) === TOK_LPAREN) {
                    throw new Error("Quoted identifier not allowed for function names.");
                }
                return node;
              case TOK_NOT:
                right = this.expression(bindingPower.Not);
                return {type: "NotExpression", children: [right]};
              case TOK_STAR:
                left = {type: "Identity"};
                right = null;
                if (this._lookahead(0) === TOK_RBRACKET) {
                    // This can happen in a multiselect,
                    // [a, b, *]
                    right = {type: "Identity"};
                } else {
                    right = this._parseProjectionRHS(bindingPower.Star);
                }
                return {type: "ValueProjection", children: [left, right]};
              case TOK_FILTER:
                return this.led(token.type, {type: "Identity"});
              case TOK_LBRACE:
                return this._parseMultiselectHash();
              case TOK_FLATTEN:
                left = {type: TOK_FLATTEN, children: [{type: "Identity"}]};
                right = this._parseProjectionRHS(bindingPower.Flatten);
                return {type: "Projection", children: [left, right]};
              case TOK_LBRACKET:
                if (this._lookahead(0) === TOK_NUMBER || this._lookahead(0) === TOK_COLON) {
                    right = this._parseIndexExpression();
                    return this._projectIfSlice({type: "Identity"}, right);
                } else if (this._lookahead(0) === TOK_STAR &&
                           this._lookahead(1) === TOK_RBRACKET) {
                    this._advance();
                    this._advance();
                    right = this._parseProjectionRHS(bindingPower.Star);
                    return {type: "Projection",
                            children: [{type: "Identity"}, right]};
                }
                return this._parseMultiselectList();
              case TOK_CURRENT:
                return {type: TOK_CURRENT};
              case TOK_EXPREF:
                expression = this.expression(bindingPower.Expref);
                return {type: "ExpressionReference", children: [expression]};
              case TOK_LPAREN:
                var args = [];
                while (this._lookahead(0) !== TOK_RPAREN) {
                  if (this._lookahead(0) === TOK_CURRENT) {
                    expression = {type: TOK_CURRENT};
                    this._advance();
                  } else {
                    expression = this.expression(0);
                  }
                  args.push(expression);
                }
                this._match(TOK_RPAREN);
                return args[0];
              default:
                this._errorToken(token);
            }
          },

          led: function(tokenName, left) {
            var right;
            switch(tokenName) {
              case TOK_DOT:
                var rbp = bindingPower.Dot;
                if (this._lookahead(0) !== TOK_STAR) {
                    right = this._parseDotRHS(rbp);
                    return {type: "Subexpression", children: [left, right]};
                }
                // Creating a projection.
                this._advance();
                right = this._parseProjectionRHS(rbp);
                return {type: "ValueProjection", children: [left, right]};
              case TOK_PIPE:
                right = this.expression(bindingPower.Pipe);
                return {type: TOK_PIPE, children: [left, right]};
              case TOK_OR:
                right = this.expression(bindingPower.Or);
                return {type: "OrExpression", children: [left, right]};
              case TOK_AND:
                right = this.expression(bindingPower.And);
                return {type: "AndExpression", children: [left, right]};
              case TOK_LPAREN:
                var name = left.name;
                var args = [];
                var expression, node;
                while (this._lookahead(0) !== TOK_RPAREN) {
                  if (this._lookahead(0) === TOK_CURRENT) {
                    expression = {type: TOK_CURRENT};
                    this._advance();
                  } else {
                    expression = this.expression(0);
                  }
                  if (this._lookahead(0) === TOK_COMMA) {
                    this._match(TOK_COMMA);
                  }
                  args.push(expression);
                }
                this._match(TOK_RPAREN);
                node = {type: "Function", name: name, children: args};
                return node;
              case TOK_FILTER:
                var condition = this.expression(0);
                this._match(TOK_RBRACKET);
                if (this._lookahead(0) === TOK_FLATTEN) {
                  right = {type: "Identity"};
                } else {
                  right = this._parseProjectionRHS(bindingPower.Filter);
                }
                return {type: "FilterProjection", children: [left, right, condition]};
              case TOK_FLATTEN:
                var leftNode = {type: TOK_FLATTEN, children: [left]};
                var rightNode = this._parseProjectionRHS(bindingPower.Flatten);
                return {type: "Projection", children: [leftNode, rightNode]};
              case TOK_EQ:
              case TOK_NE:
              case TOK_GT:
              case TOK_GTE:
              case TOK_LT:
              case TOK_LTE:
                return this._parseComparator(left, tokenName);
              case TOK_LBRACKET:
                var token = this._lookaheadToken(0);
                if (token.type === TOK_NUMBER || token.type === TOK_COLON) {
                    right = this._parseIndexExpression();
                    return this._projectIfSlice(left, right);
                }
                this._match(TOK_STAR);
                this._match(TOK_RBRACKET);
                right = this._parseProjectionRHS(bindingPower.Star);
                return {type: "Projection", children: [left, right]};
              default:
                this._errorToken(this._lookaheadToken(0));
            }
          },

          _match: function(tokenType) {
              if (this._lookahead(0) === tokenType) {
                  this._advance();
              } else {
                  var t = this._lookaheadToken(0);
                  var error = new Error("Expected " + tokenType + ", got: " + t.type);
                  error.name = "ParserError";
                  throw error;
              }
          },

          _errorToken: function(token) {
              var error = new Error("Invalid token (" +
                                    token.type + "): \"" +
                                    token.value + "\"");
              error.name = "ParserError";
              throw error;
          },


          _parseIndexExpression: function() {
              if (this._lookahead(0) === TOK_COLON || this._lookahead(1) === TOK_COLON) {
                  return this._parseSliceExpression();
              } else {
                  var node = {
                      type: "Index",
                      value: this._lookaheadToken(0).value};
                  this._advance();
                  this._match(TOK_RBRACKET);
                  return node;
              }
          },

          _projectIfSlice: function(left, right) {
              var indexExpr = {type: "IndexExpression", children: [left, right]};
              if (right.type === "Slice") {
                  return {
                      type: "Projection",
                      children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)]
                  };
              } else {
                  return indexExpr;
              }
          },

          _parseSliceExpression: function() {
              // [start:end:step] where each part is optional, as well as the last
              // colon.
              var parts = [null, null, null];
              var index = 0;
              var currentToken = this._lookahead(0);
              while (currentToken !== TOK_RBRACKET && index < 3) {
                  if (currentToken === TOK_COLON) {
                      index++;
                      this._advance();
                  } else if (currentToken === TOK_NUMBER) {
                      parts[index] = this._lookaheadToken(0).value;
                      this._advance();
                  } else {
                      var t = this._lookahead(0);
                      var error = new Error("Syntax error, unexpected token: " +
                                            t.value + "(" + t.type + ")");
                      error.name = "Parsererror";
                      throw error;
                  }
                  currentToken = this._lookahead(0);
              }
              this._match(TOK_RBRACKET);
              return {
                  type: "Slice",
                  children: parts
              };
          },

          _parseComparator: function(left, comparator) {
            var right = this.expression(bindingPower[comparator]);
            return {type: "Comparator", name: comparator, children: [left, right]};
          },

          _parseDotRHS: function(rbp) {
              var lookahead = this._lookahead(0);
              var exprTokens = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];
              if (exprTokens.indexOf(lookahead) >= 0) {
                  return this.expression(rbp);
              } else if (lookahead === TOK_LBRACKET) {
                  this._match(TOK_LBRACKET);
                  return this._parseMultiselectList();
              } else if (lookahead === TOK_LBRACE) {
                  this._match(TOK_LBRACE);
                  return this._parseMultiselectHash();
              }
          },

          _parseProjectionRHS: function(rbp) {
              var right;
              if (bindingPower[this._lookahead(0)] < 10) {
                  right = {type: "Identity"};
              } else if (this._lookahead(0) === TOK_LBRACKET) {
                  right = this.expression(rbp);
              } else if (this._lookahead(0) === TOK_FILTER) {
                  right = this.expression(rbp);
              } else if (this._lookahead(0) === TOK_DOT) {
                  this._match(TOK_DOT);
                  right = this._parseDotRHS(rbp);
              } else {
                  var t = this._lookaheadToken(0);
                  var error = new Error("Sytanx error, unexpected token: " +
                                        t.value + "(" + t.type + ")");
                  error.name = "ParserError";
                  throw error;
              }
              return right;
          },

          _parseMultiselectList: function() {
              var expressions = [];
              while (this._lookahead(0) !== TOK_RBRACKET) {
                  var expression = this.expression(0);
                  expressions.push(expression);
                  if (this._lookahead(0) === TOK_COMMA) {
                      this._match(TOK_COMMA);
                      if (this._lookahead(0) === TOK_RBRACKET) {
                        throw new Error("Unexpected token Rbracket");
                      }
                  }
              }
              this._match(TOK_RBRACKET);
              return {type: "MultiSelectList", children: expressions};
          },

          _parseMultiselectHash: function() {
            var pairs = [];
            var identifierTypes = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER];
            var keyToken, keyName, value, node;
            for (;;) {
              keyToken = this._lookaheadToken(0);
              if (identifierTypes.indexOf(keyToken.type) < 0) {
                throw new Error("Expecting an identifier token, got: " +
                                keyToken.type);
              }
              keyName = keyToken.value;
              this._advance();
              this._match(TOK_COLON);
              value = this.expression(0);
              node = {type: "KeyValuePair", name: keyName, value: value};
              pairs.push(node);
              if (this._lookahead(0) === TOK_COMMA) {
                this._match(TOK_COMMA);
              } else if (this._lookahead(0) === TOK_RBRACE) {
                this._match(TOK_RBRACE);
                break;
              }
            }
            return {type: "MultiSelectHash", children: pairs};
          }
      };


      function TreeInterpreter(runtime) {
        this.runtime = runtime;
      }

      TreeInterpreter.prototype = {
          search: function(node, value) {
              return this.visit(node, value);
          },

          visit: function(node, value) {
              var matched, current, result, first, second, field, left, right, collected, i;
              switch (node.type) {
                case "Field":
                  if (value !== null && isObject(value)) {
                      field = value[node.name];
                      if (field === undefined) {
                          return null;
                      } else {
                          return field;
                      }
                  }
                  return null;
                case "Subexpression":
                  result = this.visit(node.children[0], value);
                  for (i = 1; i < node.children.length; i++) {
                      result = this.visit(node.children[1], result);
                      if (result === null) {
                          return null;
                      }
                  }
                  return result;
                case "IndexExpression":
                  left = this.visit(node.children[0], value);
                  right = this.visit(node.children[1], left);
                  return right;
                case "Index":
                  if (!isArray(value)) {
                    return null;
                  }
                  var index = node.value;
                  if (index < 0) {
                    index = value.length + index;
                  }
                  result = value[index];
                  if (result === undefined) {
                    result = null;
                  }
                  return result;
                case "Slice":
                  if (!isArray(value)) {
                    return null;
                  }
                  var sliceParams = node.children.slice(0);
                  var computed = this.computeSliceParams(value.length, sliceParams);
                  var start = computed[0];
                  var stop = computed[1];
                  var step = computed[2];
                  result = [];
                  if (step > 0) {
                      for (i = start; i < stop; i += step) {
                          result.push(value[i]);
                      }
                  } else {
                      for (i = start; i > stop; i += step) {
                          result.push(value[i]);
                      }
                  }
                  return result;
                case "Projection":
                  // Evaluate left child.
                  var base = this.visit(node.children[0], value);
                  if (!isArray(base)) {
                    return null;
                  }
                  collected = [];
                  for (i = 0; i < base.length; i++) {
                    current = this.visit(node.children[1], base[i]);
                    if (current !== null) {
                      collected.push(current);
                    }
                  }
                  return collected;
                case "ValueProjection":
                  // Evaluate left child.
                  base = this.visit(node.children[0], value);
                  if (!isObject(base)) {
                    return null;
                  }
                  collected = [];
                  var values = objValues(base);
                  for (i = 0; i < values.length; i++) {
                    current = this.visit(node.children[1], values[i]);
                    if (current !== null) {
                      collected.push(current);
                    }
                  }
                  return collected;
                case "FilterProjection":
                  base = this.visit(node.children[0], value);
                  if (!isArray(base)) {
                    return null;
                  }
                  var filtered = [];
                  var finalResults = [];
                  for (i = 0; i < base.length; i++) {
                    matched = this.visit(node.children[2], base[i]);
                    if (!isFalse(matched)) {
                      filtered.push(base[i]);
                    }
                  }
                  for (var j = 0; j < filtered.length; j++) {
                    current = this.visit(node.children[1], filtered[j]);
                    if (current !== null) {
                      finalResults.push(current);
                    }
                  }
                  return finalResults;
                case "Comparator":
                  first = this.visit(node.children[0], value);
                  second = this.visit(node.children[1], value);
                  switch(node.name) {
                    case TOK_EQ:
                      result = strictDeepEqual(first, second);
                      break;
                    case TOK_NE:
                      result = !strictDeepEqual(first, second);
                      break;
                    case TOK_GT:
                      result = first > second;
                      break;
                    case TOK_GTE:
                      result = first >= second;
                      break;
                    case TOK_LT:
                      result = first < second;
                      break;
                    case TOK_LTE:
                      result = first <= second;
                      break;
                    default:
                      throw new Error("Unknown comparator: " + node.name);
                  }
                  return result;
                case TOK_FLATTEN:
                  var original = this.visit(node.children[0], value);
                  if (!isArray(original)) {
                    return null;
                  }
                  var merged = [];
                  for (i = 0; i < original.length; i++) {
                    current = original[i];
                    if (isArray(current)) {
                      merged.push.apply(merged, current);
                    } else {
                      merged.push(current);
                    }
                  }
                  return merged;
                case "Identity":
                  return value;
                case "MultiSelectList":
                  if (value === null) {
                    return null;
                  }
                  collected = [];
                  for (i = 0; i < node.children.length; i++) {
                      collected.push(this.visit(node.children[i], value));
                  }
                  return collected;
                case "MultiSelectHash":
                  if (value === null) {
                    return null;
                  }
                  collected = {};
                  var child;
                  for (i = 0; i < node.children.length; i++) {
                    child = node.children[i];
                    collected[child.name] = this.visit(child.value, value);
                  }
                  return collected;
                case "OrExpression":
                  matched = this.visit(node.children[0], value);
                  if (isFalse(matched)) {
                      matched = this.visit(node.children[1], value);
                  }
                  return matched;
                case "AndExpression":
                  first = this.visit(node.children[0], value);

                  if (isFalse(first) === true) {
                    return first;
                  }
                  return this.visit(node.children[1], value);
                case "NotExpression":
                  first = this.visit(node.children[0], value);
                  return isFalse(first);
                case "Literal":
                  return node.value;
                case TOK_PIPE:
                  left = this.visit(node.children[0], value);
                  return this.visit(node.children[1], left);
                case TOK_CURRENT:
                  return value;
                case "Function":
                  var resolvedArgs = [];
                  for (i = 0; i < node.children.length; i++) {
                      resolvedArgs.push(this.visit(node.children[i], value));
                  }
                  return this.runtime.callFunction(node.name, resolvedArgs);
                case "ExpressionReference":
                  var refNode = node.children[0];
                  // Tag the node with a specific attribute so the type
                  // checker verify the type.
                  refNode.jmespathType = TOK_EXPREF;
                  return refNode;
                default:
                  throw new Error("Unknown node type: " + node.type);
              }
          },

          computeSliceParams: function(arrayLength, sliceParams) {
            var start = sliceParams[0];
            var stop = sliceParams[1];
            var step = sliceParams[2];
            var computed = [null, null, null];
            if (step === null) {
              step = 1;
            } else if (step === 0) {
              var error = new Error("Invalid slice, step cannot be 0");
              error.name = "RuntimeError";
              throw error;
            }
            var stepValueNegative = step < 0 ? true : false;

            if (start === null) {
                start = stepValueNegative ? arrayLength - 1 : 0;
            } else {
                start = this.capSliceRange(arrayLength, start, step);
            }

            if (stop === null) {
                stop = stepValueNegative ? -1 : arrayLength;
            } else {
                stop = this.capSliceRange(arrayLength, stop, step);
            }
            computed[0] = start;
            computed[1] = stop;
            computed[2] = step;
            return computed;
          },

          capSliceRange: function(arrayLength, actualValue, step) {
              if (actualValue < 0) {
                  actualValue += arrayLength;
                  if (actualValue < 0) {
                      actualValue = step < 0 ? -1 : 0;
                  }
              } else if (actualValue >= arrayLength) {
                  actualValue = step < 0 ? arrayLength - 1 : arrayLength;
              }
              return actualValue;
          }

      };

      function Runtime(interpreter) {
        this._interpreter = interpreter;
        this.functionTable = {
            // name: [function, <signature>]
            // The <signature> can be:
            //
            // {
            //   args: [[type1, type2], [type1, type2]],
            //   variadic: true|false
            // }
            //
            // Each arg in the arg list is a list of valid types
            // (if the function is overloaded and supports multiple
            // types.  If the type is "any" then no type checking
            // occurs on the argument.  Variadic is optional
            // and if not provided is assumed to be false.
            abs: {_func: this._functionAbs, _signature: [{types: [TYPE_NUMBER]}]},
            avg: {_func: this._functionAvg, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},
            ceil: {_func: this._functionCeil, _signature: [{types: [TYPE_NUMBER]}]},
            contains: {
                _func: this._functionContains,
                _signature: [{types: [TYPE_STRING, TYPE_ARRAY]},
                            {types: [TYPE_ANY]}]},
            "ends_with": {
                _func: this._functionEndsWith,
                _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},
            floor: {_func: this._functionFloor, _signature: [{types: [TYPE_NUMBER]}]},
            length: {
                _func: this._functionLength,
                _signature: [{types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT]}]},
            map: {
                _func: this._functionMap,
                _signature: [{types: [TYPE_EXPREF]}, {types: [TYPE_ARRAY]}]},
            max: {
                _func: this._functionMax,
                _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},
            "merge": {
                _func: this._functionMerge,
                _signature: [{types: [TYPE_OBJECT], variadic: true}]
            },
            "max_by": {
              _func: this._functionMaxBy,
              _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
            },
            sum: {_func: this._functionSum, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},
            "starts_with": {
                _func: this._functionStartsWith,
                _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},
            min: {
                _func: this._functionMin,
                _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},
            "min_by": {
              _func: this._functionMinBy,
              _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
            },
            type: {_func: this._functionType, _signature: [{types: [TYPE_ANY]}]},
            keys: {_func: this._functionKeys, _signature: [{types: [TYPE_OBJECT]}]},
            values: {_func: this._functionValues, _signature: [{types: [TYPE_OBJECT]}]},
            sort: {_func: this._functionSort, _signature: [{types: [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER]}]},
            "sort_by": {
              _func: this._functionSortBy,
              _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
            },
            join: {
                _func: this._functionJoin,
                _signature: [
                    {types: [TYPE_STRING]},
                    {types: [TYPE_ARRAY_STRING]}
                ]
            },
            reverse: {
                _func: this._functionReverse,
                _signature: [{types: [TYPE_STRING, TYPE_ARRAY]}]},
            "to_array": {_func: this._functionToArray, _signature: [{types: [TYPE_ANY]}]},
            "to_string": {_func: this._functionToString, _signature: [{types: [TYPE_ANY]}]},
            "to_number": {_func: this._functionToNumber, _signature: [{types: [TYPE_ANY]}]},
            "not_null": {
                _func: this._functionNotNull,
                _signature: [{types: [TYPE_ANY], variadic: true}]
            }
        };
      }

      Runtime.prototype = {
        callFunction: function(name, resolvedArgs) {
          var functionEntry = this.functionTable[name];
          if (functionEntry === undefined) {
              throw new Error("Unknown function: " + name + "()");
          }
          this._validateArgs(name, resolvedArgs, functionEntry._signature);
          return functionEntry._func.call(this, resolvedArgs);
        },

        _validateArgs: function(name, args, signature) {
            // Validating the args requires validating
            // the correct arity and the correct type of each arg.
            // If the last argument is declared as variadic, then we need
            // a minimum number of args to be required.  Otherwise it has to
            // be an exact amount.
            var pluralized;
            if (signature[signature.length - 1].variadic) {
                if (args.length < signature.length) {
                    pluralized = signature.length === 1 ? " argument" : " arguments";
                    throw new Error("ArgumentError: " + name + "() " +
                                    "takes at least" + signature.length + pluralized +
                                    " but received " + args.length);
                }
            } else if (args.length !== signature.length) {
                pluralized = signature.length === 1 ? " argument" : " arguments";
                throw new Error("ArgumentError: " + name + "() " +
                                "takes " + signature.length + pluralized +
                                " but received " + args.length);
            }
            var currentSpec;
            var actualType;
            var typeMatched;
            for (var i = 0; i < signature.length; i++) {
                typeMatched = false;
                currentSpec = signature[i].types;
                actualType = this._getTypeName(args[i]);
                for (var j = 0; j < currentSpec.length; j++) {
                    if (this._typeMatches(actualType, currentSpec[j], args[i])) {
                        typeMatched = true;
                        break;
                    }
                }
                if (!typeMatched) {
                    var expected = currentSpec
                        .map(function(typeIdentifier) {
                            return TYPE_NAME_TABLE[typeIdentifier];
                        })
                        .join(',');
                    throw new Error("TypeError: " + name + "() " +
                                    "expected argument " + (i + 1) +
                                    " to be type " + expected +
                                    " but received type " +
                                    TYPE_NAME_TABLE[actualType] + " instead.");
                }
            }
        },

        _typeMatches: function(actual, expected, argValue) {
            if (expected === TYPE_ANY) {
                return true;
            }
            if (expected === TYPE_ARRAY_STRING ||
                expected === TYPE_ARRAY_NUMBER ||
                expected === TYPE_ARRAY) {
                // The expected type can either just be array,
                // or it can require a specific subtype (array of numbers).
                //
                // The simplest case is if "array" with no subtype is specified.
                if (expected === TYPE_ARRAY) {
                    return actual === TYPE_ARRAY;
                } else if (actual === TYPE_ARRAY) {
                    // Otherwise we need to check subtypes.
                    // I think this has potential to be improved.
                    var subtype;
                    if (expected === TYPE_ARRAY_NUMBER) {
                      subtype = TYPE_NUMBER;
                    } else if (expected === TYPE_ARRAY_STRING) {
                      subtype = TYPE_STRING;
                    }
                    for (var i = 0; i < argValue.length; i++) {
                        if (!this._typeMatches(
                                this._getTypeName(argValue[i]), subtype,
                                                 argValue[i])) {
                            return false;
                        }
                    }
                    return true;
                }
            } else {
                return actual === expected;
            }
        },
        _getTypeName: function(obj) {
            switch (Object.prototype.toString.call(obj)) {
                case "[object String]":
                  return TYPE_STRING;
                case "[object Number]":
                  return TYPE_NUMBER;
                case "[object Array]":
                  return TYPE_ARRAY;
                case "[object Boolean]":
                  return TYPE_BOOLEAN;
                case "[object Null]":
                  return TYPE_NULL;
                case "[object Object]":
                  // Check if it's an expref.  If it has, it's been
                  // tagged with a jmespathType attr of 'Expref';
                  if (obj.jmespathType === TOK_EXPREF) {
                    return TYPE_EXPREF;
                  } else {
                    return TYPE_OBJECT;
                  }
            }
        },

        _functionStartsWith: function(resolvedArgs) {
            return resolvedArgs[0].lastIndexOf(resolvedArgs[1]) === 0;
        },

        _functionEndsWith: function(resolvedArgs) {
            var searchStr = resolvedArgs[0];
            var suffix = resolvedArgs[1];
            return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;
        },

        _functionReverse: function(resolvedArgs) {
            var typeName = this._getTypeName(resolvedArgs[0]);
            if (typeName === TYPE_STRING) {
              var originalStr = resolvedArgs[0];
              var reversedStr = "";
              for (var i = originalStr.length - 1; i >= 0; i--) {
                  reversedStr += originalStr[i];
              }
              return reversedStr;
            } else {
              var reversedArray = resolvedArgs[0].slice(0);
              reversedArray.reverse();
              return reversedArray;
            }
        },

        _functionAbs: function(resolvedArgs) {
          return Math.abs(resolvedArgs[0]);
        },

        _functionCeil: function(resolvedArgs) {
            return Math.ceil(resolvedArgs[0]);
        },

        _functionAvg: function(resolvedArgs) {
            var sum = 0;
            var inputArray = resolvedArgs[0];
            for (var i = 0; i < inputArray.length; i++) {
                sum += inputArray[i];
            }
            return sum / inputArray.length;
        },

        _functionContains: function(resolvedArgs) {
            return resolvedArgs[0].indexOf(resolvedArgs[1]) >= 0;
        },

        _functionFloor: function(resolvedArgs) {
            return Math.floor(resolvedArgs[0]);
        },

        _functionLength: function(resolvedArgs) {
           if (!isObject(resolvedArgs[0])) {
             return resolvedArgs[0].length;
           } else {
             // As far as I can tell, there's no way to get the length
             // of an object without O(n) iteration through the object.
             return Object.keys(resolvedArgs[0]).length;
           }
        },

        _functionMap: function(resolvedArgs) {
          var mapped = [];
          var interpreter = this._interpreter;
          var exprefNode = resolvedArgs[0];
          var elements = resolvedArgs[1];
          for (var i = 0; i < elements.length; i++) {
              mapped.push(interpreter.visit(exprefNode, elements[i]));
          }
          return mapped;
        },

        _functionMerge: function(resolvedArgs) {
          var merged = {};
          for (var i = 0; i < resolvedArgs.length; i++) {
            var current = resolvedArgs[i];
            for (var key in current) {
              merged[key] = current[key];
            }
          }
          return merged;
        },

        _functionMax: function(resolvedArgs) {
          if (resolvedArgs[0].length > 0) {
            var typeName = this._getTypeName(resolvedArgs[0][0]);
            if (typeName === TYPE_NUMBER) {
              return Math.max.apply(Math, resolvedArgs[0]);
            } else {
              var elements = resolvedArgs[0];
              var maxElement = elements[0];
              for (var i = 1; i < elements.length; i++) {
                  if (maxElement.localeCompare(elements[i]) < 0) {
                      maxElement = elements[i];
                  }
              }
              return maxElement;
            }
          } else {
              return null;
          }
        },

        _functionMin: function(resolvedArgs) {
          if (resolvedArgs[0].length > 0) {
            var typeName = this._getTypeName(resolvedArgs[0][0]);
            if (typeName === TYPE_NUMBER) {
              return Math.min.apply(Math, resolvedArgs[0]);
            } else {
              var elements = resolvedArgs[0];
              var minElement = elements[0];
              for (var i = 1; i < elements.length; i++) {
                  if (elements[i].localeCompare(minElement) < 0) {
                      minElement = elements[i];
                  }
              }
              return minElement;
            }
          } else {
            return null;
          }
        },

        _functionSum: function(resolvedArgs) {
          var sum = 0;
          var listToSum = resolvedArgs[0];
          for (var i = 0; i < listToSum.length; i++) {
            sum += listToSum[i];
          }
          return sum;
        },

        _functionType: function(resolvedArgs) {
            switch (this._getTypeName(resolvedArgs[0])) {
              case TYPE_NUMBER:
                return "number";
              case TYPE_STRING:
                return "string";
              case TYPE_ARRAY:
                return "array";
              case TYPE_OBJECT:
                return "object";
              case TYPE_BOOLEAN:
                return "boolean";
              case TYPE_EXPREF:
                return "expref";
              case TYPE_NULL:
                return "null";
            }
        },

        _functionKeys: function(resolvedArgs) {
            return Object.keys(resolvedArgs[0]);
        },

        _functionValues: function(resolvedArgs) {
            var obj = resolvedArgs[0];
            var keys = Object.keys(obj);
            var values = [];
            for (var i = 0; i < keys.length; i++) {
                values.push(obj[keys[i]]);
            }
            return values;
        },

        _functionJoin: function(resolvedArgs) {
            var joinChar = resolvedArgs[0];
            var listJoin = resolvedArgs[1];
            return listJoin.join(joinChar);
        },

        _functionToArray: function(resolvedArgs) {
            if (this._getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {
                return resolvedArgs[0];
            } else {
                return [resolvedArgs[0]];
            }
        },

        _functionToString: function(resolvedArgs) {
            if (this._getTypeName(resolvedArgs[0]) === TYPE_STRING) {
                return resolvedArgs[0];
            } else {
                return JSON.stringify(resolvedArgs[0]);
            }
        },

        _functionToNumber: function(resolvedArgs) {
            var typeName = this._getTypeName(resolvedArgs[0]);
            var convertedValue;
            if (typeName === TYPE_NUMBER) {
                return resolvedArgs[0];
            } else if (typeName === TYPE_STRING) {
                convertedValue = +resolvedArgs[0];
                if (!isNaN(convertedValue)) {
                    return convertedValue;
                }
            }
            return null;
        },

        _functionNotNull: function(resolvedArgs) {
            for (var i = 0; i < resolvedArgs.length; i++) {
                if (this._getTypeName(resolvedArgs[i]) !== TYPE_NULL) {
                    return resolvedArgs[i];
                }
            }
            return null;
        },

        _functionSort: function(resolvedArgs) {
            var sortedArray = resolvedArgs[0].slice(0);
            sortedArray.sort();
            return sortedArray;
        },

        _functionSortBy: function(resolvedArgs) {
            var sortedArray = resolvedArgs[0].slice(0);
            if (sortedArray.length === 0) {
                return sortedArray;
            }
            var interpreter = this._interpreter;
            var exprefNode = resolvedArgs[1];
            var requiredType = this._getTypeName(
                interpreter.visit(exprefNode, sortedArray[0]));
            if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {
                throw new Error("TypeError");
            }
            var that = this;
            // In order to get a stable sort out of an unstable
            // sort algorithm, we decorate/sort/undecorate (DSU)
            // by creating a new list of [index, element] pairs.
            // In the cmp function, if the evaluated elements are
            // equal, then the index will be used as the tiebreaker.
            // After the decorated list has been sorted, it will be
            // undecorated to extract the original elements.
            var decorated = [];
            for (var i = 0; i < sortedArray.length; i++) {
              decorated.push([i, sortedArray[i]]);
            }
            decorated.sort(function(a, b) {
              var exprA = interpreter.visit(exprefNode, a[1]);
              var exprB = interpreter.visit(exprefNode, b[1]);
              if (that._getTypeName(exprA) !== requiredType) {
                  throw new Error(
                      "TypeError: expected " + requiredType + ", received " +
                      that._getTypeName(exprA));
              } else if (that._getTypeName(exprB) !== requiredType) {
                  throw new Error(
                      "TypeError: expected " + requiredType + ", received " +
                      that._getTypeName(exprB));
              }
              if (exprA > exprB) {
                return 1;
              } else if (exprA < exprB) {
                return -1;
              } else {
                // If they're equal compare the items by their
                // order to maintain relative order of equal keys
                // (i.e. to get a stable sort).
                return a[0] - b[0];
              }
            });
            // Undecorate: extract out the original list elements.
            for (var j = 0; j < decorated.length; j++) {
              sortedArray[j] = decorated[j][1];
            }
            return sortedArray;
        },

        _functionMaxBy: function(resolvedArgs) {
          var exprefNode = resolvedArgs[1];
          var resolvedArray = resolvedArgs[0];
          var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
          var maxNumber = -Infinity;
          var maxRecord;
          var current;
          for (var i = 0; i < resolvedArray.length; i++) {
            current = keyFunction(resolvedArray[i]);
            if (current > maxNumber) {
              maxNumber = current;
              maxRecord = resolvedArray[i];
            }
          }
          return maxRecord;
        },

        _functionMinBy: function(resolvedArgs) {
          var exprefNode = resolvedArgs[1];
          var resolvedArray = resolvedArgs[0];
          var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
          var minNumber = Infinity;
          var minRecord;
          var current;
          for (var i = 0; i < resolvedArray.length; i++) {
            current = keyFunction(resolvedArray[i]);
            if (current < minNumber) {
              minNumber = current;
              minRecord = resolvedArray[i];
            }
          }
          return minRecord;
        },

        createKeyFunction: function(exprefNode, allowedTypes) {
          var that = this;
          var interpreter = this._interpreter;
          var keyFunc = function(x) {
            var current = interpreter.visit(exprefNode, x);
            if (allowedTypes.indexOf(that._getTypeName(current)) < 0) {
              var msg = "TypeError: expected one of " + allowedTypes +
                        ", received " + that._getTypeName(current);
              throw new Error(msg);
            }
            return current;
          };
          return keyFunc;
        }

      };

      function compile(stream) {
        var parser = new Parser();
        var ast = parser.parse(stream);
        return ast;
      }

      function tokenize(stream) {
          var lexer = new Lexer();
          return lexer.tokenize(stream);
      }

      function search(data, expression) {
          var parser = new Parser();
          // This needs to be improved.  Both the interpreter and runtime depend on
          // each other.  The runtime needs the interpreter to support exprefs.
          // There's likely a clean way to avoid the cyclic dependency.
          var runtime = new Runtime();
          var interpreter = new TreeInterpreter(runtime);
          runtime._interpreter = interpreter;
          var node = parser.parse(expression);
          return interpreter.search(node, data);
      }

      exports.tokenize = tokenize;
      exports.compile = compile;
      exports.search = search;
      exports.strictDeepEqual = strictDeepEqual;
    })(exports);
    });

    /* src/TagsInput.svelte generated by Svelte v3.48.0 */
    const file$2 = "src/TagsInput.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    // (32:8) {#each tags as tag}
    function create_each_block$1(ctx) {
    	let sl_tag;
    	let t0_value = /*tag*/ ctx[5] + "";
    	let t0;
    	let t1;
    	let sl_tag_data_value_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			sl_tag = element("sl-tag");
    			t0 = text(t0_value);
    			t1 = space();
    			set_custom_element_data(sl_tag, "removable", "");
    			set_custom_element_data(sl_tag, "pill", "");
    			set_custom_element_data(sl_tag, "size", "small");
    			set_custom_element_data(sl_tag, "variant", "success");
    			set_custom_element_data(sl_tag, "data-value", sl_tag_data_value_value = /*tag*/ ctx[5]);
    			add_location(sl_tag, file$2, 32, 12, 809);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sl_tag, anchor);
    			append_dev(sl_tag, t0);
    			append_dev(sl_tag, t1);

    			if (!mounted) {
    				dispose = listen_dev(sl_tag, "sl-remove", /*handleTagRemove*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*tags*/ 1 && t0_value !== (t0_value = /*tag*/ ctx[5] + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*tags*/ 1 && sl_tag_data_value_value !== (sl_tag_data_value_value = /*tag*/ ctx[5])) {
    				set_custom_element_data(sl_tag, "data-value", sl_tag_data_value_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sl_tag);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(32:8) {#each tags as tag}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let sl_input;
    	let span;
    	let mounted;
    	let dispose;
    	let each_value = /*tags*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			sl_input = element("sl-input");
    			span = element("span");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(span, "slot", "prefix");
    			add_location(span, file$2, 30, 4, 748);
    			set_custom_element_data(sl_input, "size", "small");
    			set_custom_element_data(sl_input, "class", "svelte-133wlga");
    			add_location(sl_input, file$2, 26, 0, 683);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sl_input, anchor);
    			append_dev(sl_input, span);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(span, null);
    			}

    			if (!mounted) {
    				dispose = listen_dev(sl_input, "keydown", /*handleKeydown*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*tags, handleTagRemove*/ 5) {
    				each_value = /*tags*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(span, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sl_input);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TagsInput', slots, []);
    	const dispatch = createEventDispatcher();
    	let { tags = [] } = $$props;
    	let { separator = ' ' } = $$props;

    	function handleKeydown(e) {
    		let str = e.target.value.trim();

    		// console.log(str, tags);
    		if (e.key === separator) {
    			if (str.length > 0) {
    				$$invalidate(0, tags = [...tags, str]);
    			}

    			e.target.value = '';
    			dispatch('tagschanged', { value: tags });
    		} // console.log("got", e.key);
    	}

    	function handleTagRemove(e) {
    		$$invalidate(0, tags = tags.filter(t => t !== e.target.dataset.value));
    		dispatch('tagschanged', { value: tags });
    	}

    	const writable_props = ['tags', 'separator'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TagsInput> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('tags' in $$props) $$invalidate(0, tags = $$props.tags);
    		if ('separator' in $$props) $$invalidate(3, separator = $$props.separator);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		tags,
    		separator,
    		handleKeydown,
    		handleTagRemove
    	});

    	$$self.$inject_state = $$props => {
    		if ('tags' in $$props) $$invalidate(0, tags = $$props.tags);
    		if ('separator' in $$props) $$invalidate(3, separator = $$props.separator);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [tags, handleKeydown, handleTagRemove, separator];
    }

    class TagsInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$2, create_fragment$2, safe_not_equal, { tags: 0, separator: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TagsInput",
    			options,
    			id: create_fragment$2.name
    		});
    	}

    	get tags() {
    		throw new Error("<TagsInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tags(value) {
    		throw new Error("<TagsInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get separator() {
    		throw new Error("<TagsInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set separator(value) {
    		throw new Error("<TagsInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/ItemEditor.svelte generated by Svelte v3.48.0 */
    const file$1 = "src/ItemEditor.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	return child_ctx;
    }

    // (35:0) {#if selectedItem}
    function create_if_block$1(ctx) {
    	let h1;
    	let t0_value = /*selectedItem*/ ctx[0].label + "";
    	let t0;
    	let t1;
    	let p;
    	let t2_value = /*selectedItem*/ ctx[0].desc + "";
    	let t2;
    	let t3;
    	let show_if_1 = /*selectedItem*/ ctx[0].link && /*selectedItem*/ ctx[0].link.toString().length > 0;
    	let t4;
    	let show_if = /*selectedItem*/ ctx[0].kind === 'node' && getGraphNode(/*selectedItem*/ ctx[0].parent, /*graph*/ ctx[1]);
    	let t5;
    	let div6;
    	let div0;
    	let span0;
    	let strong0;
    	let t7;
    	let input0;
    	let input0_value_value;
    	let t8;
    	let div1;
    	let span1;
    	let strong1;
    	let t10;
    	let input1;
    	let input1_value_value;
    	let t11;
    	let div2;
    	let span2;
    	let strong2;
    	let t13;
    	let sl_textarea0;
    	let sl_textarea0_value_value;
    	let t14;
    	let div3;
    	let span3;
    	let strong3;
    	let t16;
    	let sl_textarea1;
    	let sl_textarea1_value_value;
    	let t17;
    	let div4;
    	let span4;
    	let strong4;
    	let t19;
    	let input2;
    	let input2_value_value;
    	let t20;
    	let div5;
    	let span5;
    	let strong5;
    	let t22;
    	let tagsinput;
    	let t23;
    	let t24;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = show_if_1 && create_if_block_5$1(ctx);
    	let if_block1 = show_if && create_if_block_4$1(ctx);

    	tagsinput = new TagsInput({
    			props: { tags: /*selectedItem*/ ctx[0].tags },
    			$$inline: true
    		});

    	tagsinput.$on("tagschanged", /*tagschanged_handler*/ ctx[11]);

    	function select_block_type(ctx, dirty) {
    		if (/*selectedItem*/ ctx[0].kind === 'node') return create_if_block_2$1;
    		if (/*selectedItem*/ ctx[0].kind === 'edge') return create_if_block_3$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block2 = current_block_type && current_block_type(ctx);
    	let if_block3 = /*graph*/ ctx[1].customjson && create_if_block_1(ctx);

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			p = element("p");
    			t2 = text(t2_value);
    			t3 = space();
    			if (if_block0) if_block0.c();
    			t4 = space();
    			if (if_block1) if_block1.c();
    			t5 = space();
    			div6 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			strong0 = element("strong");
    			strong0.textContent = "id";
    			t7 = space();
    			input0 = element("input");
    			t8 = space();
    			div1 = element("div");
    			span1 = element("span");
    			strong1 = element("strong");
    			strong1.textContent = "label";
    			t10 = space();
    			input1 = element("input");
    			t11 = space();
    			div2 = element("div");
    			span2 = element("span");
    			strong2 = element("strong");
    			strong2.textContent = "notes";
    			t13 = space();
    			sl_textarea0 = element("sl-textarea");
    			t14 = space();
    			div3 = element("div");
    			span3 = element("span");
    			strong3 = element("strong");
    			strong3.textContent = "desc";
    			t16 = space();
    			sl_textarea1 = element("sl-textarea");
    			t17 = space();
    			div4 = element("div");
    			span4 = element("span");
    			strong4 = element("strong");
    			strong4.textContent = "link";
    			t19 = space();
    			input2 = element("input");
    			t20 = space();
    			div5 = element("div");
    			span5 = element("span");
    			strong5 = element("strong");
    			strong5.textContent = "tags";
    			t22 = space();
    			create_component(tagsinput.$$.fragment);
    			t23 = space();
    			if (if_block2) if_block2.c();
    			t24 = space();
    			if (if_block3) if_block3.c();
    			add_location(h1, file$1, 35, 1, 1207);
    			attr_dev(p, "class", "itemdesc svelte-305roh");
    			add_location(p, file$1, 39, 1, 1445);
    			add_location(strong0, file$1, 51, 9, 1929);
    			attr_dev(span0, "class", "svelte-305roh");
    			add_location(span0, file$1, 51, 3, 1923);
    			attr_dev(input0, "type", "number");
    			input0.value = input0_value_value = /*selectedItem*/ ctx[0].id;
    			attr_dev(input0, "class", "svelte-305roh");
    			add_location(input0, file$1, 52, 3, 1959);
    			attr_dev(div0, "class", "row svelte-305roh");
    			add_location(div0, file$1, 50, 2, 1902);
    			add_location(strong1, file$1, 60, 9, 2115);
    			attr_dev(span1, "class", "svelte-305roh");
    			add_location(span1, file$1, 60, 3, 2109);
    			attr_dev(input1, "type", "text");
    			input1.value = input1_value_value = /*selectedItem*/ ctx[0].label;
    			attr_dev(input1, "class", "svelte-305roh");
    			add_location(input1, file$1, 61, 3, 2148);
    			attr_dev(div1, "class", "row svelte-305roh");
    			add_location(div1, file$1, 59, 2, 2088);
    			add_location(strong2, file$1, 69, 9, 2306);
    			attr_dev(span2, "class", "svelte-305roh");
    			add_location(span2, file$1, 69, 3, 2300);
    			set_custom_element_data(sl_textarea0, "placeholder", "Notes...");
    			set_custom_element_data(sl_textarea0, "size", "small");
    			set_custom_element_data(sl_textarea0, "resize", "auto");
    			set_custom_element_data(sl_textarea0, "value", sl_textarea0_value_value = /*selectedItem*/ ctx[0].notes);
    			set_custom_element_data(sl_textarea0, "class", "svelte-305roh");
    			add_location(sl_textarea0, file$1, 70, 3, 2339);
    			attr_dev(div2, "class", "row svelte-305roh");
    			add_location(div2, file$1, 68, 2, 2279);
    			add_location(strong3, file$1, 81, 9, 2566);
    			attr_dev(span3, "class", "svelte-305roh");
    			add_location(span3, file$1, 81, 3, 2560);
    			set_custom_element_data(sl_textarea1, "placeholder", "Description...");
    			set_custom_element_data(sl_textarea1, "size", "small");
    			set_custom_element_data(sl_textarea1, "resize", "auto");
    			set_custom_element_data(sl_textarea1, "value", sl_textarea1_value_value = /*selectedItem*/ ctx[0].desc);
    			set_custom_element_data(sl_textarea1, "class", "svelte-305roh");
    			add_location(sl_textarea1, file$1, 82, 3, 2598);
    			attr_dev(div3, "class", "row svelte-305roh");
    			add_location(div3, file$1, 80, 2, 2539);
    			add_location(strong4, file$1, 93, 9, 2831);
    			attr_dev(span4, "class", "svelte-305roh");
    			add_location(span4, file$1, 93, 3, 2825);
    			attr_dev(input2, "type", "url");
    			input2.value = input2_value_value = /*selectedItem*/ ctx[0].link;
    			attr_dev(input2, "class", "svelte-305roh");
    			add_location(input2, file$1, 94, 3, 2863);
    			attr_dev(div4, "class", "row svelte-305roh");
    			add_location(div4, file$1, 92, 2, 2804);
    			add_location(strong5, file$1, 102, 9, 3017);
    			attr_dev(span5, "class", "svelte-305roh");
    			add_location(span5, file$1, 102, 3, 3011);
    			attr_dev(div5, "class", "row svelte-305roh");
    			add_location(div5, file$1, 101, 2, 2990);
    			attr_dev(div6, "class", "table svelte-305roh");
    			add_location(div6, file$1, 49, 1, 1880);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			append_dev(h1, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p, anchor);
    			append_dev(p, t2);
    			insert_dev(target, t3, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div0);
    			append_dev(div0, span0);
    			append_dev(span0, strong0);
    			append_dev(div0, t7);
    			append_dev(div0, input0);
    			append_dev(div6, t8);
    			append_dev(div6, div1);
    			append_dev(div1, span1);
    			append_dev(span1, strong1);
    			append_dev(div1, t10);
    			append_dev(div1, input1);
    			append_dev(div6, t11);
    			append_dev(div6, div2);
    			append_dev(div2, span2);
    			append_dev(span2, strong2);
    			append_dev(div2, t13);
    			append_dev(div2, sl_textarea0);
    			append_dev(div6, t14);
    			append_dev(div6, div3);
    			append_dev(div3, span3);
    			append_dev(span3, strong3);
    			append_dev(div3, t16);
    			append_dev(div3, sl_textarea1);
    			append_dev(div6, t17);
    			append_dev(div6, div4);
    			append_dev(div4, span4);
    			append_dev(span4, strong4);
    			append_dev(div4, t19);
    			append_dev(div4, input2);
    			append_dev(div6, t20);
    			append_dev(div6, div5);
    			append_dev(div5, span5);
    			append_dev(span5, strong5);
    			append_dev(div5, t22);
    			mount_component(tagsinput, div5, null);
    			append_dev(div6, t23);
    			if (if_block2) if_block2.m(div6, null);
    			append_dev(div6, t24);
    			if (if_block3) if_block3.m(div6, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input_handler*/ ctx[6], false, false, false),
    					listen_dev(input1, "input", /*input_handler_1*/ ctx[7], false, false, false),
    					listen_dev(sl_textarea0, "sl-input", /*sl_input_handler*/ ctx[8], false, false, false),
    					listen_dev(sl_textarea1, "sl-input", /*sl_input_handler_1*/ ctx[9], false, false, false),
    					listen_dev(input2, "input", /*input_handler_2*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*selectedItem*/ 1) && t0_value !== (t0_value = /*selectedItem*/ ctx[0].label + "")) set_data_dev(t0, t0_value);
    			if ((!current || dirty & /*selectedItem*/ 1) && t2_value !== (t2_value = /*selectedItem*/ ctx[0].desc + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*selectedItem*/ 1) show_if_1 = /*selectedItem*/ ctx[0].link && /*selectedItem*/ ctx[0].link.toString().length > 0;

    			if (show_if_1) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_5$1(ctx);
    					if_block0.c();
    					if_block0.m(t4.parentNode, t4);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*selectedItem, graph*/ 3) show_if = /*selectedItem*/ ctx[0].kind === 'node' && getGraphNode(/*selectedItem*/ ctx[0].parent, /*graph*/ ctx[1]);

    			if (show_if) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_4$1(ctx);
    					if_block1.c();
    					if_block1.m(t5.parentNode, t5);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (!current || dirty & /*selectedItem*/ 1 && input0_value_value !== (input0_value_value = /*selectedItem*/ ctx[0].id) && input0.value !== input0_value_value) {
    				prop_dev(input0, "value", input0_value_value);
    			}

    			if (!current || dirty & /*selectedItem*/ 1 && input1_value_value !== (input1_value_value = /*selectedItem*/ ctx[0].label) && input1.value !== input1_value_value) {
    				prop_dev(input1, "value", input1_value_value);
    			}

    			if (!current || dirty & /*selectedItem*/ 1 && sl_textarea0_value_value !== (sl_textarea0_value_value = /*selectedItem*/ ctx[0].notes)) {
    				set_custom_element_data(sl_textarea0, "value", sl_textarea0_value_value);
    			}

    			if (!current || dirty & /*selectedItem*/ 1 && sl_textarea1_value_value !== (sl_textarea1_value_value = /*selectedItem*/ ctx[0].desc)) {
    				set_custom_element_data(sl_textarea1, "value", sl_textarea1_value_value);
    			}

    			if (!current || dirty & /*selectedItem*/ 1 && input2_value_value !== (input2_value_value = /*selectedItem*/ ctx[0].link) && input2.value !== input2_value_value) {
    				prop_dev(input2, "value", input2_value_value);
    			}

    			const tagsinput_changes = {};
    			if (dirty & /*selectedItem*/ 1) tagsinput_changes.tags = /*selectedItem*/ ctx[0].tags;
    			tagsinput.$set(tagsinput_changes);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if (if_block2) if_block2.d(1);
    				if_block2 = current_block_type && current_block_type(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div6, t24);
    				}
    			}

    			if (/*graph*/ ctx[1].customjson) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty & /*graph*/ 2) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_1(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div6, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tagsinput.$$.fragment, local);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tagsinput.$$.fragment, local);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t3);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div6);
    			destroy_component(tagsinput);

    			if (if_block2) {
    				if_block2.d();
    			}

    			if (if_block3) if_block3.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(35:0) {#if selectedItem}",
    		ctx
    	});

    	return block;
    }

    // (42:1) {#if selectedItem.link && selectedItem.link.toString().length > 0}
    function create_if_block_5$1(ctx) {
    	let a;
    	let t0;
    	let t1_value = /*selectedItem*/ ctx[0].link + "";
    	let t1;
    	let a_href_value;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t0 = text("See more at ");
    			t1 = text(t1_value);
    			attr_dev(a, "class", "itemlink svelte-305roh");
    			attr_dev(a, "href", a_href_value = /*selectedItem*/ ctx[0].link);
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$1, 42, 1, 1560);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, t0);
    			append_dev(a, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectedItem*/ 1 && t1_value !== (t1_value = /*selectedItem*/ ctx[0].link + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*selectedItem*/ 1 && a_href_value !== (a_href_value = /*selectedItem*/ ctx[0].link)) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(42:1) {#if selectedItem.link && selectedItem.link.toString().length > 0}",
    		ctx
    	});

    	return block;
    }

    // (46:1) {#if selectedItem.kind === 'node' && getGraphNode(selectedItem.parent, graph)}
    function create_if_block_4$1(ctx) {
    	let p;
    	let button;
    	let t0;
    	let t1_value = getGraphNode(/*selectedItem*/ ctx[0].parent, /*graph*/ ctx[1]).label + "";
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			p = element("p");
    			button = element("button");
    			t0 = text("Detach from \"");
    			t1 = text(t1_value);
    			t2 = text("\"");
    			add_location(button, file$1, 46, 4, 1749);
    			add_location(p, file$1, 46, 1, 1746);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, button);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*detachFromParent*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectedItem, graph*/ 3 && t1_value !== (t1_value = getGraphNode(/*selectedItem*/ ctx[0].parent, /*graph*/ ctx[1]).label + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(46:1) {#if selectedItem.kind === 'node' && getGraphNode(selectedItem.parent, graph)}",
    		ctx
    	});

    	return block;
    }

    // (146:41) 
    function create_if_block_3$1(ctx) {
    	let div0;
    	let span0;
    	let strong0;
    	let t1;
    	let input0;
    	let input0_checked_value;
    	let t2;
    	let div1;
    	let span1;
    	let strong1;
    	let t4;
    	let input1;
    	let input1_value_value;
    	let t5;
    	let div2;
    	let span2;
    	let strong2;
    	let t7;
    	let select0;
    	let option0;
    	let t8;
    	let option0_selected_value;
    	let option1;
    	let t9;
    	let option1_selected_value;
    	let option2;
    	let t10;
    	let option2_selected_value;
    	let select0_value_value;
    	let t11;
    	let div3;
    	let span3;
    	let strong3;
    	let t13;
    	let sl_color_picker;
    	let sl_color_picker_value_value;
    	let t14;
    	let div4;
    	let span4;
    	let strong4;
    	let t16;
    	let select1;
    	let option3;
    	let t17;
    	let option3_selected_value;
    	let option4;
    	let t18;
    	let option4_selected_value;
    	let option5;
    	let t19;
    	let option5_selected_value;
    	let select1_value_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			span0 = element("span");
    			strong0 = element("strong");
    			strong0.textContent = "directed";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			strong1 = element("strong");
    			strong1.textContent = "weight";
    			t4 = space();
    			input1 = element("input");
    			t5 = space();
    			div2 = element("div");
    			span2 = element("span");
    			strong2 = element("strong");
    			strong2.textContent = "shape";
    			t7 = space();
    			select0 = element("select");
    			option0 = element("option");
    			t8 = text("straight");
    			option1 = element("option");
    			t9 = text("curved");
    			option2 = element("option");
    			t10 = text("ortho");
    			t11 = space();
    			div3 = element("div");
    			span3 = element("span");
    			strong3 = element("strong");
    			strong3.textContent = "stroke";
    			t13 = space();
    			sl_color_picker = element("sl-color-picker");
    			t14 = space();
    			div4 = element("div");
    			span4 = element("span");
    			strong4 = element("strong");
    			strong4.textContent = "strokeType";
    			t16 = space();
    			select1 = element("select");
    			option3 = element("option");
    			t17 = text("solid");
    			option4 = element("option");
    			t18 = text("dashed");
    			option5 = element("option");
    			t19 = text("dotted");
    			add_location(strong0, file$1, 147, 9, 4526);
    			attr_dev(span0, "class", "svelte-305roh");
    			add_location(span0, file$1, 147, 3, 4520);
    			attr_dev(input0, "type", "checkbox");
    			input0.checked = input0_checked_value = /*selectedItem*/ ctx[0].directed;
    			attr_dev(input0, "class", "svelte-305roh");
    			add_location(input0, file$1, 148, 3, 4562);
    			attr_dev(div0, "class", "row svelte-305roh");
    			add_location(div0, file$1, 146, 3, 4499);
    			add_location(strong1, file$1, 156, 9, 4737);
    			attr_dev(span1, "class", "svelte-305roh");
    			add_location(span1, file$1, 156, 3, 4731);
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "step", "1");
    			attr_dev(input1, "min", "1");
    			input1.value = input1_value_value = /*selectedItem*/ ctx[0].weight;
    			attr_dev(input1, "class", "svelte-305roh");
    			add_location(input1, file$1, 157, 3, 4771);
    			attr_dev(div1, "class", "row svelte-305roh");
    			add_location(div1, file$1, 155, 3, 4710);
    			add_location(strong2, file$1, 167, 9, 4961);
    			attr_dev(span2, "class", "svelte-305roh");
    			add_location(span2, file$1, 167, 3, 4955);
    			option0.__value = "straight";
    			option0.value = option0.__value;
    			option0.selected = option0_selected_value = /*selectedItem*/ ctx[0].shape === 'straight';
    			add_location(option0, file$1, 169, 4, 5113);
    			option1.__value = "curved";
    			option1.value = option1.__value;
    			option1.selected = option1_selected_value = /*selectedItem*/ ctx[0].shape === 'curved';
    			add_location(option1, file$1, 170, 4, 5205);
    			option2.__value = "ortho";
    			option2.value = option2.__value;
    			option2.selected = option2_selected_value = /*selectedItem*/ ctx[0].shape === 'ortho';
    			add_location(option2, file$1, 171, 4, 5291);
    			attr_dev(select0, "placeholder", "Select shape");
    			add_location(select0, file$1, 168, 3, 4994);
    			attr_dev(div2, "class", "row svelte-305roh");
    			add_location(div2, file$1, 166, 3, 4934);
    			add_location(strong3, file$1, 176, 10, 5425);
    			attr_dev(span3, "class", "svelte-305roh");
    			add_location(span3, file$1, 176, 4, 5419);
    			set_custom_element_data(sl_color_picker, "format", "hex");
    			set_custom_element_data(sl_color_picker, "size", "small");
    			set_custom_element_data(sl_color_picker, "value", sl_color_picker_value_value = /*selectedItem*/ ctx[0].stroke);
    			set_custom_element_data(sl_color_picker, "label", `Select stroke color`);
    			add_location(sl_color_picker, file$1, 177, 4, 5460);
    			attr_dev(div3, "class", "row svelte-305roh");
    			add_location(div3, file$1, 175, 3, 5397);
    			add_location(strong4, file$1, 186, 9, 5708);
    			attr_dev(span4, "class", "svelte-305roh");
    			add_location(span4, file$1, 186, 3, 5702);
    			option3.__value = "solid";
    			option3.value = option3.__value;
    			option3.selected = option3_selected_value = /*selectedItem*/ ctx[0].strokeType === 'solid';
    			add_location(option3, file$1, 188, 4, 5880);
    			option4.__value = "dashed";
    			option4.value = option4.__value;
    			option4.selected = option4_selected_value = /*selectedItem*/ ctx[0].strokeType === 'dashed';
    			add_location(option4, file$1, 189, 4, 5968);
    			option5.__value = "dotted";
    			option5.value = option5.__value;
    			option5.selected = option5_selected_value = /*selectedItem*/ ctx[0].strokeType === 'dotted';
    			add_location(option5, file$1, 190, 4, 6059);
    			attr_dev(select1, "placeholder", "Select strokeType");
    			add_location(select1, file$1, 187, 3, 5746);
    			attr_dev(div4, "class", "row svelte-305roh");
    			add_location(div4, file$1, 185, 3, 5681);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, span0);
    			append_dev(span0, strong0);
    			append_dev(div0, t1);
    			append_dev(div0, input0);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, span1);
    			append_dev(span1, strong1);
    			append_dev(div1, t4);
    			append_dev(div1, input1);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, span2);
    			append_dev(span2, strong2);
    			append_dev(div2, t7);
    			append_dev(div2, select0);
    			append_dev(select0, option0);
    			append_dev(option0, t8);
    			append_dev(select0, option1);
    			append_dev(option1, t9);
    			append_dev(select0, option2);
    			append_dev(option2, t10);
    			select_option(select0, /*selectedItem*/ ctx[0].shape);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, span3);
    			append_dev(span3, strong3);
    			append_dev(div3, t13);
    			append_dev(div3, sl_color_picker);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, span4);
    			append_dev(span4, strong4);
    			append_dev(div4, t16);
    			append_dev(div4, select1);
    			append_dev(select1, option3);
    			append_dev(option3, t17);
    			append_dev(select1, option4);
    			append_dev(option4, t18);
    			append_dev(select1, option5);
    			append_dev(option5, t19);
    			select_option(select1, /*selectedItem*/ ctx[0].strokeType);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "change", /*change_handler*/ ctx[16], false, false, false),
    					listen_dev(input1, "input", /*input_handler_3*/ ctx[17], false, false, false),
    					listen_dev(select0, "change", /*change_handler_1*/ ctx[18], false, false, false),
    					listen_dev(sl_color_picker, "sl-change", /*sl_change_handler_4*/ ctx[19], false, false, false),
    					listen_dev(select1, "change", /*change_handler_2*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectedItem*/ 1 && input0_checked_value !== (input0_checked_value = /*selectedItem*/ ctx[0].directed)) {
    				prop_dev(input0, "checked", input0_checked_value);
    			}

    			if (dirty & /*selectedItem*/ 1 && input1_value_value !== (input1_value_value = /*selectedItem*/ ctx[0].weight) && input1.value !== input1_value_value) {
    				prop_dev(input1, "value", input1_value_value);
    			}

    			if (dirty & /*selectedItem*/ 1 && option0_selected_value !== (option0_selected_value = /*selectedItem*/ ctx[0].shape === 'straight')) {
    				prop_dev(option0, "selected", option0_selected_value);
    			}

    			if (dirty & /*selectedItem*/ 1 && option1_selected_value !== (option1_selected_value = /*selectedItem*/ ctx[0].shape === 'curved')) {
    				prop_dev(option1, "selected", option1_selected_value);
    			}

    			if (dirty & /*selectedItem*/ 1 && option2_selected_value !== (option2_selected_value = /*selectedItem*/ ctx[0].shape === 'ortho')) {
    				prop_dev(option2, "selected", option2_selected_value);
    			}

    			if (dirty & /*selectedItem*/ 1 && select0_value_value !== (select0_value_value = /*selectedItem*/ ctx[0].shape)) {
    				select_option(select0, /*selectedItem*/ ctx[0].shape);
    			}

    			if (dirty & /*selectedItem*/ 1 && sl_color_picker_value_value !== (sl_color_picker_value_value = /*selectedItem*/ ctx[0].stroke)) {
    				set_custom_element_data(sl_color_picker, "value", sl_color_picker_value_value);
    			}

    			if (dirty & /*selectedItem*/ 1 && option3_selected_value !== (option3_selected_value = /*selectedItem*/ ctx[0].strokeType === 'solid')) {
    				prop_dev(option3, "selected", option3_selected_value);
    			}

    			if (dirty & /*selectedItem*/ 1 && option4_selected_value !== (option4_selected_value = /*selectedItem*/ ctx[0].strokeType === 'dashed')) {
    				prop_dev(option4, "selected", option4_selected_value);
    			}

    			if (dirty & /*selectedItem*/ 1 && option5_selected_value !== (option5_selected_value = /*selectedItem*/ ctx[0].strokeType === 'dotted')) {
    				prop_dev(option5, "selected", option5_selected_value);
    			}

    			if (dirty & /*selectedItem*/ 1 && select1_value_value !== (select1_value_value = /*selectedItem*/ ctx[0].strokeType)) {
    				select_option(select1, /*selectedItem*/ ctx[0].strokeType);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(div4);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(146:41) ",
    		ctx
    	});

    	return block;
    }

    // (107:2) {#if selectedItem.kind === 'node'}
    function create_if_block_2$1(ctx) {
    	let div0;
    	let span0;
    	let strong0;
    	let t1;
    	let sl_select;
    	let sl_select_value_value;
    	let t2;
    	let div1;
    	let span1;
    	let strong1;
    	let t4;
    	let sl_color_picker0;
    	let sl_color_picker0_value_value;
    	let t5;
    	let div2;
    	let span2;
    	let strong2;
    	let t7;
    	let sl_color_picker1;
    	let sl_color_picker1_value_value;
    	let t8;
    	let div3;
    	let span3;
    	let strong3;
    	let t10;
    	let sl_color_picker2;
    	let sl_color_picker2_value_value;
    	let mounted;
    	let dispose;
    	let each_value = /*graph*/ ctx[1].theme.badges;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			span0 = element("span");
    			strong0 = element("strong");
    			strong0.textContent = "Badge";
    			t1 = space();
    			sl_select = element("sl-select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			strong1 = element("strong");
    			strong1.textContent = "fill";
    			t4 = space();
    			sl_color_picker0 = element("sl-color-picker");
    			t5 = space();
    			div2 = element("div");
    			span2 = element("span");
    			strong2 = element("strong");
    			strong2.textContent = "Border Color";
    			t7 = space();
    			sl_color_picker1 = element("sl-color-picker");
    			t8 = space();
    			div3 = element("div");
    			span3 = element("span");
    			strong3 = element("strong");
    			strong3.textContent = "Label Color";
    			t10 = space();
    			sl_color_picker2 = element("sl-color-picker");
    			add_location(strong0, file$1, 108, 9, 3261);
    			attr_dev(span0, "class", "svelte-305roh");
    			add_location(span0, file$1, 108, 3, 3255);
    			set_custom_element_data(sl_select, "clearable", "");
    			set_custom_element_data(sl_select, "value", sl_select_value_value = /*selectedItem*/ ctx[0].badge);
    			set_custom_element_data(sl_select, "placeholder", "Select badge");
    			add_location(sl_select, file$1, 109, 3, 3294);
    			attr_dev(div0, "class", "row svelte-305roh");
    			add_location(div0, file$1, 107, 3, 3234);
    			add_location(strong1, file$1, 117, 9, 3629);
    			attr_dev(span1, "class", "svelte-305roh");
    			add_location(span1, file$1, 117, 3, 3623);
    			set_custom_element_data(sl_color_picker0, "format", "hex");
    			set_custom_element_data(sl_color_picker0, "size", "small");
    			set_custom_element_data(sl_color_picker0, "value", sl_color_picker0_value_value = /*selectedItem*/ ctx[0].fill);
    			set_custom_element_data(sl_color_picker0, "label", `Select fill color`);
    			add_location(sl_color_picker0, file$1, 118, 3, 3661);
    			attr_dev(div1, "class", "row svelte-305roh");
    			add_location(div1, file$1, 116, 3, 3602);
    			add_location(strong2, file$1, 127, 9, 3895);
    			attr_dev(span2, "class", "svelte-305roh");
    			add_location(span2, file$1, 127, 3, 3889);
    			set_custom_element_data(sl_color_picker1, "format", "hex");
    			set_custom_element_data(sl_color_picker1, "size", "small");
    			set_custom_element_data(sl_color_picker1, "value", sl_color_picker1_value_value = /*selectedItem*/ ctx[0].bordercolor);
    			set_custom_element_data(sl_color_picker1, "label", `Select border color`);
    			add_location(sl_color_picker1, file$1, 128, 3, 3935);
    			attr_dev(div2, "class", "row svelte-305roh");
    			add_location(div2, file$1, 126, 3, 3868);
    			add_location(strong3, file$1, 137, 9, 4185);
    			attr_dev(span3, "class", "svelte-305roh");
    			add_location(span3, file$1, 137, 3, 4179);
    			set_custom_element_data(sl_color_picker2, "format", "hex");
    			set_custom_element_data(sl_color_picker2, "size", "small");
    			set_custom_element_data(sl_color_picker2, "value", sl_color_picker2_value_value = /*selectedItem*/ ctx[0].labelcolor);
    			set_custom_element_data(sl_color_picker2, "label", `Select label color`);
    			add_location(sl_color_picker2, file$1, 138, 3, 4224);
    			attr_dev(div3, "class", "row svelte-305roh");
    			add_location(div3, file$1, 136, 3, 4158);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, span0);
    			append_dev(span0, strong0);
    			append_dev(div0, t1);
    			append_dev(div0, sl_select);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(sl_select, null);
    			}

    			insert_dev(target, t2, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, span1);
    			append_dev(span1, strong1);
    			append_dev(div1, t4);
    			append_dev(div1, sl_color_picker0);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, span2);
    			append_dev(span2, strong2);
    			append_dev(div2, t7);
    			append_dev(div2, sl_color_picker1);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, span3);
    			append_dev(span3, strong3);
    			append_dev(div3, t10);
    			append_dev(div3, sl_color_picker2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(sl_select, "sl-change", /*sl_change_handler*/ ctx[12], false, false, false),
    					listen_dev(sl_color_picker0, "sl-change", /*sl_change_handler_1*/ ctx[13], false, false, false),
    					listen_dev(sl_color_picker1, "sl-change", /*sl_change_handler_2*/ ctx[14], false, false, false),
    					listen_dev(sl_color_picker2, "sl-change", /*sl_change_handler_3*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*graph, selectedItem*/ 3) {
    				each_value = /*graph*/ ctx[1].theme.badges;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(sl_select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*selectedItem*/ 1 && sl_select_value_value !== (sl_select_value_value = /*selectedItem*/ ctx[0].badge)) {
    				set_custom_element_data(sl_select, "value", sl_select_value_value);
    			}

    			if (dirty & /*selectedItem*/ 1 && sl_color_picker0_value_value !== (sl_color_picker0_value_value = /*selectedItem*/ ctx[0].fill)) {
    				set_custom_element_data(sl_color_picker0, "value", sl_color_picker0_value_value);
    			}

    			if (dirty & /*selectedItem*/ 1 && sl_color_picker1_value_value !== (sl_color_picker1_value_value = /*selectedItem*/ ctx[0].bordercolor)) {
    				set_custom_element_data(sl_color_picker1, "value", sl_color_picker1_value_value);
    			}

    			if (dirty & /*selectedItem*/ 1 && sl_color_picker2_value_value !== (sl_color_picker2_value_value = /*selectedItem*/ ctx[0].labelcolor)) {
    				set_custom_element_data(sl_color_picker2, "value", sl_color_picker2_value_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(107:2) {#if selectedItem.kind === 'node'}",
    		ctx
    	});

    	return block;
    }

    // (111:4) {#each graph.theme.badges as badge}
    function create_each_block(ctx) {
    	let sl_menu_item;
    	let t_value = /*badge*/ ctx[21] + "";
    	let t;
    	let sl_menu_item_value_value;
    	let sl_menu_item_selected_value;

    	const block = {
    		c: function create() {
    			sl_menu_item = element("sl-menu-item");
    			t = text(t_value);
    			set_custom_element_data(sl_menu_item, "value", sl_menu_item_value_value = /*badge*/ ctx[21]);
    			set_custom_element_data(sl_menu_item, "selected", sl_menu_item_selected_value = /*selectedItem*/ ctx[0].badge === /*badge*/ ctx[21]);
    			add_location(sl_menu_item, file$1, 111, 4, 3469);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sl_menu_item, anchor);
    			append_dev(sl_menu_item, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*graph*/ 2 && t_value !== (t_value = /*badge*/ ctx[21] + "")) set_data_dev(t, t_value);

    			if (dirty & /*graph*/ 2 && sl_menu_item_value_value !== (sl_menu_item_value_value = /*badge*/ ctx[21])) {
    				set_custom_element_data(sl_menu_item, "value", sl_menu_item_value_value);
    			}

    			if (dirty & /*selectedItem, graph*/ 3 && sl_menu_item_selected_value !== (sl_menu_item_selected_value = /*selectedItem*/ ctx[0].badge === /*badge*/ ctx[21])) {
    				set_custom_element_data(sl_menu_item, "selected", sl_menu_item_selected_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sl_menu_item);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(111:4) {#each graph.theme.badges as badge}",
    		ctx
    	});

    	return block;
    }

    // (196:2) {#if graph.customjson}
    function create_if_block_1(ctx) {
    	let div;
    	let span;
    	let strong;
    	let t1;
    	let jsoneditor;
    	let current;

    	jsoneditor = new JSONEditor({
    			props: {
    				content: {
    					json: /*selectedItem*/ ctx[0].custom || {}
    				},
    				onChange: /*handleJsonChange*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			strong = element("strong");
    			strong.textContent = "custom";
    			t1 = space();
    			create_component(jsoneditor.$$.fragment);
    			add_location(strong, file$1, 197, 9, 6232);
    			attr_dev(span, "class", "svelte-305roh");
    			add_location(span, file$1, 197, 3, 6226);
    			attr_dev(div, "class", "row svelte-305roh");
    			add_location(div, file$1, 196, 2, 6205);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, strong);
    			append_dev(div, t1);
    			mount_component(jsoneditor, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const jsoneditor_changes = {};

    			if (dirty & /*selectedItem*/ 1) jsoneditor_changes.content = {
    				json: /*selectedItem*/ ctx[0].custom || {}
    			};

    			jsoneditor.$set(jsoneditor_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(jsoneditor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(jsoneditor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(jsoneditor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(196:2) {#if graph.customjson}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*selectedItem*/ ctx[0] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*selectedItem*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*selectedItem*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ItemEditor', slots, []);
    	let { selectedItem } = $$props;
    	let { graph } = $$props;
    	const dispatch = createEventDispatcher();

    	function handleInputChange(e, field) {
    		if (field.split("_")[0] == 'text' || field.split("_")[0] == 'color' || field.split("_")[0] == 'url') {
    			$$invalidate(0, selectedItem[field.split("_")[1]] = e.target.value, selectedItem);
    		} else if (field.split("_")[0] == 'number') {
    			$$invalidate(
    				0,
    				selectedItem[field.split("_")[1]] = e.target.value === ''
    				? null
    				: JSON.parse(e.target.value),
    				selectedItem
    			);
    		} else if (field.split("_")[0] == 'checkbox') {
    			$$invalidate(0, selectedItem[field.split("_")[1]] = e.target.checked, selectedItem);
    		} else {
    			$$invalidate(0, selectedItem[field.split("_")[1]] = JSON.parse(e.target.value), selectedItem);
    		}

    		dispatch('graphchanged', graph);
    	}

    	function handleJsonChange(updatedContent, previousContent, patchResult) {
    		$$invalidate(0, selectedItem.custom = updatedContent.json, selectedItem);
    		dispatch('graphchanged', graph);
    	}

    	function detachFromParent() {
    		detachNodeFromParent(selectedItem, graph);
    		dispatch('graphchanged', graph);
    	}

    	const writable_props = ['selectedItem', 'graph'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ItemEditor> was created with unknown prop '${key}'`);
    	});

    	const input_handler = e => handleInputChange(e, 'number_id');
    	const input_handler_1 = e => handleInputChange(e, 'text_label');
    	const sl_input_handler = e => handleInputChange(e, 'text_notes');
    	const sl_input_handler_1 = e => handleInputChange(e, 'text_desc');
    	const input_handler_2 = e => handleInputChange(e, 'url_link');

    	const tagschanged_handler = e => {
    		$$invalidate(0, selectedItem.tags = e.detail.value, selectedItem);
    		dispatch('graphchanged', graph);
    	};

    	const sl_change_handler = e => handleInputChange(e, 'text_badge');
    	const sl_change_handler_1 = e => handleInputChange(e, 'color_fill');
    	const sl_change_handler_2 = e => handleInputChange(e, 'color_bordercolor');
    	const sl_change_handler_3 = e => handleInputChange(e, 'color_labelcolor');
    	const change_handler = e => handleInputChange(e, 'checkbox_directed');
    	const input_handler_3 = e => handleInputChange(e, 'number_weight');
    	const change_handler_1 = e => handleInputChange(e, 'text_shape');
    	const sl_change_handler_4 = e => handleInputChange(e, 'color_stroke');
    	const change_handler_2 = e => handleInputChange(e, 'text_strokeType');

    	$$self.$$set = $$props => {
    		if ('selectedItem' in $$props) $$invalidate(0, selectedItem = $$props.selectedItem);
    		if ('graph' in $$props) $$invalidate(1, graph = $$props.graph);
    	};

    	$$self.$capture_state = () => ({
    		getGraphNode,
    		detachNodeFromParent,
    		selectedItem,
    		graph,
    		JSONEditor,
    		TagsInput,
    		createEventDispatcher,
    		dispatch,
    		handleInputChange,
    		handleJsonChange,
    		detachFromParent
    	});

    	$$self.$inject_state = $$props => {
    		if ('selectedItem' in $$props) $$invalidate(0, selectedItem = $$props.selectedItem);
    		if ('graph' in $$props) $$invalidate(1, graph = $$props.graph);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selectedItem,
    		graph,
    		dispatch,
    		handleInputChange,
    		handleJsonChange,
    		detachFromParent,
    		input_handler,
    		input_handler_1,
    		sl_input_handler,
    		sl_input_handler_1,
    		input_handler_2,
    		tagschanged_handler,
    		sl_change_handler,
    		sl_change_handler_1,
    		sl_change_handler_2,
    		sl_change_handler_3,
    		change_handler,
    		input_handler_3,
    		change_handler_1,
    		sl_change_handler_4,
    		change_handler_2
    	];
    }

    class ItemEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$1, create_fragment$1, safe_not_equal, { selectedItem: 0, graph: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ItemEditor",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*selectedItem*/ ctx[0] === undefined && !('selectedItem' in props)) {
    			console.warn("<ItemEditor> was created without expected prop 'selectedItem'");
    		}

    		if (/*graph*/ ctx[1] === undefined && !('graph' in props)) {
    			console.warn("<ItemEditor> was created without expected prop 'graph'");
    		}
    	}

    	get selectedItem() {
    		throw new Error("<ItemEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedItem(value) {
    		throw new Error("<ItemEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get graph() {
    		throw new Error("<ItemEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set graph(value) {
    		throw new Error("<ItemEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var noop = {value: () => {}};

    function dispatch() {
      for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
        if (!(t = arguments[i] + "") || (t in _) || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
        _[t] = [];
      }
      return new Dispatch(_);
    }

    function Dispatch(_) {
      this._ = _;
    }

    function parseTypenames$2(typenames, types) {
      return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
        return {type: t, name: name};
      });
    }

    Dispatch.prototype = dispatch.prototype = {
      constructor: Dispatch,
      on: function(typename, callback) {
        var _ = this._,
            T = parseTypenames$2(typename + "", _),
            t,
            i = -1,
            n = T.length;

        // If no callback was specified, return the callback of the given type and name.
        if (arguments.length < 2) {
          while (++i < n) if ((t = (typename = T[i]).type) && (t = get$1(_[t], typename.name))) return t;
          return;
        }

        // If a type was specified, set the callback for the given type and name.
        // Otherwise, if a null callback was specified, remove callbacks of the given name.
        if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
        while (++i < n) {
          if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);
          else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);
        }

        return this;
      },
      copy: function() {
        var copy = {}, _ = this._;
        for (var t in _) copy[t] = _[t].slice();
        return new Dispatch(copy);
      },
      call: function(type, that) {
        if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      },
      apply: function(type, that, args) {
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      }
    };

    function get$1(type, name) {
      for (var i = 0, n = type.length, c; i < n; ++i) {
        if ((c = type[i]).name === name) {
          return c.value;
        }
      }
    }

    function set$1(type, name, callback) {
      for (var i = 0, n = type.length; i < n; ++i) {
        if (type[i].name === name) {
          type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
          break;
        }
      }
      if (callback != null) type.push({name: name, value: callback});
      return type;
    }

    var xhtml$1 = "http://www.w3.org/1999/xhtml";

    var namespaces$1 = {
      svg: "http://www.w3.org/2000/svg",
      xhtml: xhtml$1,
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };

    function namespace$1(name) {
      var prefix = name += "", i = prefix.indexOf(":");
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return namespaces$1.hasOwnProperty(prefix) ? {space: namespaces$1[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins
    }

    function creatorInherit$1(name) {
      return function() {
        var document = this.ownerDocument,
            uri = this.namespaceURI;
        return uri === xhtml$1 && document.documentElement.namespaceURI === xhtml$1
            ? document.createElement(name)
            : document.createElementNS(uri, name);
      };
    }

    function creatorFixed$1(fullname) {
      return function() {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local);
      };
    }

    function creator$1(name) {
      var fullname = namespace$1(name);
      return (fullname.local
          ? creatorFixed$1
          : creatorInherit$1)(fullname);
    }

    function none$1() {}

    function selector$1(selector) {
      return selector == null ? none$1 : function() {
        return this.querySelector(selector);
      };
    }

    function selection_select$1(select) {
      if (typeof select !== "function") select = selector$1(select);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
          }
        }
      }

      return new Selection$2(subgroups, this._parents);
    }

    function array$1(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function empty$1() {
      return [];
    }

    function selectorAll$1(selector) {
      return selector == null ? empty$1 : function() {
        return this.querySelectorAll(selector);
      };
    }

    function arrayAll$1(select) {
      return function() {
        var group = select.apply(this, arguments);
        return group == null ? [] : array$1(group);
      };
    }

    function selection_selectAll$1(select) {
      if (typeof select === "function") select = arrayAll$1(select);
      else select = selectorAll$1(select);

      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            subgroups.push(select.call(node, node.__data__, i, group));
            parents.push(node);
          }
        }
      }

      return new Selection$2(subgroups, parents);
    }

    function matcher$1(selector) {
      return function() {
        return this.matches(selector);
      };
    }

    function childMatcher$1(selector) {
      return function(node) {
        return node.matches(selector);
      };
    }

    var find$1 = Array.prototype.find;

    function childFind$1(match) {
      return function() {
        return find$1.call(this.children, match);
      };
    }

    function childFirst$1() {
      return this.firstElementChild;
    }

    function selection_selectChild$1(match) {
      return this.select(match == null ? childFirst$1
          : childFind$1(typeof match === "function" ? match : childMatcher$1(match)));
    }

    var filter$1 = Array.prototype.filter;

    function children$1() {
      return this.children;
    }

    function childrenFilter$1(match) {
      return function() {
        return filter$1.call(this.children, match);
      };
    }

    function selection_selectChildren$1(match) {
      return this.selectAll(match == null ? children$1
          : childrenFilter$1(typeof match === "function" ? match : childMatcher$1(match)));
    }

    function selection_filter$1(match) {
      if (typeof match !== "function") match = matcher$1(match);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node);
          }
        }
      }

      return new Selection$2(subgroups, this._parents);
    }

    function sparse$1(update) {
      return new Array(update.length);
    }

    function selection_enter$1() {
      return new Selection$2(this._enter || this._groups.map(sparse$1), this._parents);
    }

    function EnterNode$1(parent, datum) {
      this.ownerDocument = parent.ownerDocument;
      this.namespaceURI = parent.namespaceURI;
      this._next = null;
      this._parent = parent;
      this.__data__ = datum;
    }

    EnterNode$1.prototype = {
      constructor: EnterNode$1,
      appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
      insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
      querySelector: function(selector) { return this._parent.querySelector(selector); },
      querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
    };

    function constant$3(x) {
      return function() {
        return x;
      };
    }

    function bindIndex$1(parent, group, enter, update, exit, data) {
      var i = 0,
          node,
          groupLength = group.length,
          dataLength = data.length;

      // Put any non-null nodes that fit into update.
      // Put any null nodes into enter.
      // Put any remaining data into enter.
      for (; i < dataLength; ++i) {
        if (node = group[i]) {
          node.__data__ = data[i];
          update[i] = node;
        } else {
          enter[i] = new EnterNode$1(parent, data[i]);
        }
      }

      // Put any non-null nodes that don’t fit into exit.
      for (; i < groupLength; ++i) {
        if (node = group[i]) {
          exit[i] = node;
        }
      }
    }

    function bindKey$1(parent, group, enter, update, exit, data, key) {
      var i,
          node,
          nodeByKeyValue = new Map,
          groupLength = group.length,
          dataLength = data.length,
          keyValues = new Array(groupLength),
          keyValue;

      // Compute the key for each node.
      // If multiple nodes have the same key, the duplicates are added to exit.
      for (i = 0; i < groupLength; ++i) {
        if (node = group[i]) {
          keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
          if (nodeByKeyValue.has(keyValue)) {
            exit[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
        }
      }

      // Compute the key for each datum.
      // If there a node associated with this key, join and add it to update.
      // If there is not (or the key is a duplicate), add it to enter.
      for (i = 0; i < dataLength; ++i) {
        keyValue = key.call(parent, data[i], i, data) + "";
        if (node = nodeByKeyValue.get(keyValue)) {
          update[i] = node;
          node.__data__ = data[i];
          nodeByKeyValue.delete(keyValue);
        } else {
          enter[i] = new EnterNode$1(parent, data[i]);
        }
      }

      // Add any remaining nodes that were not bound to data to exit.
      for (i = 0; i < groupLength; ++i) {
        if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {
          exit[i] = node;
        }
      }
    }

    function datum$1(node) {
      return node.__data__;
    }

    function selection_data$1(value, key) {
      if (!arguments.length) return Array.from(this, datum$1);

      var bind = key ? bindKey$1 : bindIndex$1,
          parents = this._parents,
          groups = this._groups;

      if (typeof value !== "function") value = constant$3(value);

      for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
        var parent = parents[j],
            group = groups[j],
            groupLength = group.length,
            data = array$1(value.call(parent, parent && parent.__data__, j, parents)),
            dataLength = data.length,
            enterGroup = enter[j] = new Array(dataLength),
            updateGroup = update[j] = new Array(dataLength),
            exitGroup = exit[j] = new Array(groupLength);

        bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

        // Now connect the enter nodes to their following update node, such that
        // appendChild can insert the materialized enter node before this node,
        // rather than at the end of the parent node.
        for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
          if (previous = enterGroup[i0]) {
            if (i0 >= i1) i1 = i0 + 1;
            while (!(next = updateGroup[i1]) && ++i1 < dataLength);
            previous._next = next || null;
          }
        }
      }

      update = new Selection$2(update, parents);
      update._enter = enter;
      update._exit = exit;
      return update;
    }

    function selection_exit$1() {
      return new Selection$2(this._exit || this._groups.map(sparse$1), this._parents);
    }

    function selection_join$1(onenter, onupdate, onexit) {
      var enter = this.enter(), update = this, exit = this.exit();
      enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
      if (onupdate != null) update = onupdate(update);
      if (onexit == null) exit.remove(); else onexit(exit);
      return enter && update ? enter.merge(update).order() : update;
    }

    function selection_merge$1(selection) {
      if (!(selection instanceof Selection$2)) throw new Error("invalid merge");

      for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node;
          }
        }
      }

      for (; j < m0; ++j) {
        merges[j] = groups0[j];
      }

      return new Selection$2(merges, this._parents);
    }

    function selection_order$1() {

      for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
        for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
          if (node = group[i]) {
            if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
            next = node;
          }
        }
      }

      return this;
    }

    function selection_sort$1(compare) {
      if (!compare) compare = ascending$1;

      function compareNode(a, b) {
        return a && b ? compare(a.__data__, b.__data__) : !a - !b;
      }

      for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            sortgroup[i] = node;
          }
        }
        sortgroup.sort(compareNode);
      }

      return new Selection$2(sortgroups, this._parents).order();
    }

    function ascending$1(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function selection_call$1() {
      var callback = arguments[0];
      arguments[0] = this;
      callback.apply(null, arguments);
      return this;
    }

    function selection_nodes$1() {
      return Array.from(this);
    }

    function selection_node$1() {

      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
          var node = group[i];
          if (node) return node;
        }
      }

      return null;
    }

    function selection_size$1() {
      let size = 0;
      for (const node of this) ++size; // eslint-disable-line no-unused-vars
      return size;
    }

    function selection_empty$1() {
      return !this.node();
    }

    function selection_each$1(callback) {

      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) callback.call(node, node.__data__, i, group);
        }
      }

      return this;
    }

    function attrRemove$2(name) {
      return function() {
        this.removeAttribute(name);
      };
    }

    function attrRemoveNS$2(fullname) {
      return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
      };
    }

    function attrConstant$2(name, value) {
      return function() {
        this.setAttribute(name, value);
      };
    }

    function attrConstantNS$2(fullname, value) {
      return function() {
        this.setAttributeNS(fullname.space, fullname.local, value);
      };
    }

    function attrFunction$2(name, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttribute(name);
        else this.setAttribute(name, v);
      };
    }

    function attrFunctionNS$2(fullname, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
        else this.setAttributeNS(fullname.space, fullname.local, v);
      };
    }

    function selection_attr$1(name, value) {
      var fullname = namespace$1(name);

      if (arguments.length < 2) {
        var node = this.node();
        return fullname.local
            ? node.getAttributeNS(fullname.space, fullname.local)
            : node.getAttribute(fullname);
      }

      return this.each((value == null
          ? (fullname.local ? attrRemoveNS$2 : attrRemove$2) : (typeof value === "function"
          ? (fullname.local ? attrFunctionNS$2 : attrFunction$2)
          : (fullname.local ? attrConstantNS$2 : attrConstant$2)))(fullname, value));
    }

    function defaultView$1(node) {
      return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
          || (node.document && node) // node is a Window
          || node.defaultView; // node is a Document
    }

    function styleRemove$2(name) {
      return function() {
        this.style.removeProperty(name);
      };
    }

    function styleConstant$2(name, value, priority) {
      return function() {
        this.style.setProperty(name, value, priority);
      };
    }

    function styleFunction$2(name, value, priority) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.style.removeProperty(name);
        else this.style.setProperty(name, v, priority);
      };
    }

    function selection_style$1(name, value, priority) {
      return arguments.length > 1
          ? this.each((value == null
                ? styleRemove$2 : typeof value === "function"
                ? styleFunction$2
                : styleConstant$2)(name, value, priority == null ? "" : priority))
          : styleValue$1(this.node(), name);
    }

    function styleValue$1(node, name) {
      return node.style.getPropertyValue(name)
          || defaultView$1(node).getComputedStyle(node, null).getPropertyValue(name);
    }

    function propertyRemove$1(name) {
      return function() {
        delete this[name];
      };
    }

    function propertyConstant$1(name, value) {
      return function() {
        this[name] = value;
      };
    }

    function propertyFunction$1(name, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) delete this[name];
        else this[name] = v;
      };
    }

    function selection_property$1(name, value) {
      return arguments.length > 1
          ? this.each((value == null
              ? propertyRemove$1 : typeof value === "function"
              ? propertyFunction$1
              : propertyConstant$1)(name, value))
          : this.node()[name];
    }

    function classArray$1(string) {
      return string.trim().split(/^|\s+/);
    }

    function classList$1(node) {
      return node.classList || new ClassList$1(node);
    }

    function ClassList$1(node) {
      this._node = node;
      this._names = classArray$1(node.getAttribute("class") || "");
    }

    ClassList$1.prototype = {
      add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
          this._names.push(name);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
          this._names.splice(i, 1);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      contains: function(name) {
        return this._names.indexOf(name) >= 0;
      }
    };

    function classedAdd$1(node, names) {
      var list = classList$1(node), i = -1, n = names.length;
      while (++i < n) list.add(names[i]);
    }

    function classedRemove$1(node, names) {
      var list = classList$1(node), i = -1, n = names.length;
      while (++i < n) list.remove(names[i]);
    }

    function classedTrue$1(names) {
      return function() {
        classedAdd$1(this, names);
      };
    }

    function classedFalse$1(names) {
      return function() {
        classedRemove$1(this, names);
      };
    }

    function classedFunction$1(names, value) {
      return function() {
        (value.apply(this, arguments) ? classedAdd$1 : classedRemove$1)(this, names);
      };
    }

    function selection_classed$1(name, value) {
      var names = classArray$1(name + "");

      if (arguments.length < 2) {
        var list = classList$1(this.node()), i = -1, n = names.length;
        while (++i < n) if (!list.contains(names[i])) return false;
        return true;
      }

      return this.each((typeof value === "function"
          ? classedFunction$1 : value
          ? classedTrue$1
          : classedFalse$1)(names, value));
    }

    function textRemove$1() {
      this.textContent = "";
    }

    function textConstant$2(value) {
      return function() {
        this.textContent = value;
      };
    }

    function textFunction$2(value) {
      return function() {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
      };
    }

    function selection_text$1(value) {
      return arguments.length
          ? this.each(value == null
              ? textRemove$1 : (typeof value === "function"
              ? textFunction$2
              : textConstant$2)(value))
          : this.node().textContent;
    }

    function htmlRemove$1() {
      this.innerHTML = "";
    }

    function htmlConstant$1(value) {
      return function() {
        this.innerHTML = value;
      };
    }

    function htmlFunction$1(value) {
      return function() {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
      };
    }

    function selection_html$1(value) {
      return arguments.length
          ? this.each(value == null
              ? htmlRemove$1 : (typeof value === "function"
              ? htmlFunction$1
              : htmlConstant$1)(value))
          : this.node().innerHTML;
    }

    function raise$1() {
      if (this.nextSibling) this.parentNode.appendChild(this);
    }

    function selection_raise$1() {
      return this.each(raise$1);
    }

    function lower$1() {
      if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
    }

    function selection_lower$1() {
      return this.each(lower$1);
    }

    function selection_append$1(name) {
      var create = typeof name === "function" ? name : creator$1(name);
      return this.select(function() {
        return this.appendChild(create.apply(this, arguments));
      });
    }

    function constantNull$1() {
      return null;
    }

    function selection_insert$1(name, before) {
      var create = typeof name === "function" ? name : creator$1(name),
          select = before == null ? constantNull$1 : typeof before === "function" ? before : selector$1(before);
      return this.select(function() {
        return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
      });
    }

    function remove$1() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    }

    function selection_remove$1() {
      return this.each(remove$1);
    }

    function selection_cloneShallow$1() {
      var clone = this.cloneNode(false), parent = this.parentNode;
      return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }

    function selection_cloneDeep$1() {
      var clone = this.cloneNode(true), parent = this.parentNode;
      return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }

    function selection_clone$1(deep) {
      return this.select(deep ? selection_cloneDeep$1 : selection_cloneShallow$1);
    }

    function selection_datum$1(value) {
      return arguments.length
          ? this.property("__data__", value)
          : this.node().__data__;
    }

    function contextListener$1(listener) {
      return function(event) {
        listener.call(this, event, this.__data__);
      };
    }

    function parseTypenames$1(typenames) {
      return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        return {type: t, name: name};
      });
    }

    function onRemove$1(typename) {
      return function() {
        var on = this.__on;
        if (!on) return;
        for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
          if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
          } else {
            on[++i] = o;
          }
        }
        if (++i) on.length = i;
        else delete this.__on;
      };
    }

    function onAdd$1(typename, value, options) {
      return function() {
        var on = this.__on, o, listener = contextListener$1(value);
        if (on) for (var j = 0, m = on.length; j < m; ++j) {
          if ((o = on[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
            this.addEventListener(o.type, o.listener = listener, o.options = options);
            o.value = value;
            return;
          }
        }
        this.addEventListener(typename.type, listener, options);
        o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};
        if (!on) this.__on = [o];
        else on.push(o);
      };
    }

    function selection_on$1(typename, value, options) {
      var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;

      if (arguments.length < 2) {
        var on = this.node().__on;
        if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
          for (i = 0, o = on[j]; i < n; ++i) {
            if ((t = typenames[i]).type === o.type && t.name === o.name) {
              return o.value;
            }
          }
        }
        return;
      }

      on = value ? onAdd$1 : onRemove$1;
      for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
      return this;
    }

    function dispatchEvent$1(node, type, params) {
      var window = defaultView$1(node),
          event = window.CustomEvent;

      if (typeof event === "function") {
        event = new event(type, params);
      } else {
        event = window.document.createEvent("Event");
        if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
        else event.initEvent(type, false, false);
      }

      node.dispatchEvent(event);
    }

    function dispatchConstant$1(type, params) {
      return function() {
        return dispatchEvent$1(this, type, params);
      };
    }

    function dispatchFunction$1(type, params) {
      return function() {
        return dispatchEvent$1(this, type, params.apply(this, arguments));
      };
    }

    function selection_dispatch$1(type, params) {
      return this.each((typeof params === "function"
          ? dispatchFunction$1
          : dispatchConstant$1)(type, params));
    }

    function* selection_iterator$1() {
      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) yield node;
        }
      }
    }

    var root$1 = [null];

    function Selection$2(groups, parents) {
      this._groups = groups;
      this._parents = parents;
    }

    function selection_selection$1() {
      return this;
    }

    Selection$2.prototype = {
      constructor: Selection$2,
      select: selection_select$1,
      selectAll: selection_selectAll$1,
      selectChild: selection_selectChild$1,
      selectChildren: selection_selectChildren$1,
      filter: selection_filter$1,
      data: selection_data$1,
      enter: selection_enter$1,
      exit: selection_exit$1,
      join: selection_join$1,
      merge: selection_merge$1,
      selection: selection_selection$1,
      order: selection_order$1,
      sort: selection_sort$1,
      call: selection_call$1,
      nodes: selection_nodes$1,
      node: selection_node$1,
      size: selection_size$1,
      empty: selection_empty$1,
      each: selection_each$1,
      attr: selection_attr$1,
      style: selection_style$1,
      property: selection_property$1,
      classed: selection_classed$1,
      text: selection_text$1,
      html: selection_html$1,
      raise: selection_raise$1,
      lower: selection_lower$1,
      append: selection_append$1,
      insert: selection_insert$1,
      remove: selection_remove$1,
      clone: selection_clone$1,
      datum: selection_datum$1,
      on: selection_on$1,
      dispatch: selection_dispatch$1,
      [Symbol.iterator]: selection_iterator$1
    };

    function select$1(selector) {
      return typeof selector === "string"
          ? new Selection$2([[document.querySelector(selector)]], [document.documentElement])
          : new Selection$2([[selector]], root$1);
    }

    function noevent$1(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }

    function dragDisable(view) {
      var root = view.document.documentElement,
          selection = select$1(view).on("dragstart.drag", noevent$1, true);
      if ("onselectstart" in root) {
        selection.on("selectstart.drag", noevent$1, true);
      } else {
        root.__noselect = root.style.MozUserSelect;
        root.style.MozUserSelect = "none";
      }
    }

    function yesdrag(view, noclick) {
      var root = view.document.documentElement,
          selection = select$1(view).on("dragstart.drag", null);
      if (noclick) {
        selection.on("click.drag", noevent$1, true);
        setTimeout(function() { selection.on("click.drag", null); }, 0);
      }
      if ("onselectstart" in root) {
        selection.on("selectstart.drag", null);
      } else {
        root.style.MozUserSelect = root.__noselect;
        delete root.__noselect;
      }
    }

    function define(constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor;
    }

    function extend(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) prototype[key] = definition[key];
      return prototype;
    }

    function Color$1() {}

    var darker = 0.7;
    var brighter = 1 / darker;

    var reI = "\\s*([+-]?\\d+)\\s*",
        reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex = /^#([0-9a-f]{3,8})$/,
        reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
        reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
        reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
        reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
        reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
        reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

    var named = {
      aliceblue: 0xf0f8ff,
      antiquewhite: 0xfaebd7,
      aqua: 0x00ffff,
      aquamarine: 0x7fffd4,
      azure: 0xf0ffff,
      beige: 0xf5f5dc,
      bisque: 0xffe4c4,
      black: 0x000000,
      blanchedalmond: 0xffebcd,
      blue: 0x0000ff,
      blueviolet: 0x8a2be2,
      brown: 0xa52a2a,
      burlywood: 0xdeb887,
      cadetblue: 0x5f9ea0,
      chartreuse: 0x7fff00,
      chocolate: 0xd2691e,
      coral: 0xff7f50,
      cornflowerblue: 0x6495ed,
      cornsilk: 0xfff8dc,
      crimson: 0xdc143c,
      cyan: 0x00ffff,
      darkblue: 0x00008b,
      darkcyan: 0x008b8b,
      darkgoldenrod: 0xb8860b,
      darkgray: 0xa9a9a9,
      darkgreen: 0x006400,
      darkgrey: 0xa9a9a9,
      darkkhaki: 0xbdb76b,
      darkmagenta: 0x8b008b,
      darkolivegreen: 0x556b2f,
      darkorange: 0xff8c00,
      darkorchid: 0x9932cc,
      darkred: 0x8b0000,
      darksalmon: 0xe9967a,
      darkseagreen: 0x8fbc8f,
      darkslateblue: 0x483d8b,
      darkslategray: 0x2f4f4f,
      darkslategrey: 0x2f4f4f,
      darkturquoise: 0x00ced1,
      darkviolet: 0x9400d3,
      deeppink: 0xff1493,
      deepskyblue: 0x00bfff,
      dimgray: 0x696969,
      dimgrey: 0x696969,
      dodgerblue: 0x1e90ff,
      firebrick: 0xb22222,
      floralwhite: 0xfffaf0,
      forestgreen: 0x228b22,
      fuchsia: 0xff00ff,
      gainsboro: 0xdcdcdc,
      ghostwhite: 0xf8f8ff,
      gold: 0xffd700,
      goldenrod: 0xdaa520,
      gray: 0x808080,
      green: 0x008000,
      greenyellow: 0xadff2f,
      grey: 0x808080,
      honeydew: 0xf0fff0,
      hotpink: 0xff69b4,
      indianred: 0xcd5c5c,
      indigo: 0x4b0082,
      ivory: 0xfffff0,
      khaki: 0xf0e68c,
      lavender: 0xe6e6fa,
      lavenderblush: 0xfff0f5,
      lawngreen: 0x7cfc00,
      lemonchiffon: 0xfffacd,
      lightblue: 0xadd8e6,
      lightcoral: 0xf08080,
      lightcyan: 0xe0ffff,
      lightgoldenrodyellow: 0xfafad2,
      lightgray: 0xd3d3d3,
      lightgreen: 0x90ee90,
      lightgrey: 0xd3d3d3,
      lightpink: 0xffb6c1,
      lightsalmon: 0xffa07a,
      lightseagreen: 0x20b2aa,
      lightskyblue: 0x87cefa,
      lightslategray: 0x778899,
      lightslategrey: 0x778899,
      lightsteelblue: 0xb0c4de,
      lightyellow: 0xffffe0,
      lime: 0x00ff00,
      limegreen: 0x32cd32,
      linen: 0xfaf0e6,
      magenta: 0xff00ff,
      maroon: 0x800000,
      mediumaquamarine: 0x66cdaa,
      mediumblue: 0x0000cd,
      mediumorchid: 0xba55d3,
      mediumpurple: 0x9370db,
      mediumseagreen: 0x3cb371,
      mediumslateblue: 0x7b68ee,
      mediumspringgreen: 0x00fa9a,
      mediumturquoise: 0x48d1cc,
      mediumvioletred: 0xc71585,
      midnightblue: 0x191970,
      mintcream: 0xf5fffa,
      mistyrose: 0xffe4e1,
      moccasin: 0xffe4b5,
      navajowhite: 0xffdead,
      navy: 0x000080,
      oldlace: 0xfdf5e6,
      olive: 0x808000,
      olivedrab: 0x6b8e23,
      orange: 0xffa500,
      orangered: 0xff4500,
      orchid: 0xda70d6,
      palegoldenrod: 0xeee8aa,
      palegreen: 0x98fb98,
      paleturquoise: 0xafeeee,
      palevioletred: 0xdb7093,
      papayawhip: 0xffefd5,
      peachpuff: 0xffdab9,
      peru: 0xcd853f,
      pink: 0xffc0cb,
      plum: 0xdda0dd,
      powderblue: 0xb0e0e6,
      purple: 0x800080,
      rebeccapurple: 0x663399,
      red: 0xff0000,
      rosybrown: 0xbc8f8f,
      royalblue: 0x4169e1,
      saddlebrown: 0x8b4513,
      salmon: 0xfa8072,
      sandybrown: 0xf4a460,
      seagreen: 0x2e8b57,
      seashell: 0xfff5ee,
      sienna: 0xa0522d,
      silver: 0xc0c0c0,
      skyblue: 0x87ceeb,
      slateblue: 0x6a5acd,
      slategray: 0x708090,
      slategrey: 0x708090,
      snow: 0xfffafa,
      springgreen: 0x00ff7f,
      steelblue: 0x4682b4,
      tan: 0xd2b48c,
      teal: 0x008080,
      thistle: 0xd8bfd8,
      tomato: 0xff6347,
      turquoise: 0x40e0d0,
      violet: 0xee82ee,
      wheat: 0xf5deb3,
      white: 0xffffff,
      whitesmoke: 0xf5f5f5,
      yellow: 0xffff00,
      yellowgreen: 0x9acd32
    };

    define(Color$1, color, {
      copy: function(channels) {
        return Object.assign(new this.constructor, this, channels);
      },
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: color_formatHex, // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });

    function color_formatHex() {
      return this.rgb().formatHex();
    }

    function color_formatHsl() {
      return hslConvert(this).formatHsl();
    }

    function color_formatRgb() {
      return this.rgb().formatRgb();
    }

    function color(format) {
      var m, l;
      format = (format + "").trim().toLowerCase();
      return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
          : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
          : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
          : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
          : null) // invalid hex
          : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
          : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
          : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
          : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
          : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
          : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
          : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
          : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
          : null;
    }

    function rgbn(n) {
      return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }

    function rgba(r, g, b, a) {
      if (a <= 0) r = g = b = NaN;
      return new Rgb(r, g, b, a);
    }

    function rgbConvert(o) {
      if (!(o instanceof Color$1)) o = color(o);
      if (!o) return new Rgb;
      o = o.rgb();
      return new Rgb(o.r, o.g, o.b, o.opacity);
    }

    function rgb(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }

    function Rgb(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Rgb, rgb, extend(Color$1, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return (-0.5 <= this.r && this.r < 255.5)
            && (-0.5 <= this.g && this.g < 255.5)
            && (-0.5 <= this.b && this.b < 255.5)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex, // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));

    function rgb_formatHex() {
      return "#" + hex(this.r) + hex(this.g) + hex(this.b);
    }

    function rgb_formatRgb() {
      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "rgb(" : "rgba(")
          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.b) || 0))
          + (a === 1 ? ")" : ", " + a + ")");
    }

    function hex(value) {
      value = Math.max(0, Math.min(255, Math.round(value) || 0));
      return (value < 16 ? "0" : "") + value.toString(16);
    }

    function hsla(h, s, l, a) {
      if (a <= 0) h = s = l = NaN;
      else if (l <= 0 || l >= 1) h = s = NaN;
      else if (s <= 0) h = NaN;
      return new Hsl(h, s, l, a);
    }

    function hslConvert(o) {
      if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Color$1)) o = color(o);
      if (!o) return new Hsl;
      if (o instanceof Hsl) return o;
      o = o.rgb();
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          h = NaN,
          s = max - min,
          l = (max + min) / 2;
      if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
      } else {
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl(h, s, l, o.opacity);
    }

    function hsl(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }

    function Hsl(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Hsl, hsl, extend(Color$1, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360,
            s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
            l = this.l,
            m2 = l + (l < 0.5 ? l : 1 - l) * s,
            m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s))
            && (0 <= this.l && this.l <= 1)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl: function() {
        var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "hsl(" : "hsla(")
            + (this.h || 0) + ", "
            + (this.s || 0) * 100 + "%, "
            + (this.l || 0) * 100 + "%"
            + (a === 1 ? ")" : ", " + a + ")");
      }
    }));

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60
          : h < 180 ? m2
          : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
          : m1) * 255;
    }

    var constant$2 = x => () => x;

    function linear(a, d) {
      return function(t) {
        return a + t * d;
      };
    }

    function exponential(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
      };
    }

    function gamma(y) {
      return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential(a, b, y) : constant$2(isNaN(a) ? b : a);
      };
    }

    function nogamma(a, b) {
      var d = b - a;
      return d ? linear(a, d) : constant$2(isNaN(a) ? b : a);
    }

    var interpolateRgb = (function rgbGamma(y) {
      var color = gamma(y);

      function rgb$1(start, end) {
        var r = color((start = rgb(start)).r, (end = rgb(end)).r),
            g = color(start.g, end.g),
            b = color(start.b, end.b),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      rgb$1.gamma = rgbGamma;

      return rgb$1;
    })(1);

    function interpolateNumber(a, b) {
      return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
      };
    }

    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB = new RegExp(reA.source, "g");

    function zero(b) {
      return function() {
        return b;
      };
    }

    function one(b) {
      return function(t) {
        return b(t) + "";
      };
    }

    function interpolateString(a, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
          am, // current match in a
          bm, // current match in b
          bs, // string preceding current number in b, if any
          i = -1, // index in s
          s = [], // string constants and placeholders
          q = []; // number interpolators

      // Coerce inputs to strings.
      a = a + "", b = b + "";

      // Interpolate pairs of numbers in a & b.
      while ((am = reA.exec(a))
          && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) { // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
          if (s[i]) s[i] += bm; // coalesce with previous string
          else s[++i] = bm;
        } else { // interpolate non-matching numbers
          s[++i] = null;
          q.push({i: i, x: interpolateNumber(am, bm)});
        }
        bi = reB.lastIndex;
      }

      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? (q[0]
          ? one(q[0].x)
          : zero(b))
          : (b = q.length, function(t) {
              for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
              return s.join("");
            });
    }

    var degrees = 180 / Math.PI;

    var identity$1 = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };

    function decompose(a, b, c, d, e, f) {
      var scaleX, scaleY, skewX;
      if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
      if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
      if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
      if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
      return {
        translateX: e,
        translateY: f,
        rotate: Math.atan2(b, a) * degrees,
        skewX: Math.atan(skewX) * degrees,
        scaleX: scaleX,
        scaleY: scaleY
      };
    }

    var svgNode;

    /* eslint-disable no-undef */
    function parseCss(value) {
      const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
      return m.isIdentity ? identity$1 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
    }

    function parseSvg(value) {
      if (value == null) return identity$1;
      if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
      svgNode.setAttribute("transform", value);
      if (!(value = svgNode.transform.baseVal.consolidate())) return identity$1;
      value = value.matrix;
      return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
    }

    function interpolateTransform(parse, pxComma, pxParen, degParen) {

      function pop(s) {
        return s.length ? s.pop() + " " : "";
      }

      function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push("translate(", null, pxComma, null, pxParen);
          q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
        } else if (xb || yb) {
          s.push("translate(" + xb + pxComma + yb + pxParen);
        }
      }

      function rotate(a, b, s, q) {
        if (a !== b) {
          if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
          q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a, b)});
        } else if (b) {
          s.push(pop(s) + "rotate(" + b + degParen);
        }
      }

      function skewX(a, b, s, q) {
        if (a !== b) {
          q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a, b)});
        } else if (b) {
          s.push(pop(s) + "skewX(" + b + degParen);
        }
      }

      function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push(pop(s) + "scale(", null, ",", null, ")");
          q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
        } else if (xb !== 1 || yb !== 1) {
          s.push(pop(s) + "scale(" + xb + "," + yb + ")");
        }
      }

      return function(a, b) {
        var s = [], // string constants and placeholders
            q = []; // number interpolators
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null; // gc
        return function(t) {
          var i = -1, n = q.length, o;
          while (++i < n) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        };
      };
    }

    var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

    var epsilon2 = 1e-12;

    function cosh(x) {
      return ((x = Math.exp(x)) + 1 / x) / 2;
    }

    function sinh(x) {
      return ((x = Math.exp(x)) - 1 / x) / 2;
    }

    function tanh(x) {
      return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }

    var interpolateZoom = (function zoomRho(rho, rho2, rho4) {

      // p0 = [ux0, uy0, w0]
      // p1 = [ux1, uy1, w1]
      function zoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
            ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
            dx = ux1 - ux0,
            dy = uy1 - uy0,
            d2 = dx * dx + dy * dy,
            i,
            S;

        // Special case for u0 ≅ u1.
        if (d2 < epsilon2) {
          S = Math.log(w1 / w0) / rho;
          i = function(t) {
            return [
              ux0 + t * dx,
              uy0 + t * dy,
              w0 * Math.exp(rho * t * S)
            ];
          };
        }

        // General case.
        else {
          var d1 = Math.sqrt(d2),
              b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
              b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
              r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
              r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
          S = (r1 - r0) / rho;
          i = function(t) {
            var s = t * S,
                coshr0 = cosh(r0),
                u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
            return [
              ux0 + u * dx,
              uy0 + u * dy,
              w0 * coshr0 / cosh(rho * s + r0)
            ];
          };
        }

        i.duration = S * 1000 * rho / Math.SQRT2;

        return i;
      }

      zoom.rho = function(_) {
        var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
        return zoomRho(_1, _2, _4);
      };

      return zoom;
    })(Math.SQRT2, 2, 4);

    var xhtml = "http://www.w3.org/1999/xhtml";

    var namespaces = {
      svg: "http://www.w3.org/2000/svg",
      xhtml: xhtml,
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };

    function namespace(name) {
      var prefix = name += "", i = prefix.indexOf(":");
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins
    }

    function creatorInherit(name) {
      return function() {
        var document = this.ownerDocument,
            uri = this.namespaceURI;
        return uri === xhtml && document.documentElement.namespaceURI === xhtml
            ? document.createElement(name)
            : document.createElementNS(uri, name);
      };
    }

    function creatorFixed(fullname) {
      return function() {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local);
      };
    }

    function creator(name) {
      var fullname = namespace(name);
      return (fullname.local
          ? creatorFixed
          : creatorInherit)(fullname);
    }

    function none() {}

    function selector(selector) {
      return selector == null ? none : function() {
        return this.querySelector(selector);
      };
    }

    function selection_select(select) {
      if (typeof select !== "function") select = selector(select);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
          }
        }
      }

      return new Selection$1(subgroups, this._parents);
    }

    // Given something array like (or null), returns something that is strictly an
    // array. This is used to ensure that array-like objects passed to d3.selectAll
    // or selection.selectAll are converted into proper arrays when creating a
    // selection; we don’t ever want to create a selection backed by a live
    // HTMLCollection or NodeList. However, note that selection.selectAll will use a
    // static NodeList as a group, since it safely derived from querySelectorAll.
    function array(x) {
      return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
    }

    function empty() {
      return [];
    }

    function selectorAll(selector) {
      return selector == null ? empty : function() {
        return this.querySelectorAll(selector);
      };
    }

    function arrayAll(select) {
      return function() {
        return array(select.apply(this, arguments));
      };
    }

    function selection_selectAll(select) {
      if (typeof select === "function") select = arrayAll(select);
      else select = selectorAll(select);

      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            subgroups.push(select.call(node, node.__data__, i, group));
            parents.push(node);
          }
        }
      }

      return new Selection$1(subgroups, parents);
    }

    function matcher(selector) {
      return function() {
        return this.matches(selector);
      };
    }

    function childMatcher(selector) {
      return function(node) {
        return node.matches(selector);
      };
    }

    var find = Array.prototype.find;

    function childFind(match) {
      return function() {
        return find.call(this.children, match);
      };
    }

    function childFirst() {
      return this.firstElementChild;
    }

    function selection_selectChild(match) {
      return this.select(match == null ? childFirst
          : childFind(typeof match === "function" ? match : childMatcher(match)));
    }

    var filter = Array.prototype.filter;

    function children() {
      return Array.from(this.children);
    }

    function childrenFilter(match) {
      return function() {
        return filter.call(this.children, match);
      };
    }

    function selection_selectChildren(match) {
      return this.selectAll(match == null ? children
          : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
    }

    function selection_filter(match) {
      if (typeof match !== "function") match = matcher(match);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node);
          }
        }
      }

      return new Selection$1(subgroups, this._parents);
    }

    function sparse(update) {
      return new Array(update.length);
    }

    function selection_enter() {
      return new Selection$1(this._enter || this._groups.map(sparse), this._parents);
    }

    function EnterNode(parent, datum) {
      this.ownerDocument = parent.ownerDocument;
      this.namespaceURI = parent.namespaceURI;
      this._next = null;
      this._parent = parent;
      this.__data__ = datum;
    }

    EnterNode.prototype = {
      constructor: EnterNode,
      appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
      insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
      querySelector: function(selector) { return this._parent.querySelector(selector); },
      querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
    };

    function constant$1(x) {
      return function() {
        return x;
      };
    }

    function bindIndex(parent, group, enter, update, exit, data) {
      var i = 0,
          node,
          groupLength = group.length,
          dataLength = data.length;

      // Put any non-null nodes that fit into update.
      // Put any null nodes into enter.
      // Put any remaining data into enter.
      for (; i < dataLength; ++i) {
        if (node = group[i]) {
          node.__data__ = data[i];
          update[i] = node;
        } else {
          enter[i] = new EnterNode(parent, data[i]);
        }
      }

      // Put any non-null nodes that don’t fit into exit.
      for (; i < groupLength; ++i) {
        if (node = group[i]) {
          exit[i] = node;
        }
      }
    }

    function bindKey(parent, group, enter, update, exit, data, key) {
      var i,
          node,
          nodeByKeyValue = new Map,
          groupLength = group.length,
          dataLength = data.length,
          keyValues = new Array(groupLength),
          keyValue;

      // Compute the key for each node.
      // If multiple nodes have the same key, the duplicates are added to exit.
      for (i = 0; i < groupLength; ++i) {
        if (node = group[i]) {
          keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
          if (nodeByKeyValue.has(keyValue)) {
            exit[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
        }
      }

      // Compute the key for each datum.
      // If there a node associated with this key, join and add it to update.
      // If there is not (or the key is a duplicate), add it to enter.
      for (i = 0; i < dataLength; ++i) {
        keyValue = key.call(parent, data[i], i, data) + "";
        if (node = nodeByKeyValue.get(keyValue)) {
          update[i] = node;
          node.__data__ = data[i];
          nodeByKeyValue.delete(keyValue);
        } else {
          enter[i] = new EnterNode(parent, data[i]);
        }
      }

      // Add any remaining nodes that were not bound to data to exit.
      for (i = 0; i < groupLength; ++i) {
        if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {
          exit[i] = node;
        }
      }
    }

    function datum(node) {
      return node.__data__;
    }

    function selection_data(value, key) {
      if (!arguments.length) return Array.from(this, datum);

      var bind = key ? bindKey : bindIndex,
          parents = this._parents,
          groups = this._groups;

      if (typeof value !== "function") value = constant$1(value);

      for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
        var parent = parents[j],
            group = groups[j],
            groupLength = group.length,
            data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),
            dataLength = data.length,
            enterGroup = enter[j] = new Array(dataLength),
            updateGroup = update[j] = new Array(dataLength),
            exitGroup = exit[j] = new Array(groupLength);

        bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

        // Now connect the enter nodes to their following update node, such that
        // appendChild can insert the materialized enter node before this node,
        // rather than at the end of the parent node.
        for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
          if (previous = enterGroup[i0]) {
            if (i0 >= i1) i1 = i0 + 1;
            while (!(next = updateGroup[i1]) && ++i1 < dataLength);
            previous._next = next || null;
          }
        }
      }

      update = new Selection$1(update, parents);
      update._enter = enter;
      update._exit = exit;
      return update;
    }

    // Given some data, this returns an array-like view of it: an object that
    // exposes a length property and allows numeric indexing. Note that unlike
    // selectAll, this isn’t worried about “live” collections because the resulting
    // array will only be used briefly while data is being bound. (It is possible to
    // cause the data to change while iterating by using a key function, but please
    // don’t; we’d rather avoid a gratuitous copy.)
    function arraylike(data) {
      return typeof data === "object" && "length" in data
        ? data // Array, TypedArray, NodeList, array-like
        : Array.from(data); // Map, Set, iterable, string, or anything else
    }

    function selection_exit() {
      return new Selection$1(this._exit || this._groups.map(sparse), this._parents);
    }

    function selection_join(onenter, onupdate, onexit) {
      var enter = this.enter(), update = this, exit = this.exit();
      if (typeof onenter === "function") {
        enter = onenter(enter);
        if (enter) enter = enter.selection();
      } else {
        enter = enter.append(onenter + "");
      }
      if (onupdate != null) {
        update = onupdate(update);
        if (update) update = update.selection();
      }
      if (onexit == null) exit.remove(); else onexit(exit);
      return enter && update ? enter.merge(update).order() : update;
    }

    function selection_merge(context) {
      var selection = context.selection ? context.selection() : context;

      for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node;
          }
        }
      }

      for (; j < m0; ++j) {
        merges[j] = groups0[j];
      }

      return new Selection$1(merges, this._parents);
    }

    function selection_order() {

      for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
        for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
          if (node = group[i]) {
            if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
            next = node;
          }
        }
      }

      return this;
    }

    function selection_sort(compare) {
      if (!compare) compare = ascending;

      function compareNode(a, b) {
        return a && b ? compare(a.__data__, b.__data__) : !a - !b;
      }

      for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            sortgroup[i] = node;
          }
        }
        sortgroup.sort(compareNode);
      }

      return new Selection$1(sortgroups, this._parents).order();
    }

    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function selection_call() {
      var callback = arguments[0];
      arguments[0] = this;
      callback.apply(null, arguments);
      return this;
    }

    function selection_nodes() {
      return Array.from(this);
    }

    function selection_node() {

      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
          var node = group[i];
          if (node) return node;
        }
      }

      return null;
    }

    function selection_size() {
      let size = 0;
      for (const node of this) ++size; // eslint-disable-line no-unused-vars
      return size;
    }

    function selection_empty() {
      return !this.node();
    }

    function selection_each(callback) {

      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) callback.call(node, node.__data__, i, group);
        }
      }

      return this;
    }

    function attrRemove$1(name) {
      return function() {
        this.removeAttribute(name);
      };
    }

    function attrRemoveNS$1(fullname) {
      return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
      };
    }

    function attrConstant$1(name, value) {
      return function() {
        this.setAttribute(name, value);
      };
    }

    function attrConstantNS$1(fullname, value) {
      return function() {
        this.setAttributeNS(fullname.space, fullname.local, value);
      };
    }

    function attrFunction$1(name, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttribute(name);
        else this.setAttribute(name, v);
      };
    }

    function attrFunctionNS$1(fullname, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
        else this.setAttributeNS(fullname.space, fullname.local, v);
      };
    }

    function selection_attr(name, value) {
      var fullname = namespace(name);

      if (arguments.length < 2) {
        var node = this.node();
        return fullname.local
            ? node.getAttributeNS(fullname.space, fullname.local)
            : node.getAttribute(fullname);
      }

      return this.each((value == null
          ? (fullname.local ? attrRemoveNS$1 : attrRemove$1) : (typeof value === "function"
          ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)
          : (fullname.local ? attrConstantNS$1 : attrConstant$1)))(fullname, value));
    }

    function defaultView(node) {
      return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
          || (node.document && node) // node is a Window
          || node.defaultView; // node is a Document
    }

    function styleRemove$1(name) {
      return function() {
        this.style.removeProperty(name);
      };
    }

    function styleConstant$1(name, value, priority) {
      return function() {
        this.style.setProperty(name, value, priority);
      };
    }

    function styleFunction$1(name, value, priority) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.style.removeProperty(name);
        else this.style.setProperty(name, v, priority);
      };
    }

    function selection_style(name, value, priority) {
      return arguments.length > 1
          ? this.each((value == null
                ? styleRemove$1 : typeof value === "function"
                ? styleFunction$1
                : styleConstant$1)(name, value, priority == null ? "" : priority))
          : styleValue(this.node(), name);
    }

    function styleValue(node, name) {
      return node.style.getPropertyValue(name)
          || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
    }

    function propertyRemove(name) {
      return function() {
        delete this[name];
      };
    }

    function propertyConstant(name, value) {
      return function() {
        this[name] = value;
      };
    }

    function propertyFunction(name, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) delete this[name];
        else this[name] = v;
      };
    }

    function selection_property(name, value) {
      return arguments.length > 1
          ? this.each((value == null
              ? propertyRemove : typeof value === "function"
              ? propertyFunction
              : propertyConstant)(name, value))
          : this.node()[name];
    }

    function classArray(string) {
      return string.trim().split(/^|\s+/);
    }

    function classList(node) {
      return node.classList || new ClassList(node);
    }

    function ClassList(node) {
      this._node = node;
      this._names = classArray(node.getAttribute("class") || "");
    }

    ClassList.prototype = {
      add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
          this._names.push(name);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
          this._names.splice(i, 1);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      contains: function(name) {
        return this._names.indexOf(name) >= 0;
      }
    };

    function classedAdd(node, names) {
      var list = classList(node), i = -1, n = names.length;
      while (++i < n) list.add(names[i]);
    }

    function classedRemove(node, names) {
      var list = classList(node), i = -1, n = names.length;
      while (++i < n) list.remove(names[i]);
    }

    function classedTrue(names) {
      return function() {
        classedAdd(this, names);
      };
    }

    function classedFalse(names) {
      return function() {
        classedRemove(this, names);
      };
    }

    function classedFunction(names, value) {
      return function() {
        (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
      };
    }

    function selection_classed(name, value) {
      var names = classArray(name + "");

      if (arguments.length < 2) {
        var list = classList(this.node()), i = -1, n = names.length;
        while (++i < n) if (!list.contains(names[i])) return false;
        return true;
      }

      return this.each((typeof value === "function"
          ? classedFunction : value
          ? classedTrue
          : classedFalse)(names, value));
    }

    function textRemove() {
      this.textContent = "";
    }

    function textConstant$1(value) {
      return function() {
        this.textContent = value;
      };
    }

    function textFunction$1(value) {
      return function() {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
      };
    }

    function selection_text(value) {
      return arguments.length
          ? this.each(value == null
              ? textRemove : (typeof value === "function"
              ? textFunction$1
              : textConstant$1)(value))
          : this.node().textContent;
    }

    function htmlRemove() {
      this.innerHTML = "";
    }

    function htmlConstant(value) {
      return function() {
        this.innerHTML = value;
      };
    }

    function htmlFunction(value) {
      return function() {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
      };
    }

    function selection_html(value) {
      return arguments.length
          ? this.each(value == null
              ? htmlRemove : (typeof value === "function"
              ? htmlFunction
              : htmlConstant)(value))
          : this.node().innerHTML;
    }

    function raise() {
      if (this.nextSibling) this.parentNode.appendChild(this);
    }

    function selection_raise() {
      return this.each(raise);
    }

    function lower() {
      if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
    }

    function selection_lower() {
      return this.each(lower);
    }

    function selection_append(name) {
      var create = typeof name === "function" ? name : creator(name);
      return this.select(function() {
        return this.appendChild(create.apply(this, arguments));
      });
    }

    function constantNull() {
      return null;
    }

    function selection_insert(name, before) {
      var create = typeof name === "function" ? name : creator(name),
          select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
      return this.select(function() {
        return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
      });
    }

    function remove() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    }

    function selection_remove() {
      return this.each(remove);
    }

    function selection_cloneShallow() {
      var clone = this.cloneNode(false), parent = this.parentNode;
      return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }

    function selection_cloneDeep() {
      var clone = this.cloneNode(true), parent = this.parentNode;
      return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }

    function selection_clone(deep) {
      return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
    }

    function selection_datum(value) {
      return arguments.length
          ? this.property("__data__", value)
          : this.node().__data__;
    }

    function contextListener(listener) {
      return function(event) {
        listener.call(this, event, this.__data__);
      };
    }

    function parseTypenames(typenames) {
      return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        return {type: t, name: name};
      });
    }

    function onRemove(typename) {
      return function() {
        var on = this.__on;
        if (!on) return;
        for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
          if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
          } else {
            on[++i] = o;
          }
        }
        if (++i) on.length = i;
        else delete this.__on;
      };
    }

    function onAdd(typename, value, options) {
      return function() {
        var on = this.__on, o, listener = contextListener(value);
        if (on) for (var j = 0, m = on.length; j < m; ++j) {
          if ((o = on[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
            this.addEventListener(o.type, o.listener = listener, o.options = options);
            o.value = value;
            return;
          }
        }
        this.addEventListener(typename.type, listener, options);
        o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};
        if (!on) this.__on = [o];
        else on.push(o);
      };
    }

    function selection_on(typename, value, options) {
      var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

      if (arguments.length < 2) {
        var on = this.node().__on;
        if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
          for (i = 0, o = on[j]; i < n; ++i) {
            if ((t = typenames[i]).type === o.type && t.name === o.name) {
              return o.value;
            }
          }
        }
        return;
      }

      on = value ? onAdd : onRemove;
      for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
      return this;
    }

    function dispatchEvent(node, type, params) {
      var window = defaultView(node),
          event = window.CustomEvent;

      if (typeof event === "function") {
        event = new event(type, params);
      } else {
        event = window.document.createEvent("Event");
        if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
        else event.initEvent(type, false, false);
      }

      node.dispatchEvent(event);
    }

    function dispatchConstant(type, params) {
      return function() {
        return dispatchEvent(this, type, params);
      };
    }

    function dispatchFunction(type, params) {
      return function() {
        return dispatchEvent(this, type, params.apply(this, arguments));
      };
    }

    function selection_dispatch(type, params) {
      return this.each((typeof params === "function"
          ? dispatchFunction
          : dispatchConstant)(type, params));
    }

    function* selection_iterator() {
      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) yield node;
        }
      }
    }

    var root = [null];

    function Selection$1(groups, parents) {
      this._groups = groups;
      this._parents = parents;
    }

    function selection() {
      return new Selection$1([[document.documentElement]], root);
    }

    function selection_selection() {
      return this;
    }

    Selection$1.prototype = selection.prototype = {
      constructor: Selection$1,
      select: selection_select,
      selectAll: selection_selectAll,
      selectChild: selection_selectChild,
      selectChildren: selection_selectChildren,
      filter: selection_filter,
      data: selection_data,
      enter: selection_enter,
      exit: selection_exit,
      join: selection_join,
      merge: selection_merge,
      selection: selection_selection,
      order: selection_order,
      sort: selection_sort,
      call: selection_call,
      nodes: selection_nodes,
      node: selection_node,
      size: selection_size,
      empty: selection_empty,
      each: selection_each,
      attr: selection_attr,
      style: selection_style,
      property: selection_property,
      classed: selection_classed,
      text: selection_text,
      html: selection_html,
      raise: selection_raise,
      lower: selection_lower,
      append: selection_append,
      insert: selection_insert,
      remove: selection_remove,
      clone: selection_clone,
      datum: selection_datum,
      on: selection_on,
      dispatch: selection_dispatch,
      [Symbol.iterator]: selection_iterator
    };

    function select(selector) {
      return typeof selector === "string"
          ? new Selection$1([[document.querySelector(selector)]], [document.documentElement])
          : new Selection$1([[selector]], root);
    }

    function sourceEvent(event) {
      let sourceEvent;
      while (sourceEvent = event.sourceEvent) event = sourceEvent;
      return event;
    }

    function pointer(event, node) {
      event = sourceEvent(event);
      if (node === undefined) node = event.currentTarget;
      if (node) {
        var svg = node.ownerSVGElement || node;
        if (svg.createSVGPoint) {
          var point = svg.createSVGPoint();
          point.x = event.clientX, point.y = event.clientY;
          point = point.matrixTransform(node.getScreenCTM().inverse());
          return [point.x, point.y];
        }
        if (node.getBoundingClientRect) {
          var rect = node.getBoundingClientRect();
          return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
        }
      }
      return [event.pageX, event.pageY];
    }

    var frame = 0, // is an animation frame pending?
        timeout$1 = 0, // is a timeout pending?
        interval = 0, // are any timers active?
        pokeDelay = 1000, // how frequently we check for clock skew
        taskHead,
        taskTail,
        clockLast = 0,
        clockNow = 0,
        clockSkew = 0,
        clock = typeof performance === "object" && performance.now ? performance : Date,
        setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

    function now() {
      return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
    }

    function clearNow() {
      clockNow = 0;
    }

    function Timer() {
      this._call =
      this._time =
      this._next = null;
    }

    Timer.prototype = timer.prototype = {
      constructor: Timer,
      restart: function(callback, delay, time) {
        if (typeof callback !== "function") throw new TypeError("callback is not a function");
        time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
          if (taskTail) taskTail._next = this;
          else taskHead = this;
          taskTail = this;
        }
        this._call = callback;
        this._time = time;
        sleep();
      },
      stop: function() {
        if (this._call) {
          this._call = null;
          this._time = Infinity;
          sleep();
        }
      }
    };

    function timer(callback, delay, time) {
      var t = new Timer;
      t.restart(callback, delay, time);
      return t;
    }

    function timerFlush() {
      now(); // Get the current time, if not already set.
      ++frame; // Pretend we’ve set an alarm, if we haven’t already.
      var t = taskHead, e;
      while (t) {
        if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
        t = t._next;
      }
      --frame;
    }

    function wake() {
      clockNow = (clockLast = clock.now()) + clockSkew;
      frame = timeout$1 = 0;
      try {
        timerFlush();
      } finally {
        frame = 0;
        nap();
        clockNow = 0;
      }
    }

    function poke() {
      var now = clock.now(), delay = now - clockLast;
      if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
    }

    function nap() {
      var t0, t1 = taskHead, t2, time = Infinity;
      while (t1) {
        if (t1._call) {
          if (time > t1._time) time = t1._time;
          t0 = t1, t1 = t1._next;
        } else {
          t2 = t1._next, t1._next = null;
          t1 = t0 ? t0._next = t2 : taskHead = t2;
        }
      }
      taskTail = t0;
      sleep(time);
    }

    function sleep(time) {
      if (frame) return; // Soonest alarm already set, or will be.
      if (timeout$1) timeout$1 = clearTimeout(timeout$1);
      var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
      if (delay > 24) {
        if (time < Infinity) timeout$1 = setTimeout(wake, time - clock.now() - clockSkew);
        if (interval) interval = clearInterval(interval);
      } else {
        if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
        frame = 1, setFrame(wake);
      }
    }

    function timeout(callback, delay, time) {
      var t = new Timer;
      delay = delay == null ? 0 : +delay;
      t.restart(elapsed => {
        t.stop();
        callback(elapsed + delay);
      }, delay, time);
      return t;
    }

    var emptyOn = dispatch("start", "end", "cancel", "interrupt");
    var emptyTween = [];

    var CREATED = 0;
    var SCHEDULED = 1;
    var STARTING = 2;
    var STARTED = 3;
    var RUNNING = 4;
    var ENDING = 5;
    var ENDED = 6;

    function schedule(node, name, id, index, group, timing) {
      var schedules = node.__transition;
      if (!schedules) node.__transition = {};
      else if (id in schedules) return;
      create(node, id, {
        name: name,
        index: index, // For context during callback.
        group: group, // For context during callback.
        on: emptyOn,
        tween: emptyTween,
        time: timing.time,
        delay: timing.delay,
        duration: timing.duration,
        ease: timing.ease,
        timer: null,
        state: CREATED
      });
    }

    function init(node, id) {
      var schedule = get(node, id);
      if (schedule.state > CREATED) throw new Error("too late; already scheduled");
      return schedule;
    }

    function set(node, id) {
      var schedule = get(node, id);
      if (schedule.state > STARTED) throw new Error("too late; already running");
      return schedule;
    }

    function get(node, id) {
      var schedule = node.__transition;
      if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
      return schedule;
    }

    function create(node, id, self) {
      var schedules = node.__transition,
          tween;

      // Initialize the self timer when the transition is created.
      // Note the actual delay is not known until the first callback!
      schedules[id] = self;
      self.timer = timer(schedule, 0, self.time);

      function schedule(elapsed) {
        self.state = SCHEDULED;
        self.timer.restart(start, self.delay, self.time);

        // If the elapsed delay is less than our first sleep, start immediately.
        if (self.delay <= elapsed) start(elapsed - self.delay);
      }

      function start(elapsed) {
        var i, j, n, o;

        // If the state is not SCHEDULED, then we previously errored on start.
        if (self.state !== SCHEDULED) return stop();

        for (i in schedules) {
          o = schedules[i];
          if (o.name !== self.name) continue;

          // While this element already has a starting transition during this frame,
          // defer starting an interrupting transition until that transition has a
          // chance to tick (and possibly end); see d3/d3-transition#54!
          if (o.state === STARTED) return timeout(start);

          // Interrupt the active transition, if any.
          if (o.state === RUNNING) {
            o.state = ENDED;
            o.timer.stop();
            o.on.call("interrupt", node, node.__data__, o.index, o.group);
            delete schedules[i];
          }

          // Cancel any pre-empted transitions.
          else if (+i < id) {
            o.state = ENDED;
            o.timer.stop();
            o.on.call("cancel", node, node.__data__, o.index, o.group);
            delete schedules[i];
          }
        }

        // Defer the first tick to end of the current frame; see d3/d3#1576.
        // Note the transition may be canceled after start and before the first tick!
        // Note this must be scheduled before the start event; see d3/d3-transition#16!
        // Assuming this is successful, subsequent callbacks go straight to tick.
        timeout(function() {
          if (self.state === STARTED) {
            self.state = RUNNING;
            self.timer.restart(tick, self.delay, self.time);
            tick(elapsed);
          }
        });

        // Dispatch the start event.
        // Note this must be done before the tween are initialized.
        self.state = STARTING;
        self.on.call("start", node, node.__data__, self.index, self.group);
        if (self.state !== STARTING) return; // interrupted
        self.state = STARTED;

        // Initialize the tween, deleting null tween.
        tween = new Array(n = self.tween.length);
        for (i = 0, j = -1; i < n; ++i) {
          if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
            tween[++j] = o;
          }
        }
        tween.length = j + 1;
      }

      function tick(elapsed) {
        var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
            i = -1,
            n = tween.length;

        while (++i < n) {
          tween[i].call(node, t);
        }

        // Dispatch the end event.
        if (self.state === ENDING) {
          self.on.call("end", node, node.__data__, self.index, self.group);
          stop();
        }
      }

      function stop() {
        self.state = ENDED;
        self.timer.stop();
        delete schedules[id];
        for (var i in schedules) return; // eslint-disable-line no-unused-vars
        delete node.__transition;
      }
    }

    function interrupt(node, name) {
      var schedules = node.__transition,
          schedule,
          active,
          empty = true,
          i;

      if (!schedules) return;

      name = name == null ? null : name + "";

      for (i in schedules) {
        if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
        active = schedule.state > STARTING && schedule.state < ENDING;
        schedule.state = ENDED;
        schedule.timer.stop();
        schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
        delete schedules[i];
      }

      if (empty) delete node.__transition;
    }

    function selection_interrupt(name) {
      return this.each(function() {
        interrupt(this, name);
      });
    }

    function tweenRemove(id, name) {
      var tween0, tween1;
      return function() {
        var schedule = set(this, id),
            tween = schedule.tween;

        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
          tween1 = tween0 = tween;
          for (var i = 0, n = tween1.length; i < n; ++i) {
            if (tween1[i].name === name) {
              tween1 = tween1.slice();
              tween1.splice(i, 1);
              break;
            }
          }
        }

        schedule.tween = tween1;
      };
    }

    function tweenFunction(id, name, value) {
      var tween0, tween1;
      if (typeof value !== "function") throw new Error;
      return function() {
        var schedule = set(this, id),
            tween = schedule.tween;

        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
          tween1 = (tween0 = tween).slice();
          for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
            if (tween1[i].name === name) {
              tween1[i] = t;
              break;
            }
          }
          if (i === n) tween1.push(t);
        }

        schedule.tween = tween1;
      };
    }

    function transition_tween(name, value) {
      var id = this._id;

      name += "";

      if (arguments.length < 2) {
        var tween = get(this.node(), id).tween;
        for (var i = 0, n = tween.length, t; i < n; ++i) {
          if ((t = tween[i]).name === name) {
            return t.value;
          }
        }
        return null;
      }

      return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
    }

    function tweenValue(transition, name, value) {
      var id = transition._id;

      transition.each(function() {
        var schedule = set(this, id);
        (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
      });

      return function(node) {
        return get(node, id).value[name];
      };
    }

    function interpolate(a, b) {
      var c;
      return (typeof b === "number" ? interpolateNumber
          : b instanceof color ? interpolateRgb
          : (c = color(b)) ? (b = c, interpolateRgb)
          : interpolateString)(a, b);
    }

    function attrRemove(name) {
      return function() {
        this.removeAttribute(name);
      };
    }

    function attrRemoveNS(fullname) {
      return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
      };
    }

    function attrConstant(name, interpolate, value1) {
      var string00,
          string1 = value1 + "",
          interpolate0;
      return function() {
        var string0 = this.getAttribute(name);
        return string0 === string1 ? null
            : string0 === string00 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, value1);
      };
    }

    function attrConstantNS(fullname, interpolate, value1) {
      var string00,
          string1 = value1 + "",
          interpolate0;
      return function() {
        var string0 = this.getAttributeNS(fullname.space, fullname.local);
        return string0 === string1 ? null
            : string0 === string00 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, value1);
      };
    }

    function attrFunction(name, interpolate, value) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0, value1 = value(this), string1;
        if (value1 == null) return void this.removeAttribute(name);
        string0 = this.getAttribute(name);
        string1 = value1 + "";
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
      };
    }

    function attrFunctionNS(fullname, interpolate, value) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0, value1 = value(this), string1;
        if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
        string0 = this.getAttributeNS(fullname.space, fullname.local);
        string1 = value1 + "";
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
      };
    }

    function transition_attr(name, value) {
      var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate;
      return this.attrTween(name, typeof value === "function"
          ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value))
          : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)
          : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
    }

    function attrInterpolate(name, i) {
      return function(t) {
        this.setAttribute(name, i.call(this, t));
      };
    }

    function attrInterpolateNS(fullname, i) {
      return function(t) {
        this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
      };
    }

    function attrTweenNS(fullname, value) {
      var t0, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
        return t0;
      }
      tween._value = value;
      return tween;
    }

    function attrTween(name, value) {
      var t0, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
        return t0;
      }
      tween._value = value;
      return tween;
    }

    function transition_attrTween(name, value) {
      var key = "attr." + name;
      if (arguments.length < 2) return (key = this.tween(key)) && key._value;
      if (value == null) return this.tween(key, null);
      if (typeof value !== "function") throw new Error;
      var fullname = namespace(name);
      return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
    }

    function delayFunction(id, value) {
      return function() {
        init(this, id).delay = +value.apply(this, arguments);
      };
    }

    function delayConstant(id, value) {
      return value = +value, function() {
        init(this, id).delay = value;
      };
    }

    function transition_delay(value) {
      var id = this._id;

      return arguments.length
          ? this.each((typeof value === "function"
              ? delayFunction
              : delayConstant)(id, value))
          : get(this.node(), id).delay;
    }

    function durationFunction(id, value) {
      return function() {
        set(this, id).duration = +value.apply(this, arguments);
      };
    }

    function durationConstant(id, value) {
      return value = +value, function() {
        set(this, id).duration = value;
      };
    }

    function transition_duration(value) {
      var id = this._id;

      return arguments.length
          ? this.each((typeof value === "function"
              ? durationFunction
              : durationConstant)(id, value))
          : get(this.node(), id).duration;
    }

    function easeConstant(id, value) {
      if (typeof value !== "function") throw new Error;
      return function() {
        set(this, id).ease = value;
      };
    }

    function transition_ease(value) {
      var id = this._id;

      return arguments.length
          ? this.each(easeConstant(id, value))
          : get(this.node(), id).ease;
    }

    function easeVarying(id, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (typeof v !== "function") throw new Error;
        set(this, id).ease = v;
      };
    }

    function transition_easeVarying(value) {
      if (typeof value !== "function") throw new Error;
      return this.each(easeVarying(this._id, value));
    }

    function transition_filter(match) {
      if (typeof match !== "function") match = matcher(match);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node);
          }
        }
      }

      return new Transition(subgroups, this._parents, this._name, this._id);
    }

    function transition_merge(transition) {
      if (transition._id !== this._id) throw new Error;

      for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node;
          }
        }
      }

      for (; j < m0; ++j) {
        merges[j] = groups0[j];
      }

      return new Transition(merges, this._parents, this._name, this._id);
    }

    function start(name) {
      return (name + "").trim().split(/^|\s+/).every(function(t) {
        var i = t.indexOf(".");
        if (i >= 0) t = t.slice(0, i);
        return !t || t === "start";
      });
    }

    function onFunction(id, name, listener) {
      var on0, on1, sit = start(name) ? init : set;
      return function() {
        var schedule = sit(this, id),
            on = schedule.on;

        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

        schedule.on = on1;
      };
    }

    function transition_on(name, listener) {
      var id = this._id;

      return arguments.length < 2
          ? get(this.node(), id).on.on(name)
          : this.each(onFunction(id, name, listener));
    }

    function removeFunction(id) {
      return function() {
        var parent = this.parentNode;
        for (var i in this.__transition) if (+i !== id) return;
        if (parent) parent.removeChild(this);
      };
    }

    function transition_remove() {
      return this.on("end.remove", removeFunction(this._id));
    }

    function transition_select(select) {
      var name = this._name,
          id = this._id;

      if (typeof select !== "function") select = selector(select);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
            schedule(subgroup[i], name, id, i, subgroup, get(node, id));
          }
        }
      }

      return new Transition(subgroups, this._parents, name, id);
    }

    function transition_selectAll(select) {
      var name = this._name,
          id = this._id;

      if (typeof select !== "function") select = selectorAll(select);

      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
              if (child = children[k]) {
                schedule(child, name, id, k, children, inherit);
              }
            }
            subgroups.push(children);
            parents.push(node);
          }
        }
      }

      return new Transition(subgroups, parents, name, id);
    }

    var Selection = selection.prototype.constructor;

    function transition_selection() {
      return new Selection(this._groups, this._parents);
    }

    function styleNull(name, interpolate) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0 = styleValue(this, name),
            string1 = (this.style.removeProperty(name), styleValue(this, name));
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, string10 = string1);
      };
    }

    function styleRemove(name) {
      return function() {
        this.style.removeProperty(name);
      };
    }

    function styleConstant(name, interpolate, value1) {
      var string00,
          string1 = value1 + "",
          interpolate0;
      return function() {
        var string0 = styleValue(this, name);
        return string0 === string1 ? null
            : string0 === string00 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, value1);
      };
    }

    function styleFunction(name, interpolate, value) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0 = styleValue(this, name),
            value1 = value(this),
            string1 = value1 + "";
        if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
      };
    }

    function styleMaybeRemove(id, name) {
      var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
      return function() {
        var schedule = set(this, id),
            on = schedule.on,
            listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;

        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);

        schedule.on = on1;
      };
    }

    function transition_style(name, value, priority) {
      var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
      return value == null ? this
          .styleTween(name, styleNull(name, i))
          .on("end.style." + name, styleRemove(name))
        : typeof value === "function" ? this
          .styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value)))
          .each(styleMaybeRemove(this._id, name))
        : this
          .styleTween(name, styleConstant(name, i, value), priority)
          .on("end.style." + name, null);
    }

    function styleInterpolate(name, i, priority) {
      return function(t) {
        this.style.setProperty(name, i.call(this, t), priority);
      };
    }

    function styleTween(name, value, priority) {
      var t, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
        return t;
      }
      tween._value = value;
      return tween;
    }

    function transition_styleTween(name, value, priority) {
      var key = "style." + (name += "");
      if (arguments.length < 2) return (key = this.tween(key)) && key._value;
      if (value == null) return this.tween(key, null);
      if (typeof value !== "function") throw new Error;
      return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
    }

    function textConstant(value) {
      return function() {
        this.textContent = value;
      };
    }

    function textFunction(value) {
      return function() {
        var value1 = value(this);
        this.textContent = value1 == null ? "" : value1;
      };
    }

    function transition_text(value) {
      return this.tween("text", typeof value === "function"
          ? textFunction(tweenValue(this, "text", value))
          : textConstant(value == null ? "" : value + ""));
    }

    function textInterpolate(i) {
      return function(t) {
        this.textContent = i.call(this, t);
      };
    }

    function textTween(value) {
      var t0, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
        return t0;
      }
      tween._value = value;
      return tween;
    }

    function transition_textTween(value) {
      var key = "text";
      if (arguments.length < 1) return (key = this.tween(key)) && key._value;
      if (value == null) return this.tween(key, null);
      if (typeof value !== "function") throw new Error;
      return this.tween(key, textTween(value));
    }

    function transition_transition() {
      var name = this._name,
          id0 = this._id,
          id1 = newId();

      for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            var inherit = get(node, id0);
            schedule(node, name, id1, i, group, {
              time: inherit.time + inherit.delay + inherit.duration,
              delay: 0,
              duration: inherit.duration,
              ease: inherit.ease
            });
          }
        }
      }

      return new Transition(groups, this._parents, name, id1);
    }

    function transition_end() {
      var on0, on1, that = this, id = that._id, size = that.size();
      return new Promise(function(resolve, reject) {
        var cancel = {value: reject},
            end = {value: function() { if (--size === 0) resolve(); }};

        that.each(function() {
          var schedule = set(this, id),
              on = schedule.on;

          // If this node shared a dispatch with the previous node,
          // just assign the updated shared dispatch and we’re done!
          // Otherwise, copy-on-write.
          if (on !== on0) {
            on1 = (on0 = on).copy();
            on1._.cancel.push(cancel);
            on1._.interrupt.push(cancel);
            on1._.end.push(end);
          }

          schedule.on = on1;
        });

        // The selection was empty, resolve end immediately
        if (size === 0) resolve();
      });
    }

    var id = 0;

    function Transition(groups, parents, name, id) {
      this._groups = groups;
      this._parents = parents;
      this._name = name;
      this._id = id;
    }

    function newId() {
      return ++id;
    }

    var selection_prototype = selection.prototype;

    Transition.prototype = {
      constructor: Transition,
      select: transition_select,
      selectAll: transition_selectAll,
      selectChild: selection_prototype.selectChild,
      selectChildren: selection_prototype.selectChildren,
      filter: transition_filter,
      merge: transition_merge,
      selection: transition_selection,
      transition: transition_transition,
      call: selection_prototype.call,
      nodes: selection_prototype.nodes,
      node: selection_prototype.node,
      size: selection_prototype.size,
      empty: selection_prototype.empty,
      each: selection_prototype.each,
      on: transition_on,
      attr: transition_attr,
      attrTween: transition_attrTween,
      style: transition_style,
      styleTween: transition_styleTween,
      text: transition_text,
      textTween: transition_textTween,
      remove: transition_remove,
      tween: transition_tween,
      delay: transition_delay,
      duration: transition_duration,
      ease: transition_ease,
      easeVarying: transition_easeVarying,
      end: transition_end,
      [Symbol.iterator]: selection_prototype[Symbol.iterator]
    };

    function cubicInOut(t) {
      return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
    }

    var defaultTiming = {
      time: null, // Set on use.
      delay: 0,
      duration: 250,
      ease: cubicInOut
    };

    function inherit(node, id) {
      var timing;
      while (!(timing = node.__transition) || !(timing = timing[id])) {
        if (!(node = node.parentNode)) {
          throw new Error(`transition ${id} not found`);
        }
      }
      return timing;
    }

    function selection_transition(name) {
      var id,
          timing;

      if (name instanceof Transition) {
        id = name._id, name = name._name;
      } else {
        id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
      }

      for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            schedule(node, name, id, i, group, timing || inherit(node, id));
          }
        }
      }

      return new Transition(groups, this._parents, name, id);
    }

    selection.prototype.interrupt = selection_interrupt;
    selection.prototype.transition = selection_transition;

    var constant = x => () => x;

    function ZoomEvent(type, {
      sourceEvent,
      target,
      transform,
      dispatch
    }) {
      Object.defineProperties(this, {
        type: {value: type, enumerable: true, configurable: true},
        sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},
        target: {value: target, enumerable: true, configurable: true},
        transform: {value: transform, enumerable: true, configurable: true},
        _: {value: dispatch}
      });
    }

    function Transform(k, x, y) {
      this.k = k;
      this.x = x;
      this.y = y;
    }

    Transform.prototype = {
      constructor: Transform,
      scale: function(k) {
        return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
      },
      translate: function(x, y) {
        return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
      },
      apply: function(point) {
        return [point[0] * this.k + this.x, point[1] * this.k + this.y];
      },
      applyX: function(x) {
        return x * this.k + this.x;
      },
      applyY: function(y) {
        return y * this.k + this.y;
      },
      invert: function(location) {
        return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
      },
      invertX: function(x) {
        return (x - this.x) / this.k;
      },
      invertY: function(y) {
        return (y - this.y) / this.k;
      },
      rescaleX: function(x) {
        return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
      },
      rescaleY: function(y) {
        return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
      },
      toString: function() {
        return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
      }
    };

    var identity = new Transform(1, 0, 0);

    Transform.prototype;

    function nopropagation(event) {
      event.stopImmediatePropagation();
    }

    function noevent(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }

    // Ignore right-click, since that should open the context menu.
    // except for pinch-to-zoom, which is sent as a wheel+ctrlKey event
    function defaultFilter(event) {
      return (!event.ctrlKey || event.type === 'wheel') && !event.button;
    }

    function defaultExtent() {
      var e = this;
      if (e instanceof SVGElement) {
        e = e.ownerSVGElement || e;
        if (e.hasAttribute("viewBox")) {
          e = e.viewBox.baseVal;
          return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
        }
        return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
      }
      return [[0, 0], [e.clientWidth, e.clientHeight]];
    }

    function defaultTransform() {
      return this.__zoom || identity;
    }

    function defaultWheelDelta(event) {
      return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);
    }

    function defaultTouchable() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }

    function defaultConstrain(transform, extent, translateExtent) {
      var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
          dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
          dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
          dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
      return transform.translate(
        dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
        dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
      );
    }

    function zoom() {
      var filter = defaultFilter,
          extent = defaultExtent,
          constrain = defaultConstrain,
          wheelDelta = defaultWheelDelta,
          touchable = defaultTouchable,
          scaleExtent = [0, Infinity],
          translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
          duration = 250,
          interpolate = interpolateZoom,
          listeners = dispatch("start", "zoom", "end"),
          touchstarting,
          touchfirst,
          touchending,
          touchDelay = 500,
          wheelDelay = 150,
          clickDistance2 = 0,
          tapDistance = 10;

      function zoom(selection) {
        selection
            .property("__zoom", defaultTransform)
            .on("wheel.zoom", wheeled, {passive: false})
            .on("mousedown.zoom", mousedowned)
            .on("dblclick.zoom", dblclicked)
          .filter(touchable)
            .on("touchstart.zoom", touchstarted)
            .on("touchmove.zoom", touchmoved)
            .on("touchend.zoom touchcancel.zoom", touchended)
            .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
      }

      zoom.transform = function(collection, transform, point, event) {
        var selection = collection.selection ? collection.selection() : collection;
        selection.property("__zoom", defaultTransform);
        if (collection !== selection) {
          schedule(collection, transform, point, event);
        } else {
          selection.interrupt().each(function() {
            gesture(this, arguments)
              .event(event)
              .start()
              .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
              .end();
          });
        }
      };

      zoom.scaleBy = function(selection, k, p, event) {
        zoom.scaleTo(selection, function() {
          var k0 = this.__zoom.k,
              k1 = typeof k === "function" ? k.apply(this, arguments) : k;
          return k0 * k1;
        }, p, event);
      };

      zoom.scaleTo = function(selection, k, p, event) {
        zoom.transform(selection, function() {
          var e = extent.apply(this, arguments),
              t0 = this.__zoom,
              p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,
              p1 = t0.invert(p0),
              k1 = typeof k === "function" ? k.apply(this, arguments) : k;
          return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
        }, p, event);
      };

      zoom.translateBy = function(selection, x, y, event) {
        zoom.transform(selection, function() {
          return constrain(this.__zoom.translate(
            typeof x === "function" ? x.apply(this, arguments) : x,
            typeof y === "function" ? y.apply(this, arguments) : y
          ), extent.apply(this, arguments), translateExtent);
        }, null, event);
      };

      zoom.translateTo = function(selection, x, y, p, event) {
        zoom.transform(selection, function() {
          var e = extent.apply(this, arguments),
              t = this.__zoom,
              p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
          return constrain(identity.translate(p0[0], p0[1]).scale(t.k).translate(
            typeof x === "function" ? -x.apply(this, arguments) : -x,
            typeof y === "function" ? -y.apply(this, arguments) : -y
          ), e, translateExtent);
        }, p, event);
      };

      function scale(transform, k) {
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
        return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
      }

      function translate(transform, p0, p1) {
        var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
        return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
      }

      function centroid(extent) {
        return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
      }

      function schedule(transition, transform, point, event) {
        transition
            .on("start.zoom", function() { gesture(this, arguments).event(event).start(); })
            .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).event(event).end(); })
            .tween("zoom", function() {
              var that = this,
                  args = arguments,
                  g = gesture(that, args).event(event),
                  e = extent.apply(that, args),
                  p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,
                  w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
                  a = that.__zoom,
                  b = typeof transform === "function" ? transform.apply(that, args) : transform,
                  i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
              return function(t) {
                if (t === 1) t = b; // Avoid rounding error on end.
                else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
                g.zoom(null, t);
              };
            });
      }

      function gesture(that, args, clean) {
        return (!clean && that.__zooming) || new Gesture(that, args);
      }

      function Gesture(that, args) {
        this.that = that;
        this.args = args;
        this.active = 0;
        this.sourceEvent = null;
        this.extent = extent.apply(that, args);
        this.taps = 0;
      }

      Gesture.prototype = {
        event: function(event) {
          if (event) this.sourceEvent = event;
          return this;
        },
        start: function() {
          if (++this.active === 1) {
            this.that.__zooming = this;
            this.emit("start");
          }
          return this;
        },
        zoom: function(key, transform) {
          if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
          if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
          if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
          this.that.__zoom = transform;
          this.emit("zoom");
          return this;
        },
        end: function() {
          if (--this.active === 0) {
            delete this.that.__zooming;
            this.emit("end");
          }
          return this;
        },
        emit: function(type) {
          var d = select(this.that).datum();
          listeners.call(
            type,
            this.that,
            new ZoomEvent(type, {
              sourceEvent: this.sourceEvent,
              target: zoom,
              type,
              transform: this.that.__zoom,
              dispatch: listeners
            }),
            d
          );
        }
      };

      function wheeled(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var g = gesture(this, args).event(event),
            t = this.__zoom,
            k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
            p = pointer(event);

        // If the mouse is in the same location as before, reuse it.
        // If there were recent wheel events, reset the wheel idle timeout.
        if (g.wheel) {
          if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
            g.mouse[1] = t.invert(g.mouse[0] = p);
          }
          clearTimeout(g.wheel);
        }

        // If this wheel event won’t trigger a transform change, ignore it.
        else if (t.k === k) return;

        // Otherwise, capture the mouse point and location at the start.
        else {
          g.mouse = [p, t.invert(p)];
          interrupt(this);
          g.start();
        }

        noevent(event);
        g.wheel = setTimeout(wheelidled, wheelDelay);
        g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

        function wheelidled() {
          g.wheel = null;
          g.end();
        }
      }

      function mousedowned(event, ...args) {
        if (touchending || !filter.apply(this, arguments)) return;
        var currentTarget = event.currentTarget,
            g = gesture(this, args, true).event(event),
            v = select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
            p = pointer(event, currentTarget),
            x0 = event.clientX,
            y0 = event.clientY;

        dragDisable(event.view);
        nopropagation(event);
        g.mouse = [p, this.__zoom.invert(p)];
        interrupt(this);
        g.start();

        function mousemoved(event) {
          noevent(event);
          if (!g.moved) {
            var dx = event.clientX - x0, dy = event.clientY - y0;
            g.moved = dx * dx + dy * dy > clickDistance2;
          }
          g.event(event)
           .zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));
        }

        function mouseupped(event) {
          v.on("mousemove.zoom mouseup.zoom", null);
          yesdrag(event.view, g.moved);
          noevent(event);
          g.event(event).end();
        }
      }

      function dblclicked(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var t0 = this.__zoom,
            p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this),
            p1 = t0.invert(p0),
            k1 = t0.k * (event.shiftKey ? 0.5 : 2),
            t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);

        noevent(event);
        if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0, event);
        else select(this).call(zoom.transform, t1, p0, event);
      }

      function touchstarted(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var touches = event.touches,
            n = touches.length,
            g = gesture(this, args, event.changedTouches.length === n).event(event),
            started, i, t, p;

        nopropagation(event);
        for (i = 0; i < n; ++i) {
          t = touches[i], p = pointer(t, this);
          p = [p, this.__zoom.invert(p), t.identifier];
          if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
          else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
        }

        if (touchstarting) touchstarting = clearTimeout(touchstarting);

        if (started) {
          if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
          interrupt(this);
          g.start();
        }
      }

      function touchmoved(event, ...args) {
        if (!this.__zooming) return;
        var g = gesture(this, args).event(event),
            touches = event.changedTouches,
            n = touches.length, i, t, p, l;

        noevent(event);
        for (i = 0; i < n; ++i) {
          t = touches[i], p = pointer(t, this);
          if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
          else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
        }
        t = g.that.__zoom;
        if (g.touch1) {
          var p0 = g.touch0[0], l0 = g.touch0[1],
              p1 = g.touch1[0], l1 = g.touch1[1],
              dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
              dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
          t = scale(t, Math.sqrt(dp / dl));
          p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
          l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
        }
        else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
        else return;

        g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
      }

      function touchended(event, ...args) {
        if (!this.__zooming) return;
        var g = gesture(this, args).event(event),
            touches = event.changedTouches,
            n = touches.length, i, t;

        nopropagation(event);
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() { touchending = null; }, touchDelay);
        for (i = 0; i < n; ++i) {
          t = touches[i];
          if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
          else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
        }
        if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
        if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
        else {
          g.end();
          // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.
          if (g.taps === 2) {
            t = pointer(t, this);
            if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
              var p = select(this).on("dblclick.zoom");
              if (p) p.apply(this, arguments);
            }
          }
        }
      }

      zoom.wheelDelta = function(_) {
        return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom) : wheelDelta;
      };

      zoom.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), zoom) : filter;
      };

      zoom.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom) : touchable;
      };

      zoom.extent = function(_) {
        return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
      };

      zoom.scaleExtent = function(_) {
        return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
      };

      zoom.translateExtent = function(_) {
        return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
      };

      zoom.constrain = function(_) {
        return arguments.length ? (constrain = _, zoom) : constrain;
      };

      zoom.duration = function(_) {
        return arguments.length ? (duration = +_, zoom) : duration;
      };

      zoom.interpolate = function(_) {
        return arguments.length ? (interpolate = _, zoom) : interpolate;
      };

      zoom.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? zoom : value;
      };

      zoom.clickDistance = function(_) {
        return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
      };

      zoom.tapDistance = function(_) {
        return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
      };

      return zoom;
    }

    /* src/GraphEditor.svelte generated by Svelte v3.48.0 */

    const { Object: Object_1, console: console_1 } = globals;
    const file = "src/GraphEditor.svelte";

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[44] = list[i];
    	return child_ctx;
    }

    // (239:0) {#if graph}
    function create_if_block(ctx) {
    	let div;
    	let svg;
    	let defs;
    	let marker;
    	let path;
    	let g;
    	let grid;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let svg_style_value;
    	let t0;
    	let section0;
    	let itemeditor;
    	let t1;
    	let t2;
    	let section1;
    	let sl_button_group;
    	let sl_dropdown;
    	let sl_button;
    	let t3;
    	let sl_icon;
    	let t4;
    	let sl_menu;
    	let t5;
    	let t6;
    	let sl_divider0;
    	let t7;
    	let sl_menu_label0;
    	let t9;
    	let t10;
    	let t11;
    	let sl_divider1;
    	let t12;
    	let sl_menu_label1;
    	let t14;
    	let sl_menu_item0;
    	let t15;
    	let sl_menu_item0_checked_value;
    	let t16;
    	let sl_menu_item1;
    	let t17;
    	let sl_menu_item1_checked_value;
    	let t18;
    	let sl_menu_item2;
    	let t19;
    	let sl_menu_item2_checked_value;
    	let t20;
    	let input;
    	let t21;
    	let current;
    	let mounted;
    	let dispose;

    	grid = new Grid({
    			props: { kind: /*graph*/ ctx[0].theme.grid },
    			$$inline: true
    		});

    	let each_value_2 = /*itemsForRender*/ ctx[4];
    	validate_each_argument(each_value_2);
    	const get_key = ctx => /*item*/ ctx[44].id;
    	validate_each_keys(ctx, each_value_2, get_each_context_2, get_key);

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		let child_ctx = get_each_context_2(ctx, each_value_2, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_2(key, child_ctx));
    	}

    	itemeditor = new ItemEditor({
    			props: {
    				selectedItem: /*selectedItem*/ ctx[1],
    				graph: /*graph*/ ctx[0]
    			},
    			$$inline: true
    		});

    	itemeditor.$on("graphchanged", /*graphchanged_handler*/ ctx[29]);
    	let if_block0 = /*contextMenuPosition*/ ctx[7] && create_if_block_6(ctx);
    	let if_block1 = /*graph*/ ctx[0].jsonupload && create_if_block_5(ctx);
    	let if_block2 = /*graph*/ ctx[0].jsondownload && create_if_block_4(ctx);
    	let if_block3 = /*graph*/ ctx[0].exportsvg && create_if_block_3(ctx);
    	let if_block4 = /*graph*/ ctx[0].exportcytoscape && create_if_block_2(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			defs = svg_element("defs");
    			marker = svg_element("marker");
    			path = svg_element("path");
    			g = svg_element("g");
    			create_component(grid.$$.fragment);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			section0 = element("section");
    			create_component(itemeditor.$$.fragment);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			section1 = element("section");
    			sl_button_group = element("sl-button-group");
    			sl_dropdown = element("sl-dropdown");
    			sl_button = element("sl-button");
    			t3 = text("Menu\n\t\t\t");
    			sl_icon = element("sl-icon");
    			t4 = space();
    			sl_menu = element("sl-menu");
    			if (if_block1) if_block1.c();
    			t5 = space();
    			if (if_block2) if_block2.c();
    			t6 = space();
    			sl_divider0 = element("sl-divider");
    			t7 = space();
    			sl_menu_label0 = element("sl-menu-label");
    			sl_menu_label0.textContent = "Export as:";
    			t9 = space();
    			if (if_block3) if_block3.c();
    			t10 = space();
    			if (if_block4) if_block4.c();
    			t11 = space();
    			sl_divider1 = element("sl-divider");
    			t12 = space();
    			sl_menu_label1 = element("sl-menu-label");
    			sl_menu_label1.textContent = "Switch Theme To";
    			t14 = space();
    			sl_menu_item0 = element("sl-menu-item");
    			t15 = text("Classic");
    			t16 = space();
    			sl_menu_item1 = element("sl-menu-item");
    			t17 = text("Elegant");
    			t18 = space();
    			sl_menu_item2 = element("sl-menu-item");
    			t19 = text("Foresight");
    			t20 = space();
    			input = element("input");
    			t21 = space();
    			attr_dev(path, "d", "M 0 0 L 10 5 L 0 10 z");
    			attr_dev(path, "fill", "grey");
    			add_location(path, file, 255, 6, 7422);
    			attr_dev(marker, "id", "arrow");
    			attr_dev(marker, "viewBox", "0 0 10 10");
    			attr_dev(marker, "refX", "5");
    			attr_dev(marker, "refY", "5");
    			attr_dev(marker, "markerWidth", "4");
    			attr_dev(marker, "markerHeight", "4");
    			attr_dev(marker, "orient", "auto-start-reverse");
    			add_location(marker, file, 252, 1, 7281);
    			add_location(defs, file, 251, 2, 7273);
    			add_location(g, file, 259, 2, 7498);
    			attr_dev(svg, "tabindex", "0");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 1000 1000");
    			attr_dev(svg, "style", svg_style_value = `background-color: ${/*graph*/ ctx[0].theme.bgfill}`);
    			attr_dev(svg, "class", "svelte-1w97api");
    			add_location(svg, file, 240, 0, 6797);
    			attr_dev(section0, "class", "sidepanel svelte-1w97api");
    			add_location(section0, file, 286, 0, 8265);
    			attr_dev(div, "class", "container svelte-1w97api");
    			add_location(div, file, 239, 0, 6773);
    			set_custom_element_data(sl_icon, "slot", "prefix");
    			set_custom_element_data(sl_icon, "name", "list");
    			add_location(sl_icon, file, 311, 3, 9312);
    			set_custom_element_data(sl_button, "slot", "trigger");
    			set_custom_element_data(sl_button, "caret", "");
    			add_location(sl_button, file, 309, 2, 9268);
    			add_location(sl_divider0, file, 326, 3, 9735);
    			add_location(sl_menu_label0, file, 327, 3, 9764);
    			add_location(sl_divider1, file, 330, 3, 9994);
    			add_location(sl_menu_label1, file, 331, 3, 10023);
    			set_custom_element_data(sl_menu_item0, "value", "theme.classic");
    			set_custom_element_data(sl_menu_item0, "checked", sl_menu_item0_checked_value = /*graph*/ ctx[0].theme.name === 'classic');
    			add_location(sl_menu_item0, file, 332, 3, 10073);
    			set_custom_element_data(sl_menu_item1, "value", "theme.elegant");
    			set_custom_element_data(sl_menu_item1, "checked", sl_menu_item1_checked_value = /*graph*/ ctx[0].theme.name === 'elegant');
    			add_location(sl_menu_item1, file, 333, 3, 10176);
    			set_custom_element_data(sl_menu_item2, "value", "theme.foresight");
    			set_custom_element_data(sl_menu_item2, "checked", sl_menu_item2_checked_value = /*graph*/ ctx[0].theme.name === 'foresight');
    			add_location(sl_menu_item2, file, 334, 3, 10279);
    			add_location(sl_menu, file, 313, 2, 9375);
    			add_location(sl_dropdown, file, 308, 1, 9226);
    			attr_dev(input, "class", "fileupload");
    			set_style(input, "display", "none");
    			attr_dev(input, "type", "file");
    			attr_dev(input, "name", "upload");
    			attr_dev(input, "id", "upload");
    			attr_dev(input, "accept", ".graph");
    			add_location(input, file, 338, 1, 10416);
    			add_location(sl_button_group, file, 307, 0, 9207);
    			attr_dev(section1, "class", "globalmenu svelte-1w97api");
    			add_location(section1, file, 306, 0, 9178);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, defs);
    			append_dev(defs, marker);
    			append_dev(marker, path);
    			append_dev(svg, g);
    			mount_component(grid, g, null);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}

    			/*g_binding*/ ctx[25](g);
    			/*svg_binding*/ ctx[28](svg);
    			append_dev(div, t0);
    			append_dev(div, section0);
    			mount_component(itemeditor, section0, null);
    			append_dev(div, t1);
    			if (if_block0) if_block0.m(div, null);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, section1, anchor);
    			append_dev(section1, sl_button_group);
    			append_dev(sl_button_group, sl_dropdown);
    			append_dev(sl_dropdown, sl_button);
    			append_dev(sl_button, t3);
    			append_dev(sl_button, sl_icon);
    			append_dev(sl_dropdown, t4);
    			append_dev(sl_dropdown, sl_menu);
    			if (if_block1) if_block1.m(sl_menu, null);
    			append_dev(sl_menu, t5);
    			if (if_block2) if_block2.m(sl_menu, null);
    			append_dev(sl_menu, t6);
    			append_dev(sl_menu, sl_divider0);
    			append_dev(sl_menu, t7);
    			append_dev(sl_menu, sl_menu_label0);
    			append_dev(sl_menu, t9);
    			if (if_block3) if_block3.m(sl_menu, null);
    			append_dev(sl_menu, t10);
    			if (if_block4) if_block4.m(sl_menu, null);
    			append_dev(sl_menu, t11);
    			append_dev(sl_menu, sl_divider1);
    			append_dev(sl_menu, t12);
    			append_dev(sl_menu, sl_menu_label1);
    			append_dev(sl_menu, t14);
    			append_dev(sl_menu, sl_menu_item0);
    			append_dev(sl_menu_item0, t15);
    			append_dev(sl_menu, t16);
    			append_dev(sl_menu, sl_menu_item1);
    			append_dev(sl_menu_item1, t17);
    			append_dev(sl_menu, t18);
    			append_dev(sl_menu, sl_menu_item2);
    			append_dev(sl_menu_item2, t19);
    			append_dev(sl_button_group, t20);
    			append_dev(sl_button_group, input);
    			append_dev(sl_button_group, t21);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(svg, "mousedown", /*mousedown_handler*/ ctx[26], false, false, false),
    					listen_dev(svg, "mousemove", /*handleMouseMove*/ ctx[14], false, false, false),
    					listen_dev(svg, "mouseup", /*mouseup_handler*/ ctx[27], false, false, false),
    					listen_dev(svg, "click", /*handleSvgClick*/ ctx[13], false, false, false),
    					listen_dev(svg, "contextmenu", prevent_default(/*handleContextMenu*/ ctx[16]), false, true, false),
    					listen_dev(svg, "keydown", /*handleKeydown*/ ctx[18], false, false, false),
    					listen_dev(sl_dropdown, "sl-select", /*handleMenu*/ ctx[21], false, false, false),
    					listen_dev(input, "change", /*change_handler*/ ctx[33], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const grid_changes = {};
    			if (dirty[0] & /*graph*/ 1) grid_changes.kind = /*graph*/ ctx[0].theme.grid;
    			grid.$set(grid_changes);

    			if (dirty[0] & /*itemsForRender, selectedItem, graph, highlighted, handleItemMouseDown, handleItemMouseUp, handleItemBadgeClick, handleCreateNode, handleEdgeChanged*/ 659219) {
    				each_value_2 = /*itemsForRender*/ ctx[4];
    				validate_each_argument(each_value_2);
    				group_outros();
    				validate_each_keys(ctx, each_value_2, get_each_context_2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_2, each_1_lookup, g, outro_and_destroy_block, create_each_block_2, null, get_each_context_2);
    				check_outros();
    			}

    			if (!current || dirty[0] & /*graph*/ 1 && svg_style_value !== (svg_style_value = `background-color: ${/*graph*/ ctx[0].theme.bgfill}`)) {
    				attr_dev(svg, "style", svg_style_value);
    			}

    			const itemeditor_changes = {};
    			if (dirty[0] & /*selectedItem*/ 2) itemeditor_changes.selectedItem = /*selectedItem*/ ctx[1];
    			if (dirty[0] & /*graph*/ 1) itemeditor_changes.graph = /*graph*/ ctx[0];
    			itemeditor.$set(itemeditor_changes);

    			if (/*contextMenuPosition*/ ctx[7]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_6(ctx);
    					if_block0.c();
    					if_block0.m(div, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*graph*/ ctx[0].jsonupload) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_5(ctx);
    					if_block1.c();
    					if_block1.m(sl_menu, t5);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*graph*/ ctx[0].jsondownload) {
    				if (if_block2) ; else {
    					if_block2 = create_if_block_4(ctx);
    					if_block2.c();
    					if_block2.m(sl_menu, t6);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*graph*/ ctx[0].exportsvg) {
    				if (if_block3) ; else {
    					if_block3 = create_if_block_3(ctx);
    					if_block3.c();
    					if_block3.m(sl_menu, t10);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*graph*/ ctx[0].exportcytoscape) {
    				if (if_block4) ; else {
    					if_block4 = create_if_block_2(ctx);
    					if_block4.c();
    					if_block4.m(sl_menu, t11);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (!current || dirty[0] & /*graph*/ 1 && sl_menu_item0_checked_value !== (sl_menu_item0_checked_value = /*graph*/ ctx[0].theme.name === 'classic')) {
    				set_custom_element_data(sl_menu_item0, "checked", sl_menu_item0_checked_value);
    			}

    			if (!current || dirty[0] & /*graph*/ 1 && sl_menu_item1_checked_value !== (sl_menu_item1_checked_value = /*graph*/ ctx[0].theme.name === 'elegant')) {
    				set_custom_element_data(sl_menu_item1, "checked", sl_menu_item1_checked_value);
    			}

    			if (!current || dirty[0] & /*graph*/ 1 && sl_menu_item2_checked_value !== (sl_menu_item2_checked_value = /*graph*/ ctx[0].theme.name === 'foresight')) {
    				set_custom_element_data(sl_menu_item2, "checked", sl_menu_item2_checked_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(grid.$$.fragment, local);

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(itemeditor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(grid.$$.fragment, local);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(itemeditor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(grid);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			/*g_binding*/ ctx[25](null);
    			/*svg_binding*/ ctx[28](null);
    			destroy_component(itemeditor);
    			if (if_block0) if_block0.d();
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(section1);
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(239:0) {#if graph}",
    		ctx
    	});

    	return block;
    }

    // (275:33) 
    function create_if_block_10(ctx) {
    	let edge;
    	let current;

    	edge = new Edge({
    			props: {
    				item: /*item*/ ctx[44],
    				graph: /*graph*/ ctx[0],
    				isSelected: /*item*/ ctx[44].id === /*selectedItem*/ ctx[1]?.id
    			},
    			$$inline: true
    		});

    	edge.$on("itemMouseDown", /*handleItemMouseDown*/ ctx[9]);
    	edge.$on("itemMouseUp", /*handleItemMouseUp*/ ctx[10]);
    	edge.$on("edgeChanged", /*handleEdgeChanged*/ ctx[19]);

    	const block = {
    		c: function create() {
    			create_component(edge.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(edge, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const edge_changes = {};
    			if (dirty[0] & /*itemsForRender*/ 16) edge_changes.item = /*item*/ ctx[44];
    			if (dirty[0] & /*graph*/ 1) edge_changes.graph = /*graph*/ ctx[0];
    			if (dirty[0] & /*itemsForRender, selectedItem*/ 18) edge_changes.isSelected = /*item*/ ctx[44].id === /*selectedItem*/ ctx[1]?.id;
    			edge.$set(edge_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(edge.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(edge.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(edge, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(275:33) ",
    		ctx
    	});

    	return block;
    }

    // (264:2) {#if item.kind === 'node'}
    function create_if_block_9(ctx) {
    	let node;
    	let current;

    	node = new Node({
    			props: {
    				item: /*item*/ ctx[44],
    				isSelected: /*item*/ ctx[44].id === /*selectedItem*/ ctx[1]?.id,
    				theme: /*graph*/ ctx[0].theme,
    				isHighlighted: /*highlighted*/ ctx[8].includes(/*item*/ ctx[44].id)
    			},
    			$$inline: true
    		});

    	node.$on("itemMouseDown", /*handleItemMouseDown*/ ctx[9]);
    	node.$on("itemMouseUp", /*handleItemMouseUp*/ ctx[10]);
    	node.$on("itemBadgeClick", /*handleItemBadgeClick*/ ctx[11]);
    	node.$on("nodeChanged", handleNodeChanged);
    	node.$on("createnode", /*handleCreateNode*/ ctx[17]);

    	const block = {
    		c: function create() {
    			create_component(node.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(node, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const node_changes = {};
    			if (dirty[0] & /*itemsForRender*/ 16) node_changes.item = /*item*/ ctx[44];
    			if (dirty[0] & /*itemsForRender, selectedItem*/ 18) node_changes.isSelected = /*item*/ ctx[44].id === /*selectedItem*/ ctx[1]?.id;
    			if (dirty[0] & /*graph*/ 1) node_changes.theme = /*graph*/ ctx[0].theme;
    			if (dirty[0] & /*highlighted, itemsForRender*/ 272) node_changes.isHighlighted = /*highlighted*/ ctx[8].includes(/*item*/ ctx[44].id);
    			node.$set(node_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(node.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(node.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(node, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(264:2) {#if item.kind === 'node'}",
    		ctx
    	});

    	return block;
    }

    // (263:4) {#each itemsForRender as item (item.id)}
    function create_each_block_2(key_1, ctx) {
    	let first;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_9, create_if_block_10];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*item*/ ctx[44].kind === 'node') return 0;
    		if (/*item*/ ctx[44].kind === 'edge') return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty$3();
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(263:4) {#each itemsForRender as item (item.id)}",
    		ctx
    	});

    	return block;
    }

    // (291:0) {#if contextMenuPosition}
    function create_if_block_6(ctx) {
    	let sl_menu;
    	let sl_menu_style_value;

    	function select_block_type_1(ctx, dirty) {
    		if (/*selectedItem*/ ctx[1]) return create_if_block_7;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			sl_menu = element("sl-menu");
    			if_block.c();
    			set_custom_element_data(sl_menu, "class", "contextmenu svelte-1w97api");
    			set_custom_element_data(sl_menu, "style", sl_menu_style_value = `left: ${/*contextMenuPosition*/ ctx[7][0]}px; top: ${/*contextMenuPosition*/ ctx[7][1]}px;`);
    			add_location(sl_menu, file, 291, 0, 8418);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sl_menu, anchor);
    			if_block.m(sl_menu, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(sl_menu, null);
    				}
    			}

    			if (dirty[0] & /*contextMenuPosition*/ 128 && sl_menu_style_value !== (sl_menu_style_value = `left: ${/*contextMenuPosition*/ ctx[7][0]}px; top: ${/*contextMenuPosition*/ ctx[7][1]}px;`)) {
    				set_custom_element_data(sl_menu, "style", sl_menu_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sl_menu);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(291:0) {#if contextMenuPosition}",
    		ctx
    	});

    	return block;
    }

    // (299:2) {:else}
    function create_else_block(ctx) {
    	let sl_menu_item;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			sl_menu_item = element("sl-menu-item");
    			sl_menu_item.textContent = "Create new node";
    			set_custom_element_data(sl_menu_item, "value", "createnode");
    			add_location(sl_menu_item, file, 299, 2, 9058);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sl_menu_item, anchor);

    			if (!mounted) {
    				dispose = listen_dev(sl_menu_item, "click", /*createNode*/ ctx[15], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sl_menu_item);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(299:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (293:2) {#if selectedItem}
    function create_if_block_7(ctx) {
    	let t0;
    	let sl_menu_item;
    	let t1;
    	let t2_value = /*selectedItem*/ ctx[1].label + "";
    	let t2;
    	let t3;
    	let mounted;
    	let dispose;
    	let if_block = /*selectedItem*/ ctx[1].kind === 'node' && create_if_block_8(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t0 = space();
    			sl_menu_item = element("sl-menu-item");
    			t1 = text("Delete \"");
    			t2 = text(t2_value);
    			t3 = text("\" leaving orphans");
    			set_custom_element_data(sl_menu_item, "value", "deleteitem");
    			add_location(sl_menu_item, file, 297, 3, 8892);
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, sl_menu_item, anchor);
    			append_dev(sl_menu_item, t1);
    			append_dev(sl_menu_item, t2);
    			append_dev(sl_menu_item, t3);

    			if (!mounted) {
    				dispose = listen_dev(sl_menu_item, "click", /*click_handler_2*/ ctx[32], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*selectedItem*/ ctx[1].kind === 'node') {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_8(ctx);
    					if_block.c();
    					if_block.m(t0.parentNode, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*selectedItem*/ 2 && t2_value !== (t2_value = /*selectedItem*/ ctx[1].label + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(sl_menu_item);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(293:2) {#if selectedItem}",
    		ctx
    	});

    	return block;
    }

    // (294:1) {#if selectedItem.kind === 'node'}
    function create_if_block_8(ctx) {
    	let sl_menu_item0;
    	let t1;
    	let sl_menu_item1;
    	let t2;
    	let t3_value = /*selectedItem*/ ctx[1].label + "";
    	let t3;
    	let t4;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			sl_menu_item0 = element("sl-menu-item");
    			sl_menu_item0.textContent = "Create child node";
    			t1 = space();
    			sl_menu_item1 = element("sl-menu-item");
    			t2 = text("Delete \"");
    			t3 = text(t3_value);
    			t4 = text("\" including dependents");
    			set_custom_element_data(sl_menu_item0, "value", "createchildnode");
    			add_location(sl_menu_item0, file, 294, 2, 8586);
    			set_custom_element_data(sl_menu_item1, "value", "deleteitemwithdependents");
    			add_location(sl_menu_item1, file, 295, 2, 8710);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sl_menu_item0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, sl_menu_item1, anchor);
    			append_dev(sl_menu_item1, t2);
    			append_dev(sl_menu_item1, t3);
    			append_dev(sl_menu_item1, t4);

    			if (!mounted) {
    				dispose = [
    					listen_dev(sl_menu_item0, "click", /*click_handler*/ ctx[30], false, false, false),
    					listen_dev(sl_menu_item1, "click", /*click_handler_1*/ ctx[31], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedItem*/ 2 && t3_value !== (t3_value = /*selectedItem*/ ctx[1].label + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sl_menu_item0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(sl_menu_item1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(294:1) {#if selectedItem.kind === 'node'}",
    		ctx
    	});

    	return block;
    }

    // (315:3) {#if graph.jsonupload}
    function create_if_block_5(ctx) {
    	let sl_menu_item;
    	let t;
    	let sl_icon;

    	const block = {
    		c: function create() {
    			sl_menu_item = element("sl-menu-item");
    			t = text("Load .graph File...\n\t\t\t\t");
    			sl_icon = element("sl-icon");
    			set_custom_element_data(sl_icon, "slot", "prefix");
    			set_custom_element_data(sl_icon, "name", "folder2-open");
    			add_location(sl_icon, file, 317, 4, 9476);
    			set_custom_element_data(sl_menu_item, "value", "openfile");
    			add_location(sl_menu_item, file, 315, 5, 9416);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sl_menu_item, anchor);
    			append_dev(sl_menu_item, t);
    			append_dev(sl_menu_item, sl_icon);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sl_menu_item);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(315:3) {#if graph.jsonupload}",
    		ctx
    	});

    	return block;
    }

    // (321:3) {#if graph.jsondownload}
    function create_if_block_4(ctx) {
    	let sl_menu_item;
    	let t;
    	let sl_icon;

    	const block = {
    		c: function create() {
    			sl_menu_item = element("sl-menu-item");
    			t = text("Save as .graph file...\n\t\t\t\t");
    			sl_icon = element("sl-icon");
    			set_custom_element_data(sl_icon, "slot", "prefix");
    			set_custom_element_data(sl_icon, "name", "download");
    			add_location(sl_icon, file, 323, 4, 9654);
    			set_custom_element_data(sl_menu_item, "value", "savefile");
    			add_location(sl_menu_item, file, 321, 5, 9591);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sl_menu_item, anchor);
    			append_dev(sl_menu_item, t);
    			append_dev(sl_menu_item, sl_icon);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sl_menu_item);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(321:3) {#if graph.jsondownload}",
    		ctx
    	});

    	return block;
    }

    // (329:3) {#if graph.exportsvg}
    function create_if_block_3(ctx) {
    	let sl_menu_item;

    	const block = {
    		c: function create() {
    			sl_menu_item = element("sl-menu-item");
    			sl_menu_item.textContent = "SVG";
    			set_custom_element_data(sl_menu_item, "value", "export.svg");
    			add_location(sl_menu_item, file, 328, 24, 9830);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sl_menu_item, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sl_menu_item);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(329:3) {#if graph.exportsvg}",
    		ctx
    	});

    	return block;
    }

    // (330:3) {#if graph.exportcytoscape}
    function create_if_block_2(ctx) {
    	let sl_menu_item;

    	const block = {
    		c: function create() {
    			sl_menu_item = element("sl-menu-item");
    			sl_menu_item.textContent = "Cytoscape JSON";
    			set_custom_element_data(sl_menu_item, "value", "export.cytoscape");
    			add_location(sl_menu_item, file, 329, 30, 9917);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sl_menu_item, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sl_menu_item);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(330:3) {#if graph.exportcytoscape}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*graph*/ ctx[0] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*graph*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*graph*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function handleNodeChanged(e) {
    	
    } // console.log("handleNodeChanged");
    // graph = graph;

    function getItemsForRender(graph, selectedItem) {
    	if (!graph) return [];

    	// draw selected edge on the top (at the end)
    	if (selectedItem?.kind === 'edge') return [
    		...graph.items.sort((a, b) => a.level - b.level).filter(i => i.id !== selectedItem.id),
    		...graph.items.filter(i => i.id === selectedItem.id)
    	]; else return graph.items.sort((a, b) => a.level - b.level);
    }

    function getTagGroups(graph) {
    	if (!graph) return Object.entries({});

    	// get unique tags
    	let tags = graph.items.map(i => i.tags).flat().filter((value, index, self) => self.indexOf(value) === index);

    	// console.log(tags);
    	let groups = tags.reduce(
    		(acc, tag) => {
    			tag.split(":");

    			let group = tag.split(":").length > 1
    			? tag.split(":")[0]
    			: 'ungrouped';

    			acc[group] = acc[group] ?? [];

    			acc[group].push({
    				label: tag.split(":").reverse()[0],
    				value: tag
    			});

    			return acc;
    		},
    		{}
    	);

    	return Object.entries(groups);
    }

    function downloadFile(content, name) {
    	let element = document.createElement('a');
    	element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
    	element.setAttribute('download', name);
    	element.style.display = 'none';
    	document.body.appendChild(element);
    	element.click();
    	document.body.removeChild(element);
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('GraphEditor', slots, []);
    	let { graphjsonpath } = $$props;
    	let { overrideOptions = {} } = $$props;
    	let graph;
    	let itemsForRender;
    	let tagGroups;
    	let currentMouse = {};
    	let selectedItem = null;
    	let draggingFrom = null;
    	let contextMenuPosition = null;
    	let svgElement;
    	let topGroupElem;
    	let highlighted = [];

    	onMount(() => {
    		graphjsonpath && fetch(graphjsonpath).then(r => r.json()).then(data => {
    			$$invalidate(0, graph = layout(Object.assign(data, overrideOptions)));
    		});
    	});

    	function reRender() {
    		$$invalidate(2, svgElement);
    		$$invalidate(3, topGroupElem);
    		$$invalidate(1, selectedItem);
    		$$invalidate(0, graph = layout(graph));
    	} // console.log('rerender()')

    	function handleItemMouseDown(e) {
    		// console.log('handleItemMouseDown', e.detail.rawEvent.buttons);
    		$$invalidate(1, selectedItem = e.detail.source);

    		// to stop mouse events from firing elsewhere
    		// e.detail.rawEvent.target.setPointerCapture(e.detail.rawEvent.pointerId);
    		$$invalidate(6, draggingFrom = {
    			x: e.detail.rawEvent.clientX,
    			y: e.detail.rawEvent.clientY
    		});

    		$$invalidate(7, contextMenuPosition = null);
    	}

    	function handleItemMouseUp(e) {
    		// console.log('handleItemMouseUp');
    		// release pointer lock
    		// e.detail.rawEvent.target.releasePointerCapture(e.detail.rawEvent.pointerId);
    		$$invalidate(1, selectedItem = e.detail.source);

    		$$invalidate(6, draggingFrom = null);
    	}

    	function handleItemBadgeClick(e) {
    		let item = e.detail.source;
    		let indexOfCurrentBadge = graph.theme.badges.indexOf(item.badge);
    		let indexOfNextBadge = (indexOfCurrentBadge + 1) % graph.theme.badges.length;
    		item.badge = graph.theme.badges[indexOfNextBadge];
    		reRender();
    	}

    	function deleteItem(item, deleteDependents) {
    		deleteGraphItem(item, graph, deleteDependents);
    		$$invalidate(1, selectedItem = null);
    		reRender();
    		$$invalidate(7, contextMenuPosition = null);
    	}

    	function handleSvgClick(e) {
    		// console.log("handleSvgClick");
    		$$invalidate(1, selectedItem = null);

    		$$invalidate(7, contextMenuPosition = null);
    	}

    	function handleMouseMove(e) {
    		// console.log("mousemove");
    		currentMouse = { x: e.clientX, y: e.clientY };

    		if (!selectedItem || !draggingFrom || !selectedItem.pos) return;
    		if (e.buttons != 1) return; // only process left-click

    		// move selectedItem along with all its children
    		// transform into svg coordinates to handle dragging in zoomed-in/zoomed-out mode correctly
    		let pt1 = svgElement.createSVGPoint();

    		pt1.x = draggingFrom.x;
    		pt1.y = draggingFrom.y;
    		let svgPt1 = pt1.matrixTransform(topGroupElem.getCTM().inverse());
    		let pt2 = svgElement.createSVGPoint();
    		pt2.x = currentMouse.x;
    		pt2.y = currentMouse.y;
    		let svgPt2 = pt2.matrixTransform(topGroupElem.getCTM().inverse());
    		moveGraphNode(selectedItem, graph, svgPt2.x - svgPt1.x, svgPt2.y - svgPt1.y);

    		// TODO: if moved on top of another node, create parent-child relationship
    		$$invalidate(6, draggingFrom.x = currentMouse.x, draggingFrom);

    		$$invalidate(6, draggingFrom.y = currentMouse.y, draggingFrom);
    		reRender();
    	}

    	function createNode(e) {
    		createGraphNode(e, graph, svgElement);
    		reRender();
    		$$invalidate(7, contextMenuPosition = null);
    	}

    	function handleContextMenu(e) {
    		if (!graph.contextmenu) return;
    		$$invalidate(7, contextMenuPosition = [e.clientX, e.clientY]);
    	}

    	function handleCreateNode(e) {
    		// console.log("createnode", e.detail)
    		createGraphNodeEdge(e.detail.from, e.detail.handle, graph);

    		reRender();
    	}

    	function handleKeydown(e) {
    		// console.log(e.key, e.keyCode, e.target)
    		if (selectedItem && (e.key === 'Backspace' || e.key === 'Delete')) {
    			deleteItem(selectedItem, false);
    		}
    	}

    	function handleEdgeChanged(e) {
    		reRender();
    	}

    	function createChildNode(e, item) {
    		// console.log("createChildNode", item);
    		createGraphChildNode(e, graph, item, svgElement);

    		reRender();
    		$$invalidate(7, contextMenuPosition = null);
    	}

    	function switchTheme(name) {
    		$$invalidate(0, graph.theme = themes[name], graph);
    		reRender();
    	}

    	function handleMenu(e) {
    		let value = e.detail.item.value;

    		if (value.startsWith("theme.")) {
    			switchTheme(value.split(".")[1]);
    		} else if (value.startsWith("export.")) {
    			let kind = value.split(".")[1]; //svg or cytoscape

    			if (kind === 'svg') {
    				downloadFile(svgElement.outerHTML, 'graph.svg');
    			} else if (kind === 'cytoscape') {
    				downloadFile(exportCytoscape(graph), 'graph-cytoscape.json');
    			}
    		} else if (value === 'openfile') {
    			console.log(value);
    			let fileinput = document.getElementsByClassName('fileupload')[0];
    			console.log({ fileinput });
    			fileinput.click();
    		} else if (value === 'savefile') {
    			downloadFile(exportJson(graph), 'mynetwork.graph');
    		}
    	}

    	function uploadFile(e) {
    		let jsonFile = e.target.files[0];
    		let reader = new FileReader();
    		reader.readAsText(jsonFile);

    		reader.onload = e => {
    			$$invalidate(0, graph = layout(JSON.parse(e.target.result)));
    		};
    	}

    	const writable_props = ['graphjsonpath', 'overrideOptions'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<GraphEditor> was created with unknown prop '${key}'`);
    	});

    	function g_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			topGroupElem = $$value;
    			$$invalidate(3, topGroupElem);
    		});
    	}

    	const mousedown_handler = e => {
    		if (e.buttons === 1) {
    			$$invalidate(6, draggingFrom = { x: e.clientX, y: e.clientY });
    		}
    	};

    	const mouseup_handler = e => {
    		if (e.buttons === 1) {
    			$$invalidate(6, draggingFrom = null);
    		}
    	};

    	function svg_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			svgElement = $$value;
    			$$invalidate(2, svgElement);
    		});
    	}

    	const graphchanged_handler = e => $$invalidate(0, graph = layout(e.detail));
    	const click_handler = e => createChildNode(e, selectedItem);
    	const click_handler_1 = e => deleteItem(selectedItem, true);
    	const click_handler_2 = e => deleteItem(selectedItem, false);
    	const change_handler = e => uploadFile(e);
    	const sl_change_handler = e => $$invalidate(8, highlighted = graph.items.filter(i => i.kind === 'node' && i.tags.includes(e.target.value)).map(i => i.id));

    	$$self.$$set = $$props => {
    		if ('graphjsonpath' in $$props) $$invalidate(23, graphjsonpath = $$props.graphjsonpath);
    		if ('overrideOptions' in $$props) $$invalidate(24, overrideOptions = $$props.overrideOptions);
    	};

    	$$self.$capture_state = () => ({
    		exportJson,
    		moveGraphNode,
    		createGraphNodeEdge,
    		layout,
    		themes,
    		deleteGraphItem,
    		createGraphNode,
    		exportCytoscape,
    		createGraphChildNode,
    		Node,
    		Edge,
    		Grid,
    		ItemEditor,
    		onMount,
    		zoom,
    		select,
    		graphjsonpath,
    		overrideOptions,
    		graph,
    		itemsForRender,
    		tagGroups,
    		currentMouse,
    		selectedItem,
    		draggingFrom,
    		contextMenuPosition,
    		svgElement,
    		topGroupElem,
    		highlighted,
    		reRender,
    		handleItemMouseDown,
    		handleItemMouseUp,
    		handleNodeChanged,
    		handleItemBadgeClick,
    		deleteItem,
    		handleSvgClick,
    		handleMouseMove,
    		createNode,
    		handleContextMenu,
    		handleCreateNode,
    		handleKeydown,
    		handleEdgeChanged,
    		createChildNode,
    		getItemsForRender,
    		switchTheme,
    		getTagGroups,
    		downloadFile,
    		handleMenu,
    		uploadFile
    	});

    	$$self.$inject_state = $$props => {
    		if ('graphjsonpath' in $$props) $$invalidate(23, graphjsonpath = $$props.graphjsonpath);
    		if ('overrideOptions' in $$props) $$invalidate(24, overrideOptions = $$props.overrideOptions);
    		if ('graph' in $$props) $$invalidate(0, graph = $$props.graph);
    		if ('itemsForRender' in $$props) $$invalidate(4, itemsForRender = $$props.itemsForRender);
    		if ('tagGroups' in $$props) $$invalidate(5, tagGroups = $$props.tagGroups);
    		if ('currentMouse' in $$props) currentMouse = $$props.currentMouse;
    		if ('selectedItem' in $$props) $$invalidate(1, selectedItem = $$props.selectedItem);
    		if ('draggingFrom' in $$props) $$invalidate(6, draggingFrom = $$props.draggingFrom);
    		if ('contextMenuPosition' in $$props) $$invalidate(7, contextMenuPosition = $$props.contextMenuPosition);
    		if ('svgElement' in $$props) $$invalidate(2, svgElement = $$props.svgElement);
    		if ('topGroupElem' in $$props) $$invalidate(3, topGroupElem = $$props.topGroupElem);
    		if ('highlighted' in $$props) $$invalidate(8, highlighted = $$props.highlighted);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*graph, selectedItem*/ 3) {
    			$$invalidate(4, itemsForRender = getItemsForRender(graph, selectedItem));
    		}

    		if ($$self.$$.dirty[0] & /*graph*/ 1) {
    			$$invalidate(5, tagGroups = getTagGroups(graph));
    		}

    		if ($$self.$$.dirty[0] & /*svgElement, topGroupElem*/ 12) {
    			// panning and zooming
    			if (svgElement && topGroupElem) {
    				select(svgElement).call(zoom().on('zoom', ({ transform }) => {
    					select(topGroupElem).attr('transform', transform);
    				}));
    			}
    		}
    	};

    	return [
    		graph,
    		selectedItem,
    		svgElement,
    		topGroupElem,
    		itemsForRender,
    		tagGroups,
    		draggingFrom,
    		contextMenuPosition,
    		highlighted,
    		handleItemMouseDown,
    		handleItemMouseUp,
    		handleItemBadgeClick,
    		deleteItem,
    		handleSvgClick,
    		handleMouseMove,
    		createNode,
    		handleContextMenu,
    		handleCreateNode,
    		handleKeydown,
    		handleEdgeChanged,
    		createChildNode,
    		handleMenu,
    		uploadFile,
    		graphjsonpath,
    		overrideOptions,
    		g_binding,
    		mousedown_handler,
    		mouseup_handler,
    		svg_binding,
    		graphchanged_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		change_handler,
    		sl_change_handler
    	];
    }

    class GraphEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance, create_fragment, safe_not_equal, { graphjsonpath: 23, overrideOptions: 24 }, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "GraphEditor",
    			options,
    			id: create_fragment.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*graphjsonpath*/ ctx[23] === undefined && !('graphjsonpath' in props)) {
    			console_1.warn("<GraphEditor> was created without expected prop 'graphjsonpath'");
    		}
    	}

    	get graphjsonpath() {
    		throw new Error("<GraphEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set graphjsonpath(value) {
    		throw new Error("<GraphEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get overrideOptions() {
    		throw new Error("<GraphEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set overrideOptions(value) {
    		throw new Error("<GraphEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var app = new GraphEditor({
    	target: document.body,
    	props: {
    		graphjsonpath: window.graphjsonpath,
    		overrideOptions: (window.overrideOptions || {})
    	}
    });

    /*!
     * vanilla-picker v2.12.1
     * https://vanilla-picker.js.org
     *
     * Copyright 2017-2021 Andreas Borgen (https://github.com/Sphinxxxx), Adam Brooks (https://github.com/dissimulate)
     * Released under the ISC license.
     */
    var classCallCheck = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };

    var createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var slicedToArray = function () {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"]) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      return function (arr, i) {
        if (Array.isArray(arr)) {
          return arr;
        } else if (Symbol.iterator in Object(arr)) {
          return sliceIterator(arr, i);
        } else {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
      };
    }();

    String.prototype.startsWith = String.prototype.startsWith || function (needle) {
        return this.indexOf(needle) === 0;
    };
    String.prototype.padStart = String.prototype.padStart || function (len, pad) {
        var str = this;while (str.length < len) {
            str = pad + str;
        }return str;
    };

    var colorNames = { cb: '0f8ff', tqw: 'aebd7', q: '-ffff', qmrn: '7fffd4', zr: '0ffff', bg: '5f5dc', bsq: 'e4c4', bck: '---', nch: 'ebcd', b: '--ff', bvt: '8a2be2', brwn: 'a52a2a', brw: 'deb887', ctb: '5f9ea0', hrt: '7fff-', chcT: 'd2691e', cr: '7f50', rnw: '6495ed', crns: '8dc', crms: 'dc143c', cn: '-ffff', Db: '--8b', Dcn: '-8b8b', Dgnr: 'b8860b', Dgr: 'a9a9a9', Dgrn: '-64-', Dkhk: 'bdb76b', Dmgn: '8b-8b', Dvgr: '556b2f', Drng: '8c-', Drch: '9932cc', Dr: '8b--', Dsmn: 'e9967a', Dsgr: '8fbc8f', DsTb: '483d8b', DsTg: '2f4f4f', Dtrq: '-ced1', Dvt: '94-d3', ppnk: '1493', pskb: '-bfff', mgr: '696969', grb: '1e90ff', rbrc: 'b22222', rwht: 'af0', stg: '228b22', chs: '-ff', gnsb: 'dcdcdc', st: '8f8ff', g: 'd7-', gnr: 'daa520', gr: '808080', grn: '-8-0', grnw: 'adff2f', hnw: '0fff0', htpn: '69b4', nnr: 'cd5c5c', ng: '4b-82', vr: '0', khk: '0e68c', vnr: 'e6e6fa', nrb: '0f5', wngr: '7cfc-', mnch: 'acd', Lb: 'add8e6', Lcr: '08080', Lcn: 'e0ffff', Lgnr: 'afad2', Lgr: 'd3d3d3', Lgrn: '90ee90', Lpnk: 'b6c1', Lsmn: 'a07a', Lsgr: '20b2aa', Lskb: '87cefa', LsTg: '778899', Lstb: 'b0c4de', Lw: 'e0', m: '-ff-', mgrn: '32cd32', nn: 'af0e6', mgnt: '-ff', mrn: '8--0', mqm: '66cdaa', mmb: '--cd', mmrc: 'ba55d3', mmpr: '9370db', msg: '3cb371', mmsT: '7b68ee', '': '-fa9a', mtr: '48d1cc', mmvt: 'c71585', mnLb: '191970', ntc: '5fffa', mstr: 'e4e1', mccs: 'e4b5', vjw: 'dead', nv: '--80', c: 'df5e6', v: '808-0', vrb: '6b8e23', rng: 'a5-', rngr: '45-', rch: 'da70d6', pgnr: 'eee8aa', pgrn: '98fb98', ptrq: 'afeeee', pvtr: 'db7093', ppwh: 'efd5', pchp: 'dab9', pr: 'cd853f', pnk: 'c0cb', pm: 'dda0dd', pwrb: 'b0e0e6', prp: '8-080', cc: '663399', r: '--', sbr: 'bc8f8f', rb: '4169e1', sbrw: '8b4513', smn: 'a8072', nbr: '4a460', sgrn: '2e8b57', ssh: '5ee', snn: 'a0522d', svr: 'c0c0c0', skb: '87ceeb', sTb: '6a5acd', sTgr: '708090', snw: 'afa', n: '-ff7f', stb: '4682b4', tn: 'd2b48c', t: '-8080', thst: 'd8bfd8', tmT: '6347', trqs: '40e0d0', vt: 'ee82ee', whT: '5deb3', wht: '', hts: '5f5f5', w: '-', wgrn: '9acd32' };

    function printNum(num) {
        var decs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

        var str = decs > 0 ? num.toFixed(decs).replace(/0+$/, '').replace(/\.$/, '') : num.toString();
        return str || '0';
    }

    var Color = function () {
        function Color(r, g, b, a) {
            classCallCheck(this, Color);


            var that = this;
            function parseString(input) {

                if (input.startsWith('hsl')) {
                    var _input$match$map = input.match(/([\-\d\.e]+)/g).map(Number),
                        _input$match$map2 = slicedToArray(_input$match$map, 4),
                        h = _input$match$map2[0],
                        s = _input$match$map2[1],
                        l = _input$match$map2[2],
                        _a = _input$match$map2[3];

                    if (_a === undefined) {
                        _a = 1;
                    }

                    h /= 360;
                    s /= 100;
                    l /= 100;
                    that.hsla = [h, s, l, _a];
                } else if (input.startsWith('rgb')) {
                    var _input$match$map3 = input.match(/([\-\d\.e]+)/g).map(Number),
                        _input$match$map4 = slicedToArray(_input$match$map3, 4),
                        _r = _input$match$map4[0],
                        _g = _input$match$map4[1],
                        _b = _input$match$map4[2],
                        _a2 = _input$match$map4[3];

                    if (_a2 === undefined) {
                        _a2 = 1;
                    }

                    that.rgba = [_r, _g, _b, _a2];
                } else {
                    if (input.startsWith('#')) {
                        that.rgba = Color.hexToRgb(input);
                    } else {
                        that.rgba = Color.nameToRgb(input) || Color.hexToRgb(input);
                    }
                }
            }

            if (r === undefined) ; else if (Array.isArray(r)) {
                this.rgba = r;
            } else if (b === undefined) {
                var color = r && '' + r;
                if (color) {
                    parseString(color.toLowerCase());
                }
            } else {
                this.rgba = [r, g, b, a === undefined ? 1 : a];
            }
        }

        createClass(Color, [{
            key: 'printRGB',
            value: function printRGB(alpha) {
                var rgb = alpha ? this.rgba : this.rgba.slice(0, 3),
                    vals = rgb.map(function (x, i) {
                    return printNum(x, i === 3 ? 3 : 0);
                });

                return alpha ? 'rgba(' + vals + ')' : 'rgb(' + vals + ')';
            }
        }, {
            key: 'printHSL',
            value: function printHSL(alpha) {
                var mults = [360, 100, 100, 1],
                    suff = ['', '%', '%', ''];

                var hsl = alpha ? this.hsla : this.hsla.slice(0, 3),
                    vals = hsl.map(function (x, i) {
                    return printNum(x * mults[i], i === 3 ? 3 : 1) + suff[i];
                });

                return alpha ? 'hsla(' + vals + ')' : 'hsl(' + vals + ')';
            }
        }, {
            key: 'printHex',
            value: function printHex(alpha) {
                var hex = this.hex;
                return alpha ? hex : hex.substring(0, 7);
            }
        }, {
            key: 'rgba',
            get: function get() {
                if (this._rgba) {
                    return this._rgba;
                }
                if (!this._hsla) {
                    throw new Error('No color is set');
                }

                return this._rgba = Color.hslToRgb(this._hsla);
            },
            set: function set(rgb) {
                if (rgb.length === 3) {
                    rgb[3] = 1;
                }

                this._rgba = rgb;
                this._hsla = null;
            }
        }, {
            key: 'rgbString',
            get: function get() {
                return this.printRGB();
            }
        }, {
            key: 'rgbaString',
            get: function get() {
                return this.printRGB(true);
            }
        }, {
            key: 'hsla',
            get: function get() {
                if (this._hsla) {
                    return this._hsla;
                }
                if (!this._rgba) {
                    throw new Error('No color is set');
                }

                return this._hsla = Color.rgbToHsl(this._rgba);
            },
            set: function set(hsl) {
                if (hsl.length === 3) {
                    hsl[3] = 1;
                }

                this._hsla = hsl;
                this._rgba = null;
            }
        }, {
            key: 'hslString',
            get: function get() {
                return this.printHSL();
            }
        }, {
            key: 'hslaString',
            get: function get() {
                return this.printHSL(true);
            }
        }, {
            key: 'hex',
            get: function get() {
                var rgb = this.rgba,
                    hex = rgb.map(function (x, i) {
                    return i < 3 ? x.toString(16) : Math.round(x * 255).toString(16);
                });

                return '#' + hex.map(function (x) {
                    return x.padStart(2, '0');
                }).join('');
            },
            set: function set(hex) {
                this.rgba = Color.hexToRgb(hex);
            }
        }], [{
            key: 'hexToRgb',
            value: function hexToRgb(input) {

                var hex = (input.startsWith('#') ? input.slice(1) : input).replace(/^(\w{3})$/, '$1F').replace(/^(\w)(\w)(\w)(\w)$/, '$1$1$2$2$3$3$4$4').replace(/^(\w{6})$/, '$1FF');

                if (!hex.match(/^([0-9a-fA-F]{8})$/)) {
                    throw new Error('Unknown hex color; ' + input);
                }

                var rgba = hex.match(/^(\w\w)(\w\w)(\w\w)(\w\w)$/).slice(1).map(function (x) {
                    return parseInt(x, 16);
                });

                rgba[3] = rgba[3] / 255;
                return rgba;
            }
        }, {
            key: 'nameToRgb',
            value: function nameToRgb(input) {

                var hash = input.toLowerCase().replace('at', 'T').replace(/[aeiouyldf]/g, '').replace('ght', 'L').replace('rk', 'D').slice(-5, 4),
                    hex = colorNames[hash];
                return hex === undefined ? hex : Color.hexToRgb(hex.replace(/\-/g, '00').padStart(6, 'f'));
            }
        }, {
            key: 'rgbToHsl',
            value: function rgbToHsl(_ref) {
                var _ref2 = slicedToArray(_ref, 4),
                    r = _ref2[0],
                    g = _ref2[1],
                    b = _ref2[2],
                    a = _ref2[3];

                r /= 255;
                g /= 255;
                b /= 255;

                var max = Math.max(r, g, b),
                    min = Math.min(r, g, b);
                var h = void 0,
                    s = void 0,
                    l = (max + min) / 2;

                if (max === min) {
                    h = s = 0;
                } else {
                    var d = max - min;
                    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                    switch (max) {
                        case r:
                            h = (g - b) / d + (g < b ? 6 : 0);break;
                        case g:
                            h = (b - r) / d + 2;break;
                        case b:
                            h = (r - g) / d + 4;break;
                    }

                    h /= 6;
                }

                return [h, s, l, a];
            }
        }, {
            key: 'hslToRgb',
            value: function hslToRgb(_ref3) {
                var _ref4 = slicedToArray(_ref3, 4),
                    h = _ref4[0],
                    s = _ref4[1],
                    l = _ref4[2],
                    a = _ref4[3];

                var r = void 0,
                    g = void 0,
                    b = void 0;

                if (s === 0) {
                    r = g = b = l;
                } else {
                    var hue2rgb = function hue2rgb(p, q, t) {
                        if (t < 0) t += 1;
                        if (t > 1) t -= 1;
                        if (t < 1 / 6) return p + (q - p) * 6 * t;
                        if (t < 1 / 2) return q;
                        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
                        return p;
                    };

                    var q = l < 0.5 ? l * (1 + s) : l + s - l * s,
                        p = 2 * l - q;

                    r = hue2rgb(p, q, h + 1 / 3);
                    g = hue2rgb(p, q, h);
                    b = hue2rgb(p, q, h - 1 / 3);
                }

                var rgba = [r * 255, g * 255, b * 255].map(Math.round);
                rgba[3] = a;

                return rgba;
            }
        }]);
        return Color;
    }();

    var EventBucket = function () {
        function EventBucket() {
            classCallCheck(this, EventBucket);

            this._events = [];
        }

        createClass(EventBucket, [{
            key: 'add',
            value: function add(target, type, handler) {
                target.addEventListener(type, handler, false);
                this._events.push({
                    target: target,
                    type: type,
                    handler: handler
                });
            }
        }, {
            key: 'remove',
            value: function remove(target, type, handler) {
                this._events = this._events.filter(function (e) {
                    var isMatch = true;
                    if (target && target !== e.target) {
                        isMatch = false;
                    }
                    if (type && type !== e.type) {
                        isMatch = false;
                    }
                    if (handler && handler !== e.handler) {
                        isMatch = false;
                    }

                    if (isMatch) {
                        EventBucket._doRemove(e.target, e.type, e.handler);
                    }
                    return !isMatch;
                });
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this._events.forEach(function (e) {
                    return EventBucket._doRemove(e.target, e.type, e.handler);
                });
                this._events = [];
            }
        }], [{
            key: '_doRemove',
            value: function _doRemove(target, type, handler) {
                target.removeEventListener(type, handler, false);
            }
        }]);
        return EventBucket;
    }();

    function parseHTML(htmlString) {

        var div = document.createElement('div');
        div.innerHTML = htmlString;
        return div.firstElementChild;
    }

    function dragTrack(eventBucket, area, callback) {
        var dragging = false;

        function clamp(val, min, max) {
            return Math.max(min, Math.min(val, max));
        }

        function onMove(e, info, starting) {
            if (starting) {
                dragging = true;
            }
            if (!dragging) {
                return;
            }

            e.preventDefault();

            var bounds = area.getBoundingClientRect(),
                w = bounds.width,
                h = bounds.height,
                x = info.clientX,
                y = info.clientY;

            var relX = clamp(x - bounds.left, 0, w),
                relY = clamp(y - bounds.top, 0, h);

            callback(relX / w, relY / h);
        }

        function onMouse(e, starting) {
            var button = e.buttons === undefined ? e.which : e.buttons;
            if (button === 1) {
                onMove(e, e, starting);
            } else {
                dragging = false;
            }
        }

        function onTouch(e, starting) {
            if (e.touches.length === 1) {
                onMove(e, e.touches[0], starting);
            } else {
                dragging = false;
            }
        }

        eventBucket.add(area, 'mousedown', function (e) {
            onMouse(e, true);
        });
        eventBucket.add(area, 'touchstart', function (e) {
            onTouch(e, true);
        });
        eventBucket.add(window, 'mousemove', onMouse);
        eventBucket.add(area, 'touchmove', onTouch);
        eventBucket.add(window, 'mouseup', function (e) {
            dragging = false;
        });
        eventBucket.add(area, 'touchend', function (e) {
            dragging = false;
        });
        eventBucket.add(area, 'touchcancel', function (e) {
            dragging = false;
        });
    }

    var BG_TRANSP = 'linear-gradient(45deg, lightgrey 25%, transparent 25%, transparent 75%, lightgrey 75%) 0 0 / 2em 2em,\n                   linear-gradient(45deg, lightgrey 25%,       white 25%,       white 75%, lightgrey 75%) 1em 1em / 2em 2em';
    var HUES = 360;

    var EVENT_KEY = 'keydown',
        EVENT_CLICK_OUTSIDE = 'mousedown',
        EVENT_TAB_MOVE = 'focusin';

    function $(selector, context) {
        return (context || document).querySelector(selector);
    }

    function stopEvent(e) {

        e.preventDefault();
        e.stopPropagation();
    }
    function onKey(bucket, target, keys, handler, stop) {
        bucket.add(target, EVENT_KEY, function (e) {
            if (keys.indexOf(e.key) >= 0) {
                if (stop) {
                    stopEvent(e);
                }
                handler(e);
            }
        });
    }

    var Picker = function () {
        function Picker(options) {
            classCallCheck(this, Picker);


            this.settings = {

                popup: 'right',
                layout: 'default',
                alpha: true,
                editor: true,
                editorFormat: 'hex',
                cancelButton: false,
                defaultColor: '#0cf'
            };

            this._events = new EventBucket();

            this.onChange = null;

            this.onDone = null;

            this.onOpen = null;

            this.onClose = null;

            this.setOptions(options);
        }

        createClass(Picker, [{
            key: 'setOptions',
            value: function setOptions(options) {
                var _this = this;

                if (!options) {
                    return;
                }
                var settings = this.settings;

                function transfer(source, target, skipKeys) {
                    for (var key in source) {
                        if (skipKeys && skipKeys.indexOf(key) >= 0) {
                            continue;
                        }

                        target[key] = source[key];
                    }
                }

                if (options instanceof HTMLElement) {
                    settings.parent = options;
                } else {

                    if (settings.parent && options.parent && settings.parent !== options.parent) {
                        this._events.remove(settings.parent);
                        this._popupInited = false;
                    }

                    transfer(options, settings);

                    if (options.onChange) {
                        this.onChange = options.onChange;
                    }
                    if (options.onDone) {
                        this.onDone = options.onDone;
                    }
                    if (options.onOpen) {
                        this.onOpen = options.onOpen;
                    }
                    if (options.onClose) {
                        this.onClose = options.onClose;
                    }

                    var col = options.color || options.colour;
                    if (col) {
                        this._setColor(col);
                    }
                }

                var parent = settings.parent;
                if (parent && settings.popup && !this._popupInited) {

                    var openProxy = function openProxy(e) {
                        return _this.openHandler(e);
                    };

                    this._events.add(parent, 'click', openProxy);

                    onKey(this._events, parent, [' ', 'Spacebar', 'Enter'], openProxy);

                    this._popupInited = true;
                } else if (options.parent && !settings.popup) {
                    this.show();
                }
            }
        }, {
            key: 'openHandler',
            value: function openHandler(e) {
                if (this.show()) {

                    e && e.preventDefault();

                    this.settings.parent.style.pointerEvents = 'none';

                    var toFocus = e && e.type === EVENT_KEY ? this._domEdit : this.domElement;
                    setTimeout(function () {
                        return toFocus.focus();
                    }, 100);

                    if (this.onOpen) {
                        this.onOpen(this.colour);
                    }
                }
            }
        }, {
            key: 'closeHandler',
            value: function closeHandler(e) {
                var event = e && e.type;
                var doHide = false;

                if (!e) {
                    doHide = true;
                } else if (event === EVENT_CLICK_OUTSIDE || event === EVENT_TAB_MOVE) {

                    var knownTime = (this.__containedEvent || 0) + 100;
                    if (e.timeStamp > knownTime) {
                        doHide = true;
                    }
                } else {

                    stopEvent(e);

                    doHide = true;
                }

                if (doHide && this.hide()) {
                    this.settings.parent.style.pointerEvents = '';

                    if (event !== EVENT_CLICK_OUTSIDE) {
                        this.settings.parent.focus();
                    }

                    if (this.onClose) {
                        this.onClose(this.colour);
                    }
                }
            }
        }, {
            key: 'movePopup',
            value: function movePopup(options, open) {

                this.closeHandler();

                this.setOptions(options);
                if (open) {
                    this.openHandler();
                }
            }
        }, {
            key: 'setColor',
            value: function setColor(color, silent) {
                this._setColor(color, { silent: silent });
            }
        }, {
            key: '_setColor',
            value: function _setColor(color, flags) {
                if (typeof color === 'string') {
                    color = color.trim();
                }
                if (!color) {
                    return;
                }

                flags = flags || {};
                var c = void 0;
                try {

                    c = new Color(color);
                } catch (ex) {
                    if (flags.failSilently) {
                        return;
                    }
                    throw ex;
                }

                if (!this.settings.alpha) {
                    var hsla = c.hsla;
                    hsla[3] = 1;
                    c.hsla = hsla;
                }
                this.colour = this.color = c;
                this._setHSLA(null, null, null, null, flags);
            }
        }, {
            key: 'setColour',
            value: function setColour(colour, silent) {
                this.setColor(colour, silent);
            }
        }, {
            key: 'show',
            value: function show() {
                var parent = this.settings.parent;
                if (!parent) {
                    return false;
                }

                if (this.domElement) {
                    var toggled = this._toggleDOM(true);

                    this._setPosition();

                    return toggled;
                }

                var html = this.settings.template || '<div class="picker_wrapper" tabindex="-1"><div class="picker_arrow"></div><div class="picker_hue picker_slider"><div class="picker_selector"></div></div><div class="picker_sl"><div class="picker_selector"></div></div><div class="picker_alpha picker_slider"><div class="picker_selector"></div></div><div class="picker_editor"><input aria-label="Type a color name or hex value"/></div><div class="picker_sample"></div><div class="picker_done"><button>Ok</button></div><div class="picker_cancel"><button>Cancel</button></div></div>';
                var wrapper = parseHTML(html);

                this.domElement = wrapper;
                this._domH = $('.picker_hue', wrapper);
                this._domSL = $('.picker_sl', wrapper);
                this._domA = $('.picker_alpha', wrapper);
                this._domEdit = $('.picker_editor input', wrapper);
                this._domSample = $('.picker_sample', wrapper);
                this._domOkay = $('.picker_done button', wrapper);
                this._domCancel = $('.picker_cancel button', wrapper);

                wrapper.classList.add('layout_' + this.settings.layout);
                if (!this.settings.alpha) {
                    wrapper.classList.add('no_alpha');
                }
                if (!this.settings.editor) {
                    wrapper.classList.add('no_editor');
                }
                if (!this.settings.cancelButton) {
                    wrapper.classList.add('no_cancel');
                }
                this._ifPopup(function () {
                    return wrapper.classList.add('popup');
                });

                this._setPosition();

                if (this.colour) {
                    this._updateUI();
                } else {
                    this._setColor(this.settings.defaultColor);
                }
                this._bindEvents();

                return true;
            }
        }, {
            key: 'hide',
            value: function hide() {
                return this._toggleDOM(false);
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this._events.destroy();
                if (this.domElement) {
                    this.settings.parent.removeChild(this.domElement);
                }
            }
        }, {
            key: '_bindEvents',
            value: function _bindEvents() {
                var _this2 = this;

                var that = this,
                    dom = this.domElement,
                    events = this._events;

                function addEvent(target, type, handler) {
                    events.add(target, type, handler);
                }

                addEvent(dom, 'click', function (e) {
                    return e.preventDefault();
                });

                dragTrack(events, this._domH, function (x, y) {
                    return that._setHSLA(x);
                });

                dragTrack(events, this._domSL, function (x, y) {
                    return that._setHSLA(null, x, 1 - y);
                });

                if (this.settings.alpha) {
                    dragTrack(events, this._domA, function (x, y) {
                        return that._setHSLA(null, null, null, 1 - y);
                    });
                }

                var editInput = this._domEdit;
                {
                    addEvent(editInput, 'input', function (e) {
                        that._setColor(this.value, { fromEditor: true, failSilently: true });
                    });

                    addEvent(editInput, 'focus', function (e) {
                        var input = this;

                        if (input.selectionStart === input.selectionEnd) {
                            input.select();
                        }
                    });
                }

                this._ifPopup(function () {

                    var popupCloseProxy = function popupCloseProxy(e) {
                        return _this2.closeHandler(e);
                    };

                    addEvent(window, EVENT_CLICK_OUTSIDE, popupCloseProxy);
                    addEvent(window, EVENT_TAB_MOVE, popupCloseProxy);
                    onKey(events, dom, ['Esc', 'Escape'], popupCloseProxy);

                    var timeKeeper = function timeKeeper(e) {
                        _this2.__containedEvent = e.timeStamp;
                    };
                    addEvent(dom, EVENT_CLICK_OUTSIDE, timeKeeper);

                    addEvent(dom, EVENT_TAB_MOVE, timeKeeper);

                    addEvent(_this2._domCancel, 'click', popupCloseProxy);
                });

                var onDoneProxy = function onDoneProxy(e) {
                    _this2._ifPopup(function () {
                        return _this2.closeHandler(e);
                    });
                    if (_this2.onDone) {
                        _this2.onDone(_this2.colour);
                    }
                };
                addEvent(this._domOkay, 'click', onDoneProxy);
                onKey(events, dom, ['Enter'], onDoneProxy);
            }
        }, {
            key: '_setPosition',
            value: function _setPosition() {
                var parent = this.settings.parent,
                    elm = this.domElement;

                if (parent !== elm.parentNode) {
                    parent.appendChild(elm);
                }

                this._ifPopup(function (popup) {

                    if (getComputedStyle(parent).position === 'static') {
                        parent.style.position = 'relative';
                    }

                    var cssClass = popup === true ? 'popup_right' : 'popup_' + popup;

                    ['popup_top', 'popup_bottom', 'popup_left', 'popup_right'].forEach(function (c) {

                        if (c === cssClass) {
                            elm.classList.add(c);
                        } else {
                            elm.classList.remove(c);
                        }
                    });

                    elm.classList.add(cssClass);
                });
            }
        }, {
            key: '_setHSLA',
            value: function _setHSLA(h, s, l, a, flags) {
                flags = flags || {};

                var col = this.colour,
                    hsla = col.hsla;

                [h, s, l, a].forEach(function (x, i) {
                    if (x || x === 0) {
                        hsla[i] = x;
                    }
                });
                col.hsla = hsla;

                this._updateUI(flags);

                if (this.onChange && !flags.silent) {
                    this.onChange(col);
                }
            }
        }, {
            key: '_updateUI',
            value: function _updateUI(flags) {
                if (!this.domElement) {
                    return;
                }
                flags = flags || {};

                var col = this.colour,
                    hsl = col.hsla,
                    cssHue = 'hsl(' + hsl[0] * HUES + ', 100%, 50%)',
                    cssHSL = col.hslString,
                    cssHSLA = col.hslaString;

                var uiH = this._domH,
                    uiSL = this._domSL,
                    uiA = this._domA,
                    thumbH = $('.picker_selector', uiH),
                    thumbSL = $('.picker_selector', uiSL),
                    thumbA = $('.picker_selector', uiA);

                function posX(parent, child, relX) {
                    child.style.left = relX * 100 + '%';
                }
                function posY(parent, child, relY) {
                    child.style.top = relY * 100 + '%';
                }

                posX(uiH, thumbH, hsl[0]);

                this._domSL.style.backgroundColor = this._domH.style.color = cssHue;

                posX(uiSL, thumbSL, hsl[1]);
                posY(uiSL, thumbSL, 1 - hsl[2]);

                uiSL.style.color = cssHSL;

                posY(uiA, thumbA, 1 - hsl[3]);

                var opaque = cssHSL,
                    transp = opaque.replace('hsl', 'hsla').replace(')', ', 0)'),
                    bg = 'linear-gradient(' + [opaque, transp] + ')';

                this._domA.style.background = bg + ', ' + BG_TRANSP;

                if (!flags.fromEditor) {
                    var format = this.settings.editorFormat,
                        alpha = this.settings.alpha;

                    var value = void 0;
                    switch (format) {
                        case 'rgb':
                            value = col.printRGB(alpha);break;
                        case 'hsl':
                            value = col.printHSL(alpha);break;
                        default:
                            value = col.printHex(alpha);
                    }
                    this._domEdit.value = value;
                }

                this._domSample.style.color = cssHSLA;
            }
        }, {
            key: '_ifPopup',
            value: function _ifPopup(actionIf, actionElse) {
                if (this.settings.parent && this.settings.popup) {
                    actionIf && actionIf(this.settings.popup);
                } else {
                    actionElse && actionElse();
                }
            }
        }, {
            key: '_toggleDOM',
            value: function _toggleDOM(toVisible) {
                var dom = this.domElement;
                if (!dom) {
                    return false;
                }

                var displayStyle = toVisible ? '' : 'none',
                    toggle = dom.style.display !== displayStyle;

                if (toggle) {
                    dom.style.display = displayStyle;
                }
                return toggle;
            }
        }]);
        return Picker;
    }();

    {
        var style = document.createElement('style');
        style.textContent = '.picker_wrapper.no_alpha .picker_alpha{display:none}.picker_wrapper.no_editor .picker_editor{position:absolute;z-index:-1;opacity:0}.picker_wrapper.no_cancel .picker_cancel{display:none}.layout_default.picker_wrapper{display:flex;flex-flow:row wrap;justify-content:space-between;align-items:stretch;font-size:10px;width:25em;padding:.5em}.layout_default.picker_wrapper input,.layout_default.picker_wrapper button{font-size:1rem}.layout_default.picker_wrapper>*{margin:.5em}.layout_default.picker_wrapper::before{content:"";display:block;width:100%;height:0;order:1}.layout_default .picker_slider,.layout_default .picker_selector{padding:1em}.layout_default .picker_hue{width:100%}.layout_default .picker_sl{flex:1 1 auto}.layout_default .picker_sl::before{content:"";display:block;padding-bottom:100%}.layout_default .picker_editor{order:1;width:6.5rem}.layout_default .picker_editor input{width:100%;height:100%}.layout_default .picker_sample{order:1;flex:1 1 auto}.layout_default .picker_done,.layout_default .picker_cancel{order:1}.picker_wrapper{box-sizing:border-box;background:#f2f2f2;box-shadow:0 0 0 1px silver;cursor:default;font-family:sans-serif;color:#444;pointer-events:auto}.picker_wrapper:focus{outline:none}.picker_wrapper button,.picker_wrapper input{box-sizing:border-box;border:none;box-shadow:0 0 0 1px silver;outline:none}.picker_wrapper button:focus,.picker_wrapper button:active,.picker_wrapper input:focus,.picker_wrapper input:active{box-shadow:0 0 2px 1px #1e90ff}.picker_wrapper button{padding:.4em .6em;cursor:pointer;background-color:#f5f5f5;background-image:linear-gradient(0deg, gainsboro, transparent)}.picker_wrapper button:active{background-image:linear-gradient(0deg, transparent, gainsboro)}.picker_wrapper button:hover{background-color:#fff}.picker_selector{position:absolute;z-index:1;display:block;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);border:2px solid #fff;border-radius:100%;box-shadow:0 0 3px 1px #67b9ff;background:currentColor;cursor:pointer}.picker_slider .picker_selector{border-radius:2px}.picker_hue{position:relative;background-image:linear-gradient(90deg, red, yellow, lime, cyan, blue, magenta, red);box-shadow:0 0 0 1px silver}.picker_sl{position:relative;box-shadow:0 0 0 1px silver;background-image:linear-gradient(180deg, white, rgba(255, 255, 255, 0) 50%),linear-gradient(0deg, black, rgba(0, 0, 0, 0) 50%),linear-gradient(90deg, #808080, rgba(128, 128, 128, 0))}.picker_alpha,.picker_sample{position:relative;background:linear-gradient(45deg, lightgrey 25%, transparent 25%, transparent 75%, lightgrey 75%) 0 0/2em 2em,linear-gradient(45deg, lightgrey 25%, white 25%, white 75%, lightgrey 75%) 1em 1em/2em 2em;box-shadow:0 0 0 1px silver}.picker_alpha .picker_selector,.picker_sample .picker_selector{background:none}.picker_editor input{font-family:monospace;padding:.2em .4em}.picker_sample::before{content:"";position:absolute;display:block;width:100%;height:100%;background:currentColor}.picker_arrow{position:absolute;z-index:-1}.picker_wrapper.popup{position:absolute;z-index:2;margin:1.5em}.picker_wrapper.popup,.picker_wrapper.popup .picker_arrow::before,.picker_wrapper.popup .picker_arrow::after{background:#f2f2f2;box-shadow:0 0 10px 1px rgba(0,0,0,.4)}.picker_wrapper.popup .picker_arrow{width:3em;height:3em;margin:0}.picker_wrapper.popup .picker_arrow::before,.picker_wrapper.popup .picker_arrow::after{content:"";display:block;position:absolute;top:0;left:0;z-index:-99}.picker_wrapper.popup .picker_arrow::before{width:100%;height:100%;-webkit-transform:skew(45deg);transform:skew(45deg);-webkit-transform-origin:0 100%;transform-origin:0 100%}.picker_wrapper.popup .picker_arrow::after{width:150%;height:150%;box-shadow:none}.popup.popup_top{bottom:100%;left:0}.popup.popup_top .picker_arrow{bottom:0;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.popup.popup_bottom{top:100%;left:0}.popup.popup_bottom .picker_arrow{top:0;left:0;-webkit-transform:rotate(90deg) scale(1, -1);transform:rotate(90deg) scale(1, -1)}.popup.popup_left{top:0;right:100%}.popup.popup_left .picker_arrow{top:0;right:0;-webkit-transform:scale(-1, 1);transform:scale(-1, 1)}.popup.popup_right{top:0;left:100%}.popup.popup_right .picker_arrow{top:0;left:0}';
        document.documentElement.firstElementChild.appendChild(style);

        Picker.StyleElement = style;
    }

    var vanillaPicker = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Picker
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
